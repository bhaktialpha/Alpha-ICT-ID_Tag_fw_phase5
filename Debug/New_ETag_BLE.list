
New_ETag_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004638  0800c878  0800c878  0001c878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010eb0  08010eb0  00020eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010eb8  08010eb8  00020eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010ebc  08010ebc  00020ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  08010ec0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004818  200001b8  08011078  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200049d0  08011078  000349d0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e34b  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005516  00000000  00000000  0005e52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00012515  00000000  00000000  00063a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001738  00000000  00000000  00075f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000016a8  00000000  00000000  00077690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b5ce  00000000  00000000  00078d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028fa7  00000000  00000000  00094306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00096a4f  00000000  00000000  000bd2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00153cfc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000043f8  00000000  00000000  00153d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001b8 	.word	0x200001b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c860 	.word	0x0800c860

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001bc 	.word	0x200001bc
 8000104:	0800c860 	.word	0x0800c860

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 f865 	bl	80014e8 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ffaf 	bl	800138c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f857 	bl	80014e8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f84d 	bl	80014e8 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ffd1 	bl	8001404 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ffc7 	bl	8001404 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_uldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d10f      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 800048c:	2900      	cmp	r1, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_uldivmod+0xe>
 8000490:	2800      	cmp	r0, #0
 8000492:	d002      	beq.n	800049a <__aeabi_uldivmod+0x16>
 8000494:	2100      	movs	r1, #0
 8000496:	43c9      	mvns	r1, r1
 8000498:	1c08      	adds	r0, r1, #0
 800049a:	b407      	push	{r0, r1, r2}
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <__aeabi_uldivmod+0x24>)
 800049e:	a102      	add	r1, pc, #8	; (adr r1, 80004a8 <__aeabi_uldivmod+0x24>)
 80004a0:	1840      	adds	r0, r0, r1
 80004a2:	9002      	str	r0, [sp, #8]
 80004a4:	bd03      	pop	{r0, r1, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	ffffff5d 	.word	0xffffff5d
 80004ac:	b403      	push	{r0, r1}
 80004ae:	4668      	mov	r0, sp
 80004b0:	b501      	push	{r0, lr}
 80004b2:	9802      	ldr	r0, [sp, #8]
 80004b4:	f000 f84c 	bl	8000550 <__udivmoddi4>
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	469e      	mov	lr, r3
 80004bc:	b002      	add	sp, #8
 80004be:	bc0c      	pop	{r2, r3}
 80004c0:	4770      	bx	lr
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_lmul>:
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	0415      	lsls	r5, r2, #16
 80004c8:	0c2d      	lsrs	r5, r5, #16
 80004ca:	000f      	movs	r7, r1
 80004cc:	0001      	movs	r1, r0
 80004ce:	002e      	movs	r6, r5
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4684      	mov	ip, r0
 80004d4:	0400      	lsls	r0, r0, #16
 80004d6:	0c14      	lsrs	r4, r2, #16
 80004d8:	0c00      	lsrs	r0, r0, #16
 80004da:	0c09      	lsrs	r1, r1, #16
 80004dc:	4346      	muls	r6, r0
 80004de:	434d      	muls	r5, r1
 80004e0:	4360      	muls	r0, r4
 80004e2:	4361      	muls	r1, r4
 80004e4:	1940      	adds	r0, r0, r5
 80004e6:	0c34      	lsrs	r4, r6, #16
 80004e8:	1824      	adds	r4, r4, r0
 80004ea:	b500      	push	{lr}
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	d903      	bls.n	80004f8 <__aeabi_lmul+0x34>
 80004f0:	2080      	movs	r0, #128	; 0x80
 80004f2:	0240      	lsls	r0, r0, #9
 80004f4:	4680      	mov	r8, r0
 80004f6:	4441      	add	r1, r8
 80004f8:	0c25      	lsrs	r5, r4, #16
 80004fa:	186d      	adds	r5, r5, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	4359      	muls	r1, r3
 8000500:	437a      	muls	r2, r7
 8000502:	0430      	lsls	r0, r6, #16
 8000504:	1949      	adds	r1, r1, r5
 8000506:	0424      	lsls	r4, r4, #16
 8000508:	0c00      	lsrs	r0, r0, #16
 800050a:	1820      	adds	r0, r4, r0
 800050c:	1889      	adds	r1, r1, r2
 800050e:	bc80      	pop	{r7}
 8000510:	46b8      	mov	r8, r7
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000514 <__aeabi_d2uiz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <__aeabi_d2uiz+0x38>)
 800051a:	0004      	movs	r4, r0
 800051c:	000d      	movs	r5, r1
 800051e:	f7ff ffa7 	bl	8000470 <__aeabi_dcmpge>
 8000522:	2800      	cmp	r0, #0
 8000524:	d104      	bne.n	8000530 <__aeabi_d2uiz+0x1c>
 8000526:	0020      	movs	r0, r4
 8000528:	0029      	movs	r1, r5
 800052a:	f001 fe69 	bl	8002200 <__aeabi_d2iz>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <__aeabi_d2uiz+0x38>)
 8000532:	2200      	movs	r2, #0
 8000534:	0020      	movs	r0, r4
 8000536:	0029      	movs	r1, r5
 8000538:	f001 fab2 	bl	8001aa0 <__aeabi_dsub>
 800053c:	f001 fe60 	bl	8002200 <__aeabi_d2iz>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	061b      	lsls	r3, r3, #24
 8000544:	469c      	mov	ip, r3
 8000546:	4460      	add	r0, ip
 8000548:	e7f1      	b.n	800052e <__aeabi_d2uiz+0x1a>
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	41e00000 	.word	0x41e00000

08000550 <__udivmoddi4>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	4657      	mov	r7, sl
 8000554:	464e      	mov	r6, r9
 8000556:	4645      	mov	r5, r8
 8000558:	46de      	mov	lr, fp
 800055a:	b5e0      	push	{r5, r6, r7, lr}
 800055c:	0004      	movs	r4, r0
 800055e:	000d      	movs	r5, r1
 8000560:	4692      	mov	sl, r2
 8000562:	4699      	mov	r9, r3
 8000564:	b083      	sub	sp, #12
 8000566:	428b      	cmp	r3, r1
 8000568:	d830      	bhi.n	80005cc <__udivmoddi4+0x7c>
 800056a:	d02d      	beq.n	80005c8 <__udivmoddi4+0x78>
 800056c:	4649      	mov	r1, r9
 800056e:	4650      	mov	r0, sl
 8000570:	f001 fef0 	bl	8002354 <__clzdi2>
 8000574:	0029      	movs	r1, r5
 8000576:	0006      	movs	r6, r0
 8000578:	0020      	movs	r0, r4
 800057a:	f001 feeb 	bl	8002354 <__clzdi2>
 800057e:	1a33      	subs	r3, r6, r0
 8000580:	4698      	mov	r8, r3
 8000582:	3b20      	subs	r3, #32
 8000584:	469b      	mov	fp, r3
 8000586:	d433      	bmi.n	80005f0 <__udivmoddi4+0xa0>
 8000588:	465a      	mov	r2, fp
 800058a:	4653      	mov	r3, sl
 800058c:	4093      	lsls	r3, r2
 800058e:	4642      	mov	r2, r8
 8000590:	001f      	movs	r7, r3
 8000592:	4653      	mov	r3, sl
 8000594:	4093      	lsls	r3, r2
 8000596:	001e      	movs	r6, r3
 8000598:	42af      	cmp	r7, r5
 800059a:	d83a      	bhi.n	8000612 <__udivmoddi4+0xc2>
 800059c:	42af      	cmp	r7, r5
 800059e:	d100      	bne.n	80005a2 <__udivmoddi4+0x52>
 80005a0:	e078      	b.n	8000694 <__udivmoddi4+0x144>
 80005a2:	465b      	mov	r3, fp
 80005a4:	1ba4      	subs	r4, r4, r6
 80005a6:	41bd      	sbcs	r5, r7
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	da00      	bge.n	80005ae <__udivmoddi4+0x5e>
 80005ac:	e075      	b.n	800069a <__udivmoddi4+0x14a>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	465a      	mov	r2, fp
 80005ba:	4093      	lsls	r3, r2
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	4642      	mov	r2, r8
 80005c2:	4093      	lsls	r3, r2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	e028      	b.n	800061a <__udivmoddi4+0xca>
 80005c8:	4282      	cmp	r2, r0
 80005ca:	d9cf      	bls.n	800056c <__udivmoddi4+0x1c>
 80005cc:	2200      	movs	r2, #0
 80005ce:	2300      	movs	r3, #0
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <__udivmoddi4+0x8e>
 80005da:	601c      	str	r4, [r3, #0]
 80005dc:	605d      	str	r5, [r3, #4]
 80005de:	9800      	ldr	r0, [sp, #0]
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	b003      	add	sp, #12
 80005e4:	bcf0      	pop	{r4, r5, r6, r7}
 80005e6:	46bb      	mov	fp, r7
 80005e8:	46b2      	mov	sl, r6
 80005ea:	46a9      	mov	r9, r5
 80005ec:	46a0      	mov	r8, r4
 80005ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	4652      	mov	r2, sl
 80005f8:	40da      	lsrs	r2, r3
 80005fa:	4641      	mov	r1, r8
 80005fc:	0013      	movs	r3, r2
 80005fe:	464a      	mov	r2, r9
 8000600:	408a      	lsls	r2, r1
 8000602:	0017      	movs	r7, r2
 8000604:	4642      	mov	r2, r8
 8000606:	431f      	orrs	r7, r3
 8000608:	4653      	mov	r3, sl
 800060a:	4093      	lsls	r3, r2
 800060c:	001e      	movs	r6, r3
 800060e:	42af      	cmp	r7, r5
 8000610:	d9c4      	bls.n	800059c <__udivmoddi4+0x4c>
 8000612:	2200      	movs	r2, #0
 8000614:	2300      	movs	r3, #0
 8000616:	9200      	str	r2, [sp, #0]
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	4643      	mov	r3, r8
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0d9      	beq.n	80005d4 <__udivmoddi4+0x84>
 8000620:	07fb      	lsls	r3, r7, #31
 8000622:	0872      	lsrs	r2, r6, #1
 8000624:	431a      	orrs	r2, r3
 8000626:	4646      	mov	r6, r8
 8000628:	087b      	lsrs	r3, r7, #1
 800062a:	e00e      	b.n	800064a <__udivmoddi4+0xfa>
 800062c:	42ab      	cmp	r3, r5
 800062e:	d101      	bne.n	8000634 <__udivmoddi4+0xe4>
 8000630:	42a2      	cmp	r2, r4
 8000632:	d80c      	bhi.n	800064e <__udivmoddi4+0xfe>
 8000634:	1aa4      	subs	r4, r4, r2
 8000636:	419d      	sbcs	r5, r3
 8000638:	2001      	movs	r0, #1
 800063a:	1924      	adds	r4, r4, r4
 800063c:	416d      	adcs	r5, r5
 800063e:	2100      	movs	r1, #0
 8000640:	3e01      	subs	r6, #1
 8000642:	1824      	adds	r4, r4, r0
 8000644:	414d      	adcs	r5, r1
 8000646:	2e00      	cmp	r6, #0
 8000648:	d006      	beq.n	8000658 <__udivmoddi4+0x108>
 800064a:	42ab      	cmp	r3, r5
 800064c:	d9ee      	bls.n	800062c <__udivmoddi4+0xdc>
 800064e:	3e01      	subs	r6, #1
 8000650:	1924      	adds	r4, r4, r4
 8000652:	416d      	adcs	r5, r5
 8000654:	2e00      	cmp	r6, #0
 8000656:	d1f8      	bne.n	800064a <__udivmoddi4+0xfa>
 8000658:	9800      	ldr	r0, [sp, #0]
 800065a:	9901      	ldr	r1, [sp, #4]
 800065c:	465b      	mov	r3, fp
 800065e:	1900      	adds	r0, r0, r4
 8000660:	4169      	adcs	r1, r5
 8000662:	2b00      	cmp	r3, #0
 8000664:	db24      	blt.n	80006b0 <__udivmoddi4+0x160>
 8000666:	002b      	movs	r3, r5
 8000668:	465a      	mov	r2, fp
 800066a:	4644      	mov	r4, r8
 800066c:	40d3      	lsrs	r3, r2
 800066e:	002a      	movs	r2, r5
 8000670:	40e2      	lsrs	r2, r4
 8000672:	001c      	movs	r4, r3
 8000674:	465b      	mov	r3, fp
 8000676:	0015      	movs	r5, r2
 8000678:	2b00      	cmp	r3, #0
 800067a:	db2a      	blt.n	80006d2 <__udivmoddi4+0x182>
 800067c:	0026      	movs	r6, r4
 800067e:	409e      	lsls	r6, r3
 8000680:	0033      	movs	r3, r6
 8000682:	0026      	movs	r6, r4
 8000684:	4647      	mov	r7, r8
 8000686:	40be      	lsls	r6, r7
 8000688:	0032      	movs	r2, r6
 800068a:	1a80      	subs	r0, r0, r2
 800068c:	4199      	sbcs	r1, r3
 800068e:	9000      	str	r0, [sp, #0]
 8000690:	9101      	str	r1, [sp, #4]
 8000692:	e79f      	b.n	80005d4 <__udivmoddi4+0x84>
 8000694:	42a3      	cmp	r3, r4
 8000696:	d8bc      	bhi.n	8000612 <__udivmoddi4+0xc2>
 8000698:	e783      	b.n	80005a2 <__udivmoddi4+0x52>
 800069a:	4642      	mov	r2, r8
 800069c:	2320      	movs	r3, #32
 800069e:	2100      	movs	r1, #0
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	9100      	str	r1, [sp, #0]
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	2201      	movs	r2, #1
 80006aa:	40da      	lsrs	r2, r3
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	e786      	b.n	80005be <__udivmoddi4+0x6e>
 80006b0:	4642      	mov	r2, r8
 80006b2:	2320      	movs	r3, #32
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	002a      	movs	r2, r5
 80006b8:	4646      	mov	r6, r8
 80006ba:	409a      	lsls	r2, r3
 80006bc:	0023      	movs	r3, r4
 80006be:	40f3      	lsrs	r3, r6
 80006c0:	4644      	mov	r4, r8
 80006c2:	4313      	orrs	r3, r2
 80006c4:	002a      	movs	r2, r5
 80006c6:	40e2      	lsrs	r2, r4
 80006c8:	001c      	movs	r4, r3
 80006ca:	465b      	mov	r3, fp
 80006cc:	0015      	movs	r5, r2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	dad4      	bge.n	800067c <__udivmoddi4+0x12c>
 80006d2:	4642      	mov	r2, r8
 80006d4:	002f      	movs	r7, r5
 80006d6:	2320      	movs	r3, #32
 80006d8:	0026      	movs	r6, r4
 80006da:	4097      	lsls	r7, r2
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	40de      	lsrs	r6, r3
 80006e0:	003b      	movs	r3, r7
 80006e2:	4333      	orrs	r3, r6
 80006e4:	e7cd      	b.n	8000682 <__udivmoddi4+0x132>
 80006e6:	46c0      	nop			; (mov r8, r8)

080006e8 <__aeabi_dadd>:
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	464f      	mov	r7, r9
 80006ec:	46d6      	mov	lr, sl
 80006ee:	4646      	mov	r6, r8
 80006f0:	000d      	movs	r5, r1
 80006f2:	0001      	movs	r1, r0
 80006f4:	0018      	movs	r0, r3
 80006f6:	b5c0      	push	{r6, r7, lr}
 80006f8:	0017      	movs	r7, r2
 80006fa:	032b      	lsls	r3, r5, #12
 80006fc:	0a5a      	lsrs	r2, r3, #9
 80006fe:	0f4b      	lsrs	r3, r1, #29
 8000700:	4313      	orrs	r3, r2
 8000702:	00ca      	lsls	r2, r1, #3
 8000704:	4691      	mov	r9, r2
 8000706:	0302      	lsls	r2, r0, #12
 8000708:	006e      	lsls	r6, r5, #1
 800070a:	0041      	lsls	r1, r0, #1
 800070c:	0a52      	lsrs	r2, r2, #9
 800070e:	0fec      	lsrs	r4, r5, #31
 8000710:	0f7d      	lsrs	r5, r7, #29
 8000712:	4315      	orrs	r5, r2
 8000714:	0d76      	lsrs	r6, r6, #21
 8000716:	0d49      	lsrs	r1, r1, #21
 8000718:	0fc0      	lsrs	r0, r0, #31
 800071a:	4682      	mov	sl, r0
 800071c:	46ac      	mov	ip, r5
 800071e:	00ff      	lsls	r7, r7, #3
 8000720:	1a72      	subs	r2, r6, r1
 8000722:	4284      	cmp	r4, r0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x40>
 8000726:	e098      	b.n	800085a <__aeabi_dadd+0x172>
 8000728:	2a00      	cmp	r2, #0
 800072a:	dc00      	bgt.n	800072e <__aeabi_dadd+0x46>
 800072c:	e081      	b.n	8000832 <__aeabi_dadd+0x14a>
 800072e:	2900      	cmp	r1, #0
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x4c>
 8000732:	e0b6      	b.n	80008a2 <__aeabi_dadd+0x1ba>
 8000734:	49c9      	ldr	r1, [pc, #804]	; (8000a5c <__aeabi_dadd+0x374>)
 8000736:	428e      	cmp	r6, r1
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x54>
 800073a:	e172      	b.n	8000a22 <__aeabi_dadd+0x33a>
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0028      	movs	r0, r5
 8000740:	0409      	lsls	r1, r1, #16
 8000742:	4308      	orrs	r0, r1
 8000744:	4684      	mov	ip, r0
 8000746:	2a38      	cmp	r2, #56	; 0x38
 8000748:	dd00      	ble.n	800074c <__aeabi_dadd+0x64>
 800074a:	e15e      	b.n	8000a0a <__aeabi_dadd+0x322>
 800074c:	2a1f      	cmp	r2, #31
 800074e:	dd00      	ble.n	8000752 <__aeabi_dadd+0x6a>
 8000750:	e1ee      	b.n	8000b30 <__aeabi_dadd+0x448>
 8000752:	2020      	movs	r0, #32
 8000754:	0039      	movs	r1, r7
 8000756:	4665      	mov	r5, ip
 8000758:	1a80      	subs	r0, r0, r2
 800075a:	4087      	lsls	r7, r0
 800075c:	40d1      	lsrs	r1, r2
 800075e:	4085      	lsls	r5, r0
 8000760:	430d      	orrs	r5, r1
 8000762:	0039      	movs	r1, r7
 8000764:	1e4f      	subs	r7, r1, #1
 8000766:	41b9      	sbcs	r1, r7
 8000768:	4667      	mov	r7, ip
 800076a:	40d7      	lsrs	r7, r2
 800076c:	4329      	orrs	r1, r5
 800076e:	1bdb      	subs	r3, r3, r7
 8000770:	464a      	mov	r2, r9
 8000772:	1a55      	subs	r5, r2, r1
 8000774:	45a9      	cmp	r9, r5
 8000776:	4189      	sbcs	r1, r1
 8000778:	4249      	negs	r1, r1
 800077a:	1a5b      	subs	r3, r3, r1
 800077c:	4698      	mov	r8, r3
 800077e:	4643      	mov	r3, r8
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	d400      	bmi.n	8000786 <__aeabi_dadd+0x9e>
 8000784:	e0cc      	b.n	8000920 <__aeabi_dadd+0x238>
 8000786:	4643      	mov	r3, r8
 8000788:	025b      	lsls	r3, r3, #9
 800078a:	0a5b      	lsrs	r3, r3, #9
 800078c:	4698      	mov	r8, r3
 800078e:	4643      	mov	r3, r8
 8000790:	2b00      	cmp	r3, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0xae>
 8000794:	e12c      	b.n	80009f0 <__aeabi_dadd+0x308>
 8000796:	4640      	mov	r0, r8
 8000798:	f001 fdbe 	bl	8002318 <__clzsi2>
 800079c:	0001      	movs	r1, r0
 800079e:	3908      	subs	r1, #8
 80007a0:	2220      	movs	r2, #32
 80007a2:	0028      	movs	r0, r5
 80007a4:	4643      	mov	r3, r8
 80007a6:	1a52      	subs	r2, r2, r1
 80007a8:	408b      	lsls	r3, r1
 80007aa:	40d0      	lsrs	r0, r2
 80007ac:	408d      	lsls	r5, r1
 80007ae:	4303      	orrs	r3, r0
 80007b0:	428e      	cmp	r6, r1
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xce>
 80007b4:	e117      	b.n	80009e6 <__aeabi_dadd+0x2fe>
 80007b6:	1b8e      	subs	r6, r1, r6
 80007b8:	1c72      	adds	r2, r6, #1
 80007ba:	2a1f      	cmp	r2, #31
 80007bc:	dd00      	ble.n	80007c0 <__aeabi_dadd+0xd8>
 80007be:	e1a7      	b.n	8000b10 <__aeabi_dadd+0x428>
 80007c0:	2120      	movs	r1, #32
 80007c2:	0018      	movs	r0, r3
 80007c4:	002e      	movs	r6, r5
 80007c6:	1a89      	subs	r1, r1, r2
 80007c8:	408d      	lsls	r5, r1
 80007ca:	4088      	lsls	r0, r1
 80007cc:	40d6      	lsrs	r6, r2
 80007ce:	40d3      	lsrs	r3, r2
 80007d0:	1e69      	subs	r1, r5, #1
 80007d2:	418d      	sbcs	r5, r1
 80007d4:	4330      	orrs	r0, r6
 80007d6:	4698      	mov	r8, r3
 80007d8:	2600      	movs	r6, #0
 80007da:	4305      	orrs	r5, r0
 80007dc:	076b      	lsls	r3, r5, #29
 80007de:	d009      	beq.n	80007f4 <__aeabi_dadd+0x10c>
 80007e0:	230f      	movs	r3, #15
 80007e2:	402b      	ands	r3, r5
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d005      	beq.n	80007f4 <__aeabi_dadd+0x10c>
 80007e8:	1d2b      	adds	r3, r5, #4
 80007ea:	42ab      	cmp	r3, r5
 80007ec:	41ad      	sbcs	r5, r5
 80007ee:	426d      	negs	r5, r5
 80007f0:	44a8      	add	r8, r5
 80007f2:	001d      	movs	r5, r3
 80007f4:	4643      	mov	r3, r8
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0x114>
 80007fa:	e094      	b.n	8000926 <__aeabi_dadd+0x23e>
 80007fc:	4b97      	ldr	r3, [pc, #604]	; (8000a5c <__aeabi_dadd+0x374>)
 80007fe:	1c72      	adds	r2, r6, #1
 8000800:	429a      	cmp	r2, r3
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x11e>
 8000804:	e09d      	b.n	8000942 <__aeabi_dadd+0x25a>
 8000806:	4641      	mov	r1, r8
 8000808:	4b95      	ldr	r3, [pc, #596]	; (8000a60 <__aeabi_dadd+0x378>)
 800080a:	08ed      	lsrs	r5, r5, #3
 800080c:	4019      	ands	r1, r3
 800080e:	000b      	movs	r3, r1
 8000810:	0552      	lsls	r2, r2, #21
 8000812:	0749      	lsls	r1, r1, #29
 8000814:	025b      	lsls	r3, r3, #9
 8000816:	4329      	orrs	r1, r5
 8000818:	0b1b      	lsrs	r3, r3, #12
 800081a:	0d52      	lsrs	r2, r2, #21
 800081c:	0512      	lsls	r2, r2, #20
 800081e:	4313      	orrs	r3, r2
 8000820:	07e4      	lsls	r4, r4, #31
 8000822:	4323      	orrs	r3, r4
 8000824:	0008      	movs	r0, r1
 8000826:	0019      	movs	r1, r3
 8000828:	bce0      	pop	{r5, r6, r7}
 800082a:	46ba      	mov	sl, r7
 800082c:	46b1      	mov	r9, r6
 800082e:	46a8      	mov	r8, r5
 8000830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000832:	2a00      	cmp	r2, #0
 8000834:	d043      	beq.n	80008be <__aeabi_dadd+0x1d6>
 8000836:	1b8a      	subs	r2, r1, r6
 8000838:	2e00      	cmp	r6, #0
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x156>
 800083c:	e12a      	b.n	8000a94 <__aeabi_dadd+0x3ac>
 800083e:	464c      	mov	r4, r9
 8000840:	431c      	orrs	r4, r3
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x15e>
 8000844:	e1d1      	b.n	8000bea <__aeabi_dadd+0x502>
 8000846:	1e54      	subs	r4, r2, #1
 8000848:	2a01      	cmp	r2, #1
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x166>
 800084c:	e21f      	b.n	8000c8e <__aeabi_dadd+0x5a6>
 800084e:	4d83      	ldr	r5, [pc, #524]	; (8000a5c <__aeabi_dadd+0x374>)
 8000850:	42aa      	cmp	r2, r5
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x16e>
 8000854:	e272      	b.n	8000d3c <__aeabi_dadd+0x654>
 8000856:	0022      	movs	r2, r4
 8000858:	e123      	b.n	8000aa2 <__aeabi_dadd+0x3ba>
 800085a:	2a00      	cmp	r2, #0
 800085c:	dc00      	bgt.n	8000860 <__aeabi_dadd+0x178>
 800085e:	e098      	b.n	8000992 <__aeabi_dadd+0x2aa>
 8000860:	2900      	cmp	r1, #0
 8000862:	d042      	beq.n	80008ea <__aeabi_dadd+0x202>
 8000864:	497d      	ldr	r1, [pc, #500]	; (8000a5c <__aeabi_dadd+0x374>)
 8000866:	428e      	cmp	r6, r1
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x184>
 800086a:	e0da      	b.n	8000a22 <__aeabi_dadd+0x33a>
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0028      	movs	r0, r5
 8000870:	0409      	lsls	r1, r1, #16
 8000872:	4308      	orrs	r0, r1
 8000874:	4684      	mov	ip, r0
 8000876:	2a38      	cmp	r2, #56	; 0x38
 8000878:	dd00      	ble.n	800087c <__aeabi_dadd+0x194>
 800087a:	e129      	b.n	8000ad0 <__aeabi_dadd+0x3e8>
 800087c:	2a1f      	cmp	r2, #31
 800087e:	dc00      	bgt.n	8000882 <__aeabi_dadd+0x19a>
 8000880:	e187      	b.n	8000b92 <__aeabi_dadd+0x4aa>
 8000882:	0011      	movs	r1, r2
 8000884:	4665      	mov	r5, ip
 8000886:	3920      	subs	r1, #32
 8000888:	40cd      	lsrs	r5, r1
 800088a:	2a20      	cmp	r2, #32
 800088c:	d004      	beq.n	8000898 <__aeabi_dadd+0x1b0>
 800088e:	2040      	movs	r0, #64	; 0x40
 8000890:	4661      	mov	r1, ip
 8000892:	1a82      	subs	r2, r0, r2
 8000894:	4091      	lsls	r1, r2
 8000896:	430f      	orrs	r7, r1
 8000898:	0039      	movs	r1, r7
 800089a:	1e4f      	subs	r7, r1, #1
 800089c:	41b9      	sbcs	r1, r7
 800089e:	430d      	orrs	r5, r1
 80008a0:	e11b      	b.n	8000ada <__aeabi_dadd+0x3f2>
 80008a2:	0029      	movs	r1, r5
 80008a4:	4339      	orrs	r1, r7
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0x1c2>
 80008a8:	e0b5      	b.n	8000a16 <__aeabi_dadd+0x32e>
 80008aa:	1e51      	subs	r1, r2, #1
 80008ac:	2a01      	cmp	r2, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x1ca>
 80008b0:	e1ab      	b.n	8000c0a <__aeabi_dadd+0x522>
 80008b2:	486a      	ldr	r0, [pc, #424]	; (8000a5c <__aeabi_dadd+0x374>)
 80008b4:	4282      	cmp	r2, r0
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x1d2>
 80008b8:	e1b2      	b.n	8000c20 <__aeabi_dadd+0x538>
 80008ba:	000a      	movs	r2, r1
 80008bc:	e743      	b.n	8000746 <__aeabi_dadd+0x5e>
 80008be:	4969      	ldr	r1, [pc, #420]	; (8000a64 <__aeabi_dadd+0x37c>)
 80008c0:	1c75      	adds	r5, r6, #1
 80008c2:	420d      	tst	r5, r1
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dadd+0x1e0>
 80008c6:	e0cf      	b.n	8000a68 <__aeabi_dadd+0x380>
 80008c8:	2e00      	cmp	r6, #0
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x1e6>
 80008cc:	e193      	b.n	8000bf6 <__aeabi_dadd+0x50e>
 80008ce:	4649      	mov	r1, r9
 80008d0:	4319      	orrs	r1, r3
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1ee>
 80008d4:	e1d1      	b.n	8000c7a <__aeabi_dadd+0x592>
 80008d6:	4661      	mov	r1, ip
 80008d8:	4339      	orrs	r1, r7
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x1f6>
 80008dc:	e1e3      	b.n	8000ca6 <__aeabi_dadd+0x5be>
 80008de:	4649      	mov	r1, r9
 80008e0:	0758      	lsls	r0, r3, #29
 80008e2:	08c9      	lsrs	r1, r1, #3
 80008e4:	4301      	orrs	r1, r0
 80008e6:	08db      	lsrs	r3, r3, #3
 80008e8:	e026      	b.n	8000938 <__aeabi_dadd+0x250>
 80008ea:	0029      	movs	r1, r5
 80008ec:	4339      	orrs	r1, r7
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x20a>
 80008f0:	e091      	b.n	8000a16 <__aeabi_dadd+0x32e>
 80008f2:	1e51      	subs	r1, r2, #1
 80008f4:	2a01      	cmp	r2, #1
 80008f6:	d005      	beq.n	8000904 <__aeabi_dadd+0x21c>
 80008f8:	4858      	ldr	r0, [pc, #352]	; (8000a5c <__aeabi_dadd+0x374>)
 80008fa:	4282      	cmp	r2, r0
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x218>
 80008fe:	e18f      	b.n	8000c20 <__aeabi_dadd+0x538>
 8000900:	000a      	movs	r2, r1
 8000902:	e7b8      	b.n	8000876 <__aeabi_dadd+0x18e>
 8000904:	003d      	movs	r5, r7
 8000906:	444d      	add	r5, r9
 8000908:	454d      	cmp	r5, r9
 800090a:	4189      	sbcs	r1, r1
 800090c:	4463      	add	r3, ip
 800090e:	4698      	mov	r8, r3
 8000910:	4249      	negs	r1, r1
 8000912:	4488      	add	r8, r1
 8000914:	4643      	mov	r3, r8
 8000916:	2602      	movs	r6, #2
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	d500      	bpl.n	800091e <__aeabi_dadd+0x236>
 800091c:	e0eb      	b.n	8000af6 <__aeabi_dadd+0x40e>
 800091e:	3e01      	subs	r6, #1
 8000920:	076b      	lsls	r3, r5, #29
 8000922:	d000      	beq.n	8000926 <__aeabi_dadd+0x23e>
 8000924:	e75c      	b.n	80007e0 <__aeabi_dadd+0xf8>
 8000926:	4643      	mov	r3, r8
 8000928:	08e9      	lsrs	r1, r5, #3
 800092a:	075a      	lsls	r2, r3, #29
 800092c:	4311      	orrs	r1, r2
 800092e:	0032      	movs	r2, r6
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	484a      	ldr	r0, [pc, #296]	; (8000a5c <__aeabi_dadd+0x374>)
 8000934:	4282      	cmp	r2, r0
 8000936:	d021      	beq.n	800097c <__aeabi_dadd+0x294>
 8000938:	031b      	lsls	r3, r3, #12
 800093a:	0552      	lsls	r2, r2, #21
 800093c:	0b1b      	lsrs	r3, r3, #12
 800093e:	0d52      	lsrs	r2, r2, #21
 8000940:	e76c      	b.n	800081c <__aeabi_dadd+0x134>
 8000942:	2300      	movs	r3, #0
 8000944:	2100      	movs	r1, #0
 8000946:	e769      	b.n	800081c <__aeabi_dadd+0x134>
 8000948:	002a      	movs	r2, r5
 800094a:	433a      	orrs	r2, r7
 800094c:	d069      	beq.n	8000a22 <__aeabi_dadd+0x33a>
 800094e:	464a      	mov	r2, r9
 8000950:	0758      	lsls	r0, r3, #29
 8000952:	08d1      	lsrs	r1, r2, #3
 8000954:	08da      	lsrs	r2, r3, #3
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	031b      	lsls	r3, r3, #12
 800095a:	4308      	orrs	r0, r1
 800095c:	421a      	tst	r2, r3
 800095e:	d007      	beq.n	8000970 <__aeabi_dadd+0x288>
 8000960:	0029      	movs	r1, r5
 8000962:	08ed      	lsrs	r5, r5, #3
 8000964:	421d      	tst	r5, r3
 8000966:	d103      	bne.n	8000970 <__aeabi_dadd+0x288>
 8000968:	002a      	movs	r2, r5
 800096a:	08ff      	lsrs	r7, r7, #3
 800096c:	0748      	lsls	r0, r1, #29
 800096e:	4338      	orrs	r0, r7
 8000970:	0f43      	lsrs	r3, r0, #29
 8000972:	00c1      	lsls	r1, r0, #3
 8000974:	075b      	lsls	r3, r3, #29
 8000976:	08c9      	lsrs	r1, r1, #3
 8000978:	4319      	orrs	r1, r3
 800097a:	0013      	movs	r3, r2
 800097c:	000a      	movs	r2, r1
 800097e:	431a      	orrs	r2, r3
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x29c>
 8000982:	e213      	b.n	8000dac <__aeabi_dadd+0x6c4>
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0312      	lsls	r2, r2, #12
 8000988:	4313      	orrs	r3, r2
 800098a:	031b      	lsls	r3, r3, #12
 800098c:	4a33      	ldr	r2, [pc, #204]	; (8000a5c <__aeabi_dadd+0x374>)
 800098e:	0b1b      	lsrs	r3, r3, #12
 8000990:	e744      	b.n	800081c <__aeabi_dadd+0x134>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d04b      	beq.n	8000a2e <__aeabi_dadd+0x346>
 8000996:	1b8a      	subs	r2, r1, r6
 8000998:	2e00      	cmp	r6, #0
 800099a:	d100      	bne.n	800099e <__aeabi_dadd+0x2b6>
 800099c:	e0e7      	b.n	8000b6e <__aeabi_dadd+0x486>
 800099e:	482f      	ldr	r0, [pc, #188]	; (8000a5c <__aeabi_dadd+0x374>)
 80009a0:	4281      	cmp	r1, r0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0x2be>
 80009a4:	e195      	b.n	8000cd2 <__aeabi_dadd+0x5ea>
 80009a6:	2080      	movs	r0, #128	; 0x80
 80009a8:	0400      	lsls	r0, r0, #16
 80009aa:	4303      	orrs	r3, r0
 80009ac:	2a38      	cmp	r2, #56	; 0x38
 80009ae:	dd00      	ble.n	80009b2 <__aeabi_dadd+0x2ca>
 80009b0:	e143      	b.n	8000c3a <__aeabi_dadd+0x552>
 80009b2:	2a1f      	cmp	r2, #31
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_dadd+0x2d0>
 80009b6:	e1db      	b.n	8000d70 <__aeabi_dadd+0x688>
 80009b8:	2020      	movs	r0, #32
 80009ba:	001d      	movs	r5, r3
 80009bc:	464e      	mov	r6, r9
 80009be:	1a80      	subs	r0, r0, r2
 80009c0:	4085      	lsls	r5, r0
 80009c2:	40d6      	lsrs	r6, r2
 80009c4:	4335      	orrs	r5, r6
 80009c6:	464e      	mov	r6, r9
 80009c8:	4086      	lsls	r6, r0
 80009ca:	0030      	movs	r0, r6
 80009cc:	40d3      	lsrs	r3, r2
 80009ce:	1e46      	subs	r6, r0, #1
 80009d0:	41b0      	sbcs	r0, r6
 80009d2:	449c      	add	ip, r3
 80009d4:	4305      	orrs	r5, r0
 80009d6:	19ed      	adds	r5, r5, r7
 80009d8:	42bd      	cmp	r5, r7
 80009da:	419b      	sbcs	r3, r3
 80009dc:	425b      	negs	r3, r3
 80009de:	4463      	add	r3, ip
 80009e0:	4698      	mov	r8, r3
 80009e2:	000e      	movs	r6, r1
 80009e4:	e07f      	b.n	8000ae6 <__aeabi_dadd+0x3fe>
 80009e6:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <__aeabi_dadd+0x378>)
 80009e8:	1a76      	subs	r6, r6, r1
 80009ea:	4013      	ands	r3, r2
 80009ec:	4698      	mov	r8, r3
 80009ee:	e6f5      	b.n	80007dc <__aeabi_dadd+0xf4>
 80009f0:	0028      	movs	r0, r5
 80009f2:	f001 fc91 	bl	8002318 <__clzsi2>
 80009f6:	0001      	movs	r1, r0
 80009f8:	3118      	adds	r1, #24
 80009fa:	291f      	cmp	r1, #31
 80009fc:	dc00      	bgt.n	8000a00 <__aeabi_dadd+0x318>
 80009fe:	e6cf      	b.n	80007a0 <__aeabi_dadd+0xb8>
 8000a00:	002b      	movs	r3, r5
 8000a02:	3808      	subs	r0, #8
 8000a04:	4083      	lsls	r3, r0
 8000a06:	2500      	movs	r5, #0
 8000a08:	e6d2      	b.n	80007b0 <__aeabi_dadd+0xc8>
 8000a0a:	4662      	mov	r2, ip
 8000a0c:	433a      	orrs	r2, r7
 8000a0e:	0011      	movs	r1, r2
 8000a10:	1e4f      	subs	r7, r1, #1
 8000a12:	41b9      	sbcs	r1, r7
 8000a14:	e6ac      	b.n	8000770 <__aeabi_dadd+0x88>
 8000a16:	4649      	mov	r1, r9
 8000a18:	0758      	lsls	r0, r3, #29
 8000a1a:	08c9      	lsrs	r1, r1, #3
 8000a1c:	4301      	orrs	r1, r0
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	e787      	b.n	8000932 <__aeabi_dadd+0x24a>
 8000a22:	4649      	mov	r1, r9
 8000a24:	075a      	lsls	r2, r3, #29
 8000a26:	08c9      	lsrs	r1, r1, #3
 8000a28:	4311      	orrs	r1, r2
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	e7a6      	b.n	800097c <__aeabi_dadd+0x294>
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <__aeabi_dadd+0x37c>)
 8000a30:	1c70      	adds	r0, r6, #1
 8000a32:	4208      	tst	r0, r1
 8000a34:	d000      	beq.n	8000a38 <__aeabi_dadd+0x350>
 8000a36:	e0bb      	b.n	8000bb0 <__aeabi_dadd+0x4c8>
 8000a38:	2e00      	cmp	r6, #0
 8000a3a:	d000      	beq.n	8000a3e <__aeabi_dadd+0x356>
 8000a3c:	e114      	b.n	8000c68 <__aeabi_dadd+0x580>
 8000a3e:	4649      	mov	r1, r9
 8000a40:	4319      	orrs	r1, r3
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x35e>
 8000a44:	e175      	b.n	8000d32 <__aeabi_dadd+0x64a>
 8000a46:	0029      	movs	r1, r5
 8000a48:	4339      	orrs	r1, r7
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x366>
 8000a4c:	e17e      	b.n	8000d4c <__aeabi_dadd+0x664>
 8000a4e:	4649      	mov	r1, r9
 8000a50:	0758      	lsls	r0, r3, #29
 8000a52:	08c9      	lsrs	r1, r1, #3
 8000a54:	4301      	orrs	r1, r0
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	e76e      	b.n	8000938 <__aeabi_dadd+0x250>
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	000007ff 	.word	0x000007ff
 8000a60:	ff7fffff 	.word	0xff7fffff
 8000a64:	000007fe 	.word	0x000007fe
 8000a68:	4649      	mov	r1, r9
 8000a6a:	1bcd      	subs	r5, r1, r7
 8000a6c:	4661      	mov	r1, ip
 8000a6e:	1a58      	subs	r0, r3, r1
 8000a70:	45a9      	cmp	r9, r5
 8000a72:	4189      	sbcs	r1, r1
 8000a74:	4249      	negs	r1, r1
 8000a76:	4688      	mov	r8, r1
 8000a78:	0001      	movs	r1, r0
 8000a7a:	4640      	mov	r0, r8
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	0209      	lsls	r1, r1, #8
 8000a82:	d500      	bpl.n	8000a86 <__aeabi_dadd+0x39e>
 8000a84:	e0a6      	b.n	8000bd4 <__aeabi_dadd+0x4ec>
 8000a86:	4641      	mov	r1, r8
 8000a88:	4329      	orrs	r1, r5
 8000a8a:	d000      	beq.n	8000a8e <__aeabi_dadd+0x3a6>
 8000a8c:	e67f      	b.n	800078e <__aeabi_dadd+0xa6>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2400      	movs	r4, #0
 8000a92:	e751      	b.n	8000938 <__aeabi_dadd+0x250>
 8000a94:	4cc7      	ldr	r4, [pc, #796]	; (8000db4 <__aeabi_dadd+0x6cc>)
 8000a96:	42a1      	cmp	r1, r4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x3b4>
 8000a9a:	e0c7      	b.n	8000c2c <__aeabi_dadd+0x544>
 8000a9c:	2480      	movs	r4, #128	; 0x80
 8000a9e:	0424      	lsls	r4, r4, #16
 8000aa0:	4323      	orrs	r3, r4
 8000aa2:	2a38      	cmp	r2, #56	; 0x38
 8000aa4:	dc54      	bgt.n	8000b50 <__aeabi_dadd+0x468>
 8000aa6:	2a1f      	cmp	r2, #31
 8000aa8:	dd00      	ble.n	8000aac <__aeabi_dadd+0x3c4>
 8000aaa:	e0cc      	b.n	8000c46 <__aeabi_dadd+0x55e>
 8000aac:	2420      	movs	r4, #32
 8000aae:	4648      	mov	r0, r9
 8000ab0:	1aa4      	subs	r4, r4, r2
 8000ab2:	001d      	movs	r5, r3
 8000ab4:	464e      	mov	r6, r9
 8000ab6:	40a0      	lsls	r0, r4
 8000ab8:	40d6      	lsrs	r6, r2
 8000aba:	40a5      	lsls	r5, r4
 8000abc:	0004      	movs	r4, r0
 8000abe:	40d3      	lsrs	r3, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	4335      	orrs	r5, r6
 8000ac4:	1e66      	subs	r6, r4, #1
 8000ac6:	41b4      	sbcs	r4, r6
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	469c      	mov	ip, r3
 8000acc:	4325      	orrs	r5, r4
 8000ace:	e044      	b.n	8000b5a <__aeabi_dadd+0x472>
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	433a      	orrs	r2, r7
 8000ad4:	0015      	movs	r5, r2
 8000ad6:	1e6f      	subs	r7, r5, #1
 8000ad8:	41bd      	sbcs	r5, r7
 8000ada:	444d      	add	r5, r9
 8000adc:	454d      	cmp	r5, r9
 8000ade:	4189      	sbcs	r1, r1
 8000ae0:	4249      	negs	r1, r1
 8000ae2:	4688      	mov	r8, r1
 8000ae4:	4498      	add	r8, r3
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	d400      	bmi.n	8000aee <__aeabi_dadd+0x406>
 8000aec:	e718      	b.n	8000920 <__aeabi_dadd+0x238>
 8000aee:	4bb1      	ldr	r3, [pc, #708]	; (8000db4 <__aeabi_dadd+0x6cc>)
 8000af0:	3601      	adds	r6, #1
 8000af2:	429e      	cmp	r6, r3
 8000af4:	d049      	beq.n	8000b8a <__aeabi_dadd+0x4a2>
 8000af6:	4642      	mov	r2, r8
 8000af8:	4baf      	ldr	r3, [pc, #700]	; (8000db8 <__aeabi_dadd+0x6d0>)
 8000afa:	2101      	movs	r1, #1
 8000afc:	401a      	ands	r2, r3
 8000afe:	0013      	movs	r3, r2
 8000b00:	086a      	lsrs	r2, r5, #1
 8000b02:	400d      	ands	r5, r1
 8000b04:	4315      	orrs	r5, r2
 8000b06:	07d9      	lsls	r1, r3, #31
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	430d      	orrs	r5, r1
 8000b0e:	e665      	b.n	80007dc <__aeabi_dadd+0xf4>
 8000b10:	0018      	movs	r0, r3
 8000b12:	3e1f      	subs	r6, #31
 8000b14:	40f0      	lsrs	r0, r6
 8000b16:	2a20      	cmp	r2, #32
 8000b18:	d003      	beq.n	8000b22 <__aeabi_dadd+0x43a>
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	1a8a      	subs	r2, r1, r2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	431d      	orrs	r5, r3
 8000b22:	1e69      	subs	r1, r5, #1
 8000b24:	418d      	sbcs	r5, r1
 8000b26:	2300      	movs	r3, #0
 8000b28:	2600      	movs	r6, #0
 8000b2a:	4698      	mov	r8, r3
 8000b2c:	4305      	orrs	r5, r0
 8000b2e:	e6f7      	b.n	8000920 <__aeabi_dadd+0x238>
 8000b30:	0011      	movs	r1, r2
 8000b32:	4665      	mov	r5, ip
 8000b34:	3920      	subs	r1, #32
 8000b36:	40cd      	lsrs	r5, r1
 8000b38:	2a20      	cmp	r2, #32
 8000b3a:	d004      	beq.n	8000b46 <__aeabi_dadd+0x45e>
 8000b3c:	2040      	movs	r0, #64	; 0x40
 8000b3e:	4661      	mov	r1, ip
 8000b40:	1a82      	subs	r2, r0, r2
 8000b42:	4091      	lsls	r1, r2
 8000b44:	430f      	orrs	r7, r1
 8000b46:	0039      	movs	r1, r7
 8000b48:	1e4f      	subs	r7, r1, #1
 8000b4a:	41b9      	sbcs	r1, r7
 8000b4c:	4329      	orrs	r1, r5
 8000b4e:	e60f      	b.n	8000770 <__aeabi_dadd+0x88>
 8000b50:	464a      	mov	r2, r9
 8000b52:	4313      	orrs	r3, r2
 8000b54:	001d      	movs	r5, r3
 8000b56:	1e6b      	subs	r3, r5, #1
 8000b58:	419d      	sbcs	r5, r3
 8000b5a:	1b7d      	subs	r5, r7, r5
 8000b5c:	42af      	cmp	r7, r5
 8000b5e:	419b      	sbcs	r3, r3
 8000b60:	4662      	mov	r2, ip
 8000b62:	425b      	negs	r3, r3
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	4698      	mov	r8, r3
 8000b68:	4654      	mov	r4, sl
 8000b6a:	000e      	movs	r6, r1
 8000b6c:	e607      	b.n	800077e <__aeabi_dadd+0x96>
 8000b6e:	4648      	mov	r0, r9
 8000b70:	4318      	orrs	r0, r3
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x48e>
 8000b74:	e0b3      	b.n	8000cde <__aeabi_dadd+0x5f6>
 8000b76:	1e50      	subs	r0, r2, #1
 8000b78:	2a01      	cmp	r2, #1
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x496>
 8000b7c:	e10d      	b.n	8000d9a <__aeabi_dadd+0x6b2>
 8000b7e:	4d8d      	ldr	r5, [pc, #564]	; (8000db4 <__aeabi_dadd+0x6cc>)
 8000b80:	42aa      	cmp	r2, r5
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x49e>
 8000b84:	e0a5      	b.n	8000cd2 <__aeabi_dadd+0x5ea>
 8000b86:	0002      	movs	r2, r0
 8000b88:	e710      	b.n	80009ac <__aeabi_dadd+0x2c4>
 8000b8a:	0032      	movs	r2, r6
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	e644      	b.n	800081c <__aeabi_dadd+0x134>
 8000b92:	2120      	movs	r1, #32
 8000b94:	0038      	movs	r0, r7
 8000b96:	1a89      	subs	r1, r1, r2
 8000b98:	4665      	mov	r5, ip
 8000b9a:	408f      	lsls	r7, r1
 8000b9c:	408d      	lsls	r5, r1
 8000b9e:	40d0      	lsrs	r0, r2
 8000ba0:	1e79      	subs	r1, r7, #1
 8000ba2:	418f      	sbcs	r7, r1
 8000ba4:	4305      	orrs	r5, r0
 8000ba6:	433d      	orrs	r5, r7
 8000ba8:	4667      	mov	r7, ip
 8000baa:	40d7      	lsrs	r7, r2
 8000bac:	19db      	adds	r3, r3, r7
 8000bae:	e794      	b.n	8000ada <__aeabi_dadd+0x3f2>
 8000bb0:	4a80      	ldr	r2, [pc, #512]	; (8000db4 <__aeabi_dadd+0x6cc>)
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dadd+0x4d0>
 8000bb6:	e0ec      	b.n	8000d92 <__aeabi_dadd+0x6aa>
 8000bb8:	0039      	movs	r1, r7
 8000bba:	4449      	add	r1, r9
 8000bbc:	4549      	cmp	r1, r9
 8000bbe:	4192      	sbcs	r2, r2
 8000bc0:	4463      	add	r3, ip
 8000bc2:	4252      	negs	r2, r2
 8000bc4:	189b      	adds	r3, r3, r2
 8000bc6:	07dd      	lsls	r5, r3, #31
 8000bc8:	0849      	lsrs	r1, r1, #1
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	0006      	movs	r6, r0
 8000bd0:	430d      	orrs	r5, r1
 8000bd2:	e6a5      	b.n	8000920 <__aeabi_dadd+0x238>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1abd      	subs	r5, r7, r2
 8000bd8:	42af      	cmp	r7, r5
 8000bda:	4189      	sbcs	r1, r1
 8000bdc:	4662      	mov	r2, ip
 8000bde:	4249      	negs	r1, r1
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	1a5b      	subs	r3, r3, r1
 8000be4:	4698      	mov	r8, r3
 8000be6:	4654      	mov	r4, sl
 8000be8:	e5d1      	b.n	800078e <__aeabi_dadd+0xa6>
 8000bea:	076c      	lsls	r4, r5, #29
 8000bec:	08f9      	lsrs	r1, r7, #3
 8000bee:	4321      	orrs	r1, r4
 8000bf0:	08eb      	lsrs	r3, r5, #3
 8000bf2:	0004      	movs	r4, r0
 8000bf4:	e69d      	b.n	8000932 <__aeabi_dadd+0x24a>
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	d175      	bne.n	8000ce8 <__aeabi_dadd+0x600>
 8000bfc:	4661      	mov	r1, ip
 8000bfe:	4339      	orrs	r1, r7
 8000c00:	d114      	bne.n	8000c2c <__aeabi_dadd+0x544>
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	2400      	movs	r4, #0
 8000c06:	031b      	lsls	r3, r3, #12
 8000c08:	e6bc      	b.n	8000984 <__aeabi_dadd+0x29c>
 8000c0a:	464a      	mov	r2, r9
 8000c0c:	1bd5      	subs	r5, r2, r7
 8000c0e:	45a9      	cmp	r9, r5
 8000c10:	4189      	sbcs	r1, r1
 8000c12:	4662      	mov	r2, ip
 8000c14:	4249      	negs	r1, r1
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	4698      	mov	r8, r3
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	e5ae      	b.n	800077e <__aeabi_dadd+0x96>
 8000c20:	464a      	mov	r2, r9
 8000c22:	08d1      	lsrs	r1, r2, #3
 8000c24:	075a      	lsls	r2, r3, #29
 8000c26:	4311      	orrs	r1, r2
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	e6a7      	b.n	800097c <__aeabi_dadd+0x294>
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	08f9      	lsrs	r1, r7, #3
 8000c30:	075a      	lsls	r2, r3, #29
 8000c32:	4654      	mov	r4, sl
 8000c34:	4311      	orrs	r1, r2
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	e6a0      	b.n	800097c <__aeabi_dadd+0x294>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	001d      	movs	r5, r3
 8000c40:	1e6b      	subs	r3, r5, #1
 8000c42:	419d      	sbcs	r5, r3
 8000c44:	e6c7      	b.n	80009d6 <__aeabi_dadd+0x2ee>
 8000c46:	0014      	movs	r4, r2
 8000c48:	001e      	movs	r6, r3
 8000c4a:	3c20      	subs	r4, #32
 8000c4c:	40e6      	lsrs	r6, r4
 8000c4e:	2a20      	cmp	r2, #32
 8000c50:	d005      	beq.n	8000c5e <__aeabi_dadd+0x576>
 8000c52:	2440      	movs	r4, #64	; 0x40
 8000c54:	1aa2      	subs	r2, r4, r2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	464a      	mov	r2, r9
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	4691      	mov	r9, r2
 8000c5e:	464d      	mov	r5, r9
 8000c60:	1e6b      	subs	r3, r5, #1
 8000c62:	419d      	sbcs	r5, r3
 8000c64:	4335      	orrs	r5, r6
 8000c66:	e778      	b.n	8000b5a <__aeabi_dadd+0x472>
 8000c68:	464a      	mov	r2, r9
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_dadd+0x588>
 8000c6e:	e66b      	b.n	8000948 <__aeabi_dadd+0x260>
 8000c70:	076b      	lsls	r3, r5, #29
 8000c72:	08f9      	lsrs	r1, r7, #3
 8000c74:	4319      	orrs	r1, r3
 8000c76:	08eb      	lsrs	r3, r5, #3
 8000c78:	e680      	b.n	800097c <__aeabi_dadd+0x294>
 8000c7a:	4661      	mov	r1, ip
 8000c7c:	4339      	orrs	r1, r7
 8000c7e:	d054      	beq.n	8000d2a <__aeabi_dadd+0x642>
 8000c80:	4663      	mov	r3, ip
 8000c82:	08f9      	lsrs	r1, r7, #3
 8000c84:	075c      	lsls	r4, r3, #29
 8000c86:	4321      	orrs	r1, r4
 8000c88:	08db      	lsrs	r3, r3, #3
 8000c8a:	0004      	movs	r4, r0
 8000c8c:	e654      	b.n	8000938 <__aeabi_dadd+0x250>
 8000c8e:	464a      	mov	r2, r9
 8000c90:	1abd      	subs	r5, r7, r2
 8000c92:	42af      	cmp	r7, r5
 8000c94:	4189      	sbcs	r1, r1
 8000c96:	4662      	mov	r2, ip
 8000c98:	4249      	negs	r1, r1
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	4698      	mov	r8, r3
 8000ca0:	0004      	movs	r4, r0
 8000ca2:	2601      	movs	r6, #1
 8000ca4:	e56b      	b.n	800077e <__aeabi_dadd+0x96>
 8000ca6:	464a      	mov	r2, r9
 8000ca8:	1bd5      	subs	r5, r2, r7
 8000caa:	45a9      	cmp	r9, r5
 8000cac:	4189      	sbcs	r1, r1
 8000cae:	4662      	mov	r2, ip
 8000cb0:	4249      	negs	r1, r1
 8000cb2:	1a9a      	subs	r2, r3, r2
 8000cb4:	1a52      	subs	r2, r2, r1
 8000cb6:	4690      	mov	r8, r2
 8000cb8:	0212      	lsls	r2, r2, #8
 8000cba:	d532      	bpl.n	8000d22 <__aeabi_dadd+0x63a>
 8000cbc:	464a      	mov	r2, r9
 8000cbe:	1abd      	subs	r5, r7, r2
 8000cc0:	42af      	cmp	r7, r5
 8000cc2:	4189      	sbcs	r1, r1
 8000cc4:	4662      	mov	r2, ip
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	1a5b      	subs	r3, r3, r1
 8000ccc:	4698      	mov	r8, r3
 8000cce:	0004      	movs	r4, r0
 8000cd0:	e584      	b.n	80007dc <__aeabi_dadd+0xf4>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	08f9      	lsrs	r1, r7, #3
 8000cd6:	075a      	lsls	r2, r3, #29
 8000cd8:	4311      	orrs	r1, r2
 8000cda:	08db      	lsrs	r3, r3, #3
 8000cdc:	e64e      	b.n	800097c <__aeabi_dadd+0x294>
 8000cde:	08f9      	lsrs	r1, r7, #3
 8000ce0:	0768      	lsls	r0, r5, #29
 8000ce2:	4301      	orrs	r1, r0
 8000ce4:	08eb      	lsrs	r3, r5, #3
 8000ce6:	e624      	b.n	8000932 <__aeabi_dadd+0x24a>
 8000ce8:	4662      	mov	r2, ip
 8000cea:	433a      	orrs	r2, r7
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dadd+0x608>
 8000cee:	e698      	b.n	8000a22 <__aeabi_dadd+0x33a>
 8000cf0:	464a      	mov	r2, r9
 8000cf2:	08d1      	lsrs	r1, r2, #3
 8000cf4:	075a      	lsls	r2, r3, #29
 8000cf6:	4311      	orrs	r1, r2
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	031b      	lsls	r3, r3, #12
 8000cfe:	421a      	tst	r2, r3
 8000d00:	d008      	beq.n	8000d14 <__aeabi_dadd+0x62c>
 8000d02:	4660      	mov	r0, ip
 8000d04:	08c5      	lsrs	r5, r0, #3
 8000d06:	421d      	tst	r5, r3
 8000d08:	d104      	bne.n	8000d14 <__aeabi_dadd+0x62c>
 8000d0a:	4654      	mov	r4, sl
 8000d0c:	002a      	movs	r2, r5
 8000d0e:	08f9      	lsrs	r1, r7, #3
 8000d10:	0743      	lsls	r3, r0, #29
 8000d12:	4319      	orrs	r1, r3
 8000d14:	0f4b      	lsrs	r3, r1, #29
 8000d16:	00c9      	lsls	r1, r1, #3
 8000d18:	075b      	lsls	r3, r3, #29
 8000d1a:	08c9      	lsrs	r1, r1, #3
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	e62c      	b.n	800097c <__aeabi_dadd+0x294>
 8000d22:	4641      	mov	r1, r8
 8000d24:	4329      	orrs	r1, r5
 8000d26:	d000      	beq.n	8000d2a <__aeabi_dadd+0x642>
 8000d28:	e5fa      	b.n	8000920 <__aeabi_dadd+0x238>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	000a      	movs	r2, r1
 8000d2e:	2400      	movs	r4, #0
 8000d30:	e602      	b.n	8000938 <__aeabi_dadd+0x250>
 8000d32:	076b      	lsls	r3, r5, #29
 8000d34:	08f9      	lsrs	r1, r7, #3
 8000d36:	4319      	orrs	r1, r3
 8000d38:	08eb      	lsrs	r3, r5, #3
 8000d3a:	e5fd      	b.n	8000938 <__aeabi_dadd+0x250>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	08f9      	lsrs	r1, r7, #3
 8000d40:	075b      	lsls	r3, r3, #29
 8000d42:	4319      	orrs	r1, r3
 8000d44:	4663      	mov	r3, ip
 8000d46:	0004      	movs	r4, r0
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	e617      	b.n	800097c <__aeabi_dadd+0x294>
 8000d4c:	003d      	movs	r5, r7
 8000d4e:	444d      	add	r5, r9
 8000d50:	4463      	add	r3, ip
 8000d52:	454d      	cmp	r5, r9
 8000d54:	4189      	sbcs	r1, r1
 8000d56:	4698      	mov	r8, r3
 8000d58:	4249      	negs	r1, r1
 8000d5a:	4488      	add	r8, r1
 8000d5c:	4643      	mov	r3, r8
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	d400      	bmi.n	8000d64 <__aeabi_dadd+0x67c>
 8000d62:	e5dd      	b.n	8000920 <__aeabi_dadd+0x238>
 8000d64:	4642      	mov	r2, r8
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <__aeabi_dadd+0x6d0>)
 8000d68:	2601      	movs	r6, #1
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	4690      	mov	r8, r2
 8000d6e:	e5d7      	b.n	8000920 <__aeabi_dadd+0x238>
 8000d70:	0010      	movs	r0, r2
 8000d72:	001e      	movs	r6, r3
 8000d74:	3820      	subs	r0, #32
 8000d76:	40c6      	lsrs	r6, r0
 8000d78:	2a20      	cmp	r2, #32
 8000d7a:	d005      	beq.n	8000d88 <__aeabi_dadd+0x6a0>
 8000d7c:	2040      	movs	r0, #64	; 0x40
 8000d7e:	1a82      	subs	r2, r0, r2
 8000d80:	4093      	lsls	r3, r2
 8000d82:	464a      	mov	r2, r9
 8000d84:	431a      	orrs	r2, r3
 8000d86:	4691      	mov	r9, r2
 8000d88:	464d      	mov	r5, r9
 8000d8a:	1e6b      	subs	r3, r5, #1
 8000d8c:	419d      	sbcs	r5, r3
 8000d8e:	4335      	orrs	r5, r6
 8000d90:	e621      	b.n	80009d6 <__aeabi_dadd+0x2ee>
 8000d92:	0002      	movs	r2, r0
 8000d94:	2300      	movs	r3, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	e540      	b.n	800081c <__aeabi_dadd+0x134>
 8000d9a:	464a      	mov	r2, r9
 8000d9c:	19d5      	adds	r5, r2, r7
 8000d9e:	42bd      	cmp	r5, r7
 8000da0:	4189      	sbcs	r1, r1
 8000da2:	4463      	add	r3, ip
 8000da4:	4698      	mov	r8, r3
 8000da6:	4249      	negs	r1, r1
 8000da8:	4488      	add	r8, r1
 8000daa:	e5b3      	b.n	8000914 <__aeabi_dadd+0x22c>
 8000dac:	2100      	movs	r1, #0
 8000dae:	4a01      	ldr	r2, [pc, #4]	; (8000db4 <__aeabi_dadd+0x6cc>)
 8000db0:	000b      	movs	r3, r1
 8000db2:	e533      	b.n	800081c <__aeabi_dadd+0x134>
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff

08000dbc <__aeabi_ddiv>:
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	4657      	mov	r7, sl
 8000dc0:	464e      	mov	r6, r9
 8000dc2:	4645      	mov	r5, r8
 8000dc4:	46de      	mov	lr, fp
 8000dc6:	b5e0      	push	{r5, r6, r7, lr}
 8000dc8:	4681      	mov	r9, r0
 8000dca:	0005      	movs	r5, r0
 8000dcc:	030c      	lsls	r4, r1, #12
 8000dce:	0048      	lsls	r0, r1, #1
 8000dd0:	4692      	mov	sl, r2
 8000dd2:	001f      	movs	r7, r3
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	0b24      	lsrs	r4, r4, #12
 8000dd8:	0d40      	lsrs	r0, r0, #21
 8000dda:	0fce      	lsrs	r6, r1, #31
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d059      	beq.n	8000e94 <__aeabi_ddiv+0xd8>
 8000de0:	4b87      	ldr	r3, [pc, #540]	; (8001000 <__aeabi_ddiv+0x244>)
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x2c>
 8000de6:	e098      	b.n	8000f1a <__aeabi_ddiv+0x15e>
 8000de8:	0f6b      	lsrs	r3, r5, #29
 8000dea:	00e4      	lsls	r4, r4, #3
 8000dec:	431c      	orrs	r4, r3
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	041b      	lsls	r3, r3, #16
 8000df2:	4323      	orrs	r3, r4
 8000df4:	4698      	mov	r8, r3
 8000df6:	4b83      	ldr	r3, [pc, #524]	; (8001004 <__aeabi_ddiv+0x248>)
 8000df8:	00ed      	lsls	r5, r5, #3
 8000dfa:	469b      	mov	fp, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	4699      	mov	r9, r3
 8000e00:	4483      	add	fp, r0
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	033c      	lsls	r4, r7, #12
 8000e06:	007b      	lsls	r3, r7, #1
 8000e08:	4650      	mov	r0, sl
 8000e0a:	0b24      	lsrs	r4, r4, #12
 8000e0c:	0d5b      	lsrs	r3, r3, #21
 8000e0e:	0fff      	lsrs	r7, r7, #31
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d067      	beq.n	8000ee4 <__aeabi_ddiv+0x128>
 8000e14:	4a7a      	ldr	r2, [pc, #488]	; (8001000 <__aeabi_ddiv+0x244>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d018      	beq.n	8000e4c <__aeabi_ddiv+0x90>
 8000e1a:	497a      	ldr	r1, [pc, #488]	; (8001004 <__aeabi_ddiv+0x248>)
 8000e1c:	0f42      	lsrs	r2, r0, #29
 8000e1e:	468c      	mov	ip, r1
 8000e20:	00e4      	lsls	r4, r4, #3
 8000e22:	4659      	mov	r1, fp
 8000e24:	4314      	orrs	r4, r2
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	4463      	add	r3, ip
 8000e2a:	0412      	lsls	r2, r2, #16
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	4314      	orrs	r4, r2
 8000e30:	469b      	mov	fp, r3
 8000e32:	00c2      	lsls	r2, r0, #3
 8000e34:	2000      	movs	r0, #0
 8000e36:	0033      	movs	r3, r6
 8000e38:	407b      	eors	r3, r7
 8000e3a:	469a      	mov	sl, r3
 8000e3c:	464b      	mov	r3, r9
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	d900      	bls.n	8000e44 <__aeabi_ddiv+0x88>
 8000e42:	e0ef      	b.n	8001024 <__aeabi_ddiv+0x268>
 8000e44:	4970      	ldr	r1, [pc, #448]	; (8001008 <__aeabi_ddiv+0x24c>)
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	58cb      	ldr	r3, [r1, r3]
 8000e4a:	469f      	mov	pc, r3
 8000e4c:	4b6f      	ldr	r3, [pc, #444]	; (800100c <__aeabi_ddiv+0x250>)
 8000e4e:	4652      	mov	r2, sl
 8000e50:	469c      	mov	ip, r3
 8000e52:	4322      	orrs	r2, r4
 8000e54:	44e3      	add	fp, ip
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d000      	beq.n	8000e5c <__aeabi_ddiv+0xa0>
 8000e5a:	e095      	b.n	8000f88 <__aeabi_ddiv+0x1cc>
 8000e5c:	4649      	mov	r1, r9
 8000e5e:	2302      	movs	r3, #2
 8000e60:	4319      	orrs	r1, r3
 8000e62:	4689      	mov	r9, r1
 8000e64:	2400      	movs	r4, #0
 8000e66:	2002      	movs	r0, #2
 8000e68:	e7e5      	b.n	8000e36 <__aeabi_ddiv+0x7a>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	2500      	movs	r5, #0
 8000e70:	4652      	mov	r2, sl
 8000e72:	051b      	lsls	r3, r3, #20
 8000e74:	4323      	orrs	r3, r4
 8000e76:	07d2      	lsls	r2, r2, #31
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	0028      	movs	r0, r5
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	b005      	add	sp, #20
 8000e80:	bcf0      	pop	{r4, r5, r6, r7}
 8000e82:	46bb      	mov	fp, r7
 8000e84:	46b2      	mov	sl, r6
 8000e86:	46a9      	mov	r9, r5
 8000e88:	46a0      	mov	r8, r4
 8000e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e8c:	2400      	movs	r4, #0
 8000e8e:	2500      	movs	r5, #0
 8000e90:	4b5b      	ldr	r3, [pc, #364]	; (8001000 <__aeabi_ddiv+0x244>)
 8000e92:	e7ed      	b.n	8000e70 <__aeabi_ddiv+0xb4>
 8000e94:	464b      	mov	r3, r9
 8000e96:	4323      	orrs	r3, r4
 8000e98:	4698      	mov	r8, r3
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0xe2>
 8000e9c:	e089      	b.n	8000fb2 <__aeabi_ddiv+0x1f6>
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0xe8>
 8000ea2:	e1e0      	b.n	8001266 <__aeabi_ddiv+0x4aa>
 8000ea4:	0020      	movs	r0, r4
 8000ea6:	f001 fa37 	bl	8002318 <__clzsi2>
 8000eaa:	0001      	movs	r1, r0
 8000eac:	0002      	movs	r2, r0
 8000eae:	390b      	subs	r1, #11
 8000eb0:	231d      	movs	r3, #29
 8000eb2:	1a5b      	subs	r3, r3, r1
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	0010      	movs	r0, r2
 8000eb8:	40d9      	lsrs	r1, r3
 8000eba:	3808      	subs	r0, #8
 8000ebc:	4084      	lsls	r4, r0
 8000ebe:	000b      	movs	r3, r1
 8000ec0:	464d      	mov	r5, r9
 8000ec2:	4323      	orrs	r3, r4
 8000ec4:	4698      	mov	r8, r3
 8000ec6:	4085      	lsls	r5, r0
 8000ec8:	4851      	ldr	r0, [pc, #324]	; (8001010 <__aeabi_ddiv+0x254>)
 8000eca:	033c      	lsls	r4, r7, #12
 8000ecc:	1a83      	subs	r3, r0, r2
 8000ece:	469b      	mov	fp, r3
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4699      	mov	r9, r3
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	007b      	lsls	r3, r7, #1
 8000ed8:	4650      	mov	r0, sl
 8000eda:	0b24      	lsrs	r4, r4, #12
 8000edc:	0d5b      	lsrs	r3, r3, #21
 8000ede:	0fff      	lsrs	r7, r7, #31
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d197      	bne.n	8000e14 <__aeabi_ddiv+0x58>
 8000ee4:	4652      	mov	r2, sl
 8000ee6:	4322      	orrs	r2, r4
 8000ee8:	d055      	beq.n	8000f96 <__aeabi_ddiv+0x1da>
 8000eea:	2c00      	cmp	r4, #0
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x134>
 8000eee:	e1ca      	b.n	8001286 <__aeabi_ddiv+0x4ca>
 8000ef0:	0020      	movs	r0, r4
 8000ef2:	f001 fa11 	bl	8002318 <__clzsi2>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	3a0b      	subs	r2, #11
 8000efa:	231d      	movs	r3, #29
 8000efc:	0001      	movs	r1, r0
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	4652      	mov	r2, sl
 8000f02:	3908      	subs	r1, #8
 8000f04:	40da      	lsrs	r2, r3
 8000f06:	408c      	lsls	r4, r1
 8000f08:	4314      	orrs	r4, r2
 8000f0a:	4652      	mov	r2, sl
 8000f0c:	408a      	lsls	r2, r1
 8000f0e:	4b41      	ldr	r3, [pc, #260]	; (8001014 <__aeabi_ddiv+0x258>)
 8000f10:	4458      	add	r0, fp
 8000f12:	469b      	mov	fp, r3
 8000f14:	4483      	add	fp, r0
 8000f16:	2000      	movs	r0, #0
 8000f18:	e78d      	b.n	8000e36 <__aeabi_ddiv+0x7a>
 8000f1a:	464b      	mov	r3, r9
 8000f1c:	4323      	orrs	r3, r4
 8000f1e:	4698      	mov	r8, r3
 8000f20:	d140      	bne.n	8000fa4 <__aeabi_ddiv+0x1e8>
 8000f22:	2308      	movs	r3, #8
 8000f24:	4699      	mov	r9, r3
 8000f26:	3b06      	subs	r3, #6
 8000f28:	2500      	movs	r5, #0
 8000f2a:	4683      	mov	fp, r0
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	e769      	b.n	8000e04 <__aeabi_ddiv+0x48>
 8000f30:	46b2      	mov	sl, r6
 8000f32:	9b00      	ldr	r3, [sp, #0]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d0a9      	beq.n	8000e8c <__aeabi_ddiv+0xd0>
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x182>
 8000f3c:	e211      	b.n	8001362 <__aeabi_ddiv+0x5a6>
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d093      	beq.n	8000e6a <__aeabi_ddiv+0xae>
 8000f42:	4a35      	ldr	r2, [pc, #212]	; (8001018 <__aeabi_ddiv+0x25c>)
 8000f44:	445a      	add	r2, fp
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	dc00      	bgt.n	8000f4c <__aeabi_ddiv+0x190>
 8000f4a:	e13c      	b.n	80011c6 <__aeabi_ddiv+0x40a>
 8000f4c:	076b      	lsls	r3, r5, #29
 8000f4e:	d000      	beq.n	8000f52 <__aeabi_ddiv+0x196>
 8000f50:	e1a7      	b.n	80012a2 <__aeabi_ddiv+0x4e6>
 8000f52:	08ed      	lsrs	r5, r5, #3
 8000f54:	4643      	mov	r3, r8
 8000f56:	01db      	lsls	r3, r3, #7
 8000f58:	d506      	bpl.n	8000f68 <__aeabi_ddiv+0x1ac>
 8000f5a:	4642      	mov	r2, r8
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <__aeabi_ddiv+0x260>)
 8000f5e:	401a      	ands	r2, r3
 8000f60:	4690      	mov	r8, r2
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	00d2      	lsls	r2, r2, #3
 8000f66:	445a      	add	r2, fp
 8000f68:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <__aeabi_ddiv+0x264>)
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dc8e      	bgt.n	8000e8c <__aeabi_ddiv+0xd0>
 8000f6e:	4643      	mov	r3, r8
 8000f70:	0552      	lsls	r2, r2, #21
 8000f72:	0758      	lsls	r0, r3, #29
 8000f74:	025c      	lsls	r4, r3, #9
 8000f76:	4305      	orrs	r5, r0
 8000f78:	0b24      	lsrs	r4, r4, #12
 8000f7a:	0d53      	lsrs	r3, r2, #21
 8000f7c:	e778      	b.n	8000e70 <__aeabi_ddiv+0xb4>
 8000f7e:	46ba      	mov	sl, r7
 8000f80:	46a0      	mov	r8, r4
 8000f82:	0015      	movs	r5, r2
 8000f84:	9000      	str	r0, [sp, #0]
 8000f86:	e7d4      	b.n	8000f32 <__aeabi_ddiv+0x176>
 8000f88:	464a      	mov	r2, r9
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	4691      	mov	r9, r2
 8000f90:	2003      	movs	r0, #3
 8000f92:	4652      	mov	r2, sl
 8000f94:	e74f      	b.n	8000e36 <__aeabi_ddiv+0x7a>
 8000f96:	4649      	mov	r1, r9
 8000f98:	2301      	movs	r3, #1
 8000f9a:	4319      	orrs	r1, r3
 8000f9c:	4689      	mov	r9, r1
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	e748      	b.n	8000e36 <__aeabi_ddiv+0x7a>
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	3b09      	subs	r3, #9
 8000faa:	46a0      	mov	r8, r4
 8000fac:	4683      	mov	fp, r0
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	e728      	b.n	8000e04 <__aeabi_ddiv+0x48>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	4699      	mov	r9, r3
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	469b      	mov	fp, r3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	2500      	movs	r5, #0
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	e720      	b.n	8000e04 <__aeabi_ddiv+0x48>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2480      	movs	r4, #128	; 0x80
 8000fc6:	469a      	mov	sl, r3
 8000fc8:	2500      	movs	r5, #0
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <__aeabi_ddiv+0x244>)
 8000fcc:	0324      	lsls	r4, r4, #12
 8000fce:	e74f      	b.n	8000e70 <__aeabi_ddiv+0xb4>
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	031b      	lsls	r3, r3, #12
 8000fd6:	4219      	tst	r1, r3
 8000fd8:	d008      	beq.n	8000fec <__aeabi_ddiv+0x230>
 8000fda:	421c      	tst	r4, r3
 8000fdc:	d106      	bne.n	8000fec <__aeabi_ddiv+0x230>
 8000fde:	431c      	orrs	r4, r3
 8000fe0:	0324      	lsls	r4, r4, #12
 8000fe2:	46ba      	mov	sl, r7
 8000fe4:	0015      	movs	r5, r2
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <__aeabi_ddiv+0x244>)
 8000fe8:	0b24      	lsrs	r4, r4, #12
 8000fea:	e741      	b.n	8000e70 <__aeabi_ddiv+0xb4>
 8000fec:	2480      	movs	r4, #128	; 0x80
 8000fee:	4643      	mov	r3, r8
 8000ff0:	0324      	lsls	r4, r4, #12
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	0324      	lsls	r4, r4, #12
 8000ff6:	46b2      	mov	sl, r6
 8000ff8:	4b01      	ldr	r3, [pc, #4]	; (8001000 <__aeabi_ddiv+0x244>)
 8000ffa:	0b24      	lsrs	r4, r4, #12
 8000ffc:	e738      	b.n	8000e70 <__aeabi_ddiv+0xb4>
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	000007ff 	.word	0x000007ff
 8001004:	fffffc01 	.word	0xfffffc01
 8001008:	08010ce8 	.word	0x08010ce8
 800100c:	fffff801 	.word	0xfffff801
 8001010:	fffffc0d 	.word	0xfffffc0d
 8001014:	000003f3 	.word	0x000003f3
 8001018:	000003ff 	.word	0x000003ff
 800101c:	feffffff 	.word	0xfeffffff
 8001020:	000007fe 	.word	0x000007fe
 8001024:	4544      	cmp	r4, r8
 8001026:	d200      	bcs.n	800102a <__aeabi_ddiv+0x26e>
 8001028:	e116      	b.n	8001258 <__aeabi_ddiv+0x49c>
 800102a:	d100      	bne.n	800102e <__aeabi_ddiv+0x272>
 800102c:	e111      	b.n	8001252 <__aeabi_ddiv+0x496>
 800102e:	2301      	movs	r3, #1
 8001030:	425b      	negs	r3, r3
 8001032:	469c      	mov	ip, r3
 8001034:	002e      	movs	r6, r5
 8001036:	4640      	mov	r0, r8
 8001038:	2500      	movs	r5, #0
 800103a:	44e3      	add	fp, ip
 800103c:	0223      	lsls	r3, r4, #8
 800103e:	0e14      	lsrs	r4, r2, #24
 8001040:	431c      	orrs	r4, r3
 8001042:	0c1b      	lsrs	r3, r3, #16
 8001044:	4699      	mov	r9, r3
 8001046:	0423      	lsls	r3, r4, #16
 8001048:	0c1f      	lsrs	r7, r3, #16
 800104a:	0212      	lsls	r2, r2, #8
 800104c:	4649      	mov	r1, r9
 800104e:	9200      	str	r2, [sp, #0]
 8001050:	9701      	str	r7, [sp, #4]
 8001052:	f7ff f8e9 	bl	8000228 <__aeabi_uidivmod>
 8001056:	0002      	movs	r2, r0
 8001058:	437a      	muls	r2, r7
 800105a:	040b      	lsls	r3, r1, #16
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	4680      	mov	r8, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d90b      	bls.n	800107e <__aeabi_ddiv+0x2c2>
 8001066:	2301      	movs	r3, #1
 8001068:	425b      	negs	r3, r3
 800106a:	469c      	mov	ip, r3
 800106c:	1909      	adds	r1, r1, r4
 800106e:	44e0      	add	r8, ip
 8001070:	428c      	cmp	r4, r1
 8001072:	d804      	bhi.n	800107e <__aeabi_ddiv+0x2c2>
 8001074:	428a      	cmp	r2, r1
 8001076:	d902      	bls.n	800107e <__aeabi_ddiv+0x2c2>
 8001078:	1e83      	subs	r3, r0, #2
 800107a:	4698      	mov	r8, r3
 800107c:	1909      	adds	r1, r1, r4
 800107e:	1a88      	subs	r0, r1, r2
 8001080:	4649      	mov	r1, r9
 8001082:	f7ff f8d1 	bl	8000228 <__aeabi_uidivmod>
 8001086:	0409      	lsls	r1, r1, #16
 8001088:	468c      	mov	ip, r1
 800108a:	0431      	lsls	r1, r6, #16
 800108c:	4666      	mov	r6, ip
 800108e:	9a01      	ldr	r2, [sp, #4]
 8001090:	0c09      	lsrs	r1, r1, #16
 8001092:	4342      	muls	r2, r0
 8001094:	0003      	movs	r3, r0
 8001096:	4331      	orrs	r1, r6
 8001098:	428a      	cmp	r2, r1
 800109a:	d904      	bls.n	80010a6 <__aeabi_ddiv+0x2ea>
 800109c:	1909      	adds	r1, r1, r4
 800109e:	3b01      	subs	r3, #1
 80010a0:	428c      	cmp	r4, r1
 80010a2:	d800      	bhi.n	80010a6 <__aeabi_ddiv+0x2ea>
 80010a4:	e111      	b.n	80012ca <__aeabi_ddiv+0x50e>
 80010a6:	1a89      	subs	r1, r1, r2
 80010a8:	4642      	mov	r2, r8
 80010aa:	9e00      	ldr	r6, [sp, #0]
 80010ac:	0412      	lsls	r2, r2, #16
 80010ae:	431a      	orrs	r2, r3
 80010b0:	0c33      	lsrs	r3, r6, #16
 80010b2:	001f      	movs	r7, r3
 80010b4:	0c10      	lsrs	r0, r2, #16
 80010b6:	4690      	mov	r8, r2
 80010b8:	9302      	str	r3, [sp, #8]
 80010ba:	0413      	lsls	r3, r2, #16
 80010bc:	0432      	lsls	r2, r6, #16
 80010be:	0c16      	lsrs	r6, r2, #16
 80010c0:	0032      	movs	r2, r6
 80010c2:	0c1b      	lsrs	r3, r3, #16
 80010c4:	435a      	muls	r2, r3
 80010c6:	9603      	str	r6, [sp, #12]
 80010c8:	437b      	muls	r3, r7
 80010ca:	4346      	muls	r6, r0
 80010cc:	4378      	muls	r0, r7
 80010ce:	0c17      	lsrs	r7, r2, #16
 80010d0:	46bc      	mov	ip, r7
 80010d2:	199b      	adds	r3, r3, r6
 80010d4:	4463      	add	r3, ip
 80010d6:	429e      	cmp	r6, r3
 80010d8:	d903      	bls.n	80010e2 <__aeabi_ddiv+0x326>
 80010da:	2680      	movs	r6, #128	; 0x80
 80010dc:	0276      	lsls	r6, r6, #9
 80010de:	46b4      	mov	ip, r6
 80010e0:	4460      	add	r0, ip
 80010e2:	0c1e      	lsrs	r6, r3, #16
 80010e4:	1830      	adds	r0, r6, r0
 80010e6:	0416      	lsls	r6, r2, #16
 80010e8:	041b      	lsls	r3, r3, #16
 80010ea:	0c36      	lsrs	r6, r6, #16
 80010ec:	199e      	adds	r6, r3, r6
 80010ee:	4281      	cmp	r1, r0
 80010f0:	d200      	bcs.n	80010f4 <__aeabi_ddiv+0x338>
 80010f2:	e09c      	b.n	800122e <__aeabi_ddiv+0x472>
 80010f4:	d100      	bne.n	80010f8 <__aeabi_ddiv+0x33c>
 80010f6:	e097      	b.n	8001228 <__aeabi_ddiv+0x46c>
 80010f8:	1bae      	subs	r6, r5, r6
 80010fa:	1a09      	subs	r1, r1, r0
 80010fc:	42b5      	cmp	r5, r6
 80010fe:	4180      	sbcs	r0, r0
 8001100:	4240      	negs	r0, r0
 8001102:	1a08      	subs	r0, r1, r0
 8001104:	4284      	cmp	r4, r0
 8001106:	d100      	bne.n	800110a <__aeabi_ddiv+0x34e>
 8001108:	e111      	b.n	800132e <__aeabi_ddiv+0x572>
 800110a:	4649      	mov	r1, r9
 800110c:	f7ff f88c 	bl	8000228 <__aeabi_uidivmod>
 8001110:	9a01      	ldr	r2, [sp, #4]
 8001112:	040b      	lsls	r3, r1, #16
 8001114:	4342      	muls	r2, r0
 8001116:	0c31      	lsrs	r1, r6, #16
 8001118:	0005      	movs	r5, r0
 800111a:	4319      	orrs	r1, r3
 800111c:	428a      	cmp	r2, r1
 800111e:	d907      	bls.n	8001130 <__aeabi_ddiv+0x374>
 8001120:	1909      	adds	r1, r1, r4
 8001122:	3d01      	subs	r5, #1
 8001124:	428c      	cmp	r4, r1
 8001126:	d803      	bhi.n	8001130 <__aeabi_ddiv+0x374>
 8001128:	428a      	cmp	r2, r1
 800112a:	d901      	bls.n	8001130 <__aeabi_ddiv+0x374>
 800112c:	1e85      	subs	r5, r0, #2
 800112e:	1909      	adds	r1, r1, r4
 8001130:	1a88      	subs	r0, r1, r2
 8001132:	4649      	mov	r1, r9
 8001134:	f7ff f878 	bl	8000228 <__aeabi_uidivmod>
 8001138:	0409      	lsls	r1, r1, #16
 800113a:	468c      	mov	ip, r1
 800113c:	0431      	lsls	r1, r6, #16
 800113e:	4666      	mov	r6, ip
 8001140:	9a01      	ldr	r2, [sp, #4]
 8001142:	0c09      	lsrs	r1, r1, #16
 8001144:	4342      	muls	r2, r0
 8001146:	0003      	movs	r3, r0
 8001148:	4331      	orrs	r1, r6
 800114a:	428a      	cmp	r2, r1
 800114c:	d907      	bls.n	800115e <__aeabi_ddiv+0x3a2>
 800114e:	1909      	adds	r1, r1, r4
 8001150:	3b01      	subs	r3, #1
 8001152:	428c      	cmp	r4, r1
 8001154:	d803      	bhi.n	800115e <__aeabi_ddiv+0x3a2>
 8001156:	428a      	cmp	r2, r1
 8001158:	d901      	bls.n	800115e <__aeabi_ddiv+0x3a2>
 800115a:	1e83      	subs	r3, r0, #2
 800115c:	1909      	adds	r1, r1, r4
 800115e:	9e03      	ldr	r6, [sp, #12]
 8001160:	1a89      	subs	r1, r1, r2
 8001162:	0032      	movs	r2, r6
 8001164:	042d      	lsls	r5, r5, #16
 8001166:	431d      	orrs	r5, r3
 8001168:	9f02      	ldr	r7, [sp, #8]
 800116a:	042b      	lsls	r3, r5, #16
 800116c:	0c1b      	lsrs	r3, r3, #16
 800116e:	435a      	muls	r2, r3
 8001170:	437b      	muls	r3, r7
 8001172:	469c      	mov	ip, r3
 8001174:	0c28      	lsrs	r0, r5, #16
 8001176:	4346      	muls	r6, r0
 8001178:	0c13      	lsrs	r3, r2, #16
 800117a:	44b4      	add	ip, r6
 800117c:	4463      	add	r3, ip
 800117e:	4378      	muls	r0, r7
 8001180:	429e      	cmp	r6, r3
 8001182:	d903      	bls.n	800118c <__aeabi_ddiv+0x3d0>
 8001184:	2680      	movs	r6, #128	; 0x80
 8001186:	0276      	lsls	r6, r6, #9
 8001188:	46b4      	mov	ip, r6
 800118a:	4460      	add	r0, ip
 800118c:	0c1e      	lsrs	r6, r3, #16
 800118e:	0412      	lsls	r2, r2, #16
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	0c12      	lsrs	r2, r2, #16
 8001194:	1830      	adds	r0, r6, r0
 8001196:	189b      	adds	r3, r3, r2
 8001198:	4281      	cmp	r1, r0
 800119a:	d306      	bcc.n	80011aa <__aeabi_ddiv+0x3ee>
 800119c:	d002      	beq.n	80011a4 <__aeabi_ddiv+0x3e8>
 800119e:	2301      	movs	r3, #1
 80011a0:	431d      	orrs	r5, r3
 80011a2:	e6ce      	b.n	8000f42 <__aeabi_ddiv+0x186>
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x3ee>
 80011a8:	e6cb      	b.n	8000f42 <__aeabi_ddiv+0x186>
 80011aa:	1861      	adds	r1, r4, r1
 80011ac:	1e6e      	subs	r6, r5, #1
 80011ae:	42a1      	cmp	r1, r4
 80011b0:	d200      	bcs.n	80011b4 <__aeabi_ddiv+0x3f8>
 80011b2:	e0a4      	b.n	80012fe <__aeabi_ddiv+0x542>
 80011b4:	4281      	cmp	r1, r0
 80011b6:	d200      	bcs.n	80011ba <__aeabi_ddiv+0x3fe>
 80011b8:	e0c9      	b.n	800134e <__aeabi_ddiv+0x592>
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0x402>
 80011bc:	e0d9      	b.n	8001372 <__aeabi_ddiv+0x5b6>
 80011be:	0035      	movs	r5, r6
 80011c0:	e7ed      	b.n	800119e <__aeabi_ddiv+0x3e2>
 80011c2:	2501      	movs	r5, #1
 80011c4:	426d      	negs	r5, r5
 80011c6:	2101      	movs	r1, #1
 80011c8:	1a89      	subs	r1, r1, r2
 80011ca:	2938      	cmp	r1, #56	; 0x38
 80011cc:	dd00      	ble.n	80011d0 <__aeabi_ddiv+0x414>
 80011ce:	e64c      	b.n	8000e6a <__aeabi_ddiv+0xae>
 80011d0:	291f      	cmp	r1, #31
 80011d2:	dc00      	bgt.n	80011d6 <__aeabi_ddiv+0x41a>
 80011d4:	e07f      	b.n	80012d6 <__aeabi_ddiv+0x51a>
 80011d6:	231f      	movs	r3, #31
 80011d8:	425b      	negs	r3, r3
 80011da:	1a9a      	subs	r2, r3, r2
 80011dc:	4643      	mov	r3, r8
 80011de:	40d3      	lsrs	r3, r2
 80011e0:	2920      	cmp	r1, #32
 80011e2:	d004      	beq.n	80011ee <__aeabi_ddiv+0x432>
 80011e4:	4644      	mov	r4, r8
 80011e6:	4a65      	ldr	r2, [pc, #404]	; (800137c <__aeabi_ddiv+0x5c0>)
 80011e8:	445a      	add	r2, fp
 80011ea:	4094      	lsls	r4, r2
 80011ec:	4325      	orrs	r5, r4
 80011ee:	1e6a      	subs	r2, r5, #1
 80011f0:	4195      	sbcs	r5, r2
 80011f2:	2207      	movs	r2, #7
 80011f4:	432b      	orrs	r3, r5
 80011f6:	0015      	movs	r5, r2
 80011f8:	2400      	movs	r4, #0
 80011fa:	401d      	ands	r5, r3
 80011fc:	421a      	tst	r2, r3
 80011fe:	d100      	bne.n	8001202 <__aeabi_ddiv+0x446>
 8001200:	e0a1      	b.n	8001346 <__aeabi_ddiv+0x58a>
 8001202:	220f      	movs	r2, #15
 8001204:	2400      	movs	r4, #0
 8001206:	401a      	ands	r2, r3
 8001208:	2a04      	cmp	r2, #4
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0x452>
 800120c:	e098      	b.n	8001340 <__aeabi_ddiv+0x584>
 800120e:	1d1a      	adds	r2, r3, #4
 8001210:	429a      	cmp	r2, r3
 8001212:	419b      	sbcs	r3, r3
 8001214:	425b      	negs	r3, r3
 8001216:	18e4      	adds	r4, r4, r3
 8001218:	0013      	movs	r3, r2
 800121a:	0222      	lsls	r2, r4, #8
 800121c:	d400      	bmi.n	8001220 <__aeabi_ddiv+0x464>
 800121e:	e08f      	b.n	8001340 <__aeabi_ddiv+0x584>
 8001220:	2301      	movs	r3, #1
 8001222:	2400      	movs	r4, #0
 8001224:	2500      	movs	r5, #0
 8001226:	e623      	b.n	8000e70 <__aeabi_ddiv+0xb4>
 8001228:	42b5      	cmp	r5, r6
 800122a:	d300      	bcc.n	800122e <__aeabi_ddiv+0x472>
 800122c:	e764      	b.n	80010f8 <__aeabi_ddiv+0x33c>
 800122e:	4643      	mov	r3, r8
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	9b00      	ldr	r3, [sp, #0]
 8001234:	469c      	mov	ip, r3
 8001236:	4465      	add	r5, ip
 8001238:	001f      	movs	r7, r3
 800123a:	429d      	cmp	r5, r3
 800123c:	419b      	sbcs	r3, r3
 800123e:	425b      	negs	r3, r3
 8001240:	191b      	adds	r3, r3, r4
 8001242:	18c9      	adds	r1, r1, r3
 8001244:	428c      	cmp	r4, r1
 8001246:	d23a      	bcs.n	80012be <__aeabi_ddiv+0x502>
 8001248:	4288      	cmp	r0, r1
 800124a:	d863      	bhi.n	8001314 <__aeabi_ddiv+0x558>
 800124c:	d060      	beq.n	8001310 <__aeabi_ddiv+0x554>
 800124e:	4690      	mov	r8, r2
 8001250:	e752      	b.n	80010f8 <__aeabi_ddiv+0x33c>
 8001252:	42aa      	cmp	r2, r5
 8001254:	d900      	bls.n	8001258 <__aeabi_ddiv+0x49c>
 8001256:	e6ea      	b.n	800102e <__aeabi_ddiv+0x272>
 8001258:	4643      	mov	r3, r8
 800125a:	07de      	lsls	r6, r3, #31
 800125c:	0858      	lsrs	r0, r3, #1
 800125e:	086b      	lsrs	r3, r5, #1
 8001260:	431e      	orrs	r6, r3
 8001262:	07ed      	lsls	r5, r5, #31
 8001264:	e6ea      	b.n	800103c <__aeabi_ddiv+0x280>
 8001266:	4648      	mov	r0, r9
 8001268:	f001 f856 	bl	8002318 <__clzsi2>
 800126c:	0001      	movs	r1, r0
 800126e:	0002      	movs	r2, r0
 8001270:	3115      	adds	r1, #21
 8001272:	3220      	adds	r2, #32
 8001274:	291c      	cmp	r1, #28
 8001276:	dc00      	bgt.n	800127a <__aeabi_ddiv+0x4be>
 8001278:	e61a      	b.n	8000eb0 <__aeabi_ddiv+0xf4>
 800127a:	464b      	mov	r3, r9
 800127c:	3808      	subs	r0, #8
 800127e:	4083      	lsls	r3, r0
 8001280:	2500      	movs	r5, #0
 8001282:	4698      	mov	r8, r3
 8001284:	e620      	b.n	8000ec8 <__aeabi_ddiv+0x10c>
 8001286:	f001 f847 	bl	8002318 <__clzsi2>
 800128a:	0003      	movs	r3, r0
 800128c:	001a      	movs	r2, r3
 800128e:	3215      	adds	r2, #21
 8001290:	3020      	adds	r0, #32
 8001292:	2a1c      	cmp	r2, #28
 8001294:	dc00      	bgt.n	8001298 <__aeabi_ddiv+0x4dc>
 8001296:	e630      	b.n	8000efa <__aeabi_ddiv+0x13e>
 8001298:	4654      	mov	r4, sl
 800129a:	3b08      	subs	r3, #8
 800129c:	2200      	movs	r2, #0
 800129e:	409c      	lsls	r4, r3
 80012a0:	e635      	b.n	8000f0e <__aeabi_ddiv+0x152>
 80012a2:	230f      	movs	r3, #15
 80012a4:	402b      	ands	r3, r5
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d100      	bne.n	80012ac <__aeabi_ddiv+0x4f0>
 80012aa:	e652      	b.n	8000f52 <__aeabi_ddiv+0x196>
 80012ac:	2305      	movs	r3, #5
 80012ae:	425b      	negs	r3, r3
 80012b0:	42ab      	cmp	r3, r5
 80012b2:	419b      	sbcs	r3, r3
 80012b4:	3504      	adds	r5, #4
 80012b6:	425b      	negs	r3, r3
 80012b8:	08ed      	lsrs	r5, r5, #3
 80012ba:	4498      	add	r8, r3
 80012bc:	e64a      	b.n	8000f54 <__aeabi_ddiv+0x198>
 80012be:	428c      	cmp	r4, r1
 80012c0:	d1c5      	bne.n	800124e <__aeabi_ddiv+0x492>
 80012c2:	42af      	cmp	r7, r5
 80012c4:	d9c0      	bls.n	8001248 <__aeabi_ddiv+0x48c>
 80012c6:	4690      	mov	r8, r2
 80012c8:	e716      	b.n	80010f8 <__aeabi_ddiv+0x33c>
 80012ca:	428a      	cmp	r2, r1
 80012cc:	d800      	bhi.n	80012d0 <__aeabi_ddiv+0x514>
 80012ce:	e6ea      	b.n	80010a6 <__aeabi_ddiv+0x2ea>
 80012d0:	1e83      	subs	r3, r0, #2
 80012d2:	1909      	adds	r1, r1, r4
 80012d4:	e6e7      	b.n	80010a6 <__aeabi_ddiv+0x2ea>
 80012d6:	4a2a      	ldr	r2, [pc, #168]	; (8001380 <__aeabi_ddiv+0x5c4>)
 80012d8:	0028      	movs	r0, r5
 80012da:	445a      	add	r2, fp
 80012dc:	4643      	mov	r3, r8
 80012de:	4095      	lsls	r5, r2
 80012e0:	4093      	lsls	r3, r2
 80012e2:	40c8      	lsrs	r0, r1
 80012e4:	1e6a      	subs	r2, r5, #1
 80012e6:	4195      	sbcs	r5, r2
 80012e8:	4644      	mov	r4, r8
 80012ea:	4303      	orrs	r3, r0
 80012ec:	432b      	orrs	r3, r5
 80012ee:	40cc      	lsrs	r4, r1
 80012f0:	075a      	lsls	r2, r3, #29
 80012f2:	d092      	beq.n	800121a <__aeabi_ddiv+0x45e>
 80012f4:	220f      	movs	r2, #15
 80012f6:	401a      	ands	r2, r3
 80012f8:	2a04      	cmp	r2, #4
 80012fa:	d188      	bne.n	800120e <__aeabi_ddiv+0x452>
 80012fc:	e78d      	b.n	800121a <__aeabi_ddiv+0x45e>
 80012fe:	0035      	movs	r5, r6
 8001300:	4281      	cmp	r1, r0
 8001302:	d000      	beq.n	8001306 <__aeabi_ddiv+0x54a>
 8001304:	e74b      	b.n	800119e <__aeabi_ddiv+0x3e2>
 8001306:	9a00      	ldr	r2, [sp, #0]
 8001308:	4293      	cmp	r3, r2
 800130a:	d000      	beq.n	800130e <__aeabi_ddiv+0x552>
 800130c:	e747      	b.n	800119e <__aeabi_ddiv+0x3e2>
 800130e:	e618      	b.n	8000f42 <__aeabi_ddiv+0x186>
 8001310:	42ae      	cmp	r6, r5
 8001312:	d99c      	bls.n	800124e <__aeabi_ddiv+0x492>
 8001314:	2302      	movs	r3, #2
 8001316:	425b      	negs	r3, r3
 8001318:	469c      	mov	ip, r3
 800131a:	9b00      	ldr	r3, [sp, #0]
 800131c:	44e0      	add	r8, ip
 800131e:	469c      	mov	ip, r3
 8001320:	4465      	add	r5, ip
 8001322:	429d      	cmp	r5, r3
 8001324:	419b      	sbcs	r3, r3
 8001326:	425b      	negs	r3, r3
 8001328:	191b      	adds	r3, r3, r4
 800132a:	18c9      	adds	r1, r1, r3
 800132c:	e6e4      	b.n	80010f8 <__aeabi_ddiv+0x33c>
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <__aeabi_ddiv+0x5c8>)
 8001330:	445a      	add	r2, fp
 8001332:	2a00      	cmp	r2, #0
 8001334:	dc00      	bgt.n	8001338 <__aeabi_ddiv+0x57c>
 8001336:	e744      	b.n	80011c2 <__aeabi_ddiv+0x406>
 8001338:	2301      	movs	r3, #1
 800133a:	2500      	movs	r5, #0
 800133c:	4498      	add	r8, r3
 800133e:	e609      	b.n	8000f54 <__aeabi_ddiv+0x198>
 8001340:	0765      	lsls	r5, r4, #29
 8001342:	0264      	lsls	r4, r4, #9
 8001344:	0b24      	lsrs	r4, r4, #12
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	431d      	orrs	r5, r3
 800134a:	2300      	movs	r3, #0
 800134c:	e590      	b.n	8000e70 <__aeabi_ddiv+0xb4>
 800134e:	9e00      	ldr	r6, [sp, #0]
 8001350:	3d02      	subs	r5, #2
 8001352:	0072      	lsls	r2, r6, #1
 8001354:	42b2      	cmp	r2, r6
 8001356:	41bf      	sbcs	r7, r7
 8001358:	427f      	negs	r7, r7
 800135a:	193c      	adds	r4, r7, r4
 800135c:	1909      	adds	r1, r1, r4
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	e7ce      	b.n	8001300 <__aeabi_ddiv+0x544>
 8001362:	2480      	movs	r4, #128	; 0x80
 8001364:	4643      	mov	r3, r8
 8001366:	0324      	lsls	r4, r4, #12
 8001368:	431c      	orrs	r4, r3
 800136a:	0324      	lsls	r4, r4, #12
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <__aeabi_ddiv+0x5cc>)
 800136e:	0b24      	lsrs	r4, r4, #12
 8001370:	e57e      	b.n	8000e70 <__aeabi_ddiv+0xb4>
 8001372:	9a00      	ldr	r2, [sp, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d3ea      	bcc.n	800134e <__aeabi_ddiv+0x592>
 8001378:	0035      	movs	r5, r6
 800137a:	e7c4      	b.n	8001306 <__aeabi_ddiv+0x54a>
 800137c:	0000043e 	.word	0x0000043e
 8001380:	0000041e 	.word	0x0000041e
 8001384:	000003ff 	.word	0x000003ff
 8001388:	000007ff 	.word	0x000007ff

0800138c <__eqdf2>:
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	464f      	mov	r7, r9
 8001390:	4646      	mov	r6, r8
 8001392:	46d6      	mov	lr, sl
 8001394:	4694      	mov	ip, r2
 8001396:	4691      	mov	r9, r2
 8001398:	031a      	lsls	r2, r3, #12
 800139a:	0b12      	lsrs	r2, r2, #12
 800139c:	4d18      	ldr	r5, [pc, #96]	; (8001400 <__eqdf2+0x74>)
 800139e:	b5c0      	push	{r6, r7, lr}
 80013a0:	004c      	lsls	r4, r1, #1
 80013a2:	030f      	lsls	r7, r1, #12
 80013a4:	4692      	mov	sl, r2
 80013a6:	005a      	lsls	r2, r3, #1
 80013a8:	0006      	movs	r6, r0
 80013aa:	4680      	mov	r8, r0
 80013ac:	0b3f      	lsrs	r7, r7, #12
 80013ae:	2001      	movs	r0, #1
 80013b0:	0d64      	lsrs	r4, r4, #21
 80013b2:	0fc9      	lsrs	r1, r1, #31
 80013b4:	0d52      	lsrs	r2, r2, #21
 80013b6:	0fdb      	lsrs	r3, r3, #31
 80013b8:	42ac      	cmp	r4, r5
 80013ba:	d00a      	beq.n	80013d2 <__eqdf2+0x46>
 80013bc:	42aa      	cmp	r2, r5
 80013be:	d003      	beq.n	80013c8 <__eqdf2+0x3c>
 80013c0:	4294      	cmp	r4, r2
 80013c2:	d101      	bne.n	80013c8 <__eqdf2+0x3c>
 80013c4:	4557      	cmp	r7, sl
 80013c6:	d00d      	beq.n	80013e4 <__eqdf2+0x58>
 80013c8:	bce0      	pop	{r5, r6, r7}
 80013ca:	46ba      	mov	sl, r7
 80013cc:	46b1      	mov	r9, r6
 80013ce:	46a8      	mov	r8, r5
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d2:	003d      	movs	r5, r7
 80013d4:	4335      	orrs	r5, r6
 80013d6:	d1f7      	bne.n	80013c8 <__eqdf2+0x3c>
 80013d8:	42a2      	cmp	r2, r4
 80013da:	d1f5      	bne.n	80013c8 <__eqdf2+0x3c>
 80013dc:	4652      	mov	r2, sl
 80013de:	4665      	mov	r5, ip
 80013e0:	432a      	orrs	r2, r5
 80013e2:	d1f1      	bne.n	80013c8 <__eqdf2+0x3c>
 80013e4:	2001      	movs	r0, #1
 80013e6:	45c8      	cmp	r8, r9
 80013e8:	d1ee      	bne.n	80013c8 <__eqdf2+0x3c>
 80013ea:	4299      	cmp	r1, r3
 80013ec:	d006      	beq.n	80013fc <__eqdf2+0x70>
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d1ea      	bne.n	80013c8 <__eqdf2+0x3c>
 80013f2:	433e      	orrs	r6, r7
 80013f4:	0030      	movs	r0, r6
 80013f6:	1e46      	subs	r6, r0, #1
 80013f8:	41b0      	sbcs	r0, r6
 80013fa:	e7e5      	b.n	80013c8 <__eqdf2+0x3c>
 80013fc:	2000      	movs	r0, #0
 80013fe:	e7e3      	b.n	80013c8 <__eqdf2+0x3c>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__gedf2>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	464e      	mov	r6, r9
 8001408:	4645      	mov	r5, r8
 800140a:	4657      	mov	r7, sl
 800140c:	46de      	mov	lr, fp
 800140e:	0004      	movs	r4, r0
 8001410:	0018      	movs	r0, r3
 8001412:	b5e0      	push	{r5, r6, r7, lr}
 8001414:	0016      	movs	r6, r2
 8001416:	031b      	lsls	r3, r3, #12
 8001418:	0b1b      	lsrs	r3, r3, #12
 800141a:	4d32      	ldr	r5, [pc, #200]	; (80014e4 <__gedf2+0xe0>)
 800141c:	030f      	lsls	r7, r1, #12
 800141e:	004a      	lsls	r2, r1, #1
 8001420:	4699      	mov	r9, r3
 8001422:	0043      	lsls	r3, r0, #1
 8001424:	46a4      	mov	ip, r4
 8001426:	46b0      	mov	r8, r6
 8001428:	0b3f      	lsrs	r7, r7, #12
 800142a:	0d52      	lsrs	r2, r2, #21
 800142c:	0fc9      	lsrs	r1, r1, #31
 800142e:	0d5b      	lsrs	r3, r3, #21
 8001430:	0fc0      	lsrs	r0, r0, #31
 8001432:	42aa      	cmp	r2, r5
 8001434:	d029      	beq.n	800148a <__gedf2+0x86>
 8001436:	42ab      	cmp	r3, r5
 8001438:	d018      	beq.n	800146c <__gedf2+0x68>
 800143a:	2a00      	cmp	r2, #0
 800143c:	d12a      	bne.n	8001494 <__gedf2+0x90>
 800143e:	433c      	orrs	r4, r7
 8001440:	46a3      	mov	fp, r4
 8001442:	4265      	negs	r5, r4
 8001444:	4165      	adcs	r5, r4
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <__gedf2+0x4c>
 800144a:	464c      	mov	r4, r9
 800144c:	4326      	orrs	r6, r4
 800144e:	d027      	beq.n	80014a0 <__gedf2+0x9c>
 8001450:	2d00      	cmp	r5, #0
 8001452:	d115      	bne.n	8001480 <__gedf2+0x7c>
 8001454:	4281      	cmp	r1, r0
 8001456:	d028      	beq.n	80014aa <__gedf2+0xa6>
 8001458:	2002      	movs	r0, #2
 800145a:	3901      	subs	r1, #1
 800145c:	4008      	ands	r0, r1
 800145e:	3801      	subs	r0, #1
 8001460:	bcf0      	pop	{r4, r5, r6, r7}
 8001462:	46bb      	mov	fp, r7
 8001464:	46b2      	mov	sl, r6
 8001466:	46a9      	mov	r9, r5
 8001468:	46a0      	mov	r8, r4
 800146a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146c:	464d      	mov	r5, r9
 800146e:	432e      	orrs	r6, r5
 8001470:	d12f      	bne.n	80014d2 <__gedf2+0xce>
 8001472:	2a00      	cmp	r2, #0
 8001474:	d1ee      	bne.n	8001454 <__gedf2+0x50>
 8001476:	433c      	orrs	r4, r7
 8001478:	4265      	negs	r5, r4
 800147a:	4165      	adcs	r5, r4
 800147c:	2d00      	cmp	r5, #0
 800147e:	d0e9      	beq.n	8001454 <__gedf2+0x50>
 8001480:	2800      	cmp	r0, #0
 8001482:	d1ed      	bne.n	8001460 <__gedf2+0x5c>
 8001484:	2001      	movs	r0, #1
 8001486:	4240      	negs	r0, r0
 8001488:	e7ea      	b.n	8001460 <__gedf2+0x5c>
 800148a:	003d      	movs	r5, r7
 800148c:	4325      	orrs	r5, r4
 800148e:	d120      	bne.n	80014d2 <__gedf2+0xce>
 8001490:	4293      	cmp	r3, r2
 8001492:	d0eb      	beq.n	800146c <__gedf2+0x68>
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1dd      	bne.n	8001454 <__gedf2+0x50>
 8001498:	464c      	mov	r4, r9
 800149a:	4326      	orrs	r6, r4
 800149c:	d1da      	bne.n	8001454 <__gedf2+0x50>
 800149e:	e7db      	b.n	8001458 <__gedf2+0x54>
 80014a0:	465b      	mov	r3, fp
 80014a2:	2000      	movs	r0, #0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0db      	beq.n	8001460 <__gedf2+0x5c>
 80014a8:	e7d6      	b.n	8001458 <__gedf2+0x54>
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dc0a      	bgt.n	80014c4 <__gedf2+0xc0>
 80014ae:	dbe7      	blt.n	8001480 <__gedf2+0x7c>
 80014b0:	454f      	cmp	r7, r9
 80014b2:	d8d1      	bhi.n	8001458 <__gedf2+0x54>
 80014b4:	d010      	beq.n	80014d8 <__gedf2+0xd4>
 80014b6:	2000      	movs	r0, #0
 80014b8:	454f      	cmp	r7, r9
 80014ba:	d2d1      	bcs.n	8001460 <__gedf2+0x5c>
 80014bc:	2900      	cmp	r1, #0
 80014be:	d0e1      	beq.n	8001484 <__gedf2+0x80>
 80014c0:	0008      	movs	r0, r1
 80014c2:	e7cd      	b.n	8001460 <__gedf2+0x5c>
 80014c4:	4243      	negs	r3, r0
 80014c6:	4158      	adcs	r0, r3
 80014c8:	2302      	movs	r3, #2
 80014ca:	4240      	negs	r0, r0
 80014cc:	4018      	ands	r0, r3
 80014ce:	3801      	subs	r0, #1
 80014d0:	e7c6      	b.n	8001460 <__gedf2+0x5c>
 80014d2:	2002      	movs	r0, #2
 80014d4:	4240      	negs	r0, r0
 80014d6:	e7c3      	b.n	8001460 <__gedf2+0x5c>
 80014d8:	45c4      	cmp	ip, r8
 80014da:	d8bd      	bhi.n	8001458 <__gedf2+0x54>
 80014dc:	2000      	movs	r0, #0
 80014de:	45c4      	cmp	ip, r8
 80014e0:	d2be      	bcs.n	8001460 <__gedf2+0x5c>
 80014e2:	e7eb      	b.n	80014bc <__gedf2+0xb8>
 80014e4:	000007ff 	.word	0x000007ff

080014e8 <__ledf2>:
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	464e      	mov	r6, r9
 80014ec:	4645      	mov	r5, r8
 80014ee:	4657      	mov	r7, sl
 80014f0:	46de      	mov	lr, fp
 80014f2:	0004      	movs	r4, r0
 80014f4:	0018      	movs	r0, r3
 80014f6:	b5e0      	push	{r5, r6, r7, lr}
 80014f8:	0016      	movs	r6, r2
 80014fa:	031b      	lsls	r3, r3, #12
 80014fc:	0b1b      	lsrs	r3, r3, #12
 80014fe:	4d31      	ldr	r5, [pc, #196]	; (80015c4 <__ledf2+0xdc>)
 8001500:	030f      	lsls	r7, r1, #12
 8001502:	004a      	lsls	r2, r1, #1
 8001504:	4699      	mov	r9, r3
 8001506:	0043      	lsls	r3, r0, #1
 8001508:	46a4      	mov	ip, r4
 800150a:	46b0      	mov	r8, r6
 800150c:	0b3f      	lsrs	r7, r7, #12
 800150e:	0d52      	lsrs	r2, r2, #21
 8001510:	0fc9      	lsrs	r1, r1, #31
 8001512:	0d5b      	lsrs	r3, r3, #21
 8001514:	0fc0      	lsrs	r0, r0, #31
 8001516:	42aa      	cmp	r2, r5
 8001518:	d011      	beq.n	800153e <__ledf2+0x56>
 800151a:	42ab      	cmp	r3, r5
 800151c:	d014      	beq.n	8001548 <__ledf2+0x60>
 800151e:	2a00      	cmp	r2, #0
 8001520:	d12f      	bne.n	8001582 <__ledf2+0x9a>
 8001522:	433c      	orrs	r4, r7
 8001524:	46a3      	mov	fp, r4
 8001526:	4265      	negs	r5, r4
 8001528:	4165      	adcs	r5, r4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d114      	bne.n	8001558 <__ledf2+0x70>
 800152e:	464c      	mov	r4, r9
 8001530:	4326      	orrs	r6, r4
 8001532:	d111      	bne.n	8001558 <__ledf2+0x70>
 8001534:	465b      	mov	r3, fp
 8001536:	2000      	movs	r0, #0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d017      	beq.n	800156c <__ledf2+0x84>
 800153c:	e010      	b.n	8001560 <__ledf2+0x78>
 800153e:	003d      	movs	r5, r7
 8001540:	4325      	orrs	r5, r4
 8001542:	d112      	bne.n	800156a <__ledf2+0x82>
 8001544:	4293      	cmp	r3, r2
 8001546:	d11c      	bne.n	8001582 <__ledf2+0x9a>
 8001548:	464d      	mov	r5, r9
 800154a:	432e      	orrs	r6, r5
 800154c:	d10d      	bne.n	800156a <__ledf2+0x82>
 800154e:	2a00      	cmp	r2, #0
 8001550:	d104      	bne.n	800155c <__ledf2+0x74>
 8001552:	433c      	orrs	r4, r7
 8001554:	4265      	negs	r5, r4
 8001556:	4165      	adcs	r5, r4
 8001558:	2d00      	cmp	r5, #0
 800155a:	d10d      	bne.n	8001578 <__ledf2+0x90>
 800155c:	4281      	cmp	r1, r0
 800155e:	d016      	beq.n	800158e <__ledf2+0xa6>
 8001560:	2002      	movs	r0, #2
 8001562:	3901      	subs	r1, #1
 8001564:	4008      	ands	r0, r1
 8001566:	3801      	subs	r0, #1
 8001568:	e000      	b.n	800156c <__ledf2+0x84>
 800156a:	2002      	movs	r0, #2
 800156c:	bcf0      	pop	{r4, r5, r6, r7}
 800156e:	46bb      	mov	fp, r7
 8001570:	46b2      	mov	sl, r6
 8001572:	46a9      	mov	r9, r5
 8001574:	46a0      	mov	r8, r4
 8001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001578:	2800      	cmp	r0, #0
 800157a:	d1f7      	bne.n	800156c <__ledf2+0x84>
 800157c:	2001      	movs	r0, #1
 800157e:	4240      	negs	r0, r0
 8001580:	e7f4      	b.n	800156c <__ledf2+0x84>
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ea      	bne.n	800155c <__ledf2+0x74>
 8001586:	464c      	mov	r4, r9
 8001588:	4326      	orrs	r6, r4
 800158a:	d1e7      	bne.n	800155c <__ledf2+0x74>
 800158c:	e7e8      	b.n	8001560 <__ledf2+0x78>
 800158e:	429a      	cmp	r2, r3
 8001590:	dd06      	ble.n	80015a0 <__ledf2+0xb8>
 8001592:	4243      	negs	r3, r0
 8001594:	4158      	adcs	r0, r3
 8001596:	2302      	movs	r3, #2
 8001598:	4240      	negs	r0, r0
 800159a:	4018      	ands	r0, r3
 800159c:	3801      	subs	r0, #1
 800159e:	e7e5      	b.n	800156c <__ledf2+0x84>
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbe9      	blt.n	8001578 <__ledf2+0x90>
 80015a4:	454f      	cmp	r7, r9
 80015a6:	d8db      	bhi.n	8001560 <__ledf2+0x78>
 80015a8:	d006      	beq.n	80015b8 <__ledf2+0xd0>
 80015aa:	2000      	movs	r0, #0
 80015ac:	454f      	cmp	r7, r9
 80015ae:	d2dd      	bcs.n	800156c <__ledf2+0x84>
 80015b0:	2900      	cmp	r1, #0
 80015b2:	d0e3      	beq.n	800157c <__ledf2+0x94>
 80015b4:	0008      	movs	r0, r1
 80015b6:	e7d9      	b.n	800156c <__ledf2+0x84>
 80015b8:	45c4      	cmp	ip, r8
 80015ba:	d8d1      	bhi.n	8001560 <__ledf2+0x78>
 80015bc:	2000      	movs	r0, #0
 80015be:	45c4      	cmp	ip, r8
 80015c0:	d2d4      	bcs.n	800156c <__ledf2+0x84>
 80015c2:	e7f5      	b.n	80015b0 <__ledf2+0xc8>
 80015c4:	000007ff 	.word	0x000007ff

080015c8 <__aeabi_dmul>:
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	4657      	mov	r7, sl
 80015cc:	464e      	mov	r6, r9
 80015ce:	4645      	mov	r5, r8
 80015d0:	46de      	mov	lr, fp
 80015d2:	b5e0      	push	{r5, r6, r7, lr}
 80015d4:	4698      	mov	r8, r3
 80015d6:	030c      	lsls	r4, r1, #12
 80015d8:	004b      	lsls	r3, r1, #1
 80015da:	0006      	movs	r6, r0
 80015dc:	4692      	mov	sl, r2
 80015de:	b087      	sub	sp, #28
 80015e0:	0b24      	lsrs	r4, r4, #12
 80015e2:	0d5b      	lsrs	r3, r3, #21
 80015e4:	0fcf      	lsrs	r7, r1, #31
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d06c      	beq.n	80016c4 <__aeabi_dmul+0xfc>
 80015ea:	4add      	ldr	r2, [pc, #884]	; (8001960 <__aeabi_dmul+0x398>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dmul+0x2a>
 80015f0:	e086      	b.n	8001700 <__aeabi_dmul+0x138>
 80015f2:	0f42      	lsrs	r2, r0, #29
 80015f4:	00e4      	lsls	r4, r4, #3
 80015f6:	4314      	orrs	r4, r2
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	0412      	lsls	r2, r2, #16
 80015fc:	4314      	orrs	r4, r2
 80015fe:	4ad9      	ldr	r2, [pc, #868]	; (8001964 <__aeabi_dmul+0x39c>)
 8001600:	00c5      	lsls	r5, r0, #3
 8001602:	4694      	mov	ip, r2
 8001604:	4463      	add	r3, ip
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2300      	movs	r3, #0
 800160a:	4699      	mov	r9, r3
 800160c:	469b      	mov	fp, r3
 800160e:	4643      	mov	r3, r8
 8001610:	4642      	mov	r2, r8
 8001612:	031e      	lsls	r6, r3, #12
 8001614:	0fd2      	lsrs	r2, r2, #31
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4650      	mov	r0, sl
 800161a:	4690      	mov	r8, r2
 800161c:	0b36      	lsrs	r6, r6, #12
 800161e:	0d5b      	lsrs	r3, r3, #21
 8001620:	d100      	bne.n	8001624 <__aeabi_dmul+0x5c>
 8001622:	e078      	b.n	8001716 <__aeabi_dmul+0x14e>
 8001624:	4ace      	ldr	r2, [pc, #824]	; (8001960 <__aeabi_dmul+0x398>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01d      	beq.n	8001666 <__aeabi_dmul+0x9e>
 800162a:	49ce      	ldr	r1, [pc, #824]	; (8001964 <__aeabi_dmul+0x39c>)
 800162c:	0f42      	lsrs	r2, r0, #29
 800162e:	468c      	mov	ip, r1
 8001630:	9900      	ldr	r1, [sp, #0]
 8001632:	4463      	add	r3, ip
 8001634:	00f6      	lsls	r6, r6, #3
 8001636:	468c      	mov	ip, r1
 8001638:	4316      	orrs	r6, r2
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	449c      	add	ip, r3
 800163e:	0412      	lsls	r2, r2, #16
 8001640:	4663      	mov	r3, ip
 8001642:	4316      	orrs	r6, r2
 8001644:	00c2      	lsls	r2, r0, #3
 8001646:	2000      	movs	r0, #0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	9900      	ldr	r1, [sp, #0]
 800164c:	4643      	mov	r3, r8
 800164e:	3101      	adds	r1, #1
 8001650:	468c      	mov	ip, r1
 8001652:	4649      	mov	r1, r9
 8001654:	407b      	eors	r3, r7
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	290f      	cmp	r1, #15
 800165a:	d900      	bls.n	800165e <__aeabi_dmul+0x96>
 800165c:	e07e      	b.n	800175c <__aeabi_dmul+0x194>
 800165e:	4bc2      	ldr	r3, [pc, #776]	; (8001968 <__aeabi_dmul+0x3a0>)
 8001660:	0089      	lsls	r1, r1, #2
 8001662:	5859      	ldr	r1, [r3, r1]
 8001664:	468f      	mov	pc, r1
 8001666:	4652      	mov	r2, sl
 8001668:	9b00      	ldr	r3, [sp, #0]
 800166a:	4332      	orrs	r2, r6
 800166c:	d000      	beq.n	8001670 <__aeabi_dmul+0xa8>
 800166e:	e156      	b.n	800191e <__aeabi_dmul+0x356>
 8001670:	49bb      	ldr	r1, [pc, #748]	; (8001960 <__aeabi_dmul+0x398>)
 8001672:	2600      	movs	r6, #0
 8001674:	468c      	mov	ip, r1
 8001676:	4463      	add	r3, ip
 8001678:	4649      	mov	r1, r9
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2302      	movs	r3, #2
 800167e:	4319      	orrs	r1, r3
 8001680:	4689      	mov	r9, r1
 8001682:	2002      	movs	r0, #2
 8001684:	e7e1      	b.n	800164a <__aeabi_dmul+0x82>
 8001686:	4643      	mov	r3, r8
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	0034      	movs	r4, r6
 800168c:	0015      	movs	r5, r2
 800168e:	4683      	mov	fp, r0
 8001690:	465b      	mov	r3, fp
 8001692:	2b02      	cmp	r3, #2
 8001694:	d05e      	beq.n	8001754 <__aeabi_dmul+0x18c>
 8001696:	2b03      	cmp	r3, #3
 8001698:	d100      	bne.n	800169c <__aeabi_dmul+0xd4>
 800169a:	e1f3      	b.n	8001a84 <__aeabi_dmul+0x4bc>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d000      	beq.n	80016a2 <__aeabi_dmul+0xda>
 80016a0:	e118      	b.n	80018d4 <__aeabi_dmul+0x30c>
 80016a2:	2200      	movs	r2, #0
 80016a4:	2400      	movs	r4, #0
 80016a6:	2500      	movs	r5, #0
 80016a8:	9b01      	ldr	r3, [sp, #4]
 80016aa:	0512      	lsls	r2, r2, #20
 80016ac:	4322      	orrs	r2, r4
 80016ae:	07db      	lsls	r3, r3, #31
 80016b0:	431a      	orrs	r2, r3
 80016b2:	0028      	movs	r0, r5
 80016b4:	0011      	movs	r1, r2
 80016b6:	b007      	add	sp, #28
 80016b8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ba:	46bb      	mov	fp, r7
 80016bc:	46b2      	mov	sl, r6
 80016be:	46a9      	mov	r9, r5
 80016c0:	46a0      	mov	r8, r4
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	0025      	movs	r5, r4
 80016c6:	4305      	orrs	r5, r0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x104>
 80016ca:	e141      	b.n	8001950 <__aeabi_dmul+0x388>
 80016cc:	2c00      	cmp	r4, #0
 80016ce:	d100      	bne.n	80016d2 <__aeabi_dmul+0x10a>
 80016d0:	e1ad      	b.n	8001a2e <__aeabi_dmul+0x466>
 80016d2:	0020      	movs	r0, r4
 80016d4:	f000 fe20 	bl	8002318 <__clzsi2>
 80016d8:	0001      	movs	r1, r0
 80016da:	0002      	movs	r2, r0
 80016dc:	390b      	subs	r1, #11
 80016de:	231d      	movs	r3, #29
 80016e0:	0010      	movs	r0, r2
 80016e2:	1a5b      	subs	r3, r3, r1
 80016e4:	0031      	movs	r1, r6
 80016e6:	0035      	movs	r5, r6
 80016e8:	3808      	subs	r0, #8
 80016ea:	4084      	lsls	r4, r0
 80016ec:	40d9      	lsrs	r1, r3
 80016ee:	4085      	lsls	r5, r0
 80016f0:	430c      	orrs	r4, r1
 80016f2:	489e      	ldr	r0, [pc, #632]	; (800196c <__aeabi_dmul+0x3a4>)
 80016f4:	1a83      	subs	r3, r0, r2
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	4699      	mov	r9, r3
 80016fc:	469b      	mov	fp, r3
 80016fe:	e786      	b.n	800160e <__aeabi_dmul+0x46>
 8001700:	0005      	movs	r5, r0
 8001702:	4325      	orrs	r5, r4
 8001704:	d000      	beq.n	8001708 <__aeabi_dmul+0x140>
 8001706:	e11c      	b.n	8001942 <__aeabi_dmul+0x37a>
 8001708:	2208      	movs	r2, #8
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2302      	movs	r3, #2
 800170e:	2400      	movs	r4, #0
 8001710:	4691      	mov	r9, r2
 8001712:	469b      	mov	fp, r3
 8001714:	e77b      	b.n	800160e <__aeabi_dmul+0x46>
 8001716:	4652      	mov	r2, sl
 8001718:	4332      	orrs	r2, r6
 800171a:	d100      	bne.n	800171e <__aeabi_dmul+0x156>
 800171c:	e10a      	b.n	8001934 <__aeabi_dmul+0x36c>
 800171e:	2e00      	cmp	r6, #0
 8001720:	d100      	bne.n	8001724 <__aeabi_dmul+0x15c>
 8001722:	e176      	b.n	8001a12 <__aeabi_dmul+0x44a>
 8001724:	0030      	movs	r0, r6
 8001726:	f000 fdf7 	bl	8002318 <__clzsi2>
 800172a:	0002      	movs	r2, r0
 800172c:	3a0b      	subs	r2, #11
 800172e:	231d      	movs	r3, #29
 8001730:	0001      	movs	r1, r0
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	4652      	mov	r2, sl
 8001736:	3908      	subs	r1, #8
 8001738:	40da      	lsrs	r2, r3
 800173a:	408e      	lsls	r6, r1
 800173c:	4316      	orrs	r6, r2
 800173e:	4652      	mov	r2, sl
 8001740:	408a      	lsls	r2, r1
 8001742:	9b00      	ldr	r3, [sp, #0]
 8001744:	4989      	ldr	r1, [pc, #548]	; (800196c <__aeabi_dmul+0x3a4>)
 8001746:	1a18      	subs	r0, r3, r0
 8001748:	0003      	movs	r3, r0
 800174a:	468c      	mov	ip, r1
 800174c:	4463      	add	r3, ip
 800174e:	2000      	movs	r0, #0
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	e77a      	b.n	800164a <__aeabi_dmul+0x82>
 8001754:	2400      	movs	r4, #0
 8001756:	2500      	movs	r5, #0
 8001758:	4a81      	ldr	r2, [pc, #516]	; (8001960 <__aeabi_dmul+0x398>)
 800175a:	e7a5      	b.n	80016a8 <__aeabi_dmul+0xe0>
 800175c:	0c2f      	lsrs	r7, r5, #16
 800175e:	042d      	lsls	r5, r5, #16
 8001760:	0c2d      	lsrs	r5, r5, #16
 8001762:	002b      	movs	r3, r5
 8001764:	0c11      	lsrs	r1, r2, #16
 8001766:	0412      	lsls	r2, r2, #16
 8001768:	0c12      	lsrs	r2, r2, #16
 800176a:	4353      	muls	r3, r2
 800176c:	4698      	mov	r8, r3
 800176e:	0013      	movs	r3, r2
 8001770:	0028      	movs	r0, r5
 8001772:	437b      	muls	r3, r7
 8001774:	4699      	mov	r9, r3
 8001776:	4348      	muls	r0, r1
 8001778:	4448      	add	r0, r9
 800177a:	4683      	mov	fp, r0
 800177c:	4640      	mov	r0, r8
 800177e:	000b      	movs	r3, r1
 8001780:	0c00      	lsrs	r0, r0, #16
 8001782:	4682      	mov	sl, r0
 8001784:	4658      	mov	r0, fp
 8001786:	437b      	muls	r3, r7
 8001788:	4450      	add	r0, sl
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	4581      	cmp	r9, r0
 800178e:	d906      	bls.n	800179e <__aeabi_dmul+0x1d6>
 8001790:	469a      	mov	sl, r3
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	025b      	lsls	r3, r3, #9
 8001796:	4699      	mov	r9, r3
 8001798:	44ca      	add	sl, r9
 800179a:	4653      	mov	r3, sl
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	0c03      	lsrs	r3, r0, #16
 80017a0:	469b      	mov	fp, r3
 80017a2:	4643      	mov	r3, r8
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	0400      	lsls	r0, r0, #16
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	4698      	mov	r8, r3
 80017ac:	0003      	movs	r3, r0
 80017ae:	4443      	add	r3, r8
 80017b0:	9304      	str	r3, [sp, #16]
 80017b2:	0c33      	lsrs	r3, r6, #16
 80017b4:	4699      	mov	r9, r3
 80017b6:	002b      	movs	r3, r5
 80017b8:	0436      	lsls	r6, r6, #16
 80017ba:	0c36      	lsrs	r6, r6, #16
 80017bc:	4373      	muls	r3, r6
 80017be:	4698      	mov	r8, r3
 80017c0:	0033      	movs	r3, r6
 80017c2:	437b      	muls	r3, r7
 80017c4:	469a      	mov	sl, r3
 80017c6:	464b      	mov	r3, r9
 80017c8:	435d      	muls	r5, r3
 80017ca:	435f      	muls	r7, r3
 80017cc:	4643      	mov	r3, r8
 80017ce:	4455      	add	r5, sl
 80017d0:	0c18      	lsrs	r0, r3, #16
 80017d2:	1940      	adds	r0, r0, r5
 80017d4:	4582      	cmp	sl, r0
 80017d6:	d903      	bls.n	80017e0 <__aeabi_dmul+0x218>
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	025b      	lsls	r3, r3, #9
 80017dc:	469a      	mov	sl, r3
 80017de:	4457      	add	r7, sl
 80017e0:	0c05      	lsrs	r5, r0, #16
 80017e2:	19eb      	adds	r3, r5, r7
 80017e4:	9305      	str	r3, [sp, #20]
 80017e6:	4643      	mov	r3, r8
 80017e8:	041d      	lsls	r5, r3, #16
 80017ea:	0c2d      	lsrs	r5, r5, #16
 80017ec:	0400      	lsls	r0, r0, #16
 80017ee:	1940      	adds	r0, r0, r5
 80017f0:	0c25      	lsrs	r5, r4, #16
 80017f2:	0424      	lsls	r4, r4, #16
 80017f4:	0c24      	lsrs	r4, r4, #16
 80017f6:	0027      	movs	r7, r4
 80017f8:	4357      	muls	r7, r2
 80017fa:	436a      	muls	r2, r5
 80017fc:	4690      	mov	r8, r2
 80017fe:	002a      	movs	r2, r5
 8001800:	0c3b      	lsrs	r3, r7, #16
 8001802:	469a      	mov	sl, r3
 8001804:	434a      	muls	r2, r1
 8001806:	4361      	muls	r1, r4
 8001808:	4441      	add	r1, r8
 800180a:	4451      	add	r1, sl
 800180c:	4483      	add	fp, r0
 800180e:	4588      	cmp	r8, r1
 8001810:	d903      	bls.n	800181a <__aeabi_dmul+0x252>
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	025b      	lsls	r3, r3, #9
 8001816:	4698      	mov	r8, r3
 8001818:	4442      	add	r2, r8
 800181a:	043f      	lsls	r7, r7, #16
 800181c:	0c0b      	lsrs	r3, r1, #16
 800181e:	0c3f      	lsrs	r7, r7, #16
 8001820:	0409      	lsls	r1, r1, #16
 8001822:	19c9      	adds	r1, r1, r7
 8001824:	0027      	movs	r7, r4
 8001826:	4698      	mov	r8, r3
 8001828:	464b      	mov	r3, r9
 800182a:	4377      	muls	r7, r6
 800182c:	435c      	muls	r4, r3
 800182e:	436e      	muls	r6, r5
 8001830:	435d      	muls	r5, r3
 8001832:	0c3b      	lsrs	r3, r7, #16
 8001834:	4699      	mov	r9, r3
 8001836:	19a4      	adds	r4, r4, r6
 8001838:	444c      	add	r4, r9
 800183a:	4442      	add	r2, r8
 800183c:	9503      	str	r5, [sp, #12]
 800183e:	42a6      	cmp	r6, r4
 8001840:	d904      	bls.n	800184c <__aeabi_dmul+0x284>
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	025b      	lsls	r3, r3, #9
 8001846:	4698      	mov	r8, r3
 8001848:	4445      	add	r5, r8
 800184a:	9503      	str	r5, [sp, #12]
 800184c:	9b02      	ldr	r3, [sp, #8]
 800184e:	043f      	lsls	r7, r7, #16
 8001850:	445b      	add	r3, fp
 8001852:	001e      	movs	r6, r3
 8001854:	4283      	cmp	r3, r0
 8001856:	4180      	sbcs	r0, r0
 8001858:	0423      	lsls	r3, r4, #16
 800185a:	4698      	mov	r8, r3
 800185c:	9b05      	ldr	r3, [sp, #20]
 800185e:	0c3f      	lsrs	r7, r7, #16
 8001860:	4447      	add	r7, r8
 8001862:	4698      	mov	r8, r3
 8001864:	1876      	adds	r6, r6, r1
 8001866:	428e      	cmp	r6, r1
 8001868:	4189      	sbcs	r1, r1
 800186a:	4447      	add	r7, r8
 800186c:	4240      	negs	r0, r0
 800186e:	183d      	adds	r5, r7, r0
 8001870:	46a8      	mov	r8, r5
 8001872:	4693      	mov	fp, r2
 8001874:	4249      	negs	r1, r1
 8001876:	468a      	mov	sl, r1
 8001878:	44c3      	add	fp, r8
 800187a:	429f      	cmp	r7, r3
 800187c:	41bf      	sbcs	r7, r7
 800187e:	4580      	cmp	r8, r0
 8001880:	4180      	sbcs	r0, r0
 8001882:	9b03      	ldr	r3, [sp, #12]
 8001884:	44da      	add	sl, fp
 8001886:	4698      	mov	r8, r3
 8001888:	4653      	mov	r3, sl
 800188a:	4240      	negs	r0, r0
 800188c:	427f      	negs	r7, r7
 800188e:	4307      	orrs	r7, r0
 8001890:	0c24      	lsrs	r4, r4, #16
 8001892:	4593      	cmp	fp, r2
 8001894:	4192      	sbcs	r2, r2
 8001896:	458a      	cmp	sl, r1
 8001898:	4189      	sbcs	r1, r1
 800189a:	193f      	adds	r7, r7, r4
 800189c:	0ddc      	lsrs	r4, r3, #23
 800189e:	9b04      	ldr	r3, [sp, #16]
 80018a0:	0275      	lsls	r5, r6, #9
 80018a2:	431d      	orrs	r5, r3
 80018a4:	1e68      	subs	r0, r5, #1
 80018a6:	4185      	sbcs	r5, r0
 80018a8:	4653      	mov	r3, sl
 80018aa:	4252      	negs	r2, r2
 80018ac:	4249      	negs	r1, r1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	18bf      	adds	r7, r7, r2
 80018b2:	4447      	add	r7, r8
 80018b4:	0df6      	lsrs	r6, r6, #23
 80018b6:	027f      	lsls	r7, r7, #9
 80018b8:	4335      	orrs	r5, r6
 80018ba:	025a      	lsls	r2, r3, #9
 80018bc:	433c      	orrs	r4, r7
 80018be:	4315      	orrs	r5, r2
 80018c0:	01fb      	lsls	r3, r7, #7
 80018c2:	d400      	bmi.n	80018c6 <__aeabi_dmul+0x2fe>
 80018c4:	e0c1      	b.n	8001a4a <__aeabi_dmul+0x482>
 80018c6:	2101      	movs	r1, #1
 80018c8:	086a      	lsrs	r2, r5, #1
 80018ca:	400d      	ands	r5, r1
 80018cc:	4315      	orrs	r5, r2
 80018ce:	07e2      	lsls	r2, r4, #31
 80018d0:	4315      	orrs	r5, r2
 80018d2:	0864      	lsrs	r4, r4, #1
 80018d4:	4926      	ldr	r1, [pc, #152]	; (8001970 <__aeabi_dmul+0x3a8>)
 80018d6:	4461      	add	r1, ip
 80018d8:	2900      	cmp	r1, #0
 80018da:	dd56      	ble.n	800198a <__aeabi_dmul+0x3c2>
 80018dc:	076b      	lsls	r3, r5, #29
 80018de:	d009      	beq.n	80018f4 <__aeabi_dmul+0x32c>
 80018e0:	220f      	movs	r2, #15
 80018e2:	402a      	ands	r2, r5
 80018e4:	2a04      	cmp	r2, #4
 80018e6:	d005      	beq.n	80018f4 <__aeabi_dmul+0x32c>
 80018e8:	1d2a      	adds	r2, r5, #4
 80018ea:	42aa      	cmp	r2, r5
 80018ec:	41ad      	sbcs	r5, r5
 80018ee:	426d      	negs	r5, r5
 80018f0:	1964      	adds	r4, r4, r5
 80018f2:	0015      	movs	r5, r2
 80018f4:	01e3      	lsls	r3, r4, #7
 80018f6:	d504      	bpl.n	8001902 <__aeabi_dmul+0x33a>
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <__aeabi_dmul+0x3ac>)
 80018fc:	00c9      	lsls	r1, r1, #3
 80018fe:	4014      	ands	r4, r2
 8001900:	4461      	add	r1, ip
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <__aeabi_dmul+0x3b0>)
 8001904:	4291      	cmp	r1, r2
 8001906:	dd00      	ble.n	800190a <__aeabi_dmul+0x342>
 8001908:	e724      	b.n	8001754 <__aeabi_dmul+0x18c>
 800190a:	0762      	lsls	r2, r4, #29
 800190c:	08ed      	lsrs	r5, r5, #3
 800190e:	0264      	lsls	r4, r4, #9
 8001910:	0549      	lsls	r1, r1, #21
 8001912:	4315      	orrs	r5, r2
 8001914:	0b24      	lsrs	r4, r4, #12
 8001916:	0d4a      	lsrs	r2, r1, #21
 8001918:	e6c6      	b.n	80016a8 <__aeabi_dmul+0xe0>
 800191a:	9701      	str	r7, [sp, #4]
 800191c:	e6b8      	b.n	8001690 <__aeabi_dmul+0xc8>
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <__aeabi_dmul+0x398>)
 8001920:	2003      	movs	r0, #3
 8001922:	4694      	mov	ip, r2
 8001924:	4463      	add	r3, ip
 8001926:	464a      	mov	r2, r9
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2303      	movs	r3, #3
 800192c:	431a      	orrs	r2, r3
 800192e:	4691      	mov	r9, r2
 8001930:	4652      	mov	r2, sl
 8001932:	e68a      	b.n	800164a <__aeabi_dmul+0x82>
 8001934:	4649      	mov	r1, r9
 8001936:	2301      	movs	r3, #1
 8001938:	4319      	orrs	r1, r3
 800193a:	4689      	mov	r9, r1
 800193c:	2600      	movs	r6, #0
 800193e:	2001      	movs	r0, #1
 8001940:	e683      	b.n	800164a <__aeabi_dmul+0x82>
 8001942:	220c      	movs	r2, #12
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2303      	movs	r3, #3
 8001948:	0005      	movs	r5, r0
 800194a:	4691      	mov	r9, r2
 800194c:	469b      	mov	fp, r3
 800194e:	e65e      	b.n	800160e <__aeabi_dmul+0x46>
 8001950:	2304      	movs	r3, #4
 8001952:	4699      	mov	r9, r3
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	2400      	movs	r4, #0
 800195c:	469b      	mov	fp, r3
 800195e:	e656      	b.n	800160e <__aeabi_dmul+0x46>
 8001960:	000007ff 	.word	0x000007ff
 8001964:	fffffc01 	.word	0xfffffc01
 8001968:	08010d28 	.word	0x08010d28
 800196c:	fffffc0d 	.word	0xfffffc0d
 8001970:	000003ff 	.word	0x000003ff
 8001974:	feffffff 	.word	0xfeffffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	2300      	movs	r3, #0
 800197e:	2480      	movs	r4, #128	; 0x80
 8001980:	2500      	movs	r5, #0
 8001982:	4a44      	ldr	r2, [pc, #272]	; (8001a94 <__aeabi_dmul+0x4cc>)
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	0324      	lsls	r4, r4, #12
 8001988:	e68e      	b.n	80016a8 <__aeabi_dmul+0xe0>
 800198a:	2001      	movs	r0, #1
 800198c:	1a40      	subs	r0, r0, r1
 800198e:	2838      	cmp	r0, #56	; 0x38
 8001990:	dd00      	ble.n	8001994 <__aeabi_dmul+0x3cc>
 8001992:	e686      	b.n	80016a2 <__aeabi_dmul+0xda>
 8001994:	281f      	cmp	r0, #31
 8001996:	dd5b      	ble.n	8001a50 <__aeabi_dmul+0x488>
 8001998:	221f      	movs	r2, #31
 800199a:	0023      	movs	r3, r4
 800199c:	4252      	negs	r2, r2
 800199e:	1a51      	subs	r1, r2, r1
 80019a0:	40cb      	lsrs	r3, r1
 80019a2:	0019      	movs	r1, r3
 80019a4:	2820      	cmp	r0, #32
 80019a6:	d003      	beq.n	80019b0 <__aeabi_dmul+0x3e8>
 80019a8:	4a3b      	ldr	r2, [pc, #236]	; (8001a98 <__aeabi_dmul+0x4d0>)
 80019aa:	4462      	add	r2, ip
 80019ac:	4094      	lsls	r4, r2
 80019ae:	4325      	orrs	r5, r4
 80019b0:	1e6a      	subs	r2, r5, #1
 80019b2:	4195      	sbcs	r5, r2
 80019b4:	002a      	movs	r2, r5
 80019b6:	430a      	orrs	r2, r1
 80019b8:	2107      	movs	r1, #7
 80019ba:	000d      	movs	r5, r1
 80019bc:	2400      	movs	r4, #0
 80019be:	4015      	ands	r5, r2
 80019c0:	4211      	tst	r1, r2
 80019c2:	d05b      	beq.n	8001a7c <__aeabi_dmul+0x4b4>
 80019c4:	210f      	movs	r1, #15
 80019c6:	2400      	movs	r4, #0
 80019c8:	4011      	ands	r1, r2
 80019ca:	2904      	cmp	r1, #4
 80019cc:	d053      	beq.n	8001a76 <__aeabi_dmul+0x4ae>
 80019ce:	1d11      	adds	r1, r2, #4
 80019d0:	4291      	cmp	r1, r2
 80019d2:	4192      	sbcs	r2, r2
 80019d4:	4252      	negs	r2, r2
 80019d6:	18a4      	adds	r4, r4, r2
 80019d8:	000a      	movs	r2, r1
 80019da:	0223      	lsls	r3, r4, #8
 80019dc:	d54b      	bpl.n	8001a76 <__aeabi_dmul+0x4ae>
 80019de:	2201      	movs	r2, #1
 80019e0:	2400      	movs	r4, #0
 80019e2:	2500      	movs	r5, #0
 80019e4:	e660      	b.n	80016a8 <__aeabi_dmul+0xe0>
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	031b      	lsls	r3, r3, #12
 80019ea:	421c      	tst	r4, r3
 80019ec:	d009      	beq.n	8001a02 <__aeabi_dmul+0x43a>
 80019ee:	421e      	tst	r6, r3
 80019f0:	d107      	bne.n	8001a02 <__aeabi_dmul+0x43a>
 80019f2:	4333      	orrs	r3, r6
 80019f4:	031c      	lsls	r4, r3, #12
 80019f6:	4643      	mov	r3, r8
 80019f8:	0015      	movs	r5, r2
 80019fa:	0b24      	lsrs	r4, r4, #12
 80019fc:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <__aeabi_dmul+0x4cc>)
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	e652      	b.n	80016a8 <__aeabi_dmul+0xe0>
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0312      	lsls	r2, r2, #12
 8001a06:	4314      	orrs	r4, r2
 8001a08:	0324      	lsls	r4, r4, #12
 8001a0a:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <__aeabi_dmul+0x4cc>)
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	9701      	str	r7, [sp, #4]
 8001a10:	e64a      	b.n	80016a8 <__aeabi_dmul+0xe0>
 8001a12:	f000 fc81 	bl	8002318 <__clzsi2>
 8001a16:	0003      	movs	r3, r0
 8001a18:	001a      	movs	r2, r3
 8001a1a:	3215      	adds	r2, #21
 8001a1c:	3020      	adds	r0, #32
 8001a1e:	2a1c      	cmp	r2, #28
 8001a20:	dc00      	bgt.n	8001a24 <__aeabi_dmul+0x45c>
 8001a22:	e684      	b.n	800172e <__aeabi_dmul+0x166>
 8001a24:	4656      	mov	r6, sl
 8001a26:	3b08      	subs	r3, #8
 8001a28:	2200      	movs	r2, #0
 8001a2a:	409e      	lsls	r6, r3
 8001a2c:	e689      	b.n	8001742 <__aeabi_dmul+0x17a>
 8001a2e:	f000 fc73 	bl	8002318 <__clzsi2>
 8001a32:	0001      	movs	r1, r0
 8001a34:	0002      	movs	r2, r0
 8001a36:	3115      	adds	r1, #21
 8001a38:	3220      	adds	r2, #32
 8001a3a:	291c      	cmp	r1, #28
 8001a3c:	dc00      	bgt.n	8001a40 <__aeabi_dmul+0x478>
 8001a3e:	e64e      	b.n	80016de <__aeabi_dmul+0x116>
 8001a40:	0034      	movs	r4, r6
 8001a42:	3808      	subs	r0, #8
 8001a44:	2500      	movs	r5, #0
 8001a46:	4084      	lsls	r4, r0
 8001a48:	e653      	b.n	80016f2 <__aeabi_dmul+0x12a>
 8001a4a:	9b00      	ldr	r3, [sp, #0]
 8001a4c:	469c      	mov	ip, r3
 8001a4e:	e741      	b.n	80018d4 <__aeabi_dmul+0x30c>
 8001a50:	4912      	ldr	r1, [pc, #72]	; (8001a9c <__aeabi_dmul+0x4d4>)
 8001a52:	0022      	movs	r2, r4
 8001a54:	4461      	add	r1, ip
 8001a56:	002e      	movs	r6, r5
 8001a58:	408d      	lsls	r5, r1
 8001a5a:	408a      	lsls	r2, r1
 8001a5c:	40c6      	lsrs	r6, r0
 8001a5e:	1e69      	subs	r1, r5, #1
 8001a60:	418d      	sbcs	r5, r1
 8001a62:	4332      	orrs	r2, r6
 8001a64:	432a      	orrs	r2, r5
 8001a66:	40c4      	lsrs	r4, r0
 8001a68:	0753      	lsls	r3, r2, #29
 8001a6a:	d0b6      	beq.n	80019da <__aeabi_dmul+0x412>
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	4011      	ands	r1, r2
 8001a70:	2904      	cmp	r1, #4
 8001a72:	d1ac      	bne.n	80019ce <__aeabi_dmul+0x406>
 8001a74:	e7b1      	b.n	80019da <__aeabi_dmul+0x412>
 8001a76:	0765      	lsls	r5, r4, #29
 8001a78:	0264      	lsls	r4, r4, #9
 8001a7a:	0b24      	lsrs	r4, r4, #12
 8001a7c:	08d2      	lsrs	r2, r2, #3
 8001a7e:	4315      	orrs	r5, r2
 8001a80:	2200      	movs	r2, #0
 8001a82:	e611      	b.n	80016a8 <__aeabi_dmul+0xe0>
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	0312      	lsls	r2, r2, #12
 8001a88:	4314      	orrs	r4, r2
 8001a8a:	0324      	lsls	r4, r4, #12
 8001a8c:	4a01      	ldr	r2, [pc, #4]	; (8001a94 <__aeabi_dmul+0x4cc>)
 8001a8e:	0b24      	lsrs	r4, r4, #12
 8001a90:	e60a      	b.n	80016a8 <__aeabi_dmul+0xe0>
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	000007ff 	.word	0x000007ff
 8001a98:	0000043e 	.word	0x0000043e
 8001a9c:	0000041e 	.word	0x0000041e

08001aa0 <__aeabi_dsub>:
 8001aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa2:	4657      	mov	r7, sl
 8001aa4:	464e      	mov	r6, r9
 8001aa6:	4645      	mov	r5, r8
 8001aa8:	46de      	mov	lr, fp
 8001aaa:	0004      	movs	r4, r0
 8001aac:	b5e0      	push	{r5, r6, r7, lr}
 8001aae:	001f      	movs	r7, r3
 8001ab0:	0010      	movs	r0, r2
 8001ab2:	030b      	lsls	r3, r1, #12
 8001ab4:	0f62      	lsrs	r2, r4, #29
 8001ab6:	004e      	lsls	r6, r1, #1
 8001ab8:	0fcd      	lsrs	r5, r1, #31
 8001aba:	0a5b      	lsrs	r3, r3, #9
 8001abc:	0339      	lsls	r1, r7, #12
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	0a49      	lsrs	r1, r1, #9
 8001ac2:	00e2      	lsls	r2, r4, #3
 8001ac4:	0f44      	lsrs	r4, r0, #29
 8001ac6:	4321      	orrs	r1, r4
 8001ac8:	4cc2      	ldr	r4, [pc, #776]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001aca:	4691      	mov	r9, r2
 8001acc:	4692      	mov	sl, r2
 8001ace:	00c0      	lsls	r0, r0, #3
 8001ad0:	007a      	lsls	r2, r7, #1
 8001ad2:	4680      	mov	r8, r0
 8001ad4:	0d76      	lsrs	r6, r6, #21
 8001ad6:	0d52      	lsrs	r2, r2, #21
 8001ad8:	0fff      	lsrs	r7, r7, #31
 8001ada:	42a2      	cmp	r2, r4
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_dsub+0x40>
 8001ade:	e0b4      	b.n	8001c4a <__aeabi_dsub+0x1aa>
 8001ae0:	2401      	movs	r4, #1
 8001ae2:	4067      	eors	r7, r4
 8001ae4:	46bb      	mov	fp, r7
 8001ae6:	42bd      	cmp	r5, r7
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x4c>
 8001aea:	e088      	b.n	8001bfe <__aeabi_dsub+0x15e>
 8001aec:	1ab4      	subs	r4, r6, r2
 8001aee:	46a4      	mov	ip, r4
 8001af0:	2c00      	cmp	r4, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dsub+0x56>
 8001af4:	e0b2      	b.n	8001c5c <__aeabi_dsub+0x1bc>
 8001af6:	2a00      	cmp	r2, #0
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x5c>
 8001afa:	e0c5      	b.n	8001c88 <__aeabi_dsub+0x1e8>
 8001afc:	4ab5      	ldr	r2, [pc, #724]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001afe:	4296      	cmp	r6, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x64>
 8001b02:	e28b      	b.n	800201c <__aeabi_dsub+0x57c>
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	0412      	lsls	r2, r2, #16
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	4662      	mov	r2, ip
 8001b0c:	2a38      	cmp	r2, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x72>
 8001b10:	e1a1      	b.n	8001e56 <__aeabi_dsub+0x3b6>
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x78>
 8001b16:	e216      	b.n	8001f46 <__aeabi_dsub+0x4a6>
 8001b18:	2720      	movs	r7, #32
 8001b1a:	000c      	movs	r4, r1
 8001b1c:	1abf      	subs	r7, r7, r2
 8001b1e:	40bc      	lsls	r4, r7
 8001b20:	0002      	movs	r2, r0
 8001b22:	46a0      	mov	r8, r4
 8001b24:	4664      	mov	r4, ip
 8001b26:	40b8      	lsls	r0, r7
 8001b28:	40e2      	lsrs	r2, r4
 8001b2a:	4644      	mov	r4, r8
 8001b2c:	4314      	orrs	r4, r2
 8001b2e:	0002      	movs	r2, r0
 8001b30:	1e50      	subs	r0, r2, #1
 8001b32:	4182      	sbcs	r2, r0
 8001b34:	4660      	mov	r0, ip
 8001b36:	40c1      	lsrs	r1, r0
 8001b38:	4322      	orrs	r2, r4
 8001b3a:	1a5b      	subs	r3, r3, r1
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	1a8c      	subs	r4, r1, r2
 8001b40:	45a1      	cmp	r9, r4
 8001b42:	4192      	sbcs	r2, r2
 8001b44:	4252      	negs	r2, r2
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	4698      	mov	r8, r3
 8001b4a:	4643      	mov	r3, r8
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	d400      	bmi.n	8001b52 <__aeabi_dsub+0xb2>
 8001b50:	e117      	b.n	8001d82 <__aeabi_dsub+0x2e2>
 8001b52:	4643      	mov	r3, r8
 8001b54:	025b      	lsls	r3, r3, #9
 8001b56:	0a5b      	lsrs	r3, r3, #9
 8001b58:	4698      	mov	r8, r3
 8001b5a:	4643      	mov	r3, r8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dsub+0xc2>
 8001b60:	e16c      	b.n	8001e3c <__aeabi_dsub+0x39c>
 8001b62:	4640      	mov	r0, r8
 8001b64:	f000 fbd8 	bl	8002318 <__clzsi2>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	3a08      	subs	r2, #8
 8001b6c:	2120      	movs	r1, #32
 8001b6e:	0020      	movs	r0, r4
 8001b70:	4643      	mov	r3, r8
 8001b72:	1a89      	subs	r1, r1, r2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	40c8      	lsrs	r0, r1
 8001b78:	4094      	lsls	r4, r2
 8001b7a:	4303      	orrs	r3, r0
 8001b7c:	4296      	cmp	r6, r2
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dsub+0xe2>
 8001b80:	e157      	b.n	8001e32 <__aeabi_dsub+0x392>
 8001b82:	1b96      	subs	r6, r2, r6
 8001b84:	1c71      	adds	r1, r6, #1
 8001b86:	291f      	cmp	r1, #31
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dsub+0xec>
 8001b8a:	e1cb      	b.n	8001f24 <__aeabi_dsub+0x484>
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	0018      	movs	r0, r3
 8001b90:	0026      	movs	r6, r4
 8001b92:	1a52      	subs	r2, r2, r1
 8001b94:	4094      	lsls	r4, r2
 8001b96:	4090      	lsls	r0, r2
 8001b98:	40ce      	lsrs	r6, r1
 8001b9a:	40cb      	lsrs	r3, r1
 8001b9c:	1e62      	subs	r2, r4, #1
 8001b9e:	4194      	sbcs	r4, r2
 8001ba0:	4330      	orrs	r0, r6
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	4304      	orrs	r4, r0
 8001ba8:	0763      	lsls	r3, r4, #29
 8001baa:	d009      	beq.n	8001bc0 <__aeabi_dsub+0x120>
 8001bac:	230f      	movs	r3, #15
 8001bae:	4023      	ands	r3, r4
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d005      	beq.n	8001bc0 <__aeabi_dsub+0x120>
 8001bb4:	1d23      	adds	r3, r4, #4
 8001bb6:	42a3      	cmp	r3, r4
 8001bb8:	41a4      	sbcs	r4, r4
 8001bba:	4264      	negs	r4, r4
 8001bbc:	44a0      	add	r8, r4
 8001bbe:	001c      	movs	r4, r3
 8001bc0:	4643      	mov	r3, r8
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	d400      	bmi.n	8001bc8 <__aeabi_dsub+0x128>
 8001bc6:	e0df      	b.n	8001d88 <__aeabi_dsub+0x2e8>
 8001bc8:	4b82      	ldr	r3, [pc, #520]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001bca:	3601      	adds	r6, #1
 8001bcc:	429e      	cmp	r6, r3
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x132>
 8001bd0:	e0fb      	b.n	8001dca <__aeabi_dsub+0x32a>
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	4b80      	ldr	r3, [pc, #512]	; (8001dd8 <__aeabi_dsub+0x338>)
 8001bd6:	08e4      	lsrs	r4, r4, #3
 8001bd8:	401a      	ands	r2, r3
 8001bda:	0013      	movs	r3, r2
 8001bdc:	0571      	lsls	r1, r6, #21
 8001bde:	0752      	lsls	r2, r2, #29
 8001be0:	025b      	lsls	r3, r3, #9
 8001be2:	4322      	orrs	r2, r4
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	0d49      	lsrs	r1, r1, #21
 8001be8:	0509      	lsls	r1, r1, #20
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	4319      	orrs	r1, r3
 8001bee:	4329      	orrs	r1, r5
 8001bf0:	0010      	movs	r0, r2
 8001bf2:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf4:	46bb      	mov	fp, r7
 8001bf6:	46b2      	mov	sl, r6
 8001bf8:	46a9      	mov	r9, r5
 8001bfa:	46a0      	mov	r8, r4
 8001bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bfe:	1ab4      	subs	r4, r6, r2
 8001c00:	46a4      	mov	ip, r4
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	dd58      	ble.n	8001cb8 <__aeabi_dsub+0x218>
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x16c>
 8001c0a:	e09e      	b.n	8001d4a <__aeabi_dsub+0x2aa>
 8001c0c:	4a71      	ldr	r2, [pc, #452]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001c0e:	4296      	cmp	r6, r2
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x174>
 8001c12:	e13b      	b.n	8001e8c <__aeabi_dsub+0x3ec>
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	0412      	lsls	r2, r2, #16
 8001c18:	4311      	orrs	r1, r2
 8001c1a:	4662      	mov	r2, ip
 8001c1c:	2a38      	cmp	r2, #56	; 0x38
 8001c1e:	dd00      	ble.n	8001c22 <__aeabi_dsub+0x182>
 8001c20:	e0c1      	b.n	8001da6 <__aeabi_dsub+0x306>
 8001c22:	2a1f      	cmp	r2, #31
 8001c24:	dc00      	bgt.n	8001c28 <__aeabi_dsub+0x188>
 8001c26:	e1bb      	b.n	8001fa0 <__aeabi_dsub+0x500>
 8001c28:	000c      	movs	r4, r1
 8001c2a:	3a20      	subs	r2, #32
 8001c2c:	40d4      	lsrs	r4, r2
 8001c2e:	0022      	movs	r2, r4
 8001c30:	4664      	mov	r4, ip
 8001c32:	2c20      	cmp	r4, #32
 8001c34:	d004      	beq.n	8001c40 <__aeabi_dsub+0x1a0>
 8001c36:	2740      	movs	r7, #64	; 0x40
 8001c38:	1b3f      	subs	r7, r7, r4
 8001c3a:	40b9      	lsls	r1, r7
 8001c3c:	4308      	orrs	r0, r1
 8001c3e:	4680      	mov	r8, r0
 8001c40:	4644      	mov	r4, r8
 8001c42:	1e61      	subs	r1, r4, #1
 8001c44:	418c      	sbcs	r4, r1
 8001c46:	4314      	orrs	r4, r2
 8001c48:	e0b1      	b.n	8001dae <__aeabi_dsub+0x30e>
 8001c4a:	000c      	movs	r4, r1
 8001c4c:	4304      	orrs	r4, r0
 8001c4e:	d02a      	beq.n	8001ca6 <__aeabi_dsub+0x206>
 8001c50:	46bb      	mov	fp, r7
 8001c52:	42bd      	cmp	r5, r7
 8001c54:	d02d      	beq.n	8001cb2 <__aeabi_dsub+0x212>
 8001c56:	4c61      	ldr	r4, [pc, #388]	; (8001ddc <__aeabi_dsub+0x33c>)
 8001c58:	46a4      	mov	ip, r4
 8001c5a:	44b4      	add	ip, r6
 8001c5c:	4664      	mov	r4, ip
 8001c5e:	2c00      	cmp	r4, #0
 8001c60:	d05c      	beq.n	8001d1c <__aeabi_dsub+0x27c>
 8001c62:	1b94      	subs	r4, r2, r6
 8001c64:	46a4      	mov	ip, r4
 8001c66:	2e00      	cmp	r6, #0
 8001c68:	d000      	beq.n	8001c6c <__aeabi_dsub+0x1cc>
 8001c6a:	e115      	b.n	8001e98 <__aeabi_dsub+0x3f8>
 8001c6c:	464d      	mov	r5, r9
 8001c6e:	431d      	orrs	r5, r3
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x1d4>
 8001c72:	e1c3      	b.n	8001ffc <__aeabi_dsub+0x55c>
 8001c74:	1e65      	subs	r5, r4, #1
 8001c76:	2c01      	cmp	r4, #1
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x1dc>
 8001c7a:	e20c      	b.n	8002096 <__aeabi_dsub+0x5f6>
 8001c7c:	4e55      	ldr	r6, [pc, #340]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001c7e:	42b4      	cmp	r4, r6
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x1e4>
 8001c82:	e1f8      	b.n	8002076 <__aeabi_dsub+0x5d6>
 8001c84:	46ac      	mov	ip, r5
 8001c86:	e10e      	b.n	8001ea6 <__aeabi_dsub+0x406>
 8001c88:	000a      	movs	r2, r1
 8001c8a:	4302      	orrs	r2, r0
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x1f0>
 8001c8e:	e136      	b.n	8001efe <__aeabi_dsub+0x45e>
 8001c90:	0022      	movs	r2, r4
 8001c92:	3a01      	subs	r2, #1
 8001c94:	2c01      	cmp	r4, #1
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dsub+0x1fa>
 8001c98:	e1c6      	b.n	8002028 <__aeabi_dsub+0x588>
 8001c9a:	4c4e      	ldr	r4, [pc, #312]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001c9c:	45a4      	cmp	ip, r4
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x202>
 8001ca0:	e0f4      	b.n	8001e8c <__aeabi_dsub+0x3ec>
 8001ca2:	4694      	mov	ip, r2
 8001ca4:	e731      	b.n	8001b0a <__aeabi_dsub+0x6a>
 8001ca6:	2401      	movs	r4, #1
 8001ca8:	4067      	eors	r7, r4
 8001caa:	46bb      	mov	fp, r7
 8001cac:	42bd      	cmp	r5, r7
 8001cae:	d000      	beq.n	8001cb2 <__aeabi_dsub+0x212>
 8001cb0:	e71c      	b.n	8001aec <__aeabi_dsub+0x4c>
 8001cb2:	4c4a      	ldr	r4, [pc, #296]	; (8001ddc <__aeabi_dsub+0x33c>)
 8001cb4:	46a4      	mov	ip, r4
 8001cb6:	44b4      	add	ip, r6
 8001cb8:	4664      	mov	r4, ip
 8001cba:	2c00      	cmp	r4, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x220>
 8001cbe:	e0cf      	b.n	8001e60 <__aeabi_dsub+0x3c0>
 8001cc0:	1b94      	subs	r4, r2, r6
 8001cc2:	46a4      	mov	ip, r4
 8001cc4:	2e00      	cmp	r6, #0
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dsub+0x22a>
 8001cc8:	e15c      	b.n	8001f84 <__aeabi_dsub+0x4e4>
 8001cca:	4e42      	ldr	r6, [pc, #264]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001ccc:	42b2      	cmp	r2, r6
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x232>
 8001cd0:	e1ec      	b.n	80020ac <__aeabi_dsub+0x60c>
 8001cd2:	2680      	movs	r6, #128	; 0x80
 8001cd4:	0436      	lsls	r6, r6, #16
 8001cd6:	4333      	orrs	r3, r6
 8001cd8:	4664      	mov	r4, ip
 8001cda:	2c38      	cmp	r4, #56	; 0x38
 8001cdc:	dd00      	ble.n	8001ce0 <__aeabi_dsub+0x240>
 8001cde:	e1b3      	b.n	8002048 <__aeabi_dsub+0x5a8>
 8001ce0:	2c1f      	cmp	r4, #31
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x246>
 8001ce4:	e238      	b.n	8002158 <__aeabi_dsub+0x6b8>
 8001ce6:	2620      	movs	r6, #32
 8001ce8:	1b36      	subs	r6, r6, r4
 8001cea:	001c      	movs	r4, r3
 8001cec:	40b4      	lsls	r4, r6
 8001cee:	464f      	mov	r7, r9
 8001cf0:	46a0      	mov	r8, r4
 8001cf2:	4664      	mov	r4, ip
 8001cf4:	40e7      	lsrs	r7, r4
 8001cf6:	4644      	mov	r4, r8
 8001cf8:	433c      	orrs	r4, r7
 8001cfa:	464f      	mov	r7, r9
 8001cfc:	40b7      	lsls	r7, r6
 8001cfe:	003e      	movs	r6, r7
 8001d00:	1e77      	subs	r7, r6, #1
 8001d02:	41be      	sbcs	r6, r7
 8001d04:	4334      	orrs	r4, r6
 8001d06:	4666      	mov	r6, ip
 8001d08:	40f3      	lsrs	r3, r6
 8001d0a:	18c9      	adds	r1, r1, r3
 8001d0c:	1824      	adds	r4, r4, r0
 8001d0e:	4284      	cmp	r4, r0
 8001d10:	419b      	sbcs	r3, r3
 8001d12:	425b      	negs	r3, r3
 8001d14:	4698      	mov	r8, r3
 8001d16:	0016      	movs	r6, r2
 8001d18:	4488      	add	r8, r1
 8001d1a:	e04e      	b.n	8001dba <__aeabi_dsub+0x31a>
 8001d1c:	4a30      	ldr	r2, [pc, #192]	; (8001de0 <__aeabi_dsub+0x340>)
 8001d1e:	1c74      	adds	r4, r6, #1
 8001d20:	4214      	tst	r4, r2
 8001d22:	d000      	beq.n	8001d26 <__aeabi_dsub+0x286>
 8001d24:	e0d6      	b.n	8001ed4 <__aeabi_dsub+0x434>
 8001d26:	464a      	mov	r2, r9
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	2e00      	cmp	r6, #0
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dsub+0x290>
 8001d2e:	e15b      	b.n	8001fe8 <__aeabi_dsub+0x548>
 8001d30:	2a00      	cmp	r2, #0
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dsub+0x296>
 8001d34:	e1a5      	b.n	8002082 <__aeabi_dsub+0x5e2>
 8001d36:	000a      	movs	r2, r1
 8001d38:	4302      	orrs	r2, r0
 8001d3a:	d000      	beq.n	8001d3e <__aeabi_dsub+0x29e>
 8001d3c:	e1bb      	b.n	80020b6 <__aeabi_dsub+0x616>
 8001d3e:	464a      	mov	r2, r9
 8001d40:	0759      	lsls	r1, r3, #29
 8001d42:	08d2      	lsrs	r2, r2, #3
 8001d44:	430a      	orrs	r2, r1
 8001d46:	08db      	lsrs	r3, r3, #3
 8001d48:	e027      	b.n	8001d9a <__aeabi_dsub+0x2fa>
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	4302      	orrs	r2, r0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x2b2>
 8001d50:	e174      	b.n	800203c <__aeabi_dsub+0x59c>
 8001d52:	0022      	movs	r2, r4
 8001d54:	3a01      	subs	r2, #1
 8001d56:	2c01      	cmp	r4, #1
 8001d58:	d005      	beq.n	8001d66 <__aeabi_dsub+0x2c6>
 8001d5a:	4c1e      	ldr	r4, [pc, #120]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001d5c:	45a4      	cmp	ip, r4
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dsub+0x2c2>
 8001d60:	e094      	b.n	8001e8c <__aeabi_dsub+0x3ec>
 8001d62:	4694      	mov	ip, r2
 8001d64:	e759      	b.n	8001c1a <__aeabi_dsub+0x17a>
 8001d66:	4448      	add	r0, r9
 8001d68:	4548      	cmp	r0, r9
 8001d6a:	4192      	sbcs	r2, r2
 8001d6c:	185b      	adds	r3, r3, r1
 8001d6e:	4698      	mov	r8, r3
 8001d70:	0004      	movs	r4, r0
 8001d72:	4252      	negs	r2, r2
 8001d74:	4490      	add	r8, r2
 8001d76:	4643      	mov	r3, r8
 8001d78:	2602      	movs	r6, #2
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	d500      	bpl.n	8001d80 <__aeabi_dsub+0x2e0>
 8001d7e:	e0c4      	b.n	8001f0a <__aeabi_dsub+0x46a>
 8001d80:	3e01      	subs	r6, #1
 8001d82:	0763      	lsls	r3, r4, #29
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x2e8>
 8001d86:	e711      	b.n	8001bac <__aeabi_dsub+0x10c>
 8001d88:	4643      	mov	r3, r8
 8001d8a:	46b4      	mov	ip, r6
 8001d8c:	0759      	lsls	r1, r3, #29
 8001d8e:	08e2      	lsrs	r2, r4, #3
 8001d90:	430a      	orrs	r2, r1
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	490f      	ldr	r1, [pc, #60]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001d96:	458c      	cmp	ip, r1
 8001d98:	d040      	beq.n	8001e1c <__aeabi_dsub+0x37c>
 8001d9a:	4661      	mov	r1, ip
 8001d9c:	031b      	lsls	r3, r3, #12
 8001d9e:	0549      	lsls	r1, r1, #21
 8001da0:	0b1b      	lsrs	r3, r3, #12
 8001da2:	0d49      	lsrs	r1, r1, #21
 8001da4:	e720      	b.n	8001be8 <__aeabi_dsub+0x148>
 8001da6:	4301      	orrs	r1, r0
 8001da8:	000c      	movs	r4, r1
 8001daa:	1e61      	subs	r1, r4, #1
 8001dac:	418c      	sbcs	r4, r1
 8001dae:	444c      	add	r4, r9
 8001db0:	454c      	cmp	r4, r9
 8001db2:	4192      	sbcs	r2, r2
 8001db4:	4252      	negs	r2, r2
 8001db6:	4690      	mov	r8, r2
 8001db8:	4498      	add	r8, r3
 8001dba:	4643      	mov	r3, r8
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	d5e0      	bpl.n	8001d82 <__aeabi_dsub+0x2e2>
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <__aeabi_dsub+0x334>)
 8001dc2:	3601      	adds	r6, #1
 8001dc4:	429e      	cmp	r6, r3
 8001dc6:	d000      	beq.n	8001dca <__aeabi_dsub+0x32a>
 8001dc8:	e09f      	b.n	8001f0a <__aeabi_dsub+0x46a>
 8001dca:	0031      	movs	r1, r6
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2200      	movs	r2, #0
 8001dd0:	e70a      	b.n	8001be8 <__aeabi_dsub+0x148>
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	ff7fffff 	.word	0xff7fffff
 8001ddc:	fffff801 	.word	0xfffff801
 8001de0:	000007fe 	.word	0x000007fe
 8001de4:	2a00      	cmp	r2, #0
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x34a>
 8001de8:	e160      	b.n	80020ac <__aeabi_dsub+0x60c>
 8001dea:	000a      	movs	r2, r1
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d04d      	beq.n	8001e8c <__aeabi_dsub+0x3ec>
 8001df0:	464a      	mov	r2, r9
 8001df2:	075c      	lsls	r4, r3, #29
 8001df4:	08d2      	lsrs	r2, r2, #3
 8001df6:	4322      	orrs	r2, r4
 8001df8:	2480      	movs	r4, #128	; 0x80
 8001dfa:	08db      	lsrs	r3, r3, #3
 8001dfc:	0324      	lsls	r4, r4, #12
 8001dfe:	4223      	tst	r3, r4
 8001e00:	d007      	beq.n	8001e12 <__aeabi_dsub+0x372>
 8001e02:	08ce      	lsrs	r6, r1, #3
 8001e04:	4226      	tst	r6, r4
 8001e06:	d104      	bne.n	8001e12 <__aeabi_dsub+0x372>
 8001e08:	465d      	mov	r5, fp
 8001e0a:	0033      	movs	r3, r6
 8001e0c:	08c2      	lsrs	r2, r0, #3
 8001e0e:	0749      	lsls	r1, r1, #29
 8001e10:	430a      	orrs	r2, r1
 8001e12:	0f51      	lsrs	r1, r2, #29
 8001e14:	00d2      	lsls	r2, r2, #3
 8001e16:	08d2      	lsrs	r2, r2, #3
 8001e18:	0749      	lsls	r1, r1, #29
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	4319      	orrs	r1, r3
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x384>
 8001e22:	e1c8      	b.n	80021b6 <__aeabi_dsub+0x716>
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	0309      	lsls	r1, r1, #12
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	031b      	lsls	r3, r3, #12
 8001e2c:	49d5      	ldr	r1, [pc, #852]	; (8002184 <__aeabi_dsub+0x6e4>)
 8001e2e:	0b1b      	lsrs	r3, r3, #12
 8001e30:	e6da      	b.n	8001be8 <__aeabi_dsub+0x148>
 8001e32:	49d5      	ldr	r1, [pc, #852]	; (8002188 <__aeabi_dsub+0x6e8>)
 8001e34:	1ab6      	subs	r6, r6, r2
 8001e36:	400b      	ands	r3, r1
 8001e38:	4698      	mov	r8, r3
 8001e3a:	e6b5      	b.n	8001ba8 <__aeabi_dsub+0x108>
 8001e3c:	0020      	movs	r0, r4
 8001e3e:	f000 fa6b 	bl	8002318 <__clzsi2>
 8001e42:	0002      	movs	r2, r0
 8001e44:	3218      	adds	r2, #24
 8001e46:	2a1f      	cmp	r2, #31
 8001e48:	dc00      	bgt.n	8001e4c <__aeabi_dsub+0x3ac>
 8001e4a:	e68f      	b.n	8001b6c <__aeabi_dsub+0xcc>
 8001e4c:	0023      	movs	r3, r4
 8001e4e:	3808      	subs	r0, #8
 8001e50:	4083      	lsls	r3, r0
 8001e52:	2400      	movs	r4, #0
 8001e54:	e692      	b.n	8001b7c <__aeabi_dsub+0xdc>
 8001e56:	4308      	orrs	r0, r1
 8001e58:	0002      	movs	r2, r0
 8001e5a:	1e50      	subs	r0, r2, #1
 8001e5c:	4182      	sbcs	r2, r0
 8001e5e:	e66d      	b.n	8001b3c <__aeabi_dsub+0x9c>
 8001e60:	4cca      	ldr	r4, [pc, #808]	; (800218c <__aeabi_dsub+0x6ec>)
 8001e62:	1c72      	adds	r2, r6, #1
 8001e64:	4222      	tst	r2, r4
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dsub+0x3ca>
 8001e68:	e0ad      	b.n	8001fc6 <__aeabi_dsub+0x526>
 8001e6a:	464a      	mov	r2, r9
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	2e00      	cmp	r6, #0
 8001e70:	d1b8      	bne.n	8001de4 <__aeabi_dsub+0x344>
 8001e72:	2a00      	cmp	r2, #0
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x3d8>
 8001e76:	e158      	b.n	800212a <__aeabi_dsub+0x68a>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	4302      	orrs	r2, r0
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dsub+0x3e0>
 8001e7e:	e159      	b.n	8002134 <__aeabi_dsub+0x694>
 8001e80:	464a      	mov	r2, r9
 8001e82:	0759      	lsls	r1, r3, #29
 8001e84:	08d2      	lsrs	r2, r2, #3
 8001e86:	430a      	orrs	r2, r1
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	e786      	b.n	8001d9a <__aeabi_dsub+0x2fa>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	0759      	lsls	r1, r3, #29
 8001e90:	08d2      	lsrs	r2, r2, #3
 8001e92:	430a      	orrs	r2, r1
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	e7c1      	b.n	8001e1c <__aeabi_dsub+0x37c>
 8001e98:	4dba      	ldr	r5, [pc, #744]	; (8002184 <__aeabi_dsub+0x6e4>)
 8001e9a:	42aa      	cmp	r2, r5
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x400>
 8001e9e:	e11e      	b.n	80020de <__aeabi_dsub+0x63e>
 8001ea0:	2580      	movs	r5, #128	; 0x80
 8001ea2:	042d      	lsls	r5, r5, #16
 8001ea4:	432b      	orrs	r3, r5
 8001ea6:	4664      	mov	r4, ip
 8001ea8:	2c38      	cmp	r4, #56	; 0x38
 8001eaa:	dc5d      	bgt.n	8001f68 <__aeabi_dsub+0x4c8>
 8001eac:	2c1f      	cmp	r4, #31
 8001eae:	dd00      	ble.n	8001eb2 <__aeabi_dsub+0x412>
 8001eb0:	e0d0      	b.n	8002054 <__aeabi_dsub+0x5b4>
 8001eb2:	2520      	movs	r5, #32
 8001eb4:	4667      	mov	r7, ip
 8001eb6:	1b2d      	subs	r5, r5, r4
 8001eb8:	464e      	mov	r6, r9
 8001eba:	001c      	movs	r4, r3
 8001ebc:	40fe      	lsrs	r6, r7
 8001ebe:	40ac      	lsls	r4, r5
 8001ec0:	4334      	orrs	r4, r6
 8001ec2:	464e      	mov	r6, r9
 8001ec4:	40ae      	lsls	r6, r5
 8001ec6:	0035      	movs	r5, r6
 8001ec8:	40fb      	lsrs	r3, r7
 8001eca:	1e6e      	subs	r6, r5, #1
 8001ecc:	41b5      	sbcs	r5, r6
 8001ece:	1ac9      	subs	r1, r1, r3
 8001ed0:	432c      	orrs	r4, r5
 8001ed2:	e04e      	b.n	8001f72 <__aeabi_dsub+0x4d2>
 8001ed4:	464a      	mov	r2, r9
 8001ed6:	1a14      	subs	r4, r2, r0
 8001ed8:	45a1      	cmp	r9, r4
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	4252      	negs	r2, r2
 8001ede:	4690      	mov	r8, r2
 8001ee0:	1a5f      	subs	r7, r3, r1
 8001ee2:	003a      	movs	r2, r7
 8001ee4:	4647      	mov	r7, r8
 8001ee6:	1bd2      	subs	r2, r2, r7
 8001ee8:	4690      	mov	r8, r2
 8001eea:	0212      	lsls	r2, r2, #8
 8001eec:	d500      	bpl.n	8001ef0 <__aeabi_dsub+0x450>
 8001eee:	e08b      	b.n	8002008 <__aeabi_dsub+0x568>
 8001ef0:	4642      	mov	r2, r8
 8001ef2:	4322      	orrs	r2, r4
 8001ef4:	d000      	beq.n	8001ef8 <__aeabi_dsub+0x458>
 8001ef6:	e630      	b.n	8001b5a <__aeabi_dsub+0xba>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2500      	movs	r5, #0
 8001efc:	e74d      	b.n	8001d9a <__aeabi_dsub+0x2fa>
 8001efe:	464a      	mov	r2, r9
 8001f00:	0759      	lsls	r1, r3, #29
 8001f02:	08d2      	lsrs	r2, r2, #3
 8001f04:	430a      	orrs	r2, r1
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	e744      	b.n	8001d94 <__aeabi_dsub+0x2f4>
 8001f0a:	4642      	mov	r2, r8
 8001f0c:	4b9e      	ldr	r3, [pc, #632]	; (8002188 <__aeabi_dsub+0x6e8>)
 8001f0e:	0861      	lsrs	r1, r4, #1
 8001f10:	401a      	ands	r2, r3
 8001f12:	0013      	movs	r3, r2
 8001f14:	2201      	movs	r2, #1
 8001f16:	4014      	ands	r4, r2
 8001f18:	430c      	orrs	r4, r1
 8001f1a:	07da      	lsls	r2, r3, #31
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	4698      	mov	r8, r3
 8001f20:	4314      	orrs	r4, r2
 8001f22:	e641      	b.n	8001ba8 <__aeabi_dsub+0x108>
 8001f24:	001a      	movs	r2, r3
 8001f26:	3e1f      	subs	r6, #31
 8001f28:	40f2      	lsrs	r2, r6
 8001f2a:	0016      	movs	r6, r2
 8001f2c:	2920      	cmp	r1, #32
 8001f2e:	d003      	beq.n	8001f38 <__aeabi_dsub+0x498>
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	1a51      	subs	r1, r2, r1
 8001f34:	408b      	lsls	r3, r1
 8001f36:	431c      	orrs	r4, r3
 8001f38:	1e62      	subs	r2, r4, #1
 8001f3a:	4194      	sbcs	r4, r2
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4334      	orrs	r4, r6
 8001f40:	4698      	mov	r8, r3
 8001f42:	2600      	movs	r6, #0
 8001f44:	e71d      	b.n	8001d82 <__aeabi_dsub+0x2e2>
 8001f46:	000c      	movs	r4, r1
 8001f48:	3a20      	subs	r2, #32
 8001f4a:	40d4      	lsrs	r4, r2
 8001f4c:	0022      	movs	r2, r4
 8001f4e:	4664      	mov	r4, ip
 8001f50:	2c20      	cmp	r4, #32
 8001f52:	d004      	beq.n	8001f5e <__aeabi_dsub+0x4be>
 8001f54:	2740      	movs	r7, #64	; 0x40
 8001f56:	1b3f      	subs	r7, r7, r4
 8001f58:	40b9      	lsls	r1, r7
 8001f5a:	4308      	orrs	r0, r1
 8001f5c:	4680      	mov	r8, r0
 8001f5e:	4644      	mov	r4, r8
 8001f60:	1e61      	subs	r1, r4, #1
 8001f62:	418c      	sbcs	r4, r1
 8001f64:	4322      	orrs	r2, r4
 8001f66:	e5e9      	b.n	8001b3c <__aeabi_dsub+0x9c>
 8001f68:	464c      	mov	r4, r9
 8001f6a:	4323      	orrs	r3, r4
 8001f6c:	001c      	movs	r4, r3
 8001f6e:	1e63      	subs	r3, r4, #1
 8001f70:	419c      	sbcs	r4, r3
 8001f72:	1b04      	subs	r4, r0, r4
 8001f74:	42a0      	cmp	r0, r4
 8001f76:	419b      	sbcs	r3, r3
 8001f78:	425b      	negs	r3, r3
 8001f7a:	1acb      	subs	r3, r1, r3
 8001f7c:	4698      	mov	r8, r3
 8001f7e:	465d      	mov	r5, fp
 8001f80:	0016      	movs	r6, r2
 8001f82:	e5e2      	b.n	8001b4a <__aeabi_dsub+0xaa>
 8001f84:	464e      	mov	r6, r9
 8001f86:	431e      	orrs	r6, r3
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x4ec>
 8001f8a:	e0ae      	b.n	80020ea <__aeabi_dsub+0x64a>
 8001f8c:	1e66      	subs	r6, r4, #1
 8001f8e:	2c01      	cmp	r4, #1
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dsub+0x4f4>
 8001f92:	e0fd      	b.n	8002190 <__aeabi_dsub+0x6f0>
 8001f94:	4f7b      	ldr	r7, [pc, #492]	; (8002184 <__aeabi_dsub+0x6e4>)
 8001f96:	42bc      	cmp	r4, r7
 8001f98:	d100      	bne.n	8001f9c <__aeabi_dsub+0x4fc>
 8001f9a:	e107      	b.n	80021ac <__aeabi_dsub+0x70c>
 8001f9c:	46b4      	mov	ip, r6
 8001f9e:	e69b      	b.n	8001cd8 <__aeabi_dsub+0x238>
 8001fa0:	4664      	mov	r4, ip
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	1b12      	subs	r2, r2, r4
 8001fa6:	000c      	movs	r4, r1
 8001fa8:	4094      	lsls	r4, r2
 8001faa:	0007      	movs	r7, r0
 8001fac:	4090      	lsls	r0, r2
 8001fae:	46a0      	mov	r8, r4
 8001fb0:	4664      	mov	r4, ip
 8001fb2:	1e42      	subs	r2, r0, #1
 8001fb4:	4190      	sbcs	r0, r2
 8001fb6:	4662      	mov	r2, ip
 8001fb8:	40e7      	lsrs	r7, r4
 8001fba:	4644      	mov	r4, r8
 8001fbc:	40d1      	lsrs	r1, r2
 8001fbe:	433c      	orrs	r4, r7
 8001fc0:	4304      	orrs	r4, r0
 8001fc2:	185b      	adds	r3, r3, r1
 8001fc4:	e6f3      	b.n	8001dae <__aeabi_dsub+0x30e>
 8001fc6:	4c6f      	ldr	r4, [pc, #444]	; (8002184 <__aeabi_dsub+0x6e4>)
 8001fc8:	42a2      	cmp	r2, r4
 8001fca:	d100      	bne.n	8001fce <__aeabi_dsub+0x52e>
 8001fcc:	e0d5      	b.n	800217a <__aeabi_dsub+0x6da>
 8001fce:	4448      	add	r0, r9
 8001fd0:	185b      	adds	r3, r3, r1
 8001fd2:	4548      	cmp	r0, r9
 8001fd4:	4189      	sbcs	r1, r1
 8001fd6:	4249      	negs	r1, r1
 8001fd8:	185b      	adds	r3, r3, r1
 8001fda:	07dc      	lsls	r4, r3, #31
 8001fdc:	0840      	lsrs	r0, r0, #1
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	0016      	movs	r6, r2
 8001fe4:	4304      	orrs	r4, r0
 8001fe6:	e6cc      	b.n	8001d82 <__aeabi_dsub+0x2e2>
 8001fe8:	2a00      	cmp	r2, #0
 8001fea:	d000      	beq.n	8001fee <__aeabi_dsub+0x54e>
 8001fec:	e082      	b.n	80020f4 <__aeabi_dsub+0x654>
 8001fee:	000a      	movs	r2, r1
 8001ff0:	4302      	orrs	r2, r0
 8001ff2:	d140      	bne.n	8002076 <__aeabi_dsub+0x5d6>
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	031b      	lsls	r3, r3, #12
 8001ffa:	e713      	b.n	8001e24 <__aeabi_dsub+0x384>
 8001ffc:	074b      	lsls	r3, r1, #29
 8001ffe:	08c2      	lsrs	r2, r0, #3
 8002000:	431a      	orrs	r2, r3
 8002002:	465d      	mov	r5, fp
 8002004:	08cb      	lsrs	r3, r1, #3
 8002006:	e6c5      	b.n	8001d94 <__aeabi_dsub+0x2f4>
 8002008:	464a      	mov	r2, r9
 800200a:	1a84      	subs	r4, r0, r2
 800200c:	42a0      	cmp	r0, r4
 800200e:	4192      	sbcs	r2, r2
 8002010:	1acb      	subs	r3, r1, r3
 8002012:	4252      	negs	r2, r2
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	4698      	mov	r8, r3
 8002018:	465d      	mov	r5, fp
 800201a:	e59e      	b.n	8001b5a <__aeabi_dsub+0xba>
 800201c:	464a      	mov	r2, r9
 800201e:	0759      	lsls	r1, r3, #29
 8002020:	08d2      	lsrs	r2, r2, #3
 8002022:	430a      	orrs	r2, r1
 8002024:	08db      	lsrs	r3, r3, #3
 8002026:	e6f9      	b.n	8001e1c <__aeabi_dsub+0x37c>
 8002028:	464a      	mov	r2, r9
 800202a:	1a14      	subs	r4, r2, r0
 800202c:	45a1      	cmp	r9, r4
 800202e:	4192      	sbcs	r2, r2
 8002030:	1a5b      	subs	r3, r3, r1
 8002032:	4252      	negs	r2, r2
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	4698      	mov	r8, r3
 8002038:	2601      	movs	r6, #1
 800203a:	e586      	b.n	8001b4a <__aeabi_dsub+0xaa>
 800203c:	464a      	mov	r2, r9
 800203e:	0759      	lsls	r1, r3, #29
 8002040:	08d2      	lsrs	r2, r2, #3
 8002042:	430a      	orrs	r2, r1
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	e6a5      	b.n	8001d94 <__aeabi_dsub+0x2f4>
 8002048:	464c      	mov	r4, r9
 800204a:	4323      	orrs	r3, r4
 800204c:	001c      	movs	r4, r3
 800204e:	1e63      	subs	r3, r4, #1
 8002050:	419c      	sbcs	r4, r3
 8002052:	e65b      	b.n	8001d0c <__aeabi_dsub+0x26c>
 8002054:	4665      	mov	r5, ip
 8002056:	001e      	movs	r6, r3
 8002058:	3d20      	subs	r5, #32
 800205a:	40ee      	lsrs	r6, r5
 800205c:	2c20      	cmp	r4, #32
 800205e:	d005      	beq.n	800206c <__aeabi_dsub+0x5cc>
 8002060:	2540      	movs	r5, #64	; 0x40
 8002062:	1b2d      	subs	r5, r5, r4
 8002064:	40ab      	lsls	r3, r5
 8002066:	464c      	mov	r4, r9
 8002068:	431c      	orrs	r4, r3
 800206a:	46a2      	mov	sl, r4
 800206c:	4654      	mov	r4, sl
 800206e:	1e63      	subs	r3, r4, #1
 8002070:	419c      	sbcs	r4, r3
 8002072:	4334      	orrs	r4, r6
 8002074:	e77d      	b.n	8001f72 <__aeabi_dsub+0x4d2>
 8002076:	074b      	lsls	r3, r1, #29
 8002078:	08c2      	lsrs	r2, r0, #3
 800207a:	431a      	orrs	r2, r3
 800207c:	465d      	mov	r5, fp
 800207e:	08cb      	lsrs	r3, r1, #3
 8002080:	e6cc      	b.n	8001e1c <__aeabi_dsub+0x37c>
 8002082:	000a      	movs	r2, r1
 8002084:	4302      	orrs	r2, r0
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x5ea>
 8002088:	e736      	b.n	8001ef8 <__aeabi_dsub+0x458>
 800208a:	074b      	lsls	r3, r1, #29
 800208c:	08c2      	lsrs	r2, r0, #3
 800208e:	431a      	orrs	r2, r3
 8002090:	465d      	mov	r5, fp
 8002092:	08cb      	lsrs	r3, r1, #3
 8002094:	e681      	b.n	8001d9a <__aeabi_dsub+0x2fa>
 8002096:	464a      	mov	r2, r9
 8002098:	1a84      	subs	r4, r0, r2
 800209a:	42a0      	cmp	r0, r4
 800209c:	4192      	sbcs	r2, r2
 800209e:	1acb      	subs	r3, r1, r3
 80020a0:	4252      	negs	r2, r2
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	4698      	mov	r8, r3
 80020a6:	465d      	mov	r5, fp
 80020a8:	2601      	movs	r6, #1
 80020aa:	e54e      	b.n	8001b4a <__aeabi_dsub+0xaa>
 80020ac:	074b      	lsls	r3, r1, #29
 80020ae:	08c2      	lsrs	r2, r0, #3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	08cb      	lsrs	r3, r1, #3
 80020b4:	e6b2      	b.n	8001e1c <__aeabi_dsub+0x37c>
 80020b6:	464a      	mov	r2, r9
 80020b8:	1a14      	subs	r4, r2, r0
 80020ba:	45a1      	cmp	r9, r4
 80020bc:	4192      	sbcs	r2, r2
 80020be:	1a5f      	subs	r7, r3, r1
 80020c0:	4252      	negs	r2, r2
 80020c2:	1aba      	subs	r2, r7, r2
 80020c4:	4690      	mov	r8, r2
 80020c6:	0212      	lsls	r2, r2, #8
 80020c8:	d56b      	bpl.n	80021a2 <__aeabi_dsub+0x702>
 80020ca:	464a      	mov	r2, r9
 80020cc:	1a84      	subs	r4, r0, r2
 80020ce:	42a0      	cmp	r0, r4
 80020d0:	4192      	sbcs	r2, r2
 80020d2:	1acb      	subs	r3, r1, r3
 80020d4:	4252      	negs	r2, r2
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	4698      	mov	r8, r3
 80020da:	465d      	mov	r5, fp
 80020dc:	e564      	b.n	8001ba8 <__aeabi_dsub+0x108>
 80020de:	074b      	lsls	r3, r1, #29
 80020e0:	08c2      	lsrs	r2, r0, #3
 80020e2:	431a      	orrs	r2, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	08cb      	lsrs	r3, r1, #3
 80020e8:	e698      	b.n	8001e1c <__aeabi_dsub+0x37c>
 80020ea:	074b      	lsls	r3, r1, #29
 80020ec:	08c2      	lsrs	r2, r0, #3
 80020ee:	431a      	orrs	r2, r3
 80020f0:	08cb      	lsrs	r3, r1, #3
 80020f2:	e64f      	b.n	8001d94 <__aeabi_dsub+0x2f4>
 80020f4:	000a      	movs	r2, r1
 80020f6:	4302      	orrs	r2, r0
 80020f8:	d090      	beq.n	800201c <__aeabi_dsub+0x57c>
 80020fa:	464a      	mov	r2, r9
 80020fc:	075c      	lsls	r4, r3, #29
 80020fe:	08d2      	lsrs	r2, r2, #3
 8002100:	4314      	orrs	r4, r2
 8002102:	2280      	movs	r2, #128	; 0x80
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	0312      	lsls	r2, r2, #12
 8002108:	4213      	tst	r3, r2
 800210a:	d008      	beq.n	800211e <__aeabi_dsub+0x67e>
 800210c:	08ce      	lsrs	r6, r1, #3
 800210e:	4216      	tst	r6, r2
 8002110:	d105      	bne.n	800211e <__aeabi_dsub+0x67e>
 8002112:	08c0      	lsrs	r0, r0, #3
 8002114:	0749      	lsls	r1, r1, #29
 8002116:	4308      	orrs	r0, r1
 8002118:	0004      	movs	r4, r0
 800211a:	465d      	mov	r5, fp
 800211c:	0033      	movs	r3, r6
 800211e:	0f61      	lsrs	r1, r4, #29
 8002120:	00e2      	lsls	r2, r4, #3
 8002122:	0749      	lsls	r1, r1, #29
 8002124:	08d2      	lsrs	r2, r2, #3
 8002126:	430a      	orrs	r2, r1
 8002128:	e678      	b.n	8001e1c <__aeabi_dsub+0x37c>
 800212a:	074b      	lsls	r3, r1, #29
 800212c:	08c2      	lsrs	r2, r0, #3
 800212e:	431a      	orrs	r2, r3
 8002130:	08cb      	lsrs	r3, r1, #3
 8002132:	e632      	b.n	8001d9a <__aeabi_dsub+0x2fa>
 8002134:	4448      	add	r0, r9
 8002136:	185b      	adds	r3, r3, r1
 8002138:	4548      	cmp	r0, r9
 800213a:	4192      	sbcs	r2, r2
 800213c:	4698      	mov	r8, r3
 800213e:	4252      	negs	r2, r2
 8002140:	4490      	add	r8, r2
 8002142:	4643      	mov	r3, r8
 8002144:	0004      	movs	r4, r0
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	d400      	bmi.n	800214c <__aeabi_dsub+0x6ac>
 800214a:	e61a      	b.n	8001d82 <__aeabi_dsub+0x2e2>
 800214c:	4642      	mov	r2, r8
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <__aeabi_dsub+0x6e8>)
 8002150:	2601      	movs	r6, #1
 8002152:	401a      	ands	r2, r3
 8002154:	4690      	mov	r8, r2
 8002156:	e614      	b.n	8001d82 <__aeabi_dsub+0x2e2>
 8002158:	4666      	mov	r6, ip
 800215a:	001f      	movs	r7, r3
 800215c:	3e20      	subs	r6, #32
 800215e:	40f7      	lsrs	r7, r6
 8002160:	2c20      	cmp	r4, #32
 8002162:	d005      	beq.n	8002170 <__aeabi_dsub+0x6d0>
 8002164:	2640      	movs	r6, #64	; 0x40
 8002166:	1b36      	subs	r6, r6, r4
 8002168:	40b3      	lsls	r3, r6
 800216a:	464c      	mov	r4, r9
 800216c:	431c      	orrs	r4, r3
 800216e:	46a2      	mov	sl, r4
 8002170:	4654      	mov	r4, sl
 8002172:	1e63      	subs	r3, r4, #1
 8002174:	419c      	sbcs	r4, r3
 8002176:	433c      	orrs	r4, r7
 8002178:	e5c8      	b.n	8001d0c <__aeabi_dsub+0x26c>
 800217a:	0011      	movs	r1, r2
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	e532      	b.n	8001be8 <__aeabi_dsub+0x148>
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	000007ff 	.word	0x000007ff
 8002188:	ff7fffff 	.word	0xff7fffff
 800218c:	000007fe 	.word	0x000007fe
 8002190:	464a      	mov	r2, r9
 8002192:	1814      	adds	r4, r2, r0
 8002194:	4284      	cmp	r4, r0
 8002196:	4192      	sbcs	r2, r2
 8002198:	185b      	adds	r3, r3, r1
 800219a:	4698      	mov	r8, r3
 800219c:	4252      	negs	r2, r2
 800219e:	4490      	add	r8, r2
 80021a0:	e5e9      	b.n	8001d76 <__aeabi_dsub+0x2d6>
 80021a2:	4642      	mov	r2, r8
 80021a4:	4322      	orrs	r2, r4
 80021a6:	d100      	bne.n	80021aa <__aeabi_dsub+0x70a>
 80021a8:	e6a6      	b.n	8001ef8 <__aeabi_dsub+0x458>
 80021aa:	e5ea      	b.n	8001d82 <__aeabi_dsub+0x2e2>
 80021ac:	074b      	lsls	r3, r1, #29
 80021ae:	08c2      	lsrs	r2, r0, #3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	08cb      	lsrs	r3, r1, #3
 80021b4:	e632      	b.n	8001e1c <__aeabi_dsub+0x37c>
 80021b6:	2200      	movs	r2, #0
 80021b8:	4901      	ldr	r1, [pc, #4]	; (80021c0 <__aeabi_dsub+0x720>)
 80021ba:	0013      	movs	r3, r2
 80021bc:	e514      	b.n	8001be8 <__aeabi_dsub+0x148>
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	000007ff 	.word	0x000007ff

080021c4 <__aeabi_dcmpun>:
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	0005      	movs	r5, r0
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <__aeabi_dcmpun+0x38>)
 80021ca:	030c      	lsls	r4, r1, #12
 80021cc:	0016      	movs	r6, r2
 80021ce:	0049      	lsls	r1, r1, #1
 80021d0:	031a      	lsls	r2, r3, #12
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	0b24      	lsrs	r4, r4, #12
 80021d6:	0d49      	lsrs	r1, r1, #21
 80021d8:	0b12      	lsrs	r2, r2, #12
 80021da:	0d5b      	lsrs	r3, r3, #21
 80021dc:	4281      	cmp	r1, r0
 80021de:	d008      	beq.n	80021f2 <__aeabi_dcmpun+0x2e>
 80021e0:	4906      	ldr	r1, [pc, #24]	; (80021fc <__aeabi_dcmpun+0x38>)
 80021e2:	2000      	movs	r0, #0
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d103      	bne.n	80021f0 <__aeabi_dcmpun+0x2c>
 80021e8:	4332      	orrs	r2, r6
 80021ea:	0010      	movs	r0, r2
 80021ec:	1e42      	subs	r2, r0, #1
 80021ee:	4190      	sbcs	r0, r2
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
 80021f2:	2001      	movs	r0, #1
 80021f4:	432c      	orrs	r4, r5
 80021f6:	d1fb      	bne.n	80021f0 <__aeabi_dcmpun+0x2c>
 80021f8:	e7f2      	b.n	80021e0 <__aeabi_dcmpun+0x1c>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	000007ff 	.word	0x000007ff

08002200 <__aeabi_d2iz>:
 8002200:	000a      	movs	r2, r1
 8002202:	b530      	push	{r4, r5, lr}
 8002204:	4c13      	ldr	r4, [pc, #76]	; (8002254 <__aeabi_d2iz+0x54>)
 8002206:	0053      	lsls	r3, r2, #1
 8002208:	0309      	lsls	r1, r1, #12
 800220a:	0005      	movs	r5, r0
 800220c:	0b09      	lsrs	r1, r1, #12
 800220e:	2000      	movs	r0, #0
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	0fd2      	lsrs	r2, r2, #31
 8002214:	42a3      	cmp	r3, r4
 8002216:	dd04      	ble.n	8002222 <__aeabi_d2iz+0x22>
 8002218:	480f      	ldr	r0, [pc, #60]	; (8002258 <__aeabi_d2iz+0x58>)
 800221a:	4283      	cmp	r3, r0
 800221c:	dd02      	ble.n	8002224 <__aeabi_d2iz+0x24>
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <__aeabi_d2iz+0x5c>)
 8002220:	18d0      	adds	r0, r2, r3
 8002222:	bd30      	pop	{r4, r5, pc}
 8002224:	2080      	movs	r0, #128	; 0x80
 8002226:	0340      	lsls	r0, r0, #13
 8002228:	4301      	orrs	r1, r0
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <__aeabi_d2iz+0x60>)
 800222c:	1ac0      	subs	r0, r0, r3
 800222e:	281f      	cmp	r0, #31
 8002230:	dd08      	ble.n	8002244 <__aeabi_d2iz+0x44>
 8002232:	480c      	ldr	r0, [pc, #48]	; (8002264 <__aeabi_d2iz+0x64>)
 8002234:	1ac3      	subs	r3, r0, r3
 8002236:	40d9      	lsrs	r1, r3
 8002238:	000b      	movs	r3, r1
 800223a:	4258      	negs	r0, r3
 800223c:	2a00      	cmp	r2, #0
 800223e:	d1f0      	bne.n	8002222 <__aeabi_d2iz+0x22>
 8002240:	0018      	movs	r0, r3
 8002242:	e7ee      	b.n	8002222 <__aeabi_d2iz+0x22>
 8002244:	4c08      	ldr	r4, [pc, #32]	; (8002268 <__aeabi_d2iz+0x68>)
 8002246:	40c5      	lsrs	r5, r0
 8002248:	46a4      	mov	ip, r4
 800224a:	4463      	add	r3, ip
 800224c:	4099      	lsls	r1, r3
 800224e:	000b      	movs	r3, r1
 8002250:	432b      	orrs	r3, r5
 8002252:	e7f2      	b.n	800223a <__aeabi_d2iz+0x3a>
 8002254:	000003fe 	.word	0x000003fe
 8002258:	0000041d 	.word	0x0000041d
 800225c:	7fffffff 	.word	0x7fffffff
 8002260:	00000433 	.word	0x00000433
 8002264:	00000413 	.word	0x00000413
 8002268:	fffffbed 	.word	0xfffffbed

0800226c <__aeabi_i2d>:
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	2800      	cmp	r0, #0
 8002270:	d016      	beq.n	80022a0 <__aeabi_i2d+0x34>
 8002272:	17c3      	asrs	r3, r0, #31
 8002274:	18c5      	adds	r5, r0, r3
 8002276:	405d      	eors	r5, r3
 8002278:	0fc4      	lsrs	r4, r0, #31
 800227a:	0028      	movs	r0, r5
 800227c:	f000 f84c 	bl	8002318 <__clzsi2>
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <__aeabi_i2d+0x5c>)
 8002282:	1a12      	subs	r2, r2, r0
 8002284:	280a      	cmp	r0, #10
 8002286:	dc16      	bgt.n	80022b6 <__aeabi_i2d+0x4a>
 8002288:	0003      	movs	r3, r0
 800228a:	002e      	movs	r6, r5
 800228c:	3315      	adds	r3, #21
 800228e:	409e      	lsls	r6, r3
 8002290:	230b      	movs	r3, #11
 8002292:	1a18      	subs	r0, r3, r0
 8002294:	40c5      	lsrs	r5, r0
 8002296:	0553      	lsls	r3, r2, #21
 8002298:	032d      	lsls	r5, r5, #12
 800229a:	0b2d      	lsrs	r5, r5, #12
 800229c:	0d5b      	lsrs	r3, r3, #21
 800229e:	e003      	b.n	80022a8 <__aeabi_i2d+0x3c>
 80022a0:	2400      	movs	r4, #0
 80022a2:	2300      	movs	r3, #0
 80022a4:	2500      	movs	r5, #0
 80022a6:	2600      	movs	r6, #0
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	432b      	orrs	r3, r5
 80022ac:	07e4      	lsls	r4, r4, #31
 80022ae:	4323      	orrs	r3, r4
 80022b0:	0030      	movs	r0, r6
 80022b2:	0019      	movs	r1, r3
 80022b4:	bd70      	pop	{r4, r5, r6, pc}
 80022b6:	380b      	subs	r0, #11
 80022b8:	4085      	lsls	r5, r0
 80022ba:	0553      	lsls	r3, r2, #21
 80022bc:	032d      	lsls	r5, r5, #12
 80022be:	2600      	movs	r6, #0
 80022c0:	0b2d      	lsrs	r5, r5, #12
 80022c2:	0d5b      	lsrs	r3, r3, #21
 80022c4:	e7f0      	b.n	80022a8 <__aeabi_i2d+0x3c>
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	0000041e 	.word	0x0000041e

080022cc <__aeabi_ui2d>:
 80022cc:	b510      	push	{r4, lr}
 80022ce:	1e04      	subs	r4, r0, #0
 80022d0:	d010      	beq.n	80022f4 <__aeabi_ui2d+0x28>
 80022d2:	f000 f821 	bl	8002318 <__clzsi2>
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <__aeabi_ui2d+0x48>)
 80022d8:	1a1b      	subs	r3, r3, r0
 80022da:	280a      	cmp	r0, #10
 80022dc:	dc11      	bgt.n	8002302 <__aeabi_ui2d+0x36>
 80022de:	220b      	movs	r2, #11
 80022e0:	0021      	movs	r1, r4
 80022e2:	1a12      	subs	r2, r2, r0
 80022e4:	40d1      	lsrs	r1, r2
 80022e6:	3015      	adds	r0, #21
 80022e8:	030a      	lsls	r2, r1, #12
 80022ea:	055b      	lsls	r3, r3, #21
 80022ec:	4084      	lsls	r4, r0
 80022ee:	0b12      	lsrs	r2, r2, #12
 80022f0:	0d5b      	lsrs	r3, r3, #21
 80022f2:	e001      	b.n	80022f8 <__aeabi_ui2d+0x2c>
 80022f4:	2300      	movs	r3, #0
 80022f6:	2200      	movs	r2, #0
 80022f8:	051b      	lsls	r3, r3, #20
 80022fa:	4313      	orrs	r3, r2
 80022fc:	0020      	movs	r0, r4
 80022fe:	0019      	movs	r1, r3
 8002300:	bd10      	pop	{r4, pc}
 8002302:	0022      	movs	r2, r4
 8002304:	380b      	subs	r0, #11
 8002306:	4082      	lsls	r2, r0
 8002308:	055b      	lsls	r3, r3, #21
 800230a:	0312      	lsls	r2, r2, #12
 800230c:	2400      	movs	r4, #0
 800230e:	0b12      	lsrs	r2, r2, #12
 8002310:	0d5b      	lsrs	r3, r3, #21
 8002312:	e7f1      	b.n	80022f8 <__aeabi_ui2d+0x2c>
 8002314:	0000041e 	.word	0x0000041e

08002318 <__clzsi2>:
 8002318:	211c      	movs	r1, #28
 800231a:	2301      	movs	r3, #1
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	4298      	cmp	r0, r3
 8002320:	d301      	bcc.n	8002326 <__clzsi2+0xe>
 8002322:	0c00      	lsrs	r0, r0, #16
 8002324:	3910      	subs	r1, #16
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	4298      	cmp	r0, r3
 800232a:	d301      	bcc.n	8002330 <__clzsi2+0x18>
 800232c:	0a00      	lsrs	r0, r0, #8
 800232e:	3908      	subs	r1, #8
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	4298      	cmp	r0, r3
 8002334:	d301      	bcc.n	800233a <__clzsi2+0x22>
 8002336:	0900      	lsrs	r0, r0, #4
 8002338:	3904      	subs	r1, #4
 800233a:	a202      	add	r2, pc, #8	; (adr r2, 8002344 <__clzsi2+0x2c>)
 800233c:	5c10      	ldrb	r0, [r2, r0]
 800233e:	1840      	adds	r0, r0, r1
 8002340:	4770      	bx	lr
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	02020304 	.word	0x02020304
 8002348:	01010101 	.word	0x01010101
	...

08002354 <__clzdi2>:
 8002354:	b510      	push	{r4, lr}
 8002356:	2900      	cmp	r1, #0
 8002358:	d103      	bne.n	8002362 <__clzdi2+0xe>
 800235a:	f7ff ffdd 	bl	8002318 <__clzsi2>
 800235e:	3020      	adds	r0, #32
 8002360:	e002      	b.n	8002368 <__clzdi2+0x14>
 8002362:	1c08      	adds	r0, r1, #0
 8002364:	f7ff ffd8 	bl	8002318 <__clzsi2>
 8002368:	bd10      	pop	{r4, pc}
 800236a:	46c0      	nop			; (mov r8, r8)

0800236c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800236c:	b510      	push	{r4, lr}
 800236e:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_InitTick+0x44>)
 8002372:	7819      	ldrb	r1, [r3, #0]
 8002374:	20fa      	movs	r0, #250	; 0xfa
 8002376:	0080      	lsls	r0, r0, #2
 8002378:	f7fd fed0 	bl	800011c <__udivsi3>
 800237c:	0001      	movs	r1, r0
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_InitTick+0x48>)
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	f7fd fecb 	bl	800011c <__udivsi3>
 8002386:	f000 fc1b 	bl	8002bc0 <HAL_SYSTICK_Config>
 800238a:	2800      	cmp	r0, #0
 800238c:	d10d      	bne.n	80023aa <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238e:	2c03      	cmp	r4, #3
 8002390:	d901      	bls.n	8002396 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002392:	2001      	movs	r0, #1
 8002394:	e00a      	b.n	80023ac <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002396:	3001      	adds	r0, #1
 8002398:	2200      	movs	r2, #0
 800239a:	0021      	movs	r1, r4
 800239c:	4240      	negs	r0, r0
 800239e:	f000 fbc3 	bl	8002b28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a2:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_InitTick+0x44>)
 80023a4:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2000      	movs	r0, #0
 80023a8:	e000      	b.n	80023ac <HAL_InitTick+0x40>
    return HAL_ERROR;
 80023aa:	2001      	movs	r0, #1
}
 80023ac:	bd10      	pop	{r4, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000000 	.word	0x20000000
 80023b4:	2000014c 	.word	0x2000014c

080023b8 <HAL_Init>:
{
 80023b8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_Init+0x24>)
 80023bc:	6813      	ldr	r3, [r2, #0]
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	430b      	orrs	r3, r1
 80023c2:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff ffd1 	bl	800236c <HAL_InitTick>
 80023ca:	1e04      	subs	r4, r0, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_Init+0x1c>
    status = HAL_ERROR;
 80023ce:	2401      	movs	r4, #1
}
 80023d0:	0020      	movs	r0, r4
 80023d2:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80023d4:	f008 fa7c 	bl	800a8d0 <HAL_MspInit>
 80023d8:	e7fa      	b.n	80023d0 <HAL_Init+0x18>
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	40022000 	.word	0x40022000

080023e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023e0:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <HAL_IncTick+0x10>)
 80023e2:	6811      	ldr	r1, [r2, #0]
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_IncTick+0x14>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	185b      	adds	r3, r3, r1
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	4770      	bx	lr
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	2000025c 	.word	0x2000025c
 80023f4:	20000000 	.word	0x20000000

080023f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023f8:	4b01      	ldr	r3, [pc, #4]	; (8002400 <HAL_GetTick+0x8>)
 80023fa:	6818      	ldr	r0, [r3, #0]
}
 80023fc:	4770      	bx	lr
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	2000025c 	.word	0x2000025c

08002404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff fff6 	bl	80023f8 <HAL_GetTick>
 800240c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240e:	1c63      	adds	r3, r4, #1
 8002410:	d002      	beq.n	8002418 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <HAL_Delay+0x20>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	1b40      	subs	r0, r0, r5
 800241e:	42a0      	cmp	r0, r4
 8002420:	d3fa      	bcc.n	8002418 <HAL_Delay+0x14>
  {
  }
}
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	20000000 	.word	0x20000000

08002428 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002428:	4a02      	ldr	r2, [pc, #8]	; (8002434 <HAL_SuspendTick+0xc>)
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	2102      	movs	r1, #2
 800242e:	438b      	bics	r3, r1
 8002430:	6013      	str	r3, [r2, #0]
}
 8002432:	4770      	bx	lr
 8002434:	e000e010 	.word	0xe000e010

08002438 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002438:	4a02      	ldr	r2, [pc, #8]	; (8002444 <HAL_ResumeTick+0xc>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	2102      	movs	r1, #2
 800243e:	430b      	orrs	r3, r1
 8002440:	6013      	str	r3, [r2, #0]
}
 8002442:	4770      	bx	lr
 8002444:	e000e010 	.word	0xe000e010

08002448 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002448:	b510      	push	{r4, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <ADC_DelayMicroSecond+0x28>)
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <ADC_DelayMicroSecond+0x2c>)
 8002454:	f7fd fe62 	bl	800011c <__udivsi3>
 8002458:	4344      	muls	r4, r0
 800245a:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800245c:	9b01      	ldr	r3, [sp, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <ADC_DelayMicroSecond+0x22>
  {
    waitLoopIndex--;
 8002462:	9b01      	ldr	r3, [sp, #4]
 8002464:	3b01      	subs	r3, #1
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	e7f8      	b.n	800245c <ADC_DelayMicroSecond+0x14>
  } 
}
 800246a:	b002      	add	sp, #8
 800246c:	bd10      	pop	{r4, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	2000014c 	.word	0x2000014c
 8002474:	000f4240 	.word	0x000f4240

08002478 <ADC_Enable>:
{
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800247c:	6802      	ldr	r2, [r0, #0]
 800247e:	6891      	ldr	r1, [r2, #8]
 8002480:	2303      	movs	r3, #3
 8002482:	400b      	ands	r3, r1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d00d      	beq.n	80024a4 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002488:	6891      	ldr	r1, [r2, #8]
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <ADC_Enable+0x7c>)
 800248c:	4219      	tst	r1, r3
 800248e:	d00e      	beq.n	80024ae <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002490:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002492:	2210      	movs	r2, #16
 8002494:	4313      	orrs	r3, r2
 8002496:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800249a:	3a0f      	subs	r2, #15
 800249c:	4313      	orrs	r3, r2
 800249e:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80024a0:	2001      	movs	r0, #1
}
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024a4:	6813      	ldr	r3, [r2, #0]
 80024a6:	07db      	lsls	r3, r3, #31
 80024a8:	d5ee      	bpl.n	8002488 <ADC_Enable+0x10>
  return HAL_OK;
 80024aa:	2000      	movs	r0, #0
 80024ac:	e7f9      	b.n	80024a2 <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 80024ae:	6893      	ldr	r3, [r2, #8]
 80024b0:	2101      	movs	r1, #1
 80024b2:	430b      	orrs	r3, r1
 80024b4:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7ff ffc6 	bl	8002448 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80024bc:	f7ff ff9c 	bl	80023f8 <HAL_GetTick>
 80024c0:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	07db      	lsls	r3, r3, #31
 80024c8:	d412      	bmi.n	80024f0 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ca:	f7ff ff95 	bl	80023f8 <HAL_GetTick>
 80024ce:	1b40      	subs	r0, r0, r5
 80024d0:	280a      	cmp	r0, #10
 80024d2:	d9f6      	bls.n	80024c2 <ADC_Enable+0x4a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	07db      	lsls	r3, r3, #31
 80024da:	d4f2      	bmi.n	80024c2 <ADC_Enable+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024de:	2210      	movs	r2, #16
 80024e0:	4313      	orrs	r3, r2
 80024e2:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024e6:	3a0f      	subs	r2, #15
 80024e8:	4313      	orrs	r3, r2
 80024ea:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80024ec:	2001      	movs	r0, #1
 80024ee:	e7d8      	b.n	80024a2 <ADC_Enable+0x2a>
  return HAL_OK;
 80024f0:	2000      	movs	r0, #0
 80024f2:	e7d6      	b.n	80024a2 <ADC_Enable+0x2a>
 80024f4:	80000017 	.word	0x80000017

080024f8 <HAL_ADC_Init>:
{
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80024fc:	d100      	bne.n	8002500 <HAL_ADC_Init+0x8>
 80024fe:	e0e2      	b.n	80026c6 <HAL_ADC_Init+0x1ce>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002500:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002502:	2b00      	cmp	r3, #0
 8002504:	d030      	beq.n	8002568 <HAL_ADC_Init+0x70>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002506:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002508:	06db      	lsls	r3, r3, #27
 800250a:	d433      	bmi.n	8002574 <HAL_ADC_Init+0x7c>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800250c:	6822      	ldr	r2, [r4, #0]
 800250e:	6891      	ldr	r1, [r2, #8]
 8002510:	2004      	movs	r0, #4
 8002512:	0005      	movs	r5, r0
 8002514:	400d      	ands	r5, r1
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002516:	4208      	tst	r0, r1
 8002518:	d12c      	bne.n	8002574 <HAL_ADC_Init+0x7c>
  ADC_STATE_CLR_SET(hadc->State,
 800251a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800251c:	4b6b      	ldr	r3, [pc, #428]	; (80026cc <HAL_ADC_Init+0x1d4>)
 800251e:	4019      	ands	r1, r3
 8002520:	3306      	adds	r3, #6
 8002522:	33ff      	adds	r3, #255	; 0xff
 8002524:	4319      	orrs	r1, r3
 8002526:	6561      	str	r1, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002528:	6891      	ldr	r1, [r2, #8]
 800252a:	3301      	adds	r3, #1
 800252c:	400b      	ands	r3, r1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d029      	beq.n	8002586 <HAL_ADC_Init+0x8e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002532:	6863      	ldr	r3, [r4, #4]
 8002534:	21c0      	movs	r1, #192	; 0xc0
 8002536:	0609      	lsls	r1, r1, #24
 8002538:	428b      	cmp	r3, r1
 800253a:	d028      	beq.n	800258e <HAL_ADC_Init+0x96>
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	05c9      	lsls	r1, r1, #23
 8002540:	428b      	cmp	r3, r1
 8002542:	d024      	beq.n	800258e <HAL_ADC_Init+0x96>
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0609      	lsls	r1, r1, #24
 8002548:	428b      	cmp	r3, r1
 800254a:	d020      	beq.n	800258e <HAL_ADC_Init+0x96>
 800254c:	6913      	ldr	r3, [r2, #16]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	6113      	str	r3, [r2, #16]
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_ADC_Init+0x1d8>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	495e      	ldr	r1, [pc, #376]	; (80026d4 <HAL_ADC_Init+0x1dc>)
 800255a:	400a      	ands	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	6861      	ldr	r1, [r4, #4]
 8002562:	430a      	orrs	r2, r1
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e01b      	b.n	80025a0 <HAL_ADC_Init+0xa8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002568:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800256a:	2250      	movs	r2, #80	; 0x50
 800256c:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800256e:	f007 f8b3 	bl	80096d8 <HAL_ADC_MspInit>
 8002572:	e7c8      	b.n	8002506 <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002574:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002576:	2210      	movs	r2, #16
 8002578:	4313      	orrs	r3, r2
 800257a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800257c:	2350      	movs	r3, #80	; 0x50
 800257e:	2200      	movs	r2, #0
 8002580:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8002582:	2001      	movs	r0, #1
}
 8002584:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	07db      	lsls	r3, r3, #31
 800258a:	d413      	bmi.n	80025b4 <HAL_ADC_Init+0xbc>
 800258c:	e7d1      	b.n	8002532 <HAL_ADC_Init+0x3a>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800258e:	6913      	ldr	r3, [r2, #16]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	6113      	str	r3, [r2, #16]
 8002596:	6822      	ldr	r2, [r4, #0]
 8002598:	6913      	ldr	r3, [r2, #16]
 800259a:	6861      	ldr	r1, [r4, #4]
 800259c:	430b      	orrs	r3, r1
 800259e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80025a0:	6822      	ldr	r2, [r4, #0]
 80025a2:	68d3      	ldr	r3, [r2, #12]
 80025a4:	2118      	movs	r1, #24
 80025a6:	438b      	bics	r3, r1
 80025a8:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80025aa:	6822      	ldr	r2, [r4, #0]
 80025ac:	68d3      	ldr	r3, [r2, #12]
 80025ae:	68a1      	ldr	r1, [r4, #8]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	60d3      	str	r3, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80025b4:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <HAL_ADC_Init+0x1d8>)
 80025b6:	6813      	ldr	r3, [r2, #0]
 80025b8:	4947      	ldr	r1, [pc, #284]	; (80026d8 <HAL_ADC_Init+0x1e0>)
 80025ba:	400b      	ands	r3, r1
 80025bc:	6013      	str	r3, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80025be:	6813      	ldr	r3, [r2, #0]
 80025c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025c2:	0649      	lsls	r1, r1, #25
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	00d2      	lsls	r2, r2, #3
 80025ce:	d404      	bmi.n	80025da <HAL_ADC_Init+0xe2>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80025d0:	6899      	ldr	r1, [r3, #8]
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	0552      	lsls	r2, r2, #21
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	493f      	ldr	r1, [pc, #252]	; (80026dc <HAL_ADC_Init+0x1e4>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80025e4:	6820      	ldr	r0, [r4, #0]
 80025e6:	68c2      	ldr	r2, [r0, #12]
 80025e8:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80025ea:	6921      	ldr	r1, [r4, #16]
 80025ec:	2902      	cmp	r1, #2
 80025ee:	d02d      	beq.n	800264c <HAL_ADC_Init+0x154>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80025f0:	432b      	orrs	r3, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80025f2:	2120      	movs	r1, #32
 80025f4:	5c61      	ldrb	r1, [r4, r1]
 80025f6:	0349      	lsls	r1, r1, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80025f8:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	5c61      	ldrb	r1, [r4, r1]
 80025fe:	0049      	lsls	r1, r1, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002600:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002602:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002604:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002606:	69a1      	ldr	r1, [r4, #24]
 8002608:	0389      	lsls	r1, r1, #14
                            hadc->Init.Overrun                               |
 800260a:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800260c:	69e1      	ldr	r1, [r4, #28]
 800260e:	03c9      	lsls	r1, r1, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002610:	430b      	orrs	r3, r1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002612:	4313      	orrs	r3, r2
 8002614:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002618:	22c2      	movs	r2, #194	; 0xc2
 800261a:	32ff      	adds	r2, #255	; 0xff
 800261c:	4293      	cmp	r3, r2
 800261e:	d005      	beq.n	800262c <HAL_ADC_Init+0x134>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002620:	6821      	ldr	r1, [r4, #0]
 8002622:	68ca      	ldr	r2, [r1, #12]
 8002624:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002626:	4303      	orrs	r3, r0
 8002628:	4313      	orrs	r3, r2
 800262a:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800262c:	2321      	movs	r3, #33	; 0x21
 800262e:	5ce3      	ldrb	r3, [r4, r3]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d00d      	beq.n	8002650 <HAL_ADC_Init+0x158>
  if (hadc->Init.OversamplingMode == ENABLE)
 8002634:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d01e      	beq.n	8002678 <HAL_ADC_Init+0x180>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	07d2      	lsls	r2, r2, #31
 8002640:	d52d      	bpl.n	800269e <HAL_ADC_Init+0x1a6>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	2101      	movs	r1, #1
 8002646:	438a      	bics	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	e028      	b.n	800269e <HAL_ADC_Init+0x1a6>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800264c:	2504      	movs	r5, #4
 800264e:	e7cf      	b.n	80025f0 <HAL_ADC_Init+0xf8>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002650:	331f      	adds	r3, #31
 8002652:	5ce3      	ldrb	r3, [r4, r3]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <HAL_ADC_Init+0x16e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002658:	6822      	ldr	r2, [r4, #0]
 800265a:	68d1      	ldr	r1, [r2, #12]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	430b      	orrs	r3, r1
 8002662:	60d3      	str	r3, [r2, #12]
 8002664:	e7e6      	b.n	8002634 <HAL_ADC_Init+0x13c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002666:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002668:	2220      	movs	r2, #32
 800266a:	4313      	orrs	r3, r2
 800266c:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002670:	3a1f      	subs	r2, #31
 8002672:	4313      	orrs	r3, r2
 8002674:	65a3      	str	r3, [r4, #88]	; 0x58
 8002676:	e7dd      	b.n	8002634 <HAL_ADC_Init+0x13c>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002678:	6822      	ldr	r2, [r4, #0]
 800267a:	6913      	ldr	r3, [r2, #16]
 800267c:	4918      	ldr	r1, [pc, #96]	; (80026e0 <HAL_ADC_Init+0x1e8>)
 800267e:	400b      	ands	r3, r1
 8002680:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002682:	6821      	ldr	r1, [r4, #0]
 8002684:	690a      	ldr	r2, [r1, #16]
 8002686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002688:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800268a:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 800268c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800268e:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002690:	4313      	orrs	r3, r2
 8002692:	610b      	str	r3, [r1, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002694:	6822      	ldr	r2, [r4, #0]
 8002696:	6913      	ldr	r3, [r2, #16]
 8002698:	2101      	movs	r1, #1
 800269a:	430b      	orrs	r3, r1
 800269c:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	6953      	ldr	r3, [r2, #20]
 80026a2:	2107      	movs	r1, #7
 80026a4:	438b      	bics	r3, r1
 80026a6:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	6953      	ldr	r3, [r2, #20]
 80026ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80026b2:	2300      	movs	r3, #0
 80026b4:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80026b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026b8:	2203      	movs	r2, #3
 80026ba:	4393      	bics	r3, r2
 80026bc:	3a02      	subs	r2, #2
 80026be:	4313      	orrs	r3, r2
 80026c0:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80026c2:	2000      	movs	r0, #0
 80026c4:	e75e      	b.n	8002584 <HAL_ADC_Init+0x8c>
    return HAL_ERROR;
 80026c6:	2001      	movs	r0, #1
 80026c8:	e75c      	b.n	8002584 <HAL_ADC_Init+0x8c>
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	fffffefd 	.word	0xfffffefd
 80026d0:	40012708 	.word	0x40012708
 80026d4:	ffc3ffff 	.word	0xffc3ffff
 80026d8:	fdffffff 	.word	0xfdffffff
 80026dc:	fffe0219 	.word	0xfffe0219
 80026e0:	fffffc03 	.word	0xfffffc03

080026e4 <HAL_ADC_Start_IT>:
{
 80026e4:	b510      	push	{r4, lr}
 80026e6:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026e8:	6803      	ldr	r3, [r0, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	075b      	lsls	r3, r3, #29
 80026ee:	d436      	bmi.n	800275e <HAL_ADC_Start_IT+0x7a>
    __HAL_LOCK(hadc);
 80026f0:	2350      	movs	r3, #80	; 0x50
 80026f2:	5cc3      	ldrb	r3, [r0, r3]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d034      	beq.n	8002762 <HAL_ADC_Start_IT+0x7e>
 80026f8:	2350      	movs	r3, #80	; 0x50
 80026fa:	2201      	movs	r2, #1
 80026fc:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026fe:	69c3      	ldr	r3, [r0, #28]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d11c      	bne.n	800273e <HAL_ADC_Start_IT+0x5a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002704:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002706:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_ADC_Start_IT+0x84>)
 800270a:	401a      	ands	r2, r3
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4313      	orrs	r3, r2
 8002712:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8002714:	2300      	movs	r3, #0
 8002716:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002718:	2250      	movs	r2, #80	; 0x50
 800271a:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	3a34      	subs	r2, #52	; 0x34
 8002720:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 8002722:	6963      	ldr	r3, [r4, #20]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d00f      	beq.n	8002748 <HAL_ADC_Start_IT+0x64>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002728:	6822      	ldr	r2, [r4, #0]
 800272a:	6853      	ldr	r3, [r2, #4]
 800272c:	211c      	movs	r1, #28
 800272e:	430b      	orrs	r3, r1
 8002730:	6053      	str	r3, [r2, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002732:	6822      	ldr	r2, [r4, #0]
 8002734:	6893      	ldr	r3, [r2, #8]
 8002736:	2104      	movs	r1, #4
 8002738:	430b      	orrs	r3, r1
 800273a:	6093      	str	r3, [r2, #8]
}
 800273c:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800273e:	f7ff fe9b 	bl	8002478 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002742:	2800      	cmp	r0, #0
 8002744:	d1fa      	bne.n	800273c <HAL_ADC_Start_IT+0x58>
 8002746:	e7de      	b.n	8002706 <HAL_ADC_Start_IT+0x22>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002748:	6822      	ldr	r2, [r4, #0]
 800274a:	6853      	ldr	r3, [r2, #4]
 800274c:	2104      	movs	r1, #4
 800274e:	438b      	bics	r3, r1
 8002750:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002752:	6822      	ldr	r2, [r4, #0]
 8002754:	6853      	ldr	r3, [r2, #4]
 8002756:	3114      	adds	r1, #20
 8002758:	430b      	orrs	r3, r1
 800275a:	6053      	str	r3, [r2, #4]
          break;
 800275c:	e7e9      	b.n	8002732 <HAL_ADC_Start_IT+0x4e>
    tmp_hal_status = HAL_BUSY;
 800275e:	2002      	movs	r0, #2
 8002760:	e7ec      	b.n	800273c <HAL_ADC_Start_IT+0x58>
    __HAL_LOCK(hadc);
 8002762:	2002      	movs	r0, #2
 8002764:	e7ea      	b.n	800273c <HAL_ADC_Start_IT+0x58>
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	fffff0fe 	.word	0xfffff0fe

0800276c <HAL_ADC_Start_DMA>:
{
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	0004      	movs	r4, r0
 8002770:	000d      	movs	r5, r1
 8002772:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002774:	6803      	ldr	r3, [r0, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	0752      	lsls	r2, r2, #29
 800277a:	d43c      	bmi.n	80027f6 <HAL_ADC_Start_DMA+0x8a>
    __HAL_LOCK(hadc);
 800277c:	2250      	movs	r2, #80	; 0x50
 800277e:	5c82      	ldrb	r2, [r0, r2]
 8002780:	2a01      	cmp	r2, #1
 8002782:	d03a      	beq.n	80027fa <HAL_ADC_Start_DMA+0x8e>
 8002784:	2101      	movs	r1, #1
 8002786:	2250      	movs	r2, #80	; 0x50
 8002788:	5481      	strb	r1, [r0, r2]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	430a      	orrs	r2, r1
 800278e:	60da      	str	r2, [r3, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002790:	69c3      	ldr	r3, [r0, #28]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_Start_DMA+0x34>
      tmp_hal_status = ADC_Enable(hadc);
 8002796:	f7ff fe6f 	bl	8002478 <ADC_Enable>
 800279a:	1e07      	subs	r7, r0, #0
    if (tmp_hal_status == HAL_OK)
 800279c:	d129      	bne.n	80027f2 <HAL_ADC_Start_DMA+0x86>
 800279e:	e000      	b.n	80027a2 <HAL_ADC_Start_DMA+0x36>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a0:	2700      	movs	r7, #0
      ADC_STATE_CLR_SET(hadc->State,
 80027a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027a4:	4a16      	ldr	r2, [pc, #88]	; (8002800 <HAL_ADC_Start_DMA+0x94>)
 80027a6:	401a      	ands	r2, r3
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4313      	orrs	r3, r2
 80027ae:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80027b0:	2300      	movs	r3, #0
 80027b2:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80027b4:	2250      	movs	r2, #80	; 0x50
 80027b6:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_ADC_Start_DMA+0x98>)
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_ADC_Start_DMA+0x9c>)
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80027c6:	4a11      	ldr	r2, [pc, #68]	; (800280c <HAL_ADC_Start_DMA+0xa0>)
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	221c      	movs	r2, #28
 80027ce:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d0:	6822      	ldr	r2, [r4, #0]
 80027d2:	6853      	ldr	r3, [r2, #4]
 80027d4:	2110      	movs	r1, #16
 80027d6:	430b      	orrs	r3, r1
 80027d8:	6053      	str	r3, [r2, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027da:	6821      	ldr	r1, [r4, #0]
 80027dc:	3140      	adds	r1, #64	; 0x40
 80027de:	0033      	movs	r3, r6
 80027e0:	002a      	movs	r2, r5
 80027e2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80027e4:	f000 faa2 	bl	8002d2c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80027e8:	6822      	ldr	r2, [r4, #0]
 80027ea:	6893      	ldr	r3, [r2, #8]
 80027ec:	2104      	movs	r1, #4
 80027ee:	430b      	orrs	r3, r1
 80027f0:	6093      	str	r3, [r2, #8]
}
 80027f2:	0038      	movs	r0, r7
 80027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 80027f6:	2702      	movs	r7, #2
 80027f8:	e7fb      	b.n	80027f2 <HAL_ADC_Start_DMA+0x86>
    __HAL_LOCK(hadc);
 80027fa:	2702      	movs	r7, #2
 80027fc:	e7f9      	b.n	80027f2 <HAL_ADC_Start_DMA+0x86>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	fffff0fe 	.word	0xfffff0fe
 8002804:	08002815 	.word	0x08002815
 8002808:	0800288b 	.word	0x0800288b
 800280c:	08002899 	.word	0x08002899

08002810 <HAL_ADC_ConvCpltCallback>:
}
 8002810:	4770      	bx	lr
	...

08002814 <ADC_DMAConvCplt>:
{
 8002814:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002816:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800281a:	2150      	movs	r1, #80	; 0x50
 800281c:	4211      	tst	r1, r2
 800281e:	d12c      	bne.n	800287a <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	430a      	orrs	r2, r1
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68d0      	ldr	r0, [r2, #12]
 800282e:	21c0      	movs	r1, #192	; 0xc0
 8002830:	0109      	lsls	r1, r1, #4
 8002832:	4208      	tst	r0, r1
 8002834:	d114      	bne.n	8002860 <ADC_DMAConvCplt+0x4c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002836:	2120      	movs	r1, #32
 8002838:	5c59      	ldrb	r1, [r3, r1]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800283a:	2900      	cmp	r1, #0
 800283c:	d110      	bne.n	8002860 <ADC_DMAConvCplt+0x4c>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800283e:	6811      	ldr	r1, [r2, #0]
 8002840:	0709      	lsls	r1, r1, #28
 8002842:	d50d      	bpl.n	8002860 <ADC_DMAConvCplt+0x4c>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002844:	6891      	ldr	r1, [r2, #8]
 8002846:	0749      	lsls	r1, r1, #29
 8002848:	d40e      	bmi.n	8002868 <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800284a:	6851      	ldr	r1, [r2, #4]
 800284c:	200c      	movs	r0, #12
 800284e:	4381      	bics	r1, r0
 8002850:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002852:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002854:	490b      	ldr	r1, [pc, #44]	; (8002884 <ADC_DMAConvCplt+0x70>)
 8002856:	400a      	ands	r2, r1
 8002858:	3104      	adds	r1, #4
 800285a:	31ff      	adds	r1, #255	; 0xff
 800285c:	430a      	orrs	r2, r1
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002860:	0018      	movs	r0, r3
 8002862:	f7ff ffd5 	bl	8002810 <HAL_ADC_ConvCpltCallback>
}
 8002866:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800286a:	2120      	movs	r1, #32
 800286c:	430a      	orrs	r2, r1
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002872:	391f      	subs	r1, #31
 8002874:	430a      	orrs	r2, r1
 8002876:	659a      	str	r2, [r3, #88]	; 0x58
 8002878:	e7f2      	b.n	8002860 <ADC_DMAConvCplt+0x4c>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800287a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	4798      	blx	r3
}
 8002880:	e7f1      	b.n	8002866 <ADC_DMAConvCplt+0x52>
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	fffffefe 	.word	0xfffffefe

08002888 <HAL_ADC_ConvHalfCpltCallback>:
}
 8002888:	4770      	bx	lr

0800288a <ADC_DMAHalfConvCplt>:
{
 800288a:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800288c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800288e:	f7ff fffb 	bl	8002888 <HAL_ADC_ConvHalfCpltCallback>
}
 8002892:	bd10      	pop	{r4, pc}

08002894 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8002894:	4770      	bx	lr

08002896 <HAL_ADC_ErrorCallback>:
}
 8002896:	4770      	bx	lr

08002898 <ADC_DMAError>:
{
 8002898:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800289a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800289c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800289e:	2240      	movs	r2, #64	; 0x40
 80028a0:	4313      	orrs	r3, r2
 80028a2:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028a4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80028a6:	3a3c      	subs	r2, #60	; 0x3c
 80028a8:	4313      	orrs	r3, r2
 80028aa:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 80028ac:	f7ff fff3 	bl	8002896 <HAL_ADC_ErrorCallback>
}
 80028b0:	bd10      	pop	{r4, pc}
	...

080028b4 <HAL_ADC_IRQHandler>:
{
 80028b4:	b510      	push	{r4, lr}
 80028b6:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028b8:	6803      	ldr	r3, [r0, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	0752      	lsls	r2, r2, #29
 80028be:	d502      	bpl.n	80028c6 <HAL_ADC_IRQHandler+0x12>
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	0752      	lsls	r2, r2, #29
 80028c4:	d405      	bmi.n	80028d2 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80028c6:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028c8:	0712      	lsls	r2, r2, #28
 80028ca:	d52d      	bpl.n	8002928 <HAL_ADC_IRQHandler+0x74>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	0712      	lsls	r2, r2, #28
 80028d0:	d52a      	bpl.n	8002928 <HAL_ADC_IRQHandler+0x74>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80028d4:	06d2      	lsls	r2, r2, #27
 80028d6:	d404      	bmi.n	80028e2 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	430a      	orrs	r2, r1
 80028e0:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028e2:	68d9      	ldr	r1, [r3, #12]
 80028e4:	22c0      	movs	r2, #192	; 0xc0
 80028e6:	0112      	lsls	r2, r2, #4
 80028e8:	4211      	tst	r1, r2
 80028ea:	d114      	bne.n	8002916 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028ec:	2220      	movs	r2, #32
 80028ee:	5ca2      	ldrb	r2, [r4, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028f0:	2a00      	cmp	r2, #0
 80028f2:	d110      	bne.n	8002916 <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	0712      	lsls	r2, r2, #28
 80028f8:	d50d      	bpl.n	8002916 <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	0752      	lsls	r2, r2, #29
 80028fe:	d434      	bmi.n	800296a <HAL_ADC_IRQHandler+0xb6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	210c      	movs	r1, #12
 8002904:	438a      	bics	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002908:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800290a:	4a22      	ldr	r2, [pc, #136]	; (8002994 <HAL_ADC_IRQHandler+0xe0>)
 800290c:	4013      	ands	r3, r2
 800290e:	3204      	adds	r2, #4
 8002910:	32ff      	adds	r2, #255	; 0xff
 8002912:	4313      	orrs	r3, r2
 8002914:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002916:	0020      	movs	r0, r4
 8002918:	f7ff ff7a 	bl	8002810 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800291c:	69a3      	ldr	r3, [r4, #24]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d002      	beq.n	8002928 <HAL_ADC_IRQHandler+0x74>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	220c      	movs	r2, #12
 8002926:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	0612      	lsls	r2, r2, #24
 800292e:	d502      	bpl.n	8002936 <HAL_ADC_IRQHandler+0x82>
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	061b      	lsls	r3, r3, #24
 8002934:	d422      	bmi.n	800297c <HAL_ADC_IRQHandler+0xc8>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	06d2      	lsls	r2, r2, #27
 800293c:	d514      	bpl.n	8002968 <HAL_ADC_IRQHandler+0xb4>
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	06d2      	lsls	r2, r2, #27
 8002942:	d511      	bpl.n	8002968 <HAL_ADC_IRQHandler+0xb4>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002944:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002946:	2a00      	cmp	r2, #0
 8002948:	d002      	beq.n	8002950 <HAL_ADC_IRQHandler+0x9c>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800294a:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800294c:	07d2      	lsls	r2, r2, #31
 800294e:	d508      	bpl.n	8002962 <HAL_ADC_IRQHandler+0xae>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002950:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002952:	2102      	movs	r1, #2
 8002954:	430a      	orrs	r2, r1
 8002956:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002958:	2210      	movs	r2, #16
 800295a:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800295c:	0020      	movs	r0, r4
 800295e:	f7ff ff9a 	bl	8002896 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	2210      	movs	r2, #16
 8002966:	601a      	str	r2, [r3, #0]
}
 8002968:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800296c:	2220      	movs	r2, #32
 800296e:	4313      	orrs	r3, r2
 8002970:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002972:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002974:	3a1f      	subs	r2, #31
 8002976:	4313      	orrs	r3, r2
 8002978:	65a3      	str	r3, [r4, #88]	; 0x58
 800297a:	e7cc      	b.n	8002916 <HAL_ADC_IRQHandler+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800297c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	025b      	lsls	r3, r3, #9
 8002982:	4313      	orrs	r3, r2
 8002984:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002986:	0020      	movs	r0, r4
 8002988:	f7ff ff84 	bl	8002894 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e7d0      	b.n	8002936 <HAL_ADC_IRQHandler+0x82>
 8002994:	fffffefe 	.word	0xfffffefe

08002998 <HAL_ADC_ConfigChannel>:
{
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	0004      	movs	r4, r0
 800299c:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800299e:	2350      	movs	r3, #80	; 0x50
 80029a0:	5cc3      	ldrb	r3, [r0, r3]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d05c      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0xc8>
 80029a6:	2350      	movs	r3, #80	; 0x50
 80029a8:	2201      	movs	r2, #1
 80029aa:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80029ac:	6803      	ldr	r3, [r0, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	0752      	lsls	r2, r2, #29
 80029b2:	d423      	bmi.n	80029fc <HAL_ADC_ConfigChannel+0x64>
  if (sConfig->Rank != ADC_RANK_NONE)
 80029b4:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <HAL_ADC_ConfigChannel+0xcc>)
 80029b6:	6849      	ldr	r1, [r1, #4]
 80029b8:	4291      	cmp	r1, r2
 80029ba:	d032      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80029bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80029be:	682a      	ldr	r2, [r5, #0]
 80029c0:	0352      	lsls	r2, r2, #13
 80029c2:	0b52      	lsrs	r2, r2, #13
 80029c4:	430a      	orrs	r2, r1
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	035b      	lsls	r3, r3, #13
 80029cc:	d41f      	bmi.n	8002a0e <HAL_ADC_ConfigChannel+0x76>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	039b      	lsls	r3, r3, #14
 80029d2:	d505      	bpl.n	80029e0 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80029d4:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <HAL_ADC_ConfigChannel+0xd0>)
 80029d6:	6811      	ldr	r1, [r2, #0]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	03db      	lsls	r3, r3, #15
 80029dc:	430b      	orrs	r3, r1
 80029de:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	03db      	lsls	r3, r3, #15
 80029e4:	d505      	bpl.n	80029f2 <HAL_ADC_ConfigChannel+0x5a>
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80029e6:	4a20      	ldr	r2, [pc, #128]	; (8002a68 <HAL_ADC_ConfigChannel+0xd0>)
 80029e8:	6811      	ldr	r1, [r2, #0]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	045b      	lsls	r3, r3, #17
 80029ee:	430b      	orrs	r3, r1
 80029f0:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80029f2:	2350      	movs	r3, #80	; 0x50
 80029f4:	2200      	movs	r2, #0
 80029f6:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80029f8:	2000      	movs	r0, #0
}
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80029fe:	2220      	movs	r2, #32
 8002a00:	4313      	orrs	r3, r2
 8002a02:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002a04:	2350      	movs	r3, #80	; 0x50
 8002a06:	2200      	movs	r2, #0
 8002a08:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	e7f5      	b.n	80029fa <HAL_ADC_ConfigChannel+0x62>
      ADC->CCR |= ADC_CCR_TSEN;   
 8002a0e:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_ADC_ConfigChannel+0xd0>)
 8002a10:	6811      	ldr	r1, [r2, #0]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	430b      	orrs	r3, r1
 8002a18:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002a1a:	200a      	movs	r0, #10
 8002a1c:	f7ff fd14 	bl	8002448 <ADC_DelayMicroSecond>
 8002a20:	e7d5      	b.n	80029ce <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002a22:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a24:	682a      	ldr	r2, [r5, #0]
 8002a26:	0352      	lsls	r2, r2, #13
 8002a28:	0b52      	lsrs	r2, r2, #13
 8002a2a:	4391      	bics	r1, r2
 8002a2c:	6299      	str	r1, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002a2e:	682b      	ldr	r3, [r5, #0]
 8002a30:	035b      	lsls	r3, r3, #13
 8002a32:	d504      	bpl.n	8002a3e <HAL_ADC_ConfigChannel+0xa6>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002a34:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <HAL_ADC_ConfigChannel+0xd0>)
 8002a36:	6813      	ldr	r3, [r2, #0]
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <HAL_ADC_ConfigChannel+0xd4>)
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	039b      	lsls	r3, r3, #14
 8002a42:	d504      	bpl.n	8002a4e <HAL_ADC_ConfigChannel+0xb6>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002a44:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_ADC_ConfigChannel+0xd0>)
 8002a46:	6813      	ldr	r3, [r2, #0]
 8002a48:	4909      	ldr	r1, [pc, #36]	; (8002a70 <HAL_ADC_ConfigChannel+0xd8>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002a4e:	682b      	ldr	r3, [r5, #0]
 8002a50:	03db      	lsls	r3, r3, #15
 8002a52:	d5ce      	bpl.n	80029f2 <HAL_ADC_ConfigChannel+0x5a>
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_ADC_ConfigChannel+0xd0>)
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	4906      	ldr	r1, [pc, #24]	; (8002a74 <HAL_ADC_ConfigChannel+0xdc>)
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e7c8      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8002a60:	2002      	movs	r0, #2
 8002a62:	e7ca      	b.n	80029fa <HAL_ADC_ConfigChannel+0x62>
 8002a64:	00001001 	.word	0x00001001
 8002a68:	40012708 	.word	0x40012708
 8002a6c:	ff7fffff 	.word	0xff7fffff
 8002a70:	ffbfffff 	.word	0xffbfffff
 8002a74:	feffffff 	.word	0xfeffffff

08002a78 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7c:	2350      	movs	r3, #80	; 0x50
 8002a7e:	5cc3      	ldrb	r3, [r0, r3]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d04d      	beq.n	8002b20 <HAL_ADCEx_Calibration_Start+0xa8>
 8002a84:	2350      	movs	r3, #80	; 0x50
 8002a86:	2201      	movs	r2, #1
 8002a88:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a8a:	6803      	ldr	r3, [r0, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
 8002a8e:	3202      	adds	r2, #2
 8002a90:	400a      	ands	r2, r1
 8002a92:	2a01      	cmp	r2, #1
 8002a94:	d108      	bne.n	8002aa8 <HAL_ADCEx_Calibration_Start+0x30>
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	07d2      	lsls	r2, r2, #31
 8002a9a:	d505      	bpl.n	8002aa8 <HAL_ADCEx_Calibration_Start+0x30>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a9c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	6543      	str	r3, [r0, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	e037      	b.n	8002b18 <HAL_ADCEx_Calibration_Start+0xa0>
    ADC_STATE_CLR_SET(hadc->State, 
 8002aa8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002aaa:	491e      	ldr	r1, [pc, #120]	; (8002b24 <HAL_ADCEx_Calibration_Start+0xac>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	3106      	adds	r1, #6
 8002ab0:	31ff      	adds	r1, #255	; 0xff
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ab6:	68de      	ldr	r6, [r3, #12]
 8002ab8:	3101      	adds	r1, #1
 8002aba:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	438a      	bics	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002ac2:	6822      	ldr	r2, [r4, #0]
 8002ac4:	6891      	ldr	r1, [r2, #8]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	430b      	orrs	r3, r1
 8002acc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002ace:	f7ff fc93 	bl	80023f8 <HAL_GetTick>
 8002ad2:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	da13      	bge.n	8002b04 <HAL_ADCEx_Calibration_Start+0x8c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002adc:	f7ff fc8c 	bl	80023f8 <HAL_GetTick>
 8002ae0:	1b40      	subs	r0, r0, r5
 8002ae2:	280a      	cmp	r0, #10
 8002ae4:	d9f6      	bls.n	8002ad4 <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	daf2      	bge.n	8002ad4 <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 8002aee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002af0:	2212      	movs	r2, #18
 8002af2:	4393      	bics	r3, r2
 8002af4:	3a02      	subs	r2, #2
 8002af6:	4313      	orrs	r3, r2
 8002af8:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8002afa:	2350      	movs	r3, #80	; 0x50
 8002afc:	2200      	movs	r2, #0
 8002afe:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8002b00:	2001      	movs	r0, #1
 8002b02:	e00c      	b.n	8002b1e <HAL_ADCEx_Calibration_Start+0xa6>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	4316      	orrs	r6, r2
 8002b08:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002b0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	4393      	bics	r3, r2
 8002b10:	3a02      	subs	r2, #2
 8002b12:	4313      	orrs	r3, r2
 8002b14:	6563      	str	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b16:	2000      	movs	r0, #0
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b18:	2350      	movs	r3, #80	; 0x50
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8002b20:	2002      	movs	r0, #2
 8002b22:	e7fc      	b.n	8002b1e <HAL_ADCEx_Calibration_Start+0xa6>
 8002b24:	fffffefd 	.word	0xfffffefd

08002b28 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b28:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	db11      	blt.n	8002b52 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b2e:	0883      	lsrs	r3, r0, #2
 8002b30:	4e13      	ldr	r6, [pc, #76]	; (8002b80 <HAL_NVIC_SetPriority+0x58>)
 8002b32:	33c0      	adds	r3, #192	; 0xc0
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	599d      	ldr	r5, [r3, r6]
 8002b38:	2403      	movs	r4, #3
 8002b3a:	4020      	ands	r0, r4
 8002b3c:	00c0      	lsls	r0, r0, #3
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	0014      	movs	r4, r2
 8002b42:	4084      	lsls	r4, r0
 8002b44:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b46:	0189      	lsls	r1, r1, #6
 8002b48:	400a      	ands	r2, r1
 8002b4a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b4c:	432a      	orrs	r2, r5
 8002b4e:	519a      	str	r2, [r3, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002b50:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b52:	230f      	movs	r3, #15
 8002b54:	4003      	ands	r3, r0
 8002b56:	3b08      	subs	r3, #8
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3306      	adds	r3, #6
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_NVIC_SetPriority+0x5c>)
 8002b60:	4694      	mov	ip, r2
 8002b62:	4463      	add	r3, ip
 8002b64:	685c      	ldr	r4, [r3, #4]
 8002b66:	2203      	movs	r2, #3
 8002b68:	4010      	ands	r0, r2
 8002b6a:	00c0      	lsls	r0, r0, #3
 8002b6c:	32fc      	adds	r2, #252	; 0xfc
 8002b6e:	0015      	movs	r5, r2
 8002b70:	4085      	lsls	r5, r0
 8002b72:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b74:	0189      	lsls	r1, r1, #6
 8002b76:	400a      	ands	r2, r1
 8002b78:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b7a:	4322      	orrs	r2, r4
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	e7e7      	b.n	8002b50 <HAL_NVIC_SetPriority+0x28>
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	db05      	blt.n	8002b98 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8c:	231f      	movs	r3, #31
 8002b8e:	4018      	ands	r0, r3
 8002b90:	3b1e      	subs	r3, #30
 8002b92:	4083      	lsls	r3, r0
 8002b94:	4a01      	ldr	r2, [pc, #4]	; (8002b9c <HAL_NVIC_EnableIRQ+0x14>)
 8002b96:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b98:	4770      	bx	lr
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	db0a      	blt.n	8002bba <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba4:	231f      	movs	r3, #31
 8002ba6:	4018      	ands	r0, r3
 8002ba8:	3b1e      	subs	r3, #30
 8002baa:	4083      	lsls	r3, r0
 8002bac:	4903      	ldr	r1, [pc, #12]	; (8002bbc <HAL_NVIC_DisableIRQ+0x1c>)
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bb6:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc0:	3801      	subs	r0, #1
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	045b      	lsls	r3, r3, #17
 8002bc6:	4298      	cmp	r0, r3
 8002bc8:	d20f      	bcs.n	8002bea <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_SYSTICK_Config+0x30>)
 8002bcc:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bce:	4809      	ldr	r0, [pc, #36]	; (8002bf4 <HAL_SYSTICK_Config+0x34>)
 8002bd0:	6a03      	ldr	r3, [r0, #32]
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	21c0      	movs	r1, #192	; 0xc0
 8002bd8:	0609      	lsls	r1, r1, #24
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bde:	2300      	movs	r3, #0
 8002be0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be2:	3307      	adds	r3, #7
 8002be4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be6:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002be8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8002bec:	e7fc      	b.n	8002be8 <HAL_SYSTICK_Config+0x28>
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	e000e010 	.word	0xe000e010
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf8:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002bfa:	251c      	movs	r5, #28
 8002bfc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002bfe:	4025      	ands	r5, r4
 8002c00:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002c02:	2401      	movs	r4, #1
 8002c04:	40ac      	lsls	r4, r5
 8002c06:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c08:	6804      	ldr	r4, [r0, #0]
 8002c0a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c0c:	6883      	ldr	r3, [r0, #8]
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d004      	beq.n	8002c1c <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c12:	6803      	ldr	r3, [r0, #0]
 8002c14:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c16:	6803      	ldr	r3, [r0, #0]
 8002c18:	60da      	str	r2, [r3, #12]
  }
}
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8002c1c:	6803      	ldr	r3, [r0, #0]
 8002c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c20:	6803      	ldr	r3, [r0, #0]
 8002c22:	60d9      	str	r1, [r3, #12]
 8002c24:	e7f9      	b.n	8002c1a <DMA_SetConfig+0x22>
	...

08002c28 <HAL_DMA_Init>:
{
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 8002c2c:	d03d      	beq.n	8002caa <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c2e:	6805      	ldr	r5, [r0, #0]
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_DMA_Init+0x88>)
 8002c32:	18e8      	adds	r0, r5, r3
 8002c34:	2114      	movs	r1, #20
 8002c36:	f7fd fa71 	bl	800011c <__udivsi3>
 8002c3a:	0080      	lsls	r0, r0, #2
 8002c3c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_DMA_Init+0x8c>)
 8002c40:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c42:	2325      	movs	r3, #37	; 0x25
 8002c44:	2202      	movs	r2, #2
 8002c46:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 8002c48:	682b      	ldr	r3, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c4a:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <HAL_DMA_Init+0x90>)
 8002c4c:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002c4e:	68a3      	ldr	r3, [r4, #8]
 8002c50:	68e1      	ldr	r1, [r4, #12]
 8002c52:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c54:	6921      	ldr	r1, [r4, #16]
 8002c56:	430b      	orrs	r3, r1
 8002c58:	6961      	ldr	r1, [r4, #20]
 8002c5a:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5c:	69a1      	ldr	r1, [r4, #24]
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	69e1      	ldr	r1, [r4, #28]
 8002c62:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c64:	6a21      	ldr	r1, [r4, #32]
 8002c66:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002c68:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8002c6a:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	01db      	lsls	r3, r3, #7
 8002c70:	68a2      	ldr	r2, [r4, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d010      	beq.n	8002c98 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_DMA_Init+0x94>)
 8002c78:	6819      	ldr	r1, [r3, #0]
 8002c7a:	221c      	movs	r2, #28
 8002c7c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002c7e:	4015      	ands	r5, r2
 8002c80:	200f      	movs	r0, #15
 8002c82:	40a8      	lsls	r0, r5
 8002c84:	4381      	bics	r1, r0
 8002c86:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002c8c:	4002      	ands	r2, r0
 8002c8e:	6860      	ldr	r0, [r4, #4]
 8002c90:	4090      	lsls	r0, r2
 8002c92:	0002      	movs	r2, r0
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8002c9c:	2225      	movs	r2, #37	; 0x25
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 8002ca2:	3a01      	subs	r2, #1
 8002ca4:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002ca6:	2000      	movs	r0, #0
}
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002caa:	2001      	movs	r0, #1
 8002cac:	e7fc      	b.n	8002ca8 <HAL_DMA_Init+0x80>
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	bffdfff8 	.word	0xbffdfff8
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	ffff800f 	.word	0xffff800f
 8002cbc:	400200a8 	.word	0x400200a8

08002cc0 <HAL_DMA_DeInit>:
{
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	1e04      	subs	r4, r0, #0
  if (NULL == hdma )
 8002cc4:	d029      	beq.n	8002d1a <HAL_DMA_DeInit+0x5a>
  __HAL_DMA_DISABLE(hdma);
 8002cc6:	6802      	ldr	r2, [r0, #0]
 8002cc8:	6813      	ldr	r3, [r2, #0]
 8002cca:	2501      	movs	r5, #1
 8002ccc:	43ab      	bics	r3, r5
 8002cce:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cd0:	6806      	ldr	r6, [r0, #0]
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <HAL_DMA_DeInit+0x60>)
 8002cd4:	18f0      	adds	r0, r6, r3
 8002cd6:	2114      	movs	r1, #20
 8002cd8:	f7fd fa20 	bl	800011c <__udivsi3>
 8002cdc:	0080      	lsls	r0, r0, #2
 8002cde:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_DMA_DeInit+0x64>)
 8002ce2:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6033      	str	r3, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ce8:	221c      	movs	r2, #28
 8002cea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002cec:	4011      	ands	r1, r2
 8002cee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002cf0:	408d      	lsls	r5, r1
 8002cf2:	6045      	str	r5, [r0, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cf4:	4d0c      	ldr	r5, [pc, #48]	; (8002d28 <HAL_DMA_DeInit+0x68>)
 8002cf6:	6829      	ldr	r1, [r5, #0]
 8002cf8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002cfa:	4002      	ands	r2, r0
 8002cfc:	200f      	movs	r0, #15
 8002cfe:	4090      	lsls	r0, r2
 8002d00:	4381      	bics	r1, r0
 8002d02:	6029      	str	r1, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8002d04:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002d06:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002d08:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002d0a:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8002d0e:	2225      	movs	r2, #37	; 0x25
 8002d10:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8002d12:	3a01      	subs	r2, #1
 8002d14:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002d16:	2000      	movs	r0, #0
}
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	e7fc      	b.n	8002d18 <HAL_DMA_DeInit+0x58>
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	bffdfff8 	.word	0xbffdfff8
 8002d24:	40020000 	.word	0x40020000
 8002d28:	400200a8 	.word	0x400200a8

08002d2c <HAL_DMA_Start_IT>:
{
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002d30:	2024      	movs	r0, #36	; 0x24
 8002d32:	5c20      	ldrb	r0, [r4, r0]
 8002d34:	2801      	cmp	r0, #1
 8002d36:	d032      	beq.n	8002d9e <HAL_DMA_Start_IT+0x72>
 8002d38:	2024      	movs	r0, #36	; 0x24
 8002d3a:	2501      	movs	r5, #1
 8002d3c:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d3e:	3001      	adds	r0, #1
 8002d40:	5c20      	ldrb	r0, [r4, r0]
 8002d42:	2801      	cmp	r0, #1
 8002d44:	d004      	beq.n	8002d50 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8002d46:	2324      	movs	r3, #36	; 0x24
 8002d48:	2200      	movs	r2, #0
 8002d4a:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8002d4c:	2002      	movs	r0, #2
}
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d50:	3024      	adds	r0, #36	; 0x24
 8002d52:	3501      	adds	r5, #1
 8002d54:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d56:	2000      	movs	r0, #0
 8002d58:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002d5a:	6825      	ldr	r5, [r4, #0]
 8002d5c:	6828      	ldr	r0, [r5, #0]
 8002d5e:	2601      	movs	r6, #1
 8002d60:	43b0      	bics	r0, r6
 8002d62:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d64:	0020      	movs	r0, r4
 8002d66:	f7ff ff47 	bl	8002bf8 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8002d6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d70:	6822      	ldr	r2, [r4, #0]
 8002d72:	6813      	ldr	r3, [r2, #0]
 8002d74:	210e      	movs	r1, #14
 8002d76:	430b      	orrs	r3, r1
 8002d78:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002d7a:	6822      	ldr	r2, [r4, #0]
 8002d7c:	6813      	ldr	r3, [r2, #0]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2000      	movs	r0, #0
 8002d86:	e7e2      	b.n	8002d4e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d88:	6822      	ldr	r2, [r4, #0]
 8002d8a:	6813      	ldr	r3, [r2, #0]
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	438b      	bics	r3, r1
 8002d90:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d92:	6822      	ldr	r2, [r4, #0]
 8002d94:	6813      	ldr	r3, [r2, #0]
 8002d96:	3106      	adds	r1, #6
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e7ed      	b.n	8002d7a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002d9e:	2002      	movs	r0, #2
 8002da0:	e7d5      	b.n	8002d4e <HAL_DMA_Start_IT+0x22>

08002da2 <HAL_DMA_Abort>:
{
 8002da2:	b510      	push	{r4, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da4:	2325      	movs	r3, #37	; 0x25
 8002da6:	5cc3      	ldrb	r3, [r0, r3]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d006      	beq.n	8002dba <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dac:	2304      	movs	r3, #4
 8002dae:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002db0:	3320      	adds	r3, #32
 8002db2:	2200      	movs	r2, #0
 8002db4:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8002db6:	2001      	movs	r0, #1
}
 8002db8:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dba:	6802      	ldr	r2, [r0, #0]
 8002dbc:	6813      	ldr	r3, [r2, #0]
 8002dbe:	210e      	movs	r1, #14
 8002dc0:	438b      	bics	r3, r1
 8002dc2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002dc4:	6801      	ldr	r1, [r0, #0]
 8002dc6:	680a      	ldr	r2, [r1, #0]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	439a      	bics	r2, r3
 8002dcc:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002dce:	221c      	movs	r2, #28
 8002dd0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002dd6:	001c      	movs	r4, r3
 8002dd8:	4094      	lsls	r4, r2
 8002dda:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	2225      	movs	r2, #37	; 0x25
 8002dde:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8002de0:	3323      	adds	r3, #35	; 0x23
 8002de2:	2200      	movs	r2, #0
 8002de4:	54c2      	strb	r2, [r0, r3]
    return status;
 8002de6:	2000      	movs	r0, #0
 8002de8:	e7e6      	b.n	8002db8 <HAL_DMA_Abort+0x16>

08002dea <HAL_DMA_Abort_IT>:
{
 8002dea:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dec:	2325      	movs	r3, #37	; 0x25
 8002dee:	5cc3      	ldrb	r3, [r0, r3]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df4:	2304      	movs	r3, #4
 8002df6:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
}
 8002dfa:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfc:	6802      	ldr	r2, [r0, #0]
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	210e      	movs	r1, #14
 8002e02:	438b      	bics	r3, r1
 8002e04:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e06:	6801      	ldr	r1, [r0, #0]
 8002e08:	680a      	ldr	r2, [r1, #0]
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	439a      	bics	r2, r3
 8002e0e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e10:	221c      	movs	r2, #28
 8002e12:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002e14:	400a      	ands	r2, r1
 8002e16:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002e18:	001c      	movs	r4, r3
 8002e1a:	4094      	lsls	r4, r2
 8002e1c:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	2225      	movs	r2, #37	; 0x25
 8002e20:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8002e22:	3323      	adds	r3, #35	; 0x23
 8002e24:	2200      	movs	r2, #0
 8002e26:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8002e28:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 8002e2e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002e30:	2000      	movs	r0, #0
 8002e32:	e7e2      	b.n	8002dfa <HAL_DMA_Abort_IT+0x10>
 8002e34:	2000      	movs	r0, #0
 8002e36:	e7e0      	b.n	8002dfa <HAL_DMA_Abort_IT+0x10>

08002e38 <HAL_DMA_IRQHandler>:
{
 8002e38:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e3c:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002e3e:	6804      	ldr	r4, [r0, #0]
 8002e40:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e42:	231c      	movs	r3, #28
 8002e44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002e46:	4013      	ands	r3, r2
 8002e48:	2204      	movs	r2, #4
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	4211      	tst	r1, r2
 8002e4e:	d014      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x42>
 8002e50:	076a      	lsls	r2, r5, #29
 8002e52:	d512      	bpl.n	8002e7a <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	d403      	bmi.n	8002e62 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	4393      	bics	r3, r2
 8002e60:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002e62:	221c      	movs	r2, #28
 8002e64:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e66:	401a      	ands	r2, r3
 8002e68:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002e70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d000      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 8002e76:	4798      	blx	r3
}
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	4211      	tst	r1, r2
 8002e80:	d01a      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x80>
 8002e82:	07aa      	lsls	r2, r5, #30
 8002e84:	d518      	bpl.n	8002eb8 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	069b      	lsls	r3, r3, #26
 8002e8a:	d406      	bmi.n	8002e9a <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	220a      	movs	r2, #10
 8002e90:	4393      	bics	r3, r2
 8002e92:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002e94:	2325      	movs	r3, #37	; 0x25
 8002e96:	3a09      	subs	r2, #9
 8002e98:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e9a:	221c      	movs	r2, #28
 8002e9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	4093      	lsls	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002ea8:	2324      	movs	r3, #36	; 0x24
 8002eaa:	2200      	movs	r2, #0
 8002eac:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8002eae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0e1      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 8002eb4:	4798      	blx	r3
 8002eb6:	e7df      	b.n	8002e78 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002eb8:	2208      	movs	r2, #8
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	4211      	tst	r1, r2
 8002ebe:	d0db      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x40>
 8002ec0:	072b      	lsls	r3, r5, #28
 8002ec2:	d5d9      	bpl.n	8002e78 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	220e      	movs	r2, #14
 8002ec8:	4393      	bics	r3, r2
 8002eca:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ecc:	320e      	adds	r2, #14
 8002ece:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002ed0:	401a      	ands	r2, r3
 8002ed2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	001c      	movs	r4, r3
 8002ed8:	4094      	lsls	r4, r2
 8002eda:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002edc:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002ede:	2225      	movs	r2, #37	; 0x25
 8002ee0:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8002ee2:	3323      	adds	r3, #35	; 0x23
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8002ee8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0c4      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 8002eee:	4798      	blx	r3
  return;
 8002ef0:	e7c2      	b.n	8002e78 <HAL_DMA_IRQHandler+0x40>
	...

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8002ef6:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ef8:	e057      	b.n	8002faa <HAL_GPIO_Init+0xb6>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002efa:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002efc:	005f      	lsls	r7, r3, #1
 8002efe:	2603      	movs	r6, #3
 8002f00:	40be      	lsls	r6, r7
 8002f02:	43b4      	bics	r4, r6
 8002f04:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f06:	68cc      	ldr	r4, [r1, #12]
 8002f08:	40bc      	lsls	r4, r7
 8002f0a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002f0c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f0e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f10:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f12:	684a      	ldr	r2, [r1, #4]
 8002f14:	0916      	lsrs	r6, r2, #4
 8002f16:	2201      	movs	r2, #1
 8002f18:	4032      	ands	r2, r6
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002f1e:	6042      	str	r2, [r0, #4]
 8002f20:	e053      	b.n	8002fca <HAL_GPIO_Init+0xd6>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f22:	08dc      	lsrs	r4, r3, #3
 8002f24:	3408      	adds	r4, #8
 8002f26:	00a4      	lsls	r4, r4, #2
 8002f28:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002f2a:	3205      	adds	r2, #5
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	270f      	movs	r7, #15
 8002f32:	4097      	lsls	r7, r2
 8002f34:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002f36:	690f      	ldr	r7, [r1, #16]
 8002f38:	4097      	lsls	r7, r2
 8002f3a:	003a      	movs	r2, r7
 8002f3c:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8002f3e:	5022      	str	r2, [r4, r0]
 8002f40:	e057      	b.n	8002ff2 <HAL_GPIO_Init+0xfe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002f42:	2605      	movs	r6, #5
 8002f44:	e000      	b.n	8002f48 <HAL_GPIO_Init+0x54>
 8002f46:	2600      	movs	r6, #0
 8002f48:	40a6      	lsls	r6, r4
 8002f4a:	0034      	movs	r4, r6
 8002f4c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f4e:	3202      	adds	r2, #2
 8002f50:	0092      	lsls	r2, r2, #2
 8002f52:	4e47      	ldr	r6, [pc, #284]	; (8003070 <HAL_GPIO_Init+0x17c>)
 8002f54:	5194      	str	r4, [r2, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f56:	4a47      	ldr	r2, [pc, #284]	; (8003074 <HAL_GPIO_Init+0x180>)
 8002f58:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	43ea      	mvns	r2, r5
 8002f5c:	0026      	movs	r6, r4
 8002f5e:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f60:	684f      	ldr	r7, [r1, #4]
 8002f62:	03ff      	lsls	r7, r7, #15
 8002f64:	d501      	bpl.n	8002f6a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002f66:	432c      	orrs	r4, r5
 8002f68:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 8002f6a:	4c42      	ldr	r4, [pc, #264]	; (8003074 <HAL_GPIO_Init+0x180>)
 8002f6c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002f6e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	0026      	movs	r6, r4
 8002f72:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f74:	684f      	ldr	r7, [r1, #4]
 8002f76:	03bf      	lsls	r7, r7, #14
 8002f78:	d501      	bpl.n	8002f7e <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8002f7a:	432c      	orrs	r4, r5
 8002f7c:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8002f7e:	4c3d      	ldr	r4, [pc, #244]	; (8003074 <HAL_GPIO_Init+0x180>)
 8002f80:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f82:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	0026      	movs	r6, r4
 8002f86:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f88:	684f      	ldr	r7, [r1, #4]
 8002f8a:	02ff      	lsls	r7, r7, #11
 8002f8c:	d501      	bpl.n	8002f92 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8002f8e:	432c      	orrs	r4, r5
 8002f90:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8002f92:	4c38      	ldr	r4, [pc, #224]	; (8003074 <HAL_GPIO_Init+0x180>)
 8002f94:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002f96:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002f98:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f9a:	684e      	ldr	r6, [r1, #4]
 8002f9c:	02b6      	lsls	r6, r6, #10
 8002f9e:	d501      	bpl.n	8002fa4 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8002fa0:	002a      	movs	r2, r5
 8002fa2:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 8002fa4:	4c33      	ldr	r4, [pc, #204]	; (8003074 <HAL_GPIO_Init+0x180>)
 8002fa6:	60e2      	str	r2, [r4, #12]
      }
    }
    position++;
 8002fa8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8002faa:	680c      	ldr	r4, [r1, #0]
 8002fac:	0022      	movs	r2, r4
 8002fae:	40da      	lsrs	r2, r3
 8002fb0:	d05d      	beq.n	800306e <HAL_GPIO_Init+0x17a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	0025      	movs	r5, r4
 8002fb8:	4015      	ands	r5, r2
    if (iocurrent)
 8002fba:	4214      	tst	r4, r2
 8002fbc:	d0f4      	beq.n	8002fa8 <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fbe:	2403      	movs	r4, #3
 8002fc0:	684e      	ldr	r6, [r1, #4]
 8002fc2:	4034      	ands	r4, r6
 8002fc4:	3c01      	subs	r4, #1
 8002fc6:	2c01      	cmp	r4, #1
 8002fc8:	d997      	bls.n	8002efa <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fca:	2203      	movs	r2, #3
 8002fcc:	684c      	ldr	r4, [r1, #4]
 8002fce:	4022      	ands	r2, r4
 8002fd0:	2a03      	cmp	r2, #3
 8002fd2:	d009      	beq.n	8002fe8 <HAL_GPIO_Init+0xf4>
        temp = GPIOx->PUPDR;
 8002fd4:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fd6:	005e      	lsls	r6, r3, #1
 8002fd8:	2403      	movs	r4, #3
 8002fda:	40b4      	lsls	r4, r6
 8002fdc:	43a2      	bics	r2, r4
 8002fde:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe0:	688a      	ldr	r2, [r1, #8]
 8002fe2:	40b2      	lsls	r2, r6
 8002fe4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002fe6:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe8:	2203      	movs	r2, #3
 8002fea:	684c      	ldr	r4, [r1, #4]
 8002fec:	4022      	ands	r2, r4
 8002fee:	2a02      	cmp	r2, #2
 8002ff0:	d097      	beq.n	8002f22 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8002ff2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ff4:	005e      	lsls	r6, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	0017      	movs	r7, r2
 8002ffa:	40b7      	lsls	r7, r6
 8002ffc:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ffe:	684f      	ldr	r7, [r1, #4]
 8003000:	403a      	ands	r2, r7
 8003002:	40b2      	lsls	r2, r6
 8003004:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003006:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003008:	22c0      	movs	r2, #192	; 0xc0
 800300a:	0292      	lsls	r2, r2, #10
 800300c:	684c      	ldr	r4, [r1, #4]
 800300e:	4214      	tst	r4, r2
 8003010:	d0ca      	beq.n	8002fa8 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003012:	4c19      	ldr	r4, [pc, #100]	; (8003078 <HAL_GPIO_Init+0x184>)
 8003014:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003016:	2601      	movs	r6, #1
 8003018:	4332      	orrs	r2, r6
 800301a:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800301c:	089a      	lsrs	r2, r3, #2
 800301e:	1c94      	adds	r4, r2, #2
 8003020:	00a4      	lsls	r4, r4, #2
 8003022:	4e13      	ldr	r6, [pc, #76]	; (8003070 <HAL_GPIO_Init+0x17c>)
 8003024:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003026:	2603      	movs	r6, #3
 8003028:	401e      	ands	r6, r3
 800302a:	00b4      	lsls	r4, r6, #2
 800302c:	260f      	movs	r6, #15
 800302e:	40a6      	lsls	r6, r4
 8003030:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003032:	26a0      	movs	r6, #160	; 0xa0
 8003034:	05f6      	lsls	r6, r6, #23
 8003036:	42b0      	cmp	r0, r6
 8003038:	d085      	beq.n	8002f46 <HAL_GPIO_Init+0x52>
 800303a:	4e10      	ldr	r6, [pc, #64]	; (800307c <HAL_GPIO_Init+0x188>)
 800303c:	42b0      	cmp	r0, r6
 800303e:	d00e      	beq.n	800305e <HAL_GPIO_Init+0x16a>
 8003040:	4e0f      	ldr	r6, [pc, #60]	; (8003080 <HAL_GPIO_Init+0x18c>)
 8003042:	42b0      	cmp	r0, r6
 8003044:	d00d      	beq.n	8003062 <HAL_GPIO_Init+0x16e>
 8003046:	4e0f      	ldr	r6, [pc, #60]	; (8003084 <HAL_GPIO_Init+0x190>)
 8003048:	42b0      	cmp	r0, r6
 800304a:	d00c      	beq.n	8003066 <HAL_GPIO_Init+0x172>
 800304c:	4e0e      	ldr	r6, [pc, #56]	; (8003088 <HAL_GPIO_Init+0x194>)
 800304e:	42b0      	cmp	r0, r6
 8003050:	d00b      	beq.n	800306a <HAL_GPIO_Init+0x176>
 8003052:	4e0e      	ldr	r6, [pc, #56]	; (800308c <HAL_GPIO_Init+0x198>)
 8003054:	42b0      	cmp	r0, r6
 8003056:	d100      	bne.n	800305a <HAL_GPIO_Init+0x166>
 8003058:	e773      	b.n	8002f42 <HAL_GPIO_Init+0x4e>
 800305a:	2606      	movs	r6, #6
 800305c:	e774      	b.n	8002f48 <HAL_GPIO_Init+0x54>
 800305e:	2601      	movs	r6, #1
 8003060:	e772      	b.n	8002f48 <HAL_GPIO_Init+0x54>
 8003062:	2602      	movs	r6, #2
 8003064:	e770      	b.n	8002f48 <HAL_GPIO_Init+0x54>
 8003066:	2603      	movs	r6, #3
 8003068:	e76e      	b.n	8002f48 <HAL_GPIO_Init+0x54>
 800306a:	2604      	movs	r6, #4
 800306c:	e76c      	b.n	8002f48 <HAL_GPIO_Init+0x54>
  }
}
 800306e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003070:	40010000 	.word	0x40010000
 8003074:	40010400 	.word	0x40010400
 8003078:	40021000 	.word	0x40021000
 800307c:	50000400 	.word	0x50000400
 8003080:	50000800 	.word	0x50000800
 8003084:	50000c00 	.word	0x50000c00
 8003088:	50001000 	.word	0x50001000
 800308c:	50001c00 	.word	0x50001c00

08003090 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	46ce      	mov	lr, r9
 8003094:	4647      	mov	r7, r8
 8003096:	b580      	push	{r7, lr}
 8003098:	4689      	mov	r9, r1
  uint32_t position = 0x00U;
 800309a:	2300      	movs	r3, #0

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800309c:	e023      	b.n	80030e6 <HAL_GPIO_DeInit+0x56>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800309e:	2105      	movs	r1, #5
 80030a0:	4688      	mov	r8, r1
 80030a2:	e001      	b.n	80030a8 <HAL_GPIO_DeInit+0x18>
 80030a4:	2100      	movs	r1, #0
 80030a6:	4688      	mov	r8, r1
 80030a8:	4641      	mov	r1, r8
 80030aa:	40a1      	lsls	r1, r4
 80030ac:	42a9      	cmp	r1, r5
 80030ae:	d052      	beq.n	8003156 <HAL_GPIO_DeInit+0xc6>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80030b0:	6804      	ldr	r4, [r0, #0]
 80030b2:	005e      	lsls	r6, r3, #1
 80030b4:	2503      	movs	r5, #3
 80030b6:	40b5      	lsls	r5, r6
 80030b8:	432c      	orrs	r4, r5
 80030ba:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80030bc:	08dc      	lsrs	r4, r3, #3
 80030be:	3408      	adds	r4, #8
 80030c0:	00a4      	lsls	r4, r4, #2
 80030c2:	5827      	ldr	r7, [r4, r0]
 80030c4:	2607      	movs	r6, #7
 80030c6:	401e      	ands	r6, r3
 80030c8:	00b6      	lsls	r6, r6, #2
 80030ca:	210f      	movs	r1, #15
 80030cc:	40b1      	lsls	r1, r6
 80030ce:	438f      	bics	r7, r1
 80030d0:	5027      	str	r7, [r4, r0]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030d2:	68c4      	ldr	r4, [r0, #12]
 80030d4:	43ac      	bics	r4, r5
 80030d6:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80030d8:	6844      	ldr	r4, [r0, #4]
 80030da:	4394      	bics	r4, r2
 80030dc:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80030de:	6882      	ldr	r2, [r0, #8]
 80030e0:	43aa      	bics	r2, r5
 80030e2:	6082      	str	r2, [r0, #8]
    }
    position++;
 80030e4:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 80030e6:	464a      	mov	r2, r9
 80030e8:	40da      	lsrs	r2, r3
 80030ea:	d049      	beq.n	8003180 <HAL_GPIO_DeInit+0xf0>
    iocurrent = (GPIO_Pin) & (1U << position);
 80030ec:	2201      	movs	r2, #1
 80030ee:	409a      	lsls	r2, r3
 80030f0:	464c      	mov	r4, r9
 80030f2:	4014      	ands	r4, r2
 80030f4:	46a4      	mov	ip, r4
    if (iocurrent)
 80030f6:	4649      	mov	r1, r9
 80030f8:	4211      	tst	r1, r2
 80030fa:	d0f3      	beq.n	80030e4 <HAL_GPIO_DeInit+0x54>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80030fc:	089f      	lsrs	r7, r3, #2
 80030fe:	1cbc      	adds	r4, r7, #2
 8003100:	00a4      	lsls	r4, r4, #2
 8003102:	4d21      	ldr	r5, [pc, #132]	; (8003188 <HAL_GPIO_DeInit+0xf8>)
 8003104:	5965      	ldr	r5, [r4, r5]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003106:	2403      	movs	r4, #3
 8003108:	401c      	ands	r4, r3
 800310a:	00a4      	lsls	r4, r4, #2
 800310c:	260f      	movs	r6, #15
 800310e:	40a6      	lsls	r6, r4
 8003110:	4035      	ands	r5, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003112:	21a0      	movs	r1, #160	; 0xa0
 8003114:	05c9      	lsls	r1, r1, #23
 8003116:	4288      	cmp	r0, r1
 8003118:	d0c4      	beq.n	80030a4 <HAL_GPIO_DeInit+0x14>
 800311a:	491c      	ldr	r1, [pc, #112]	; (800318c <HAL_GPIO_DeInit+0xfc>)
 800311c:	4288      	cmp	r0, r1
 800311e:	d00e      	beq.n	800313e <HAL_GPIO_DeInit+0xae>
 8003120:	491b      	ldr	r1, [pc, #108]	; (8003190 <HAL_GPIO_DeInit+0x100>)
 8003122:	4288      	cmp	r0, r1
 8003124:	d00e      	beq.n	8003144 <HAL_GPIO_DeInit+0xb4>
 8003126:	491b      	ldr	r1, [pc, #108]	; (8003194 <HAL_GPIO_DeInit+0x104>)
 8003128:	4288      	cmp	r0, r1
 800312a:	d00e      	beq.n	800314a <HAL_GPIO_DeInit+0xba>
 800312c:	491a      	ldr	r1, [pc, #104]	; (8003198 <HAL_GPIO_DeInit+0x108>)
 800312e:	4288      	cmp	r0, r1
 8003130:	d00e      	beq.n	8003150 <HAL_GPIO_DeInit+0xc0>
 8003132:	491a      	ldr	r1, [pc, #104]	; (800319c <HAL_GPIO_DeInit+0x10c>)
 8003134:	4288      	cmp	r0, r1
 8003136:	d0b2      	beq.n	800309e <HAL_GPIO_DeInit+0xe>
 8003138:	2106      	movs	r1, #6
 800313a:	4688      	mov	r8, r1
 800313c:	e7b4      	b.n	80030a8 <HAL_GPIO_DeInit+0x18>
 800313e:	2101      	movs	r1, #1
 8003140:	4688      	mov	r8, r1
 8003142:	e7b1      	b.n	80030a8 <HAL_GPIO_DeInit+0x18>
 8003144:	2102      	movs	r1, #2
 8003146:	4688      	mov	r8, r1
 8003148:	e7ae      	b.n	80030a8 <HAL_GPIO_DeInit+0x18>
 800314a:	2103      	movs	r1, #3
 800314c:	4688      	mov	r8, r1
 800314e:	e7ab      	b.n	80030a8 <HAL_GPIO_DeInit+0x18>
 8003150:	2104      	movs	r1, #4
 8003152:	4688      	mov	r8, r1
 8003154:	e7a8      	b.n	80030a8 <HAL_GPIO_DeInit+0x18>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003156:	4c12      	ldr	r4, [pc, #72]	; (80031a0 <HAL_GPIO_DeInit+0x110>)
 8003158:	6825      	ldr	r5, [r4, #0]
 800315a:	4661      	mov	r1, ip
 800315c:	438d      	bics	r5, r1
 800315e:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003160:	6865      	ldr	r5, [r4, #4]
 8003162:	438d      	bics	r5, r1
 8003164:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003166:	68a5      	ldr	r5, [r4, #8]
 8003168:	438d      	bics	r5, r1
 800316a:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800316c:	68e5      	ldr	r5, [r4, #12]
 800316e:	438d      	bics	r5, r1
 8003170:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003172:	4905      	ldr	r1, [pc, #20]	; (8003188 <HAL_GPIO_DeInit+0xf8>)
 8003174:	1cbc      	adds	r4, r7, #2
 8003176:	00a4      	lsls	r4, r4, #2
 8003178:	5865      	ldr	r5, [r4, r1]
 800317a:	43b5      	bics	r5, r6
 800317c:	5065      	str	r5, [r4, r1]
 800317e:	e797      	b.n	80030b0 <HAL_GPIO_DeInit+0x20>
  }
}
 8003180:	bcc0      	pop	{r6, r7}
 8003182:	46b9      	mov	r9, r7
 8003184:	46b0      	mov	r8, r6
 8003186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003188:	40010000 	.word	0x40010000
 800318c:	50000400 	.word	0x50000400
 8003190:	50000800 	.word	0x50000800
 8003194:	50000c00 	.word	0x50000c00
 8003198:	50001000 	.word	0x50001000
 800319c:	50001c00 	.word	0x50001c00
 80031a0:	40010400 	.word	0x40010400

080031a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031a4:	6903      	ldr	r3, [r0, #16]
 80031a6:	420b      	tst	r3, r1
 80031a8:	d001      	beq.n	80031ae <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80031aa:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80031ac:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 80031ae:	2000      	movs	r0, #0
 80031b0:	e7fc      	b.n	80031ac <HAL_GPIO_ReadPin+0x8>

080031b2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031b2:	2a00      	cmp	r2, #0
 80031b4:	d001      	beq.n	80031ba <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b6:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80031b8:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80031ba:	6281      	str	r1, [r0, #40]	; 0x28
}
 80031bc:	e7fc      	b.n	80031b8 <HAL_GPIO_WritePin+0x6>

080031be <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031be:	4770      	bx	lr

080031c0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80031c0:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	4218      	tst	r0, r3
 80031c8:	d100      	bne.n	80031cc <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80031ca:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031cc:	4b02      	ldr	r3, [pc, #8]	; (80031d8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80031ce:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031d0:	f7ff fff5 	bl	80031be <HAL_GPIO_EXTI_Callback>
}
 80031d4:	e7f9      	b.n	80031ca <HAL_GPIO_EXTI_IRQHandler+0xa>
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	40010400 	.word	0x40010400

080031dc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80031dc:	4a03      	ldr	r2, [pc, #12]	; (80031ec <HAL_PWR_EnableBkUpAccess+0x10>)
 80031de:	6811      	ldr	r1, [r2, #0]
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	4770      	bx	lr
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	40007000 	.word	0x40007000

080031f0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	0002      	movs	r2, r0
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80031f4:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <HAL_PWR_EnterSTOPMode+0x70>)
 80031f6:	681d      	ldr	r5, [r3, #0]
 80031f8:	2080      	movs	r0, #128	; 0x80
 80031fa:	0080      	lsls	r0, r0, #2
 80031fc:	002c      	movs	r4, r5
 80031fe:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003200:	4b18      	ldr	r3, [pc, #96]	; (8003264 <HAL_PWR_EnterSTOPMode+0x74>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	2601      	movs	r6, #1
 8003206:	4033      	ands	r3, r6
  if((ulpbit != 0) && (vrefinbit != 0))
 8003208:	4205      	tst	r5, r0
 800320a:	d006      	beq.n	800321a <HAL_PWR_EnterSTOPMode+0x2a>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <HAL_PWR_EnterSTOPMode+0x2a>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003210:	4d13      	ldr	r5, [pc, #76]	; (8003260 <HAL_PWR_EnterSTOPMode+0x70>)
 8003212:	6828      	ldr	r0, [r5, #0]
 8003214:	4e14      	ldr	r6, [pc, #80]	; (8003268 <HAL_PWR_EnterSTOPMode+0x78>)
 8003216:	4030      	ands	r0, r6
 8003218:	6028      	str	r0, [r5, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800321a:	4d11      	ldr	r5, [pc, #68]	; (8003260 <HAL_PWR_EnterSTOPMode+0x70>)
 800321c:	6828      	ldr	r0, [r5, #0]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800321e:	2603      	movs	r6, #3
 8003220:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003222:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 8003224:	6028      	str	r0, [r5, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003226:	4811      	ldr	r0, [pc, #68]	; (800326c <HAL_PWR_EnterSTOPMode+0x7c>)
 8003228:	6902      	ldr	r2, [r0, #16]
 800322a:	2504      	movs	r5, #4
 800322c:	432a      	orrs	r2, r5
 800322e:	6102      	str	r2, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003230:	2901      	cmp	r1, #1
 8003232:	d012      	beq.n	800325a <HAL_PWR_EnterSTOPMode+0x6a>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003234:	bf40      	sev
    __WFE();
 8003236:	bf20      	wfe
    __WFE();
 8003238:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800323a:	490c      	ldr	r1, [pc, #48]	; (800326c <HAL_PWR_EnterSTOPMode+0x7c>)
 800323c:	690a      	ldr	r2, [r1, #16]
 800323e:	2004      	movs	r0, #4
 8003240:	4382      	bics	r2, r0
 8003242:	610a      	str	r2, [r1, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003244:	2c00      	cmp	r4, #0
 8003246:	d007      	beq.n	8003258 <HAL_PWR_EnterSTOPMode+0x68>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_PWR_EnterSTOPMode+0x68>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <HAL_PWR_EnterSTOPMode+0x70>)
 800324e:	6811      	ldr	r1, [r2, #0]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	430b      	orrs	r3, r1
 8003256:	6013      	str	r3, [r2, #0]
  }
}
 8003258:	bd70      	pop	{r4, r5, r6, pc}
    __WFI();
 800325a:	bf30      	wfi
 800325c:	e7ed      	b.n	800323a <HAL_PWR_EnterSTOPMode+0x4a>
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	40007000 	.word	0x40007000
 8003264:	40010000 	.word	0x40010000
 8003268:	fffffdff 	.word	0xfffffdff
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8003270:	4a03      	ldr	r2, [pc, #12]	; (8003280 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8003272:	6811      	ldr	r1, [r2, #0]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	430b      	orrs	r3, r1
 800327a:	6013      	str	r3, [r2, #0]
}
 800327c:	4770      	bx	lr
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	40007000 	.word	0x40007000

08003284 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003286:	4b26      	ldr	r3, [pc, #152]	; (8003320 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003288:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800328a:	230c      	movs	r3, #12
 800328c:	4013      	ands	r3, r2
 800328e:	2b08      	cmp	r3, #8
 8003290:	d042      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x94>
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d011      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x36>
 8003296:	2b04      	cmp	r3, #4
 8003298:	d009      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCC_GetSysClockFreq+0x9c>)
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	0b52      	lsrs	r2, r2, #13
 80032a0:	2307      	movs	r3, #7
 80032a2:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032a4:	3301      	adds	r3, #1
 80032a6:	2080      	movs	r0, #128	; 0x80
 80032a8:	0200      	lsls	r0, r0, #8
 80032aa:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 80032ac:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032ae:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	06db      	lsls	r3, r3, #27
 80032b4:	d532      	bpl.n	800331c <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 80032b6:	481b      	ldr	r0, [pc, #108]	; (8003324 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032b8:	e7f8      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80032ba:	0c91      	lsrs	r1, r2, #18
 80032bc:	230f      	movs	r3, #15
 80032be:	400b      	ands	r3, r1
 80032c0:	4919      	ldr	r1, [pc, #100]	; (8003328 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032c2:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80032c4:	0d92      	lsrs	r2, r2, #22
 80032c6:	2303      	movs	r3, #3
 80032c8:	401a      	ands	r2, r3
 80032ca:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	03db      	lsls	r3, r3, #15
 80032d2:	d509      	bpl.n	80032e8 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <HAL_RCC_GetSysClockFreq+0xa8>)
 80032d6:	2300      	movs	r3, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	f7fd f8f3 	bl	80004c4 <__aeabi_lmul>
 80032de:	0022      	movs	r2, r4
 80032e0:	2300      	movs	r3, #0
 80032e2:	f7fd f8cf 	bl	8000484 <__aeabi_uldivmod>
 80032e6:	e7e1      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	06db      	lsls	r3, r3, #27
 80032ee:	d509      	bpl.n	8003304 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80032f0:	4a0c      	ldr	r2, [pc, #48]	; (8003324 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032f2:	2300      	movs	r3, #0
 80032f4:	2100      	movs	r1, #0
 80032f6:	f7fd f8e5 	bl	80004c4 <__aeabi_lmul>
 80032fa:	0022      	movs	r2, r4
 80032fc:	2300      	movs	r3, #0
 80032fe:	f7fd f8c1 	bl	8000484 <__aeabi_uldivmod>
 8003302:	e7d3      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_RCC_GetSysClockFreq+0xac>)
 8003306:	2300      	movs	r3, #0
 8003308:	2100      	movs	r1, #0
 800330a:	f7fd f8db 	bl	80004c4 <__aeabi_lmul>
 800330e:	0022      	movs	r2, r4
 8003310:	2300      	movs	r3, #0
 8003312:	f7fd f8b7 	bl	8000484 <__aeabi_uldivmod>
 8003316:	e7c9      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 8003318:	4804      	ldr	r0, [pc, #16]	; (800332c <HAL_RCC_GetSysClockFreq+0xa8>)
 800331a:	e7c7      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 800331c:	4804      	ldr	r0, [pc, #16]	; (8003330 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 800331e:	e7c5      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28>
 8003320:	40021000 	.word	0x40021000
 8003324:	003d0900 	.word	0x003d0900
 8003328:	08010cc4 	.word	0x08010cc4
 800332c:	007a1200 	.word	0x007a1200
 8003330:	00f42400 	.word	0x00f42400

08003334 <HAL_RCC_OscConfig>:
{
 8003334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003336:	b083      	sub	sp, #12
 8003338:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 800333a:	d100      	bne.n	800333e <HAL_RCC_OscConfig+0xa>
 800333c:	e29f      	b.n	800387e <HAL_RCC_OscConfig+0x54a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333e:	4bc5      	ldr	r3, [pc, #788]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	250c      	movs	r5, #12
 8003344:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003346:	68de      	ldr	r6, [r3, #12]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	025b      	lsls	r3, r3, #9
 800334c:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334e:	6803      	ldr	r3, [r0, #0]
 8003350:	07db      	lsls	r3, r3, #31
 8003352:	d536      	bpl.n	80033c2 <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003354:	2d08      	cmp	r5, #8
 8003356:	d02c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003358:	2d0c      	cmp	r5, #12
 800335a:	d028      	beq.n	80033ae <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335c:	6863      	ldr	r3, [r4, #4]
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	0252      	lsls	r2, r2, #9
 8003362:	4293      	cmp	r3, r2
 8003364:	d055      	beq.n	8003412 <HAL_RCC_OscConfig+0xde>
 8003366:	22a0      	movs	r2, #160	; 0xa0
 8003368:	02d2      	lsls	r2, r2, #11
 800336a:	4293      	cmp	r3, r2
 800336c:	d058      	beq.n	8003420 <HAL_RCC_OscConfig+0xec>
 800336e:	4bb9      	ldr	r3, [pc, #740]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	49b9      	ldr	r1, [pc, #740]	; (8003658 <HAL_RCC_OscConfig+0x324>)
 8003374:	400a      	ands	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	0249      	lsls	r1, r1, #9
 800337e:	400a      	ands	r2, r1
 8003380:	9201      	str	r2, [sp, #4]
 8003382:	9a01      	ldr	r2, [sp, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	49b5      	ldr	r1, [pc, #724]	; (800365c <HAL_RCC_OscConfig+0x328>)
 8003388:	400a      	ands	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d052      	beq.n	8003438 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8003392:	f7ff f831 	bl	80023f8 <HAL_GetTick>
 8003396:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003398:	4bae      	ldr	r3, [pc, #696]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	039b      	lsls	r3, r3, #14
 800339e:	d410      	bmi.n	80033c2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a0:	f7ff f82a 	bl	80023f8 <HAL_GetTick>
 80033a4:	1bc0      	subs	r0, r0, r7
 80033a6:	2864      	cmp	r0, #100	; 0x64
 80033a8:	d9f6      	bls.n	8003398 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 80033aa:	2003      	movs	r0, #3
 80033ac:	e268      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033ae:	2e00      	cmp	r6, #0
 80033b0:	d0d4      	beq.n	800335c <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b2:	4ba8      	ldr	r3, [pc, #672]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	039b      	lsls	r3, r3, #14
 80033b8:	d503      	bpl.n	80033c2 <HAL_RCC_OscConfig+0x8e>
 80033ba:	6863      	ldr	r3, [r4, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d100      	bne.n	80033c2 <HAL_RCC_OscConfig+0x8e>
 80033c0:	e260      	b.n	8003884 <HAL_RCC_OscConfig+0x550>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	079b      	lsls	r3, r3, #30
 80033c6:	d56d      	bpl.n	80034a4 <HAL_RCC_OscConfig+0x170>
    hsi_state = RCC_OscInitStruct->HSIState;
 80033c8:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80033ca:	069a      	lsls	r2, r3, #26
 80033cc:	d505      	bpl.n	80033da <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80033ce:	48a1      	ldr	r0, [pc, #644]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80033d0:	6802      	ldr	r2, [r0, #0]
 80033d2:	2120      	movs	r1, #32
 80033d4:	430a      	orrs	r2, r1
 80033d6:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80033d8:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033da:	2d04      	cmp	r5, #4
 80033dc:	d03c      	beq.n	8003458 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033de:	2d0c      	cmp	r5, #12
 80033e0:	d038      	beq.n	8003454 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d100      	bne.n	80033e8 <HAL_RCC_OscConfig+0xb4>
 80033e6:	e0b0      	b.n	800354a <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80033e8:	499a      	ldr	r1, [pc, #616]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80033ea:	680a      	ldr	r2, [r1, #0]
 80033ec:	2009      	movs	r0, #9
 80033ee:	4382      	bics	r2, r0
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80033f4:	f7ff f800 	bl	80023f8 <HAL_GetTick>
 80033f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033fa:	4b96      	ldr	r3, [pc, #600]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	075b      	lsls	r3, r3, #29
 8003400:	d500      	bpl.n	8003404 <HAL_RCC_OscConfig+0xd0>
 8003402:	e099      	b.n	8003538 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003404:	f7fe fff8 	bl	80023f8 <HAL_GetTick>
 8003408:	1b80      	subs	r0, r0, r6
 800340a:	2802      	cmp	r0, #2
 800340c:	d9f5      	bls.n	80033fa <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800340e:	2003      	movs	r0, #3
 8003410:	e236      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003412:	4a90      	ldr	r2, [pc, #576]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003414:	6811      	ldr	r1, [r2, #0]
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	025b      	lsls	r3, r3, #9
 800341a:	430b      	orrs	r3, r1
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e7b5      	b.n	800338c <HAL_RCC_OscConfig+0x58>
 8003420:	4b8c      	ldr	r3, [pc, #560]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	02d2      	lsls	r2, r2, #11
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	6819      	ldr	r1, [r3, #0]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	0252      	lsls	r2, r2, #9
 8003432:	430a      	orrs	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	e7a9      	b.n	800338c <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8003438:	f7fe ffde 	bl	80023f8 <HAL_GetTick>
 800343c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800343e:	4b85      	ldr	r3, [pc, #532]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	039b      	lsls	r3, r3, #14
 8003444:	d5bd      	bpl.n	80033c2 <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003446:	f7fe ffd7 	bl	80023f8 <HAL_GetTick>
 800344a:	1bc0      	subs	r0, r0, r7
 800344c:	2864      	cmp	r0, #100	; 0x64
 800344e:	d9f6      	bls.n	800343e <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003450:	2003      	movs	r0, #3
 8003452:	e215      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003454:	2e00      	cmp	r6, #0
 8003456:	d1c4      	bne.n	80033e2 <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003458:	4a7e      	ldr	r2, [pc, #504]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	0752      	lsls	r2, r2, #29
 800345e:	d502      	bpl.n	8003466 <HAL_RCC_OscConfig+0x132>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d100      	bne.n	8003466 <HAL_RCC_OscConfig+0x132>
 8003464:	e210      	b.n	8003888 <HAL_RCC_OscConfig+0x554>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4e7b      	ldr	r6, [pc, #492]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003468:	6872      	ldr	r2, [r6, #4]
 800346a:	497d      	ldr	r1, [pc, #500]	; (8003660 <HAL_RCC_OscConfig+0x32c>)
 800346c:	400a      	ands	r2, r1
 800346e:	6921      	ldr	r1, [r4, #16]
 8003470:	0209      	lsls	r1, r1, #8
 8003472:	430a      	orrs	r2, r1
 8003474:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003476:	6832      	ldr	r2, [r6, #0]
 8003478:	2109      	movs	r1, #9
 800347a:	438a      	bics	r2, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003480:	f7ff ff00 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003484:	68f2      	ldr	r2, [r6, #12]
 8003486:	0912      	lsrs	r2, r2, #4
 8003488:	230f      	movs	r3, #15
 800348a:	4013      	ands	r3, r2
 800348c:	4a75      	ldr	r2, [pc, #468]	; (8003664 <HAL_RCC_OscConfig+0x330>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	40d8      	lsrs	r0, r3
 8003492:	4b75      	ldr	r3, [pc, #468]	; (8003668 <HAL_RCC_OscConfig+0x334>)
 8003494:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003496:	4b75      	ldr	r3, [pc, #468]	; (800366c <HAL_RCC_OscConfig+0x338>)
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	f7fe ff67 	bl	800236c <HAL_InitTick>
      if(status != HAL_OK)
 800349e:	2800      	cmp	r0, #0
 80034a0:	d000      	beq.n	80034a4 <HAL_RCC_OscConfig+0x170>
 80034a2:	e1ed      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	06db      	lsls	r3, r3, #27
 80034a8:	d52d      	bpl.n	8003506 <HAL_RCC_OscConfig+0x1d2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034aa:	2d00      	cmp	r5, #0
 80034ac:	d160      	bne.n	8003570 <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ae:	4b69      	ldr	r3, [pc, #420]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	059b      	lsls	r3, r3, #22
 80034b4:	d503      	bpl.n	80034be <HAL_RCC_OscConfig+0x18a>
 80034b6:	69e3      	ldr	r3, [r4, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d100      	bne.n	80034be <HAL_RCC_OscConfig+0x18a>
 80034bc:	e1e6      	b.n	800388c <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034be:	4a65      	ldr	r2, [pc, #404]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80034c0:	6853      	ldr	r3, [r2, #4]
 80034c2:	496b      	ldr	r1, [pc, #428]	; (8003670 <HAL_RCC_OscConfig+0x33c>)
 80034c4:	400b      	ands	r3, r1
 80034c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034cc:	6853      	ldr	r3, [r2, #4]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	6a21      	ldr	r1, [r4, #32]
 80034d4:	0609      	lsls	r1, r1, #24
 80034d6:	430b      	orrs	r3, r1
 80034d8:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034dc:	0b59      	lsrs	r1, r3, #13
 80034de:	3101      	adds	r1, #1
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80034e6:	68d1      	ldr	r1, [r2, #12]
 80034e8:	0909      	lsrs	r1, r1, #4
 80034ea:	220f      	movs	r2, #15
 80034ec:	400a      	ands	r2, r1
 80034ee:	495d      	ldr	r1, [pc, #372]	; (8003664 <HAL_RCC_OscConfig+0x330>)
 80034f0:	5c8a      	ldrb	r2, [r1, r2]
 80034f2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034f4:	4a5c      	ldr	r2, [pc, #368]	; (8003668 <HAL_RCC_OscConfig+0x334>)
 80034f6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80034f8:	4b5c      	ldr	r3, [pc, #368]	; (800366c <HAL_RCC_OscConfig+0x338>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	f7fe ff36 	bl	800236c <HAL_InitTick>
        if(status != HAL_OK)
 8003500:	2800      	cmp	r0, #0
 8003502:	d000      	beq.n	8003506 <HAL_RCC_OscConfig+0x1d2>
 8003504:	e1bc      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	071b      	lsls	r3, r3, #28
 800350a:	d57d      	bpl.n	8003608 <HAL_RCC_OscConfig+0x2d4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800350c:	6963      	ldr	r3, [r4, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d067      	beq.n	80035e2 <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 8003512:	4a50      	ldr	r2, [pc, #320]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003514:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003516:	2101      	movs	r1, #1
 8003518:	430b      	orrs	r3, r1
 800351a:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 800351c:	f7fe ff6c 	bl	80023f8 <HAL_GetTick>
 8003520:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003522:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	079b      	lsls	r3, r3, #30
 8003528:	d46e      	bmi.n	8003608 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe ff65 	bl	80023f8 <HAL_GetTick>
 800352e:	1b80      	subs	r0, r0, r6
 8003530:	2802      	cmp	r0, #2
 8003532:	d9f6      	bls.n	8003522 <HAL_RCC_OscConfig+0x1ee>
          return HAL_TIMEOUT;
 8003534:	2003      	movs	r0, #3
 8003536:	e1a3      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4946      	ldr	r1, [pc, #280]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 800353a:	684b      	ldr	r3, [r1, #4]
 800353c:	4a48      	ldr	r2, [pc, #288]	; (8003660 <HAL_RCC_OscConfig+0x32c>)
 800353e:	4013      	ands	r3, r2
 8003540:	6922      	ldr	r2, [r4, #16]
 8003542:	0212      	lsls	r2, r2, #8
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
 8003548:	e7ac      	b.n	80034a4 <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 800354a:	4a42      	ldr	r2, [pc, #264]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 800354c:	6813      	ldr	r3, [r2, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	438b      	bics	r3, r1
 8003552:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003554:	f7fe ff50 	bl	80023f8 <HAL_GetTick>
 8003558:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800355a:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	075b      	lsls	r3, r3, #29
 8003560:	d5a0      	bpl.n	80034a4 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003562:	f7fe ff49 	bl	80023f8 <HAL_GetTick>
 8003566:	1b80      	subs	r0, r0, r6
 8003568:	2802      	cmp	r0, #2
 800356a:	d9f6      	bls.n	800355a <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 800356c:	2003      	movs	r0, #3
 800356e:	e187      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003570:	69e3      	ldr	r3, [r4, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d022      	beq.n	80035bc <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 8003576:	4a37      	ldr	r2, [pc, #220]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003578:	6811      	ldr	r1, [r2, #0]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	430b      	orrs	r3, r1
 8003580:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003582:	f7fe ff39 	bl	80023f8 <HAL_GetTick>
 8003586:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003588:	4b32      	ldr	r3, [pc, #200]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	059b      	lsls	r3, r3, #22
 800358e:	d406      	bmi.n	800359e <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003590:	f7fe ff32 	bl	80023f8 <HAL_GetTick>
 8003594:	1b80      	subs	r0, r0, r6
 8003596:	2802      	cmp	r0, #2
 8003598:	d9f6      	bls.n	8003588 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 800359a:	2003      	movs	r0, #3
 800359c:	e170      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800359e:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80035a0:	6853      	ldr	r3, [r2, #4]
 80035a2:	4933      	ldr	r1, [pc, #204]	; (8003670 <HAL_RCC_OscConfig+0x33c>)
 80035a4:	400b      	ands	r3, r1
 80035a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ac:	6853      	ldr	r3, [r2, #4]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	6a21      	ldr	r1, [r4, #32]
 80035b4:	0609      	lsls	r1, r1, #24
 80035b6:	430b      	orrs	r3, r1
 80035b8:	6053      	str	r3, [r2, #4]
 80035ba:	e7a4      	b.n	8003506 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_MSI_DISABLE();
 80035bc:	4a25      	ldr	r2, [pc, #148]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	492c      	ldr	r1, [pc, #176]	; (8003674 <HAL_RCC_OscConfig+0x340>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80035c6:	f7fe ff17 	bl	80023f8 <HAL_GetTick>
 80035ca:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80035cc:	4b21      	ldr	r3, [pc, #132]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	059b      	lsls	r3, r3, #22
 80035d2:	d598      	bpl.n	8003506 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035d4:	f7fe ff10 	bl	80023f8 <HAL_GetTick>
 80035d8:	1b80      	subs	r0, r0, r6
 80035da:	2802      	cmp	r0, #2
 80035dc:	d9f6      	bls.n	80035cc <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 80035de:	2003      	movs	r0, #3
 80035e0:	e14e      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_LSI_DISABLE();
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80035e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80035e6:	2101      	movs	r1, #1
 80035e8:	438b      	bics	r3, r1
 80035ea:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 80035ec:	f7fe ff04 	bl	80023f8 <HAL_GetTick>
 80035f0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035f2:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 80035f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f6:	079b      	lsls	r3, r3, #30
 80035f8:	d506      	bpl.n	8003608 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fa:	f7fe fefd 	bl	80023f8 <HAL_GetTick>
 80035fe:	1b80      	subs	r0, r0, r6
 8003600:	2802      	cmp	r0, #2
 8003602:	d9f6      	bls.n	80035f2 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8003604:	2003      	movs	r0, #3
 8003606:	e13b      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	075b      	lsls	r3, r3, #29
 800360c:	d400      	bmi.n	8003610 <HAL_RCC_OscConfig+0x2dc>
 800360e:	e08e      	b.n	800372e <HAL_RCC_OscConfig+0x3fa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	d41b      	bmi.n	8003650 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 800361a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	055b      	lsls	r3, r3, #21
 8003620:	430b      	orrs	r3, r1
 8003622:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8003624:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <HAL_RCC_OscConfig+0x344>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	05db      	lsls	r3, r3, #23
 800362c:	d528      	bpl.n	8003680 <HAL_RCC_OscConfig+0x34c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362e:	68a3      	ldr	r3, [r4, #8]
 8003630:	2280      	movs	r2, #128	; 0x80
 8003632:	0052      	lsls	r2, r2, #1
 8003634:	4293      	cmp	r3, r2
 8003636:	d037      	beq.n	80036a8 <HAL_RCC_OscConfig+0x374>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d14d      	bne.n	80036d8 <HAL_RCC_OscConfig+0x3a4>
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_OscConfig+0x320>)
 800363e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003640:	490c      	ldr	r1, [pc, #48]	; (8003674 <HAL_RCC_OscConfig+0x340>)
 8003642:	400a      	ands	r2, r1
 8003644:	651a      	str	r2, [r3, #80]	; 0x50
 8003646:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003648:	490c      	ldr	r1, [pc, #48]	; (800367c <HAL_RCC_OscConfig+0x348>)
 800364a:	400a      	ands	r2, r1
 800364c:	651a      	str	r2, [r3, #80]	; 0x50
 800364e:	e031      	b.n	80036b4 <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 8003650:	2600      	movs	r6, #0
 8003652:	e7e8      	b.n	8003626 <HAL_RCC_OscConfig+0x2f2>
 8003654:	40021000 	.word	0x40021000
 8003658:	fffeffff 	.word	0xfffeffff
 800365c:	fffbffff 	.word	0xfffbffff
 8003660:	ffffe0ff 	.word	0xffffe0ff
 8003664:	08010cd0 	.word	0x08010cd0
 8003668:	2000014c 	.word	0x2000014c
 800366c:	20000004 	.word	0x20000004
 8003670:	ffff1fff 	.word	0xffff1fff
 8003674:	fffffeff 	.word	0xfffffeff
 8003678:	40007000 	.word	0x40007000
 800367c:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003680:	4a88      	ldr	r2, [pc, #544]	; (80038a4 <HAL_RCC_OscConfig+0x570>)
 8003682:	6811      	ldr	r1, [r2, #0]
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	430b      	orrs	r3, r1
 800368a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800368c:	f7fe feb4 	bl	80023f8 <HAL_GetTick>
 8003690:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003692:	4b84      	ldr	r3, [pc, #528]	; (80038a4 <HAL_RCC_OscConfig+0x570>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	05db      	lsls	r3, r3, #23
 8003698:	d4c9      	bmi.n	800362e <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fe fead 	bl	80023f8 <HAL_GetTick>
 800369e:	1bc0      	subs	r0, r0, r7
 80036a0:	2864      	cmp	r0, #100	; 0x64
 80036a2:	d9f6      	bls.n	8003692 <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 80036a4:	2003      	movs	r0, #3
 80036a6:	e0eb      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	4a7f      	ldr	r2, [pc, #508]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 80036aa:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d028      	beq.n	800370c <HAL_RCC_OscConfig+0x3d8>
      tickstart = HAL_GetTick();
 80036ba:	f7fe fe9d 	bl	80023f8 <HAL_GetTick>
 80036be:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036c0:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	059b      	lsls	r3, r3, #22
 80036c6:	d430      	bmi.n	800372a <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe fe96 	bl	80023f8 <HAL_GetTick>
 80036cc:	1bc0      	subs	r0, r0, r7
 80036ce:	4b77      	ldr	r3, [pc, #476]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 80036d0:	4298      	cmp	r0, r3
 80036d2:	d9f5      	bls.n	80036c0 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80036d4:	2003      	movs	r0, #3
 80036d6:	e0d3      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d8:	22a0      	movs	r2, #160	; 0xa0
 80036da:	00d2      	lsls	r2, r2, #3
 80036dc:	4293      	cmp	r3, r2
 80036de:	d009      	beq.n	80036f4 <HAL_RCC_OscConfig+0x3c0>
 80036e0:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 80036e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036e4:	4972      	ldr	r1, [pc, #456]	; (80038b0 <HAL_RCC_OscConfig+0x57c>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	651a      	str	r2, [r3, #80]	; 0x50
 80036ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ec:	4971      	ldr	r1, [pc, #452]	; (80038b4 <HAL_RCC_OscConfig+0x580>)
 80036ee:	400a      	ands	r2, r1
 80036f0:	651a      	str	r2, [r3, #80]	; 0x50
 80036f2:	e7df      	b.n	80036b4 <HAL_RCC_OscConfig+0x380>
 80036f4:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 80036f6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036f8:	3a01      	subs	r2, #1
 80036fa:	3aff      	subs	r2, #255	; 0xff
 80036fc:	430a      	orrs	r2, r1
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003700:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	0052      	lsls	r2, r2, #1
 8003706:	430a      	orrs	r2, r1
 8003708:	651a      	str	r2, [r3, #80]	; 0x50
 800370a:	e7d3      	b.n	80036b4 <HAL_RCC_OscConfig+0x380>
      tickstart = HAL_GetTick();
 800370c:	f7fe fe74 	bl	80023f8 <HAL_GetTick>
 8003710:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003712:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	059b      	lsls	r3, r3, #22
 8003718:	d507      	bpl.n	800372a <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fe fe6d 	bl	80023f8 <HAL_GetTick>
 800371e:	1bc0      	subs	r0, r0, r7
 8003720:	4b62      	ldr	r3, [pc, #392]	; (80038ac <HAL_RCC_OscConfig+0x578>)
 8003722:	4298      	cmp	r0, r3
 8003724:	d9f5      	bls.n	8003712 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8003726:	2003      	movs	r0, #3
 8003728:	e0aa      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
    if(pwrclkchanged == SET)
 800372a:	2e01      	cmp	r6, #1
 800372c:	d021      	beq.n	8003772 <HAL_RCC_OscConfig+0x43e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	069b      	lsls	r3, r3, #26
 8003732:	d53c      	bpl.n	80037ae <HAL_RCC_OscConfig+0x47a>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003734:	69a3      	ldr	r3, [r4, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d021      	beq.n	800377e <HAL_RCC_OscConfig+0x44a>
        __HAL_RCC_HSI48_ENABLE();
 800373a:	4b5b      	ldr	r3, [pc, #364]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 800373c:	6899      	ldr	r1, [r3, #8]
 800373e:	2001      	movs	r0, #1
 8003740:	4301      	orrs	r1, r0
 8003742:	6099      	str	r1, [r3, #8]
 8003744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003746:	4302      	orrs	r2, r0
 8003748:	635a      	str	r2, [r3, #52]	; 0x34
 800374a:	4a5b      	ldr	r2, [pc, #364]	; (80038b8 <HAL_RCC_OscConfig+0x584>)
 800374c:	6a11      	ldr	r1, [r2, #32]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	430b      	orrs	r3, r1
 8003754:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003756:	f7fe fe4f 	bl	80023f8 <HAL_GetTick>
 800375a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800375c:	4b52      	ldr	r3, [pc, #328]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	079b      	lsls	r3, r3, #30
 8003762:	d424      	bmi.n	80037ae <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003764:	f7fe fe48 	bl	80023f8 <HAL_GetTick>
 8003768:	1b80      	subs	r0, r0, r6
 800376a:	2802      	cmp	r0, #2
 800376c:	d9f6      	bls.n	800375c <HAL_RCC_OscConfig+0x428>
            return HAL_TIMEOUT;
 800376e:	2003      	movs	r0, #3
 8003770:	e086      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003772:	4a4d      	ldr	r2, [pc, #308]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 8003774:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003776:	4951      	ldr	r1, [pc, #324]	; (80038bc <HAL_RCC_OscConfig+0x588>)
 8003778:	400b      	ands	r3, r1
 800377a:	6393      	str	r3, [r2, #56]	; 0x38
 800377c:	e7d7      	b.n	800372e <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI48_DISABLE();
 800377e:	4a4a      	ldr	r2, [pc, #296]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 8003780:	6893      	ldr	r3, [r2, #8]
 8003782:	2101      	movs	r1, #1
 8003784:	438b      	bics	r3, r1
 8003786:	6093      	str	r3, [r2, #8]
 8003788:	4a4b      	ldr	r2, [pc, #300]	; (80038b8 <HAL_RCC_OscConfig+0x584>)
 800378a:	6a13      	ldr	r3, [r2, #32]
 800378c:	494c      	ldr	r1, [pc, #304]	; (80038c0 <HAL_RCC_OscConfig+0x58c>)
 800378e:	400b      	ands	r3, r1
 8003790:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003792:	f7fe fe31 	bl	80023f8 <HAL_GetTick>
 8003796:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003798:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	079b      	lsls	r3, r3, #30
 800379e:	d506      	bpl.n	80037ae <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a0:	f7fe fe2a 	bl	80023f8 <HAL_GetTick>
 80037a4:	1b80      	subs	r0, r0, r6
 80037a6:	2802      	cmp	r0, #2
 80037a8:	d9f6      	bls.n	8003798 <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 80037aa:	2003      	movs	r0, #3
 80037ac:	e068      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d100      	bne.n	80037b6 <HAL_RCC_OscConfig+0x482>
 80037b4:	e06c      	b.n	8003890 <HAL_RCC_OscConfig+0x55c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b6:	2d0c      	cmp	r5, #12
 80037b8:	d049      	beq.n	800384e <HAL_RCC_OscConfig+0x51a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d012      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4b0>
        __HAL_RCC_PLL_DISABLE();
 80037be:	4a3a      	ldr	r2, [pc, #232]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 80037c0:	6813      	ldr	r3, [r2, #0]
 80037c2:	4940      	ldr	r1, [pc, #256]	; (80038c4 <HAL_RCC_OscConfig+0x590>)
 80037c4:	400b      	ands	r3, r1
 80037c6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80037c8:	f7fe fe16 	bl	80023f8 <HAL_GetTick>
 80037cc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037ce:	4b36      	ldr	r3, [pc, #216]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	019b      	lsls	r3, r3, #6
 80037d4:	d539      	bpl.n	800384a <HAL_RCC_OscConfig+0x516>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d6:	f7fe fe0f 	bl	80023f8 <HAL_GetTick>
 80037da:	1b00      	subs	r0, r0, r4
 80037dc:	2802      	cmp	r0, #2
 80037de:	d9f6      	bls.n	80037ce <HAL_RCC_OscConfig+0x49a>
            return HAL_TIMEOUT;
 80037e0:	2003      	movs	r0, #3
 80037e2:	e04d      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_DISABLE();
 80037e4:	4a30      	ldr	r2, [pc, #192]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	4936      	ldr	r1, [pc, #216]	; (80038c4 <HAL_RCC_OscConfig+0x590>)
 80037ea:	400b      	ands	r3, r1
 80037ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80037ee:	f7fe fe03 	bl	80023f8 <HAL_GetTick>
 80037f2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037f4:	4b2c      	ldr	r3, [pc, #176]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	d506      	bpl.n	800380a <HAL_RCC_OscConfig+0x4d6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe fdfc 	bl	80023f8 <HAL_GetTick>
 8003800:	1b40      	subs	r0, r0, r5
 8003802:	2802      	cmp	r0, #2
 8003804:	d9f6      	bls.n	80037f4 <HAL_RCC_OscConfig+0x4c0>
            return HAL_TIMEOUT;
 8003806:	2003      	movs	r0, #3
 8003808:	e03a      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380a:	4927      	ldr	r1, [pc, #156]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 800380c:	68cb      	ldr	r3, [r1, #12]
 800380e:	4a2e      	ldr	r2, [pc, #184]	; (80038c8 <HAL_RCC_OscConfig+0x594>)
 8003810:	4013      	ands	r3, r2
 8003812:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003814:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003816:	4302      	orrs	r2, r0
 8003818:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800381a:	4302      	orrs	r2, r0
 800381c:	4313      	orrs	r3, r2
 800381e:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8003820:	680a      	ldr	r2, [r1, #0]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	045b      	lsls	r3, r3, #17
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800382a:	f7fe fde5 	bl	80023f8 <HAL_GetTick>
 800382e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	d406      	bmi.n	8003846 <HAL_RCC_OscConfig+0x512>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fdde 	bl	80023f8 <HAL_GetTick>
 800383c:	1b00      	subs	r0, r0, r4
 800383e:	2802      	cmp	r0, #2
 8003840:	d9f6      	bls.n	8003830 <HAL_RCC_OscConfig+0x4fc>
            return HAL_TIMEOUT;
 8003842:	2003      	movs	r0, #3
 8003844:	e01c      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8003846:	2000      	movs	r0, #0
 8003848:	e01a      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
 800384a:	2000      	movs	r0, #0
 800384c:	e018      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384e:	2b01      	cmp	r3, #1
 8003850:	d020      	beq.n	8003894 <HAL_RCC_OscConfig+0x560>
        pll_config = RCC->CFGR;
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCC_OscConfig+0x574>)
 8003854:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	025b      	lsls	r3, r3, #9
 800385a:	4013      	ands	r3, r2
 800385c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800385e:	428b      	cmp	r3, r1
 8003860:	d11a      	bne.n	8003898 <HAL_RCC_OscConfig+0x564>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003862:	23f0      	movs	r3, #240	; 0xf0
 8003864:	039b      	lsls	r3, r3, #14
 8003866:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003868:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800386a:	428b      	cmp	r3, r1
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x568>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800386e:	23c0      	movs	r3, #192	; 0xc0
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	401a      	ands	r2, r3
 8003874:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d112      	bne.n	80038a0 <HAL_RCC_OscConfig+0x56c>
  return HAL_OK;
 800387a:	2000      	movs	r0, #0
 800387c:	e000      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
    return HAL_ERROR;
 800387e:	2001      	movs	r0, #1
}
 8003880:	b003      	add	sp, #12
 8003882:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
 8003886:	e7fb      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8003888:	2001      	movs	r0, #1
 800388a:	e7f9      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 800388c:	2001      	movs	r0, #1
 800388e:	e7f7      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8003890:	2000      	movs	r0, #0
 8003892:	e7f5      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8003894:	2001      	movs	r0, #1
 8003896:	e7f3      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
          return HAL_ERROR;
 8003898:	2001      	movs	r0, #1
 800389a:	e7f1      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
 800389c:	2001      	movs	r0, #1
 800389e:	e7ef      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
 80038a0:	2001      	movs	r0, #1
 80038a2:	e7ed      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
 80038a4:	40007000 	.word	0x40007000
 80038a8:	40021000 	.word	0x40021000
 80038ac:	00001388 	.word	0x00001388
 80038b0:	fffffeff 	.word	0xfffffeff
 80038b4:	fffffbff 	.word	0xfffffbff
 80038b8:	40010000 	.word	0x40010000
 80038bc:	efffffff 	.word	0xefffffff
 80038c0:	ffffdfff 	.word	0xffffdfff
 80038c4:	feffffff 	.word	0xfeffffff
 80038c8:	ff02ffff 	.word	0xff02ffff

080038cc <HAL_RCC_ClockConfig>:
{
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	0005      	movs	r5, r0
 80038d0:	000c      	movs	r4, r1
  if(RCC_ClkInitStruct == NULL)
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d100      	bne.n	80038d8 <HAL_RCC_ClockConfig+0xc>
 80038d6:	e0d1      	b.n	8003a7c <HAL_RCC_ClockConfig+0x1b0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b6a      	ldr	r3, [pc, #424]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2301      	movs	r3, #1
 80038de:	4013      	ands	r3, r2
 80038e0:	428b      	cmp	r3, r1
 80038e2:	d319      	bcc.n	8003918 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	079b      	lsls	r3, r3, #30
 80038e8:	d506      	bpl.n	80038f8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ea:	4a67      	ldr	r2, [pc, #412]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	68d3      	ldr	r3, [r2, #12]
 80038ee:	21f0      	movs	r1, #240	; 0xf0
 80038f0:	438b      	bics	r3, r1
 80038f2:	68a9      	ldr	r1, [r5, #8]
 80038f4:	430b      	orrs	r3, r1
 80038f6:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	07db      	lsls	r3, r3, #31
 80038fc:	d57b      	bpl.n	80039f6 <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	686b      	ldr	r3, [r5, #4]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003904:	2b03      	cmp	r3, #3
 8003906:	d040      	beq.n	800398a <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003908:	2b01      	cmp	r3, #1
 800390a:	d044      	beq.n	8003996 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800390c:	4a5e      	ldr	r2, [pc, #376]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	0592      	lsls	r2, r2, #22
 8003912:	d41d      	bmi.n	8003950 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003914:	2001      	movs	r0, #1
 8003916:	e099      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003918:	4a5a      	ldr	r2, [pc, #360]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	2101      	movs	r1, #1
 800391e:	438b      	bics	r3, r1
 8003920:	4323      	orrs	r3, r4
 8003922:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003924:	f7fe fd68 	bl	80023f8 <HAL_GetTick>
 8003928:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b56      	ldr	r3, [pc, #344]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	2301      	movs	r3, #1
 8003930:	4013      	ands	r3, r2
 8003932:	42a3      	cmp	r3, r4
 8003934:	d0d6      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003936:	f7fe fd5f 	bl	80023f8 <HAL_GetTick>
 800393a:	1b80      	subs	r0, r0, r6
 800393c:	4a53      	ldr	r2, [pc, #332]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 800393e:	4290      	cmp	r0, r2
 8003940:	d9f3      	bls.n	800392a <HAL_RCC_ClockConfig+0x5e>
        return HAL_TIMEOUT;
 8003942:	2003      	movs	r0, #3
 8003944:	e082      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003946:	4a50      	ldr	r2, [pc, #320]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	0392      	lsls	r2, r2, #14
 800394c:	d400      	bmi.n	8003950 <HAL_RCC_ClockConfig+0x84>
 800394e:	e097      	b.n	8003a80 <HAL_RCC_ClockConfig+0x1b4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003950:	494d      	ldr	r1, [pc, #308]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	68ca      	ldr	r2, [r1, #12]
 8003954:	2003      	movs	r0, #3
 8003956:	4382      	bics	r2, r0
 8003958:	4313      	orrs	r3, r2
 800395a:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 800395c:	f7fe fd4c 	bl	80023f8 <HAL_GetTick>
 8003960:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003962:	686b      	ldr	r3, [r5, #4]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d01c      	beq.n	80039a2 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003968:	2b03      	cmp	r3, #3
 800396a:	d028      	beq.n	80039be <HAL_RCC_ClockConfig+0xf2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800396c:	2b01      	cmp	r3, #1
 800396e:	d034      	beq.n	80039da <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003970:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	220c      	movs	r2, #12
 8003976:	421a      	tst	r2, r3
 8003978:	d03d      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397a:	f7fe fd3d 	bl	80023f8 <HAL_GetTick>
 800397e:	1b80      	subs	r0, r0, r6
 8003980:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 8003982:	4298      	cmp	r0, r3
 8003984:	d9f4      	bls.n	8003970 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8003986:	2003      	movs	r0, #3
 8003988:	e060      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800398a:	4a3f      	ldr	r2, [pc, #252]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	0192      	lsls	r2, r2, #6
 8003990:	d4de      	bmi.n	8003950 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003992:	2001      	movs	r0, #1
 8003994:	e05a      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003996:	4a3c      	ldr	r2, [pc, #240]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	0752      	lsls	r2, r2, #29
 800399c:	d4d8      	bmi.n	8003950 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800399e:	2001      	movs	r0, #1
 80039a0:	e054      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039a2:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	230c      	movs	r3, #12
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d023      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ae:	f7fe fd23 	bl	80023f8 <HAL_GetTick>
 80039b2:	1b80      	subs	r0, r0, r6
 80039b4:	4a35      	ldr	r2, [pc, #212]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 80039b6:	4290      	cmp	r0, r2
 80039b8:	d9f3      	bls.n	80039a2 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 80039ba:	2003      	movs	r0, #3
 80039bc:	e046      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039be:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	230c      	movs	r3, #12
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d015      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ca:	f7fe fd15 	bl	80023f8 <HAL_GetTick>
 80039ce:	1b80      	subs	r0, r0, r6
 80039d0:	4b2e      	ldr	r3, [pc, #184]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 80039d2:	4298      	cmp	r0, r3
 80039d4:	d9f3      	bls.n	80039be <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 80039d6:	2003      	movs	r0, #3
 80039d8:	e038      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039da:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	230c      	movs	r3, #12
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d007      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e6:	f7fe fd07 	bl	80023f8 <HAL_GetTick>
 80039ea:	1b80      	subs	r0, r0, r6
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 80039ee:	4298      	cmp	r0, r3
 80039f0:	d9f3      	bls.n	80039da <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 80039f2:	2003      	movs	r0, #3
 80039f4:	e02a      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	2301      	movs	r3, #1
 80039fc:	4013      	ands	r3, r2
 80039fe:	42a3      	cmp	r3, r4
 8003a00:	d825      	bhi.n	8003a4e <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a02:	682b      	ldr	r3, [r5, #0]
 8003a04:	075b      	lsls	r3, r3, #29
 8003a06:	d506      	bpl.n	8003a16 <HAL_RCC_ClockConfig+0x14a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	68d3      	ldr	r3, [r2, #12]
 8003a0c:	4920      	ldr	r1, [pc, #128]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	400b      	ands	r3, r1
 8003a10:	68e9      	ldr	r1, [r5, #12]
 8003a12:	430b      	orrs	r3, r1
 8003a14:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a16:	682b      	ldr	r3, [r5, #0]
 8003a18:	071b      	lsls	r3, r3, #28
 8003a1a:	d507      	bpl.n	8003a2c <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a1c:	491a      	ldr	r1, [pc, #104]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	68cb      	ldr	r3, [r1, #12]
 8003a20:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	692a      	ldr	r2, [r5, #16]
 8003a26:	00d2      	lsls	r2, r2, #3
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2c:	f7ff fc2a 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003a30:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	0912      	lsrs	r2, r2, #4
 8003a36:	230f      	movs	r3, #15
 8003a38:	4013      	ands	r3, r2
 8003a3a:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <HAL_RCC_ClockConfig+0x1cc>)
 8003a3c:	5cd3      	ldrb	r3, [r2, r3]
 8003a3e:	40d8      	lsrs	r0, r3
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_RCC_ClockConfig+0x1d0>)
 8003a42:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_RCC_ClockConfig+0x1d4>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	f7fe fc90 	bl	800236c <HAL_InitTick>
}
 8003a4c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	6813      	ldr	r3, [r2, #0]
 8003a52:	2101      	movs	r1, #1
 8003a54:	438b      	bics	r3, r1
 8003a56:	4323      	orrs	r3, r4
 8003a58:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a5a:	f7fe fccd 	bl	80023f8 <HAL_GetTick>
 8003a5e:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2301      	movs	r3, #1
 8003a66:	4013      	ands	r3, r2
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	d0ca      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x136>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6c:	f7fe fcc4 	bl	80023f8 <HAL_GetTick>
 8003a70:	1b80      	subs	r0, r0, r6
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	4298      	cmp	r0, r3
 8003a76:	d9f3      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x194>
        return HAL_TIMEOUT;
 8003a78:	2003      	movs	r0, #3
 8003a7a:	e7e7      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
    return HAL_ERROR;
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	e7e5      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8003a80:	2001      	movs	r0, #1
 8003a82:	e7e3      	b.n	8003a4c <HAL_RCC_ClockConfig+0x180>
 8003a84:	40022000 	.word	0x40022000
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	00001388 	.word	0x00001388
 8003a90:	fffff8ff 	.word	0xfffff8ff
 8003a94:	ffffc7ff 	.word	0xffffc7ff
 8003a98:	08010cd0 	.word	0x08010cd0
 8003a9c:	2000014c 	.word	0x2000014c
 8003aa0:	20000004 	.word	0x20000004

08003aa4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003aa4:	4b01      	ldr	r3, [pc, #4]	; (8003aac <HAL_RCC_GetHCLKFreq+0x8>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
}
 8003aa8:	4770      	bx	lr
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	2000014c 	.word	0x2000014c

08003ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ab2:	f7ff fff7 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003ab6:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	0a12      	lsrs	r2, r2, #8
 8003abc:	2307      	movs	r3, #7
 8003abe:	4013      	ands	r3, r2
 8003ac0:	4a02      	ldr	r2, [pc, #8]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	40d8      	lsrs	r0, r3
}
 8003ac6:	bd10      	pop	{r4, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	08010ce0 	.word	0x08010ce0

08003ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad2:	f7ff ffe7 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	0ad2      	lsrs	r2, r2, #11
 8003adc:	2307      	movs	r3, #7
 8003ade:	4013      	ands	r3, r2
 8003ae0:	4a02      	ldr	r2, [pc, #8]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	40d8      	lsrs	r0, r3
}
 8003ae6:	bd10      	pop	{r4, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	08010ce0 	.word	0x08010ce0

08003af0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003af4:	2382      	movs	r3, #130	; 0x82
 8003af6:	011b      	lsls	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af8:	6802      	ldr	r2, [r0, #0]
 8003afa:	421a      	tst	r2, r3
 8003afc:	d05c      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b76      	ldr	r3, [pc, #472]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	d500      	bpl.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x18>
 8003b06:	e09f      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4a73      	ldr	r2, [pc, #460]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b0a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	055b      	lsls	r3, r3, #21
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8003b14:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b71      	ldr	r3, [pc, #452]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	05db      	lsls	r3, r3, #23
 8003b1c:	d400      	bmi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8003b1e:	e095      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x15c>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b20:	4b6d      	ldr	r3, [pc, #436]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	23c0      	movs	r3, #192	; 0xc0
 8003b26:	039b      	lsls	r3, r3, #14
 8003b28:	401a      	ands	r2, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b2a:	6861      	ldr	r1, [r4, #4]
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d100      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b32:	e0a0      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x186>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003b34:	23c0      	movs	r3, #192	; 0xc0
 8003b36:	029b      	lsls	r3, r3, #10
 8003b38:	000a      	movs	r2, r1
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d100      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b40:	e0a1      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x196>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003b42:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b46:	23c0      	movs	r3, #192	; 0xc0
 8003b48:	029b      	lsls	r3, r3, #10
 8003b4a:	0010      	movs	r0, r2
 8003b4c:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003b4e:	421a      	tst	r2, r3
 8003b50:	d01f      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b52:	4019      	ands	r1, r3
 8003b54:	4281      	cmp	r1, r0
 8003b56:	d002      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	069b      	lsls	r3, r3, #26
 8003b5c:	d408      	bmi.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x80>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003b5e:	23c0      	movs	r3, #192	; 0xc0
 8003b60:	029b      	lsls	r3, r3, #10
 8003b62:	68a2      	ldr	r2, [r4, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	4283      	cmp	r3, r0
 8003b68:	d013      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	051b      	lsls	r3, r3, #20
 8003b6e:	d510      	bpl.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003b70:	4b59      	ldr	r3, [pc, #356]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b72:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003b74:	4a5a      	ldr	r2, [pc, #360]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003b76:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b78:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	0309      	lsls	r1, r1, #12
 8003b7e:	4331      	orrs	r1, r6
 8003b80:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b82:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b84:	4e57      	ldr	r6, [pc, #348]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003b86:	4031      	ands	r1, r6
 8003b88:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003b8a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003b8c:	05c3      	lsls	r3, r0, #23
 8003b8e:	d500      	bpl.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b90:	e080      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b92:	6863      	ldr	r3, [r4, #4]
 8003b94:	22c0      	movs	r2, #192	; 0xc0
 8003b96:	0292      	lsls	r2, r2, #10
 8003b98:	0019      	movs	r1, r3
 8003b9a:	4011      	ands	r1, r2
 8003b9c:	4291      	cmp	r1, r2
 8003b9e:	d100      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8003ba0:	e088      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8003ba2:	494d      	ldr	r1, [pc, #308]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003ba4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8003ba6:	22c0      	movs	r2, #192	; 0xc0
 8003ba8:	0292      	lsls	r2, r2, #10
 8003baa:	6860      	ldr	r0, [r4, #4]
 8003bac:	4002      	ands	r2, r0
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bb2:	2d01      	cmp	r5, #1
 8003bb4:	d100      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003bb6:	e087      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	07db      	lsls	r3, r3, #31
 8003bbc:	d506      	bpl.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bbe:	4a46      	ldr	r2, [pc, #280]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003bc0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003bc2:	2103      	movs	r1, #3
 8003bc4:	438b      	bics	r3, r1
 8003bc6:	68e1      	ldr	r1, [r4, #12]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	079b      	lsls	r3, r3, #30
 8003bd0:	d506      	bpl.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bd2:	4a41      	ldr	r2, [pc, #260]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003bd4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003bd6:	210c      	movs	r1, #12
 8003bd8:	438b      	bics	r3, r1
 8003bda:	6921      	ldr	r1, [r4, #16]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	075b      	lsls	r3, r3, #29
 8003be4:	d506      	bpl.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003be6:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003be8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003bea:	493f      	ldr	r1, [pc, #252]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bec:	400b      	ands	r3, r1
 8003bee:	6961      	ldr	r1, [r4, #20]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	071b      	lsls	r3, r3, #28
 8003bf8:	d506      	bpl.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bfa:	4a37      	ldr	r2, [pc, #220]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003bfc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003bfe:	493b      	ldr	r1, [pc, #236]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c00:	400b      	ands	r3, r1
 8003c02:	69a1      	ldr	r1, [r4, #24]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	05db      	lsls	r3, r3, #23
 8003c0c:	d506      	bpl.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c0e:	4a32      	ldr	r2, [pc, #200]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003c10:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c12:	4933      	ldr	r1, [pc, #204]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c14:	400b      	ands	r3, r1
 8003c16:	69e1      	ldr	r1, [r4, #28]
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	065b      	lsls	r3, r3, #25
 8003c20:	d506      	bpl.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c22:	4a2d      	ldr	r2, [pc, #180]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003c24:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c26:	4932      	ldr	r1, [pc, #200]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c28:	400b      	ands	r3, r1
 8003c2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	061b      	lsls	r3, r3, #24
 8003c34:	d54e      	bpl.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003c36:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003c38:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c3a:	492e      	ldr	r1, [pc, #184]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003c3c:	400b      	ands	r3, r1
 8003c3e:	6a21      	ldr	r1, [r4, #32]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8003c44:	2000      	movs	r0, #0
 8003c46:	e046      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  FlagStatus       pwrclkchanged = RESET;
 8003c48:	2500      	movs	r5, #0
 8003c4a:	e764      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4c:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003c4e:	6811      	ldr	r1, [r2, #0]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c58:	f7fe fbce 	bl	80023f8 <HAL_GetTick>
 8003c5c:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	05db      	lsls	r3, r3, #23
 8003c64:	d500      	bpl.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003c66:	e75b      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c68:	f7fe fbc6 	bl	80023f8 <HAL_GetTick>
 8003c6c:	1b80      	subs	r0, r0, r6
 8003c6e:	2864      	cmp	r0, #100	; 0x64
 8003c70:	d9f5      	bls.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
          return HAL_TIMEOUT;
 8003c72:	2003      	movs	r0, #3
 8003c74:	e02f      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003c76:	23c0      	movs	r3, #192	; 0xc0
 8003c78:	039b      	lsls	r3, r3, #14
 8003c7a:	68a0      	ldr	r0, [r4, #8]
 8003c7c:	4003      	ands	r3, r0
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d000      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003c82:	e757      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c84:	e75d      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	039b      	lsls	r3, r3, #14
 8003c8c:	d400      	bmi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8003c8e:	e758      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x52>
          return HAL_ERROR;
 8003c90:	2001      	movs	r0, #1
 8003c92:	e020      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
        tickstart = HAL_GetTick();
 8003c94:	f7fe fbb0 	bl	80023f8 <HAL_GetTick>
 8003c98:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9e:	059b      	lsls	r3, r3, #22
 8003ca0:	d500      	bpl.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003ca2:	e776      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fe fba8 	bl	80023f8 <HAL_GetTick>
 8003ca8:	1b80      	subs	r0, r0, r6
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003cac:	4298      	cmp	r0, r3
 8003cae:	d9f4      	bls.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
            return HAL_TIMEOUT;
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	e010      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb4:	4908      	ldr	r1, [pc, #32]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003cb6:	680a      	ldr	r2, [r1, #0]
 8003cb8:	4810      	ldr	r0, [pc, #64]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003cba:	4002      	ands	r2, r0
 8003cbc:	20c0      	movs	r0, #192	; 0xc0
 8003cbe:	0380      	lsls	r0, r0, #14
 8003cc0:	4003      	ands	r3, r0
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
 8003cc6:	e76c      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc8:	000a      	movs	r2, r1
 8003cca:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8003ccc:	490c      	ldr	r1, [pc, #48]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003cce:	400b      	ands	r3, r1
 8003cd0:	6393      	str	r3, [r2, #56]	; 0x38
 8003cd2:	e771      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  return HAL_OK;
 8003cd4:	2000      	movs	r0, #0
}
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	fffcffff 	.word	0xfffcffff
 8003ce4:	fff7ffff 	.word	0xfff7ffff
 8003ce8:	fffff3ff 	.word	0xfffff3ff
 8003cec:	ffffcfff 	.word	0xffffcfff
 8003cf0:	fbffffff 	.word	0xfbffffff
 8003cf4:	fff3ffff 	.word	0xfff3ffff
 8003cf8:	00001388 	.word	0x00001388
 8003cfc:	ffcfffff 	.word	0xffcfffff
 8003d00:	efffffff 	.word	0xefffffff

08003d04 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d08:	2320      	movs	r3, #32
 8003d0a:	5cc3      	ldrb	r3, [r0, r3]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d060      	beq.n	8003dd2 <HAL_RTC_DeactivateAlarm+0xce>
 8003d10:	2320      	movs	r3, #32
 8003d12:	2201      	movs	r2, #1
 8003d14:	54c2      	strb	r2, [r0, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d16:	3301      	adds	r3, #1
 8003d18:	3201      	adds	r2, #1
 8003d1a:	54c2      	strb	r2, [r0, r3]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d1c:	6803      	ldr	r3, [r0, #0]
 8003d1e:	32c8      	adds	r2, #200	; 0xc8
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24
 8003d22:	6803      	ldr	r3, [r0, #0]
 8003d24:	3a77      	subs	r2, #119	; 0x77
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4299      	cmp	r1, r3
 8003d2e:	d022      	beq.n	8003d76 <HAL_RTC_DeactivateAlarm+0x72>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003d30:	6802      	ldr	r2, [r0, #0]
 8003d32:	6893      	ldr	r3, [r2, #8]
 8003d34:	4928      	ldr	r1, [pc, #160]	; (8003dd8 <HAL_RTC_DeactivateAlarm+0xd4>)
 8003d36:	400b      	ands	r3, r1
 8003d38:	6093      	str	r3, [r2, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003d3a:	6802      	ldr	r2, [r0, #0]
 8003d3c:	6893      	ldr	r3, [r2, #8]
 8003d3e:	4927      	ldr	r1, [pc, #156]	; (8003ddc <HAL_RTC_DeactivateAlarm+0xd8>)
 8003d40:	400b      	ands	r3, r1
 8003d42:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();
 8003d44:	f7fe fb58 	bl	80023f8 <HAL_GetTick>
 8003d48:	0005      	movs	r5, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	079b      	lsls	r3, r3, #30
 8003d50:	d434      	bmi.n	8003dbc <HAL_RTC_DeactivateAlarm+0xb8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d52:	f7fe fb51 	bl	80023f8 <HAL_GetTick>
 8003d56:	1b40      	subs	r0, r0, r5
 8003d58:	22fa      	movs	r2, #250	; 0xfa
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	4290      	cmp	r0, r2
 8003d5e:	d9f4      	bls.n	8003d4a <HAL_RTC_DeactivateAlarm+0x46>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	22ff      	movs	r2, #255	; 0xff
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d66:	2321      	movs	r3, #33	; 0x21
 8003d68:	3afc      	subs	r2, #252	; 0xfc
 8003d6a:	54e2      	strb	r2, [r4, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	2200      	movs	r2, #0
 8003d70:	54e2      	strb	r2, [r4, r3]

        return HAL_TIMEOUT;
 8003d72:	2003      	movs	r0, #3
 8003d74:	e02c      	b.n	8003dd0 <HAL_RTC_DeactivateAlarm+0xcc>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003d76:	6802      	ldr	r2, [r0, #0]
 8003d78:	6893      	ldr	r3, [r2, #8]
 8003d7a:	4919      	ldr	r1, [pc, #100]	; (8003de0 <HAL_RTC_DeactivateAlarm+0xdc>)
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003d80:	6802      	ldr	r2, [r0, #0]
 8003d82:	6893      	ldr	r3, [r2, #8]
 8003d84:	4917      	ldr	r1, [pc, #92]	; (8003de4 <HAL_RTC_DeactivateAlarm+0xe0>)
 8003d86:	400b      	ands	r3, r1
 8003d88:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003d8a:	f7fe fb35 	bl	80023f8 <HAL_GetTick>
 8003d8e:	0005      	movs	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	07db      	lsls	r3, r3, #31
 8003d96:	d411      	bmi.n	8003dbc <HAL_RTC_DeactivateAlarm+0xb8>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003d98:	f7fe fb2e 	bl	80023f8 <HAL_GetTick>
 8003d9c:	1b40      	subs	r0, r0, r5
 8003d9e:	23fa      	movs	r3, #250	; 0xfa
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4298      	cmp	r0, r3
 8003da4:	d9f4      	bls.n	8003d90 <HAL_RTC_DeactivateAlarm+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	22ff      	movs	r2, #255	; 0xff
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dac:	2321      	movs	r3, #33	; 0x21
 8003dae:	3afc      	subs	r2, #252	; 0xfc
 8003db0:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8003db2:	3b01      	subs	r3, #1
 8003db4:	2200      	movs	r2, #0
 8003db6:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8003db8:	2003      	movs	r0, #3
 8003dba:	e009      	b.n	8003dd0 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	22ff      	movs	r2, #255	; 0xff
 8003dc0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003dc2:	2321      	movs	r3, #33	; 0x21
 8003dc4:	3afe      	subs	r2, #254	; 0xfe
 8003dc6:	54e2      	strb	r2, [r4, r3]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	2200      	movs	r2, #0
 8003dcc:	54e2      	strb	r2, [r4, r3]

  return HAL_OK;
 8003dce:	2000      	movs	r0, #0
}
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 8003dd2:	2002      	movs	r0, #2
 8003dd4:	e7fc      	b.n	8003dd0 <HAL_RTC_DeactivateAlarm+0xcc>
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	fffffdff 	.word	0xfffffdff
 8003ddc:	ffffdfff 	.word	0xffffdfff
 8003de0:	fffffeff 	.word	0xfffffeff
 8003de4:	ffffefff 	.word	0xffffefff

08003de8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003de8:	b510      	push	{r4, lr}
 8003dea:	0004      	movs	r4, r0
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003dec:	6803      	ldr	r3, [r0, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	04d2      	lsls	r2, r2, #19
 8003df2:	d502      	bpl.n	8003dfa <HAL_RTC_AlarmIRQHandler+0x12>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	05db      	lsls	r3, r3, #23
 8003df8:	d40e      	bmi.n	8003e18 <HAL_RTC_AlarmIRQHandler+0x30>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	0492      	lsls	r2, r2, #18
 8003e00:	d502      	bpl.n	8003e08 <HAL_RTC_AlarmIRQHandler+0x20>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	059b      	lsls	r3, r3, #22
 8003e06:	d411      	bmi.n	8003e2c <HAL_RTC_AlarmIRQHandler+0x44>
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8003e0a:	2280      	movs	r2, #128	; 0x80
 8003e0c:	0292      	lsls	r2, r2, #10
 8003e0e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003e10:	2321      	movs	r3, #33	; 0x21
 8003e12:	2201      	movs	r2, #1
 8003e14:	54e2      	strb	r2, [r4, r3]
}
 8003e16:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003e18:	f005 ffec 	bl	8009df4 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e1c:	6821      	ldr	r1, [r4, #0]
 8003e1e:	68ca      	ldr	r2, [r1, #12]
 8003e20:	23ff      	movs	r3, #255	; 0xff
 8003e22:	401a      	ands	r2, r3
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <HAL_RTC_AlarmIRQHandler+0x60>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60cb      	str	r3, [r1, #12]
 8003e2a:	e7e6      	b.n	8003dfa <HAL_RTC_AlarmIRQHandler+0x12>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003e2c:	0020      	movs	r0, r4
 8003e2e:	f005 fff5 	bl	8009e1c <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003e32:	6821      	ldr	r1, [r4, #0]
 8003e34:	68ca      	ldr	r2, [r1, #12]
 8003e36:	23ff      	movs	r3, #255	; 0xff
 8003e38:	401a      	ands	r2, r3
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_RTC_AlarmIRQHandler+0x64>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
 8003e40:	e7e2      	b.n	8003e08 <HAL_RTC_AlarmIRQHandler+0x20>
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	40010400 	.word	0x40010400
 8003e48:	fffffe7f 	.word	0xfffffe7f
 8003e4c:	fffffd7f 	.word	0xfffffd7f

08003e50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e54:	6802      	ldr	r2, [r0, #0]
 8003e56:	68d3      	ldr	r3, [r2, #12]
 8003e58:	21a0      	movs	r1, #160	; 0xa0
 8003e5a:	438b      	bics	r3, r1
 8003e5c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003e5e:	f7fe facb 	bl	80023f8 <HAL_GetTick>
 8003e62:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	069b      	lsls	r3, r3, #26
 8003e6a:	d408      	bmi.n	8003e7e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e6c:	f7fe fac4 	bl	80023f8 <HAL_GetTick>
 8003e70:	1b40      	subs	r0, r0, r5
 8003e72:	23fa      	movs	r3, #250	; 0xfa
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4298      	cmp	r0, r3
 8003e78:	d9f4      	bls.n	8003e64 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8003e7a:	2003      	movs	r0, #3
 8003e7c:	e000      	b.n	8003e80 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8003e7e:	2000      	movs	r0, #0
}
 8003e80:	bd70      	pop	{r4, r5, r6, pc}

08003e82 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e82:	b570      	push	{r4, r5, r6, lr}
 8003e84:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e86:	6803      	ldr	r3, [r0, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	0652      	lsls	r2, r2, #25
 8003e8c:	d501      	bpl.n	8003e92 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003e8e:	2000      	movs	r0, #0
}
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e92:	2201      	movs	r2, #1
 8003e94:	4252      	negs	r2, r2
 8003e96:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003e98:	f7fe faae 	bl	80023f8 <HAL_GetTick>
 8003e9c:	0005      	movs	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	065b      	lsls	r3, r3, #25
 8003ea4:	d408      	bmi.n	8003eb8 <RTC_EnterInitMode+0x36>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ea6:	f7fe faa7 	bl	80023f8 <HAL_GetTick>
 8003eaa:	1b40      	subs	r0, r0, r5
 8003eac:	22fa      	movs	r2, #250	; 0xfa
 8003eae:	0092      	lsls	r2, r2, #2
 8003eb0:	4290      	cmp	r0, r2
 8003eb2:	d9f4      	bls.n	8003e9e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8003eb4:	2003      	movs	r0, #3
 8003eb6:	e7eb      	b.n	8003e90 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8003eb8:	2000      	movs	r0, #0
 8003eba:	e7e9      	b.n	8003e90 <RTC_EnterInitMode+0xe>

08003ebc <HAL_RTC_Init>:
{
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8003ec0:	d063      	beq.n	8003f8a <HAL_RTC_Init+0xce>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ec2:	2321      	movs	r3, #33	; 0x21
 8003ec4:	5cc3      	ldrb	r3, [r0, r3]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d041      	beq.n	8003f4e <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003eca:	2321      	movs	r3, #33	; 0x21
 8003ecc:	2202      	movs	r2, #2
 8003ece:	54e2      	strb	r2, [r4, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	32c8      	adds	r2, #200	; 0xc8
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	3a77      	subs	r2, #119	; 0x77
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003edc:	0020      	movs	r0, r4
 8003ede:	f7ff ffd0 	bl	8003e82 <RTC_EnterInitMode>
 8003ee2:	1e05      	subs	r5, r0, #0
 8003ee4:	d139      	bne.n	8003f5a <HAL_RTC_Init+0x9e>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	6893      	ldr	r3, [r2, #8]
 8003eea:	4929      	ldr	r1, [pc, #164]	; (8003f90 <HAL_RTC_Init+0xd4>)
 8003eec:	400b      	ands	r3, r1
 8003eee:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ef0:	6821      	ldr	r1, [r4, #0]
 8003ef2:	688a      	ldr	r2, [r1, #8]
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	6920      	ldr	r0, [r4, #16]
 8003ef8:	4303      	orrs	r3, r0
 8003efa:	69a0      	ldr	r0, [r4, #24]
 8003efc:	4303      	orrs	r3, r0
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	68e2      	ldr	r2, [r4, #12]
 8003f06:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003f08:	6821      	ldr	r1, [r4, #0]
 8003f0a:	690b      	ldr	r3, [r1, #16]
 8003f0c:	68a2      	ldr	r2, [r4, #8]
 8003f0e:	0412      	lsls	r2, r2, #16
 8003f10:	4313      	orrs	r3, r2
 8003f12:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003f14:	6822      	ldr	r2, [r4, #0]
 8003f16:	68d3      	ldr	r3, [r2, #12]
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	438b      	bics	r3, r1
 8003f1c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003f1e:	6822      	ldr	r2, [r4, #0]
 8003f20:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003f22:	397d      	subs	r1, #125	; 0x7d
 8003f24:	438b      	bics	r3, r1
 8003f26:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8003f2c:	69e2      	ldr	r2, [r4, #28]
 8003f2e:	6960      	ldr	r0, [r4, #20]
 8003f30:	4302      	orrs	r2, r0
 8003f32:	4313      	orrs	r3, r2
 8003f34:	64cb      	str	r3, [r1, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	069b      	lsls	r3, r3, #26
 8003f3c:	d515      	bpl.n	8003f6a <HAL_RTC_Init+0xae>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	22ff      	movs	r2, #255	; 0xff
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003f44:	2321      	movs	r3, #33	; 0x21
 8003f46:	3afe      	subs	r2, #254	; 0xfe
 8003f48:	54e2      	strb	r2, [r4, r3]
}
 8003f4a:	0028      	movs	r0, r5
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8003f4e:	3320      	adds	r3, #32
 8003f50:	2200      	movs	r2, #0
 8003f52:	54c2      	strb	r2, [r0, r3]
    HAL_RTC_MspInit(hrtc);
 8003f54:	f006 fb9c 	bl	800a690 <HAL_RTC_MspInit>
 8003f58:	e7b7      	b.n	8003eca <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	22ff      	movs	r2, #255	; 0xff
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f60:	2321      	movs	r3, #33	; 0x21
 8003f62:	3afb      	subs	r2, #251	; 0xfb
 8003f64:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8003f66:	2501      	movs	r5, #1
 8003f68:	e7ef      	b.n	8003f4a <HAL_RTC_Init+0x8e>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f6a:	0020      	movs	r0, r4
 8003f6c:	f7ff ff70 	bl	8003e50 <HAL_RTC_WaitForSynchro>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d0e4      	beq.n	8003f3e <HAL_RTC_Init+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	22ff      	movs	r2, #255	; 0xff
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f7a:	2321      	movs	r3, #33	; 0x21
 8003f7c:	3afb      	subs	r2, #251	; 0xfb
 8003f7e:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8003f80:	3b01      	subs	r3, #1
 8003f82:	2200      	movs	r2, #0
 8003f84:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8003f86:	2501      	movs	r5, #1
 8003f88:	e7df      	b.n	8003f4a <HAL_RTC_Init+0x8e>
    return HAL_ERROR;
 8003f8a:	2501      	movs	r5, #1
 8003f8c:	e7dd      	b.n	8003f4a <HAL_RTC_Init+0x8e>
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	ff8fffbf 	.word	0xff8fffbf

08003f94 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8003f94:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8003f96:	2809      	cmp	r0, #9
 8003f98:	d903      	bls.n	8003fa2 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8003f9a:	3301      	adds	r3, #1
    Param -= 10U;
 8003f9c:	380a      	subs	r0, #10
 8003f9e:	b2c0      	uxtb	r0, r0
 8003fa0:	e7f9      	b.n	8003f96 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	4318      	orrs	r0, r3
}
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_RTC_SetTime>:
{
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	0004      	movs	r4, r0
 8003fb0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	5cc3      	ldrb	r3, [r0, r3]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d100      	bne.n	8003fbc <HAL_RTC_SetTime+0x10>
 8003fba:	e078      	b.n	80040ae <HAL_RTC_SetTime+0x102>
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	3101      	adds	r1, #1
 8003fc6:	54c1      	strb	r1, [r0, r3]
  if (Format == RTC_FORMAT_BIN)
 8003fc8:	2a00      	cmp	r2, #0
 8003fca:	d144      	bne.n	8004056 <HAL_RTC_SetTime+0xaa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fcc:	6803      	ldr	r3, [r0, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	065b      	lsls	r3, r3, #25
 8003fd2:	d401      	bmi.n	8003fd8 <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	70f3      	strb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003fd8:	7830      	ldrb	r0, [r6, #0]
 8003fda:	f7ff ffdb 	bl	8003f94 <RTC_ByteToBcd2>
 8003fde:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003fe0:	7870      	ldrb	r0, [r6, #1]
 8003fe2:	f7ff ffd7 	bl	8003f94 <RTC_ByteToBcd2>
 8003fe6:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003fe8:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003fea:	78b0      	ldrb	r0, [r6, #2]
 8003fec:	f7ff ffd2 	bl	8003f94 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003ff0:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003ff2:	78f0      	ldrb	r0, [r6, #3]
 8003ff4:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003ff6:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	22ca      	movs	r2, #202	; 0xca
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	3a77      	subs	r2, #119	; 0x77
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004004:	0020      	movs	r0, r4
 8004006:	f7ff ff3c 	bl	8003e82 <RTC_EnterInitMode>
 800400a:	1e07      	subs	r7, r0, #0
 800400c:	d134      	bne.n	8004078 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	4828      	ldr	r0, [pc, #160]	; (80040b4 <HAL_RTC_SetTime+0x108>)
 8004012:	4005      	ands	r5, r0
 8004014:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	6893      	ldr	r3, [r2, #8]
 800401a:	4927      	ldr	r1, [pc, #156]	; (80040b8 <HAL_RTC_SetTime+0x10c>)
 800401c:	400b      	ands	r3, r1
 800401e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004020:	6821      	ldr	r1, [r4, #0]
 8004022:	688b      	ldr	r3, [r1, #8]
 8004024:	68f2      	ldr	r2, [r6, #12]
 8004026:	6930      	ldr	r0, [r6, #16]
 8004028:	4302      	orrs	r2, r0
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	68d3      	ldr	r3, [r2, #12]
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	438b      	bics	r3, r1
 8004036:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	069b      	lsls	r3, r3, #26
 800403e:	d526      	bpl.n	800408e <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	22ff      	movs	r2, #255	; 0xff
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004046:	2321      	movs	r3, #33	; 0x21
 8004048:	3afe      	subs	r2, #254	; 0xfe
 800404a:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 800404c:	3b01      	subs	r3, #1
 800404e:	2200      	movs	r2, #0
 8004050:	54e2      	strb	r2, [r4, r3]
}
 8004052:	0038      	movs	r0, r7
 8004054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004056:	6803      	ldr	r3, [r0, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	065b      	lsls	r3, r3, #25
 800405c:	d401      	bmi.n	8004062 <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 800405e:	2300      	movs	r3, #0
 8004060:	70f3      	strb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004062:	7835      	ldrb	r5, [r6, #0]
 8004064:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004066:	7870      	ldrb	r0, [r6, #1]
 8004068:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800406a:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 800406c:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800406e:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004070:	78f0      	ldrb	r0, [r6, #3]
 8004072:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004074:	4305      	orrs	r5, r0
 8004076:	e7bf      	b.n	8003ff8 <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	22ff      	movs	r2, #255	; 0xff
 800407c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800407e:	2321      	movs	r3, #33	; 0x21
 8004080:	3afb      	subs	r2, #251	; 0xfb
 8004082:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 8004084:	3b01      	subs	r3, #1
 8004086:	2200      	movs	r2, #0
 8004088:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 800408a:	2701      	movs	r7, #1
 800408c:	e7e1      	b.n	8004052 <HAL_RTC_SetTime+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800408e:	0020      	movs	r0, r4
 8004090:	f7ff fede 	bl	8003e50 <HAL_RTC_WaitForSynchro>
 8004094:	2800      	cmp	r0, #0
 8004096:	d0d3      	beq.n	8004040 <HAL_RTC_SetTime+0x94>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	22ff      	movs	r2, #255	; 0xff
 800409c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800409e:	2321      	movs	r3, #33	; 0x21
 80040a0:	3afb      	subs	r2, #251	; 0xfb
 80040a2:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 80040a4:	3b01      	subs	r3, #1
 80040a6:	2200      	movs	r2, #0
 80040a8:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80040aa:	2701      	movs	r7, #1
 80040ac:	e7d1      	b.n	8004052 <HAL_RTC_SetTime+0xa6>
  __HAL_LOCK(hrtc);
 80040ae:	2702      	movs	r7, #2
 80040b0:	e7cf      	b.n	8004052 <HAL_RTC_SetTime+0xa6>
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	007f7f7f 	.word	0x007f7f7f
 80040b8:	fffbffff 	.word	0xfffbffff

080040bc <HAL_RTC_SetDate>:
{
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	0004      	movs	r4, r0
 80040c0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80040c2:	2320      	movs	r3, #32
 80040c4:	5cc3      	ldrb	r3, [r0, r3]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d069      	beq.n	800419e <HAL_RTC_SetDate+0xe2>
 80040ca:	2320      	movs	r3, #32
 80040cc:	2101      	movs	r1, #1
 80040ce:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040d0:	3301      	adds	r3, #1
 80040d2:	3101      	adds	r1, #1
 80040d4:	54c1      	strb	r1, [r0, r3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80040d6:	2a00      	cmp	r2, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_RTC_SetDate+0x2c>
 80040da:	7873      	ldrb	r3, [r6, #1]
 80040dc:	06d9      	lsls	r1, r3, #27
 80040de:	d503      	bpl.n	80040e8 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80040e0:	2110      	movs	r1, #16
 80040e2:	438b      	bics	r3, r1
 80040e4:	330a      	adds	r3, #10
 80040e6:	7073      	strb	r3, [r6, #1]
  if (Format == RTC_FORMAT_BIN)
 80040e8:	2a00      	cmp	r2, #0
 80040ea:	d132      	bne.n	8004152 <HAL_RTC_SetDate+0x96>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80040ec:	78f0      	ldrb	r0, [r6, #3]
 80040ee:	f7ff ff51 	bl	8003f94 <RTC_ByteToBcd2>
 80040f2:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80040f4:	7870      	ldrb	r0, [r6, #1]
 80040f6:	f7ff ff4d 	bl	8003f94 <RTC_ByteToBcd2>
 80040fa:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80040fc:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80040fe:	78b0      	ldrb	r0, [r6, #2]
 8004100:	f7ff ff48 	bl	8003f94 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004104:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << 13U));
 8004106:	7830      	ldrb	r0, [r6, #0]
 8004108:	0340      	lsls	r0, r0, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800410a:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	22ca      	movs	r2, #202	; 0xca
 8004110:	625a      	str	r2, [r3, #36]	; 0x24
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	3a77      	subs	r2, #119	; 0x77
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004118:	0020      	movs	r0, r4
 800411a:	f7ff feb2 	bl	8003e82 <RTC_EnterInitMode>
 800411e:	1e06      	subs	r6, r0, #0
 8004120:	d122      	bne.n	8004168 <HAL_RTC_SetDate+0xac>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	481f      	ldr	r0, [pc, #124]	; (80041a4 <HAL_RTC_SetDate+0xe8>)
 8004126:	4005      	ands	r5, r0
 8004128:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	68d3      	ldr	r3, [r2, #12]
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	438b      	bics	r3, r1
 8004132:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	069b      	lsls	r3, r3, #26
 800413a:	d520      	bpl.n	800417e <HAL_RTC_SetDate+0xc2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	22ff      	movs	r2, #255	; 0xff
 8004140:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004142:	2321      	movs	r3, #33	; 0x21
 8004144:	3afe      	subs	r2, #254	; 0xfe
 8004146:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 8004148:	3b01      	subs	r3, #1
 800414a:	2200      	movs	r2, #0
 800414c:	54e2      	strb	r2, [r4, r3]
}
 800414e:	0030      	movs	r0, r6
 8004150:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004152:	78f5      	ldrb	r5, [r6, #3]
 8004154:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004156:	7870      	ldrb	r0, [r6, #1]
 8004158:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800415a:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 800415c:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800415e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004160:	7830      	ldrb	r0, [r6, #0]
 8004162:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004164:	4305      	orrs	r5, r0
 8004166:	e7d1      	b.n	800410c <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	22ff      	movs	r2, #255	; 0xff
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800416e:	2321      	movs	r3, #33	; 0x21
 8004170:	3afb      	subs	r2, #251	; 0xfb
 8004172:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 8004174:	3b01      	subs	r3, #1
 8004176:	2200      	movs	r2, #0
 8004178:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 800417a:	2601      	movs	r6, #1
 800417c:	e7e7      	b.n	800414e <HAL_RTC_SetDate+0x92>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800417e:	0020      	movs	r0, r4
 8004180:	f7ff fe66 	bl	8003e50 <HAL_RTC_WaitForSynchro>
 8004184:	2800      	cmp	r0, #0
 8004186:	d0d9      	beq.n	800413c <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	22ff      	movs	r2, #255	; 0xff
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800418e:	2321      	movs	r3, #33	; 0x21
 8004190:	3afb      	subs	r2, #251	; 0xfb
 8004192:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8004194:	3b01      	subs	r3, #1
 8004196:	2200      	movs	r2, #0
 8004198:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 800419a:	2601      	movs	r6, #1
 800419c:	e7d7      	b.n	800414e <HAL_RTC_SetDate+0x92>
  __HAL_LOCK(hrtc);
 800419e:	2602      	movs	r6, #2
 80041a0:	e7d5      	b.n	800414e <HAL_RTC_SetDate+0x92>
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	00ffff3f 	.word	0x00ffff3f

080041a8 <HAL_RTC_SetAlarm_IT>:
{
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	0004      	movs	r4, r0
 80041ac:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80041ae:	2320      	movs	r3, #32
 80041b0:	5cc3      	ldrb	r3, [r0, r3]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d100      	bne.n	80041b8 <HAL_RTC_SetAlarm_IT+0x10>
 80041b6:	e0cb      	b.n	8004350 <HAL_RTC_SetAlarm_IT+0x1a8>
 80041b8:	2320      	movs	r3, #32
 80041ba:	2101      	movs	r1, #1
 80041bc:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041be:	3301      	adds	r3, #1
 80041c0:	3101      	adds	r1, #1
 80041c2:	54c1      	strb	r1, [r0, r3]
  if (Format == RTC_FORMAT_BIN)
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	d152      	bne.n	800426e <HAL_RTC_SetAlarm_IT+0xc6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041c8:	6803      	ldr	r3, [r0, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	065b      	lsls	r3, r3, #25
 80041ce:	d401      	bmi.n	80041d4 <HAL_RTC_SetAlarm_IT+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	70eb      	strb	r3, [r5, #3]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80041d4:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80041d6:	7828      	ldrb	r0, [r5, #0]
 80041d8:	f7ff fedc 	bl	8003f94 <RTC_ByteToBcd2>
 80041dc:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80041de:	7868      	ldrb	r0, [r5, #1]
 80041e0:	f7ff fed8 	bl	8003f94 <RTC_ByteToBcd2>
 80041e4:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80041e6:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80041e8:	78a8      	ldrb	r0, [r5, #2]
 80041ea:	f7ff fed3 	bl	8003f94 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80041ee:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80041f0:	78e8      	ldrb	r0, [r5, #3]
 80041f2:	0400      	lsls	r0, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80041f4:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80041f6:	2320      	movs	r3, #32
 80041f8:	5ce8      	ldrb	r0, [r5, r3]
 80041fa:	f7ff fecb 	bl	8003f94 <RTC_ByteToBcd2>
 80041fe:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004200:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004202:	433e      	orrs	r6, r7
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004204:	696b      	ldr	r3, [r5, #20]
 8004206:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004208:	686f      	ldr	r7, [r5, #4]
 800420a:	69ab      	ldr	r3, [r5, #24]
 800420c:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	22ca      	movs	r2, #202	; 0xca
 8004212:	625a      	str	r2, [r3, #36]	; 0x24
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	3a77      	subs	r2, #119	; 0x77
 8004218:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800421a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	429a      	cmp	r2, r3
 8004222:	d03d      	beq.n	80042a0 <HAL_RTC_SetAlarm_IT+0xf8>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004224:	6822      	ldr	r2, [r4, #0]
 8004226:	6893      	ldr	r3, [r2, #8]
 8004228:	494a      	ldr	r1, [pc, #296]	; (8004354 <HAL_RTC_SetAlarm_IT+0x1ac>)
 800422a:	400b      	ands	r3, r1
 800422c:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800422e:	6821      	ldr	r1, [r4, #0]
 8004230:	68ca      	ldr	r2, [r1, #12]
 8004232:	23ff      	movs	r3, #255	; 0xff
 8004234:	401a      	ands	r2, r3
 8004236:	4b48      	ldr	r3, [pc, #288]	; (8004358 <HAL_RTC_SetAlarm_IT+0x1b0>)
 8004238:	4313      	orrs	r3, r2
 800423a:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 800423c:	f7fe f8dc 	bl	80023f8 <HAL_GetTick>
 8004240:	0005      	movs	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	0792      	lsls	r2, r2, #30
 8004248:	d45f      	bmi.n	800430a <HAL_RTC_SetAlarm_IT+0x162>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800424a:	f7fe f8d5 	bl	80023f8 <HAL_GetTick>
 800424e:	1b40      	subs	r0, r0, r5
 8004250:	23fa      	movs	r3, #250	; 0xfa
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4298      	cmp	r0, r3
 8004256:	d9f4      	bls.n	8004242 <HAL_RTC_SetAlarm_IT+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	22ff      	movs	r2, #255	; 0xff
 800425c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800425e:	2321      	movs	r3, #33	; 0x21
 8004260:	3afc      	subs	r2, #252	; 0xfc
 8004262:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8004264:	3b01      	subs	r3, #1
 8004266:	2200      	movs	r2, #0
 8004268:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800426a:	2003      	movs	r0, #3
 800426c:	e06f      	b.n	800434e <HAL_RTC_SetAlarm_IT+0x1a6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800426e:	6803      	ldr	r3, [r0, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	065b      	lsls	r3, r3, #25
 8004274:	d401      	bmi.n	800427a <HAL_RTC_SetAlarm_IT+0xd2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800427a:	782e      	ldrb	r6, [r5, #0]
 800427c:	0436      	lsls	r6, r6, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800427e:	786b      	ldrb	r3, [r5, #1]
 8004280:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004282:	431e      	orrs	r6, r3
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004284:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004286:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004288:	78eb      	ldrb	r3, [r5, #3]
 800428a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800428c:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800428e:	2320      	movs	r3, #32
 8004290:	5ceb      	ldrb	r3, [r5, r3]
 8004292:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004294:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004296:	69eb      	ldr	r3, [r5, #28]
 8004298:	431e      	orrs	r6, r3
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800429a:	696b      	ldr	r3, [r5, #20]
 800429c:	431e      	orrs	r6, r3
 800429e:	e7b3      	b.n	8004208 <HAL_RTC_SetAlarm_IT+0x60>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80042a0:	6822      	ldr	r2, [r4, #0]
 80042a2:	6893      	ldr	r3, [r2, #8]
 80042a4:	492d      	ldr	r1, [pc, #180]	; (800435c <HAL_RTC_SetAlarm_IT+0x1b4>)
 80042a6:	400b      	ands	r3, r1
 80042a8:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80042aa:	6821      	ldr	r1, [r4, #0]
 80042ac:	68ca      	ldr	r2, [r1, #12]
 80042ae:	23ff      	movs	r3, #255	; 0xff
 80042b0:	401a      	ands	r2, r3
 80042b2:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RTC_SetAlarm_IT+0x1b8>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80042b8:	f7fe f89e 	bl	80023f8 <HAL_GetTick>
 80042bc:	0005      	movs	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	07d2      	lsls	r2, r2, #31
 80042c4:	d411      	bmi.n	80042ea <HAL_RTC_SetAlarm_IT+0x142>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042c6:	f7fe f897 	bl	80023f8 <HAL_GetTick>
 80042ca:	1b40      	subs	r0, r0, r5
 80042cc:	23fa      	movs	r3, #250	; 0xfa
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4298      	cmp	r0, r3
 80042d2:	d9f4      	bls.n	80042be <HAL_RTC_SetAlarm_IT+0x116>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	22ff      	movs	r2, #255	; 0xff
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042da:	2321      	movs	r3, #33	; 0x21
 80042dc:	3afc      	subs	r2, #252	; 0xfc
 80042de:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 80042e0:	3b01      	subs	r3, #1
 80042e2:	2200      	movs	r2, #0
 80042e4:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80042e6:	2003      	movs	r0, #3
 80042e8:	e031      	b.n	800434e <HAL_RTC_SetAlarm_IT+0x1a6>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80042ea:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80042f0:	6822      	ldr	r2, [r4, #0]
 80042f2:	6891      	ldr	r1, [r2, #8]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80042fc:	6822      	ldr	r2, [r4, #0]
 80042fe:	6891      	ldr	r1, [r2, #8]
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	015b      	lsls	r3, r3, #5
 8004304:	430b      	orrs	r3, r1
 8004306:	6093      	str	r3, [r2, #8]
 8004308:	e00e      	b.n	8004328 <HAL_RTC_SetAlarm_IT+0x180>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800430a:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004310:	6822      	ldr	r2, [r4, #0]
 8004312:	6891      	ldr	r1, [r2, #8]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	430b      	orrs	r3, r1
 800431a:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800431c:	6822      	ldr	r2, [r4, #0]
 800431e:	6891      	ldr	r1, [r2, #8]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	430b      	orrs	r3, r1
 8004326:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_RTC_SetAlarm_IT+0x1bc>)
 800432a:	6819      	ldr	r1, [r3, #0]
 800432c:	2280      	movs	r2, #128	; 0x80
 800432e:	0292      	lsls	r2, r2, #10
 8004330:	4311      	orrs	r1, r2
 8004332:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004334:	6899      	ldr	r1, [r3, #8]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004340:	2321      	movs	r3, #33	; 0x21
 8004342:	3afe      	subs	r2, #254	; 0xfe
 8004344:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 8004346:	3b01      	subs	r3, #1
 8004348:	2200      	movs	r2, #0
 800434a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800434c:	2000      	movs	r0, #0
}
 800434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8004350:	2002      	movs	r0, #2
 8004352:	e7fc      	b.n	800434e <HAL_RTC_SetAlarm_IT+0x1a6>
 8004354:	fffffdff 	.word	0xfffffdff
 8004358:	fffffd7f 	.word	0xfffffd7f
 800435c:	fffffeff 	.word	0xfffffeff
 8004360:	fffffe7f 	.word	0xfffffe7f
 8004364:	40010400 	.word	0x40010400

08004368 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	0004      	movs	r4, r0
 800436c:	000e      	movs	r6, r1
 800436e:	0015      	movs	r5, r2
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004370:	2320      	movs	r3, #32
 8004372:	5cc3      	ldrb	r3, [r0, r3]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d100      	bne.n	800437a <HAL_RTCEx_SetWakeUpTimer_IT+0x12>
 8004378:	e077      	b.n	800446a <HAL_RTCEx_SetWakeUpTimer_IT+0x102>
 800437a:	2320      	movs	r3, #32
 800437c:	2201      	movs	r2, #1
 800437e:	54c2      	strb	r2, [r0, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004380:	3301      	adds	r3, #1
 8004382:	3201      	adds	r2, #1
 8004384:	54c2      	strb	r2, [r0, r3]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004386:	6803      	ldr	r3, [r0, #0]
 8004388:	32c8      	adds	r2, #200	; 0xc8
 800438a:	625a      	str	r2, [r3, #36]	; 0x24
 800438c:	6803      	ldr	r3, [r0, #0]
 800438e:	3a77      	subs	r2, #119	; 0x77
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004392:	6803      	ldr	r3, [r0, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	055b      	lsls	r3, r3, #21
 8004398:	d518      	bpl.n	80043cc <HAL_RTCEx_SetWakeUpTimer_IT+0x64>
  {
    tickstart = HAL_GetTick();
 800439a:	f7fe f82d 	bl	80023f8 <HAL_GetTick>
 800439e:	0007      	movs	r7, r0

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	075b      	lsls	r3, r3, #29
 80043a6:	d511      	bpl.n	80043cc <HAL_RTCEx_SetWakeUpTimer_IT+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043a8:	f7fe f826 	bl	80023f8 <HAL_GetTick>
 80043ac:	1bc0      	subs	r0, r0, r7
 80043ae:	23fa      	movs	r3, #250	; 0xfa
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4298      	cmp	r0, r3
 80043b4:	d9f4      	bls.n	80043a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x38>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	22ff      	movs	r2, #255	; 0xff
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043bc:	2321      	movs	r3, #33	; 0x21
 80043be:	3afc      	subs	r2, #252	; 0xfc
 80043c0:	54e2      	strb	r2, [r4, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043c2:	3b01      	subs	r3, #1
 80043c4:	2200      	movs	r2, #0
 80043c6:	54e2      	strb	r2, [r4, r3]

        return HAL_TIMEOUT;
 80043c8:	2003      	movs	r0, #3
 80043ca:	e04d      	b.n	8004468 <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80043cc:	6822      	ldr	r2, [r4, #0]
 80043ce:	6893      	ldr	r3, [r2, #8]
 80043d0:	4927      	ldr	r1, [pc, #156]	; (8004470 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80043d2:	400b      	ands	r3, r1
 80043d4:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80043d6:	6821      	ldr	r1, [r4, #0]
 80043d8:	68ca      	ldr	r2, [r1, #12]
 80043da:	23ff      	movs	r3, #255	; 0xff
 80043dc:	401a      	ands	r2, r3
 80043de:	4b25      	ldr	r3, [pc, #148]	; (8004474 <HAL_RTCEx_SetWakeUpTimer_IT+0x10c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60cb      	str	r3, [r1, #12]

  tickstart = HAL_GetTick();
 80043e4:	f7fe f808 	bl	80023f8 <HAL_GetTick>
 80043e8:	0007      	movs	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	0752      	lsls	r2, r2, #29
 80043f0:	d411      	bmi.n	8004416 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043f2:	f7fe f801 	bl	80023f8 <HAL_GetTick>
 80043f6:	1bc0      	subs	r0, r0, r7
 80043f8:	23fa      	movs	r3, #250	; 0xfa
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4298      	cmp	r0, r3
 80043fe:	d9f4      	bls.n	80043ea <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	22ff      	movs	r2, #255	; 0xff
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004406:	2321      	movs	r3, #33	; 0x21
 8004408:	3afc      	subs	r2, #252	; 0xfc
 800440a:	54e2      	strb	r2, [r4, r3]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800440c:	3b01      	subs	r3, #1
 800440e:	2200      	movs	r2, #0
 8004410:	54e2      	strb	r2, [r4, r3]

      return HAL_TIMEOUT;
 8004412:	2003      	movs	r0, #3
 8004414:	e028      	b.n	8004468 <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004416:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004418:	6822      	ldr	r2, [r4, #0]
 800441a:	6893      	ldr	r3, [r2, #8]
 800441c:	2107      	movs	r1, #7
 800441e:	438b      	bics	r3, r1
 8004420:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	4315      	orrs	r5, r2
 8004428:	609d      	str	r5, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <HAL_RTCEx_SetWakeUpTimer_IT+0x110>)
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	2280      	movs	r2, #128	; 0x80
 8004430:	0352      	lsls	r2, r2, #13
 8004432:	4311      	orrs	r1, r2
 8004434:	6019      	str	r1, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004436:	6899      	ldr	r1, [r3, #8]
 8004438:	430a      	orrs	r2, r1
 800443a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	6891      	ldr	r1, [r2, #8]
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	01db      	lsls	r3, r3, #7
 8004444:	430b      	orrs	r3, r1
 8004446:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	6891      	ldr	r1, [r2, #8]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	430b      	orrs	r3, r1
 8004452:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	22ff      	movs	r2, #255	; 0xff
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800445a:	2321      	movs	r3, #33	; 0x21
 800445c:	3afe      	subs	r2, #254	; 0xfe
 800445e:	54e2      	strb	r2, [r4, r3]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004460:	3b01      	subs	r3, #1
 8004462:	2200      	movs	r2, #0
 8004464:	54e2      	strb	r2, [r4, r3]

  return HAL_OK;
 8004466:	2000      	movs	r0, #0
}
 8004468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 800446a:	2002      	movs	r0, #2
 800446c:	e7fc      	b.n	8004468 <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	fffffbff 	.word	0xfffffbff
 8004474:	fffffb7f 	.word	0xfffffb7f
 8004478:	40010400 	.word	0x40010400

0800447c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800447c:	b510      	push	{r4, lr}
 800447e:	0004      	movs	r4, r0
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004480:	6803      	ldr	r3, [r0, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	055b      	lsls	r3, r3, #21
 8004486:	d407      	bmi.n	8004498 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004488:	4b08      	ldr	r3, [pc, #32]	; (80044ac <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800448a:	2280      	movs	r2, #128	; 0x80
 800448c:	0352      	lsls	r2, r2, #13
 800448e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004490:	2321      	movs	r3, #33	; 0x21
 8004492:	2201      	movs	r2, #1
 8004494:	54e2      	strb	r2, [r4, r3]
}
 8004496:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004498:	f005 fd0e 	bl	8009eb8 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800449c:	6821      	ldr	r1, [r4, #0]
 800449e:	68ca      	ldr	r2, [r1, #12]
 80044a0:	23ff      	movs	r3, #255	; 0xff
 80044a2:	401a      	ands	r2, r3
 80044a4:	4b02      	ldr	r3, [pc, #8]	; (80044b0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60cb      	str	r3, [r1, #12]
 80044aa:	e7ed      	b.n	8004488 <HAL_RTCEx_WakeUpTimerIRQHandler+0xc>
 80044ac:	40010400 	.word	0x40010400
 80044b0:	fffffb7f 	.word	0xfffffb7f

080044b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	1e04      	subs	r4, r0, #0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b8:	d05e      	beq.n	8004578 <HAL_SPI_Init+0xc4>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d107      	bne.n	80044d0 <HAL_SPI_Init+0x1c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044c0:	3305      	adds	r3, #5
 80044c2:	33ff      	adds	r3, #255	; 0xff
 80044c4:	6842      	ldr	r2, [r0, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d005      	beq.n	80044d6 <HAL_SPI_Init+0x22>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61c3      	str	r3, [r0, #28]
 80044ce:	e002      	b.n	80044d6 <HAL_SPI_Init+0x22>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d0:	2300      	movs	r3, #0
 80044d2:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d4:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044da:	3351      	adds	r3, #81	; 0x51
 80044dc:	5ce3      	ldrb	r3, [r4, r3]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d043      	beq.n	800456a <HAL_SPI_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e2:	2251      	movs	r2, #81	; 0x51
 80044e4:	2102      	movs	r1, #2
 80044e6:	54a1      	strb	r1, [r4, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044e8:	6820      	ldr	r0, [r4, #0]
 80044ea:	6803      	ldr	r3, [r0, #0]
 80044ec:	2540      	movs	r5, #64	; 0x40
 80044ee:	43ab      	bics	r3, r5
 80044f0:	6003      	str	r3, [r0, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044f2:	2382      	movs	r3, #130	; 0x82
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	6860      	ldr	r0, [r4, #4]
 80044f8:	4003      	ands	r3, r0
 80044fa:	2084      	movs	r0, #132	; 0x84
 80044fc:	0200      	lsls	r0, r0, #8
 80044fe:	68a5      	ldr	r5, [r4, #8]
 8004500:	4028      	ands	r0, r5
 8004502:	4303      	orrs	r3, r0
 8004504:	2080      	movs	r0, #128	; 0x80
 8004506:	0100      	lsls	r0, r0, #4
 8004508:	68e5      	ldr	r5, [r4, #12]
 800450a:	4028      	ands	r0, r5
 800450c:	4303      	orrs	r3, r0
 800450e:	6920      	ldr	r0, [r4, #16]
 8004510:	4001      	ands	r1, r0
 8004512:	430b      	orrs	r3, r1
 8004514:	2101      	movs	r1, #1
 8004516:	6960      	ldr	r0, [r4, #20]
 8004518:	4008      	ands	r0, r1
 800451a:	4303      	orrs	r3, r0
 800451c:	2080      	movs	r0, #128	; 0x80
 800451e:	0080      	lsls	r0, r0, #2
 8004520:	69a5      	ldr	r5, [r4, #24]
 8004522:	4028      	ands	r0, r5
 8004524:	4303      	orrs	r3, r0
 8004526:	2038      	movs	r0, #56	; 0x38
 8004528:	69e5      	ldr	r5, [r4, #28]
 800452a:	4028      	ands	r0, r5
 800452c:	4303      	orrs	r3, r0
 800452e:	2080      	movs	r0, #128	; 0x80
 8004530:	6a25      	ldr	r5, [r4, #32]
 8004532:	4028      	ands	r0, r5
 8004534:	4303      	orrs	r3, r0
 8004536:	2080      	movs	r0, #128	; 0x80
 8004538:	0180      	lsls	r0, r0, #6
 800453a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800453c:	4028      	ands	r0, r5
 800453e:	6825      	ldr	r5, [r4, #0]
 8004540:	4303      	orrs	r3, r0
 8004542:	602b      	str	r3, [r5, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004544:	8b60      	ldrh	r0, [r4, #26]
 8004546:	2304      	movs	r3, #4
 8004548:	4003      	ands	r3, r0
 800454a:	2010      	movs	r0, #16
 800454c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800454e:	4028      	ands	r0, r5
 8004550:	6825      	ldr	r5, [r4, #0]
 8004552:	4303      	orrs	r3, r0
 8004554:	606b      	str	r3, [r5, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004556:	6820      	ldr	r0, [r4, #0]
 8004558:	69c3      	ldr	r3, [r0, #28]
 800455a:	4d08      	ldr	r5, [pc, #32]	; (800457c <HAL_SPI_Init+0xc8>)
 800455c:	402b      	ands	r3, r5
 800455e:	61c3      	str	r3, [r0, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004560:	2300      	movs	r3, #0
 8004562:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004564:	54a1      	strb	r1, [r4, r2]

  return HAL_OK;
 8004566:	2000      	movs	r0, #0
}
 8004568:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800456a:	3350      	adds	r3, #80	; 0x50
 800456c:	2200      	movs	r2, #0
 800456e:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8004570:	0020      	movs	r0, r4
 8004572:	f006 f975 	bl	800a860 <HAL_SPI_MspInit>
 8004576:	e7b4      	b.n	80044e2 <HAL_SPI_Init+0x2e>
    return HAL_ERROR;
 8004578:	2001      	movs	r0, #1
 800457a:	e7f5      	b.n	8004568 <HAL_SPI_Init+0xb4>
 800457c:	fffff7ff 	.word	0xfffff7ff

08004580 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004580:	4770      	bx	lr
	...

08004584 <HAL_SPI_IRQHandler>:
{
 8004584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004586:	b085      	sub	sp, #20
 8004588:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800458a:	6802      	ldr	r2, [r0, #0]
 800458c:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800458e:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004590:	0999      	lsrs	r1, r3, #6
 8004592:	2001      	movs	r0, #1
 8004594:	0006      	movs	r6, r0
 8004596:	400e      	ands	r6, r1
 8004598:	4208      	tst	r0, r1
 800459a:	d103      	bne.n	80045a4 <HAL_SPI_IRQHandler+0x20>
 800459c:	07d9      	lsls	r1, r3, #31
 800459e:	d501      	bpl.n	80045a4 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045a0:	0669      	lsls	r1, r5, #25
 80045a2:	d46a      	bmi.n	800467a <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80045a4:	0799      	lsls	r1, r3, #30
 80045a6:	d501      	bpl.n	80045ac <HAL_SPI_IRQHandler+0x28>
 80045a8:	0629      	lsls	r1, r5, #24
 80045aa:	d46a      	bmi.n	8004682 <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045ac:	0959      	lsrs	r1, r3, #5
 80045ae:	2001      	movs	r0, #1
 80045b0:	0007      	movs	r7, r0
 80045b2:	400f      	ands	r7, r1
 80045b4:	4208      	tst	r0, r1
 80045b6:	d103      	bne.n	80045c0 <HAL_SPI_IRQHandler+0x3c>
 80045b8:	2e00      	cmp	r6, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_SPI_IRQHandler+0x3c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80045bc:	05d9      	lsls	r1, r3, #23
 80045be:	d563      	bpl.n	8004688 <HAL_SPI_IRQHandler+0x104>
 80045c0:	06a9      	lsls	r1, r5, #26
 80045c2:	d561      	bpl.n	8004688 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045c4:	2e00      	cmp	r6, #0
 80045c6:	d00e      	beq.n	80045e6 <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80045c8:	2151      	movs	r1, #81	; 0x51
 80045ca:	5c61      	ldrb	r1, [r4, r1]
 80045cc:	2903      	cmp	r1, #3
 80045ce:	d05d      	beq.n	800468c <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80045d0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80045d2:	2004      	movs	r0, #4
 80045d4:	4301      	orrs	r1, r0
 80045d6:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045d8:	2100      	movs	r1, #0
 80045da:	9100      	str	r1, [sp, #0]
 80045dc:	68d1      	ldr	r1, [r2, #12]
 80045de:	9100      	str	r1, [sp, #0]
 80045e0:	6891      	ldr	r1, [r2, #8]
 80045e2:	9100      	str	r1, [sp, #0]
 80045e4:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045e6:	2f00      	cmp	r7, #0
 80045e8:	d00c      	beq.n	8004604 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045ea:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80045ec:	2001      	movs	r0, #1
 80045ee:	4301      	orrs	r1, r0
 80045f0:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80045f2:	2100      	movs	r1, #0
 80045f4:	9102      	str	r1, [sp, #8]
 80045f6:	6891      	ldr	r1, [r2, #8]
 80045f8:	9102      	str	r1, [sp, #8]
 80045fa:	6811      	ldr	r1, [r2, #0]
 80045fc:	303f      	adds	r0, #63	; 0x3f
 80045fe:	4381      	bics	r1, r0
 8004600:	6011      	str	r1, [r2, #0]
 8004602:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004604:	05db      	lsls	r3, r3, #23
 8004606:	d509      	bpl.n	800461c <HAL_SPI_IRQHandler+0x98>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004608:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800460a:	2208      	movs	r2, #8
 800460c:	4313      	orrs	r3, r2
 800460e:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004610:	2300      	movs	r3, #0
 8004612:	9303      	str	r3, [sp, #12]
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	9303      	str	r3, [sp, #12]
 800461a:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800461c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800461e:	2b00      	cmp	r3, #0
 8004620:	d032      	beq.n	8004688 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004622:	6822      	ldr	r2, [r4, #0]
 8004624:	6853      	ldr	r3, [r2, #4]
 8004626:	21e0      	movs	r1, #224	; 0xe0
 8004628:	438b      	bics	r3, r1
 800462a:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800462c:	2351      	movs	r3, #81	; 0x51
 800462e:	2201      	movs	r2, #1
 8004630:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004632:	07ab      	lsls	r3, r5, #30
 8004634:	d032      	beq.n	800469c <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	6853      	ldr	r3, [r2, #4]
 800463a:	39dd      	subs	r1, #221	; 0xdd
 800463c:	438b      	bics	r3, r1
 800463e:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004640:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004646:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <HAL_SPI_IRQHandler+0x120>)
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800464a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800464c:	f7fe fbcd 	bl	8002dea <HAL_DMA_Abort_IT>
 8004650:	2800      	cmp	r0, #0
 8004652:	d003      	beq.n	800465c <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004654:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004656:	2240      	movs	r2, #64	; 0x40
 8004658:	4313      	orrs	r3, r2
 800465a:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800465c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800465e:	2b00      	cmp	r3, #0
 8004660:	d012      	beq.n	8004688 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004662:	4a10      	ldr	r2, [pc, #64]	; (80046a4 <HAL_SPI_IRQHandler+0x120>)
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004666:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004668:	f7fe fbbf 	bl	8002dea <HAL_DMA_Abort_IT>
 800466c:	2800      	cmp	r0, #0
 800466e:	d00b      	beq.n	8004688 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004670:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004672:	2240      	movs	r2, #64	; 0x40
 8004674:	4313      	orrs	r3, r2
 8004676:	6563      	str	r3, [r4, #84]	; 0x54
 8004678:	e006      	b.n	8004688 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 800467a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800467c:	0020      	movs	r0, r4
 800467e:	4798      	blx	r3
    return;
 8004680:	e002      	b.n	8004688 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 8004682:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004684:	0020      	movs	r0, r4
 8004686:	4798      	blx	r3
}
 8004688:	b005      	add	sp, #20
 800468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800468c:	2300      	movs	r3, #0
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	68d3      	ldr	r3, [r2, #12]
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	6893      	ldr	r3, [r2, #8]
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	9b01      	ldr	r3, [sp, #4]
        return;
 800469a:	e7f5      	b.n	8004688 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 800469c:	0020      	movs	r0, r4
 800469e:	f7ff ff6f 	bl	8004580 <HAL_SPI_ErrorCallback>
    return;
 80046a2:	e7f1      	b.n	8004688 <HAL_SPI_IRQHandler+0x104>
 80046a4:	080046a9 	.word	0x080046a9

080046a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046a8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80046b0:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046b2:	f7ff ff65 	bl	8004580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046b6:	bd10      	pop	{r4, pc}

080046b8 <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ba:	2280      	movs	r2, #128	; 0x80
 80046bc:	05d2      	lsls	r2, r2, #23
 80046be:	4290      	cmp	r0, r2
 80046c0:	d008      	beq.n	80046d4 <TIM_Base_SetConfig+0x1c>
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <TIM_Base_SetConfig+0x60>)
 80046c4:	4290      	cmp	r0, r2
 80046c6:	d005      	beq.n	80046d4 <TIM_Base_SetConfig+0x1c>
 80046c8:	4a14      	ldr	r2, [pc, #80]	; (800471c <TIM_Base_SetConfig+0x64>)
 80046ca:	4290      	cmp	r0, r2
 80046cc:	d002      	beq.n	80046d4 <TIM_Base_SetConfig+0x1c>
 80046ce:	4a14      	ldr	r2, [pc, #80]	; (8004720 <TIM_Base_SetConfig+0x68>)
 80046d0:	4290      	cmp	r0, r2
 80046d2:	d103      	bne.n	80046dc <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d4:	2270      	movs	r2, #112	; 0x70
 80046d6:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80046d8:	684a      	ldr	r2, [r1, #4]
 80046da:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	05d2      	lsls	r2, r2, #23
 80046e0:	4290      	cmp	r0, r2
 80046e2:	d008      	beq.n	80046f6 <TIM_Base_SetConfig+0x3e>
 80046e4:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <TIM_Base_SetConfig+0x60>)
 80046e6:	4290      	cmp	r0, r2
 80046e8:	d005      	beq.n	80046f6 <TIM_Base_SetConfig+0x3e>
 80046ea:	4a0c      	ldr	r2, [pc, #48]	; (800471c <TIM_Base_SetConfig+0x64>)
 80046ec:	4290      	cmp	r0, r2
 80046ee:	d002      	beq.n	80046f6 <TIM_Base_SetConfig+0x3e>
 80046f0:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <TIM_Base_SetConfig+0x68>)
 80046f2:	4290      	cmp	r0, r2
 80046f4:	d103      	bne.n	80046fe <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f6:	4a0b      	ldr	r2, [pc, #44]	; (8004724 <TIM_Base_SetConfig+0x6c>)
 80046f8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fa:	68ca      	ldr	r2, [r1, #12]
 80046fc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046fe:	2280      	movs	r2, #128	; 0x80
 8004700:	4393      	bics	r3, r2
 8004702:	690a      	ldr	r2, [r1, #16]
 8004704:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004706:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004708:	688b      	ldr	r3, [r1, #8]
 800470a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800470c:	680b      	ldr	r3, [r1, #0]
 800470e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004710:	2301      	movs	r3, #1
 8004712:	6143      	str	r3, [r0, #20]
}
 8004714:	4770      	bx	lr
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	40000400 	.word	0x40000400
 800471c:	40010800 	.word	0x40010800
 8004720:	40011400 	.word	0x40011400
 8004724:	fffffcff 	.word	0xfffffcff

08004728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800472a:	6a03      	ldr	r3, [r0, #32]
 800472c:	2201      	movs	r2, #1
 800472e:	4393      	bics	r3, r2
 8004730:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004734:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004736:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004738:	2573      	movs	r5, #115	; 0x73
 800473a:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800473c:	680d      	ldr	r5, [r1, #0]
 800473e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004740:	2502      	movs	r5, #2
 8004742:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004744:	688d      	ldr	r5, [r1, #8]
 8004746:	432b      	orrs	r3, r5

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004748:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800474c:	684a      	ldr	r2, [r1, #4]
 800474e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004750:	6203      	str	r3, [r0, #32]
}
 8004752:	bd30      	pop	{r4, r5, pc}

08004754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004756:	6a03      	ldr	r3, [r0, #32]
 8004758:	2210      	movs	r2, #16
 800475a:	4393      	bics	r3, r2
 800475c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004760:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004762:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004764:	4c08      	ldr	r4, [pc, #32]	; (8004788 <TIM_OC2_SetConfig+0x34>)
 8004766:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	680a      	ldr	r2, [r1, #0]
 800476a:	0212      	lsls	r2, r2, #8
 800476c:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800476e:	2420      	movs	r4, #32
 8004770:	43a3      	bics	r3, r4
 8004772:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004774:	688b      	ldr	r3, [r1, #8]
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800477c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800477e:	684a      	ldr	r2, [r1, #4]
 8004780:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004782:	6203      	str	r3, [r0, #32]
}
 8004784:	bd30      	pop	{r4, r5, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	ffff8cff 	.word	0xffff8cff

0800478c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800478e:	6a03      	ldr	r3, [r0, #32]
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <TIM_OC3_SetConfig+0x30>)
 8004792:	4013      	ands	r3, r2
 8004794:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800479a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800479c:	2473      	movs	r4, #115	; 0x73
 800479e:	43a2      	bics	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a0:	680c      	ldr	r4, [r1, #0]
 80047a2:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047a4:	4c06      	ldr	r4, [pc, #24]	; (80047c0 <TIM_OC3_SetConfig+0x34>)
 80047a6:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047a8:	688b      	ldr	r3, [r1, #8]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ae:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047b2:	684a      	ldr	r2, [r1, #4]
 80047b4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b6:	6203      	str	r3, [r0, #32]
}
 80047b8:	bd30      	pop	{r4, r5, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	fffffeff 	.word	0xfffffeff
 80047c0:	fffffdff 	.word	0xfffffdff

080047c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047c6:	6a03      	ldr	r3, [r0, #32]
 80047c8:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <TIM_OC4_SetConfig+0x30>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047d2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d4:	4c08      	ldr	r4, [pc, #32]	; (80047f8 <TIM_OC4_SetConfig+0x34>)
 80047d6:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	680a      	ldr	r2, [r1, #0]
 80047da:	0212      	lsls	r2, r2, #8
 80047dc:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047de:	4c07      	ldr	r4, [pc, #28]	; (80047fc <TIM_OC4_SetConfig+0x38>)
 80047e0:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047e2:	688b      	ldr	r3, [r1, #8]
 80047e4:	031b      	lsls	r3, r3, #12
 80047e6:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047ec:	684a      	ldr	r2, [r1, #4]
 80047ee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f0:	6203      	str	r3, [r0, #32]
}
 80047f2:	bd30      	pop	{r4, r5, pc}
 80047f4:	ffffefff 	.word	0xffffefff
 80047f8:	ffff8cff 	.word	0xffff8cff
 80047fc:	ffffdfff 	.word	0xffffdfff

08004800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004800:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004802:	231f      	movs	r3, #31
 8004804:	4019      	ands	r1, r3
 8004806:	2401      	movs	r4, #1
 8004808:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800480a:	6a03      	ldr	r3, [r0, #32]
 800480c:	43a3      	bics	r3, r4
 800480e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004810:	6a03      	ldr	r3, [r0, #32]
 8004812:	408a      	lsls	r2, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	6203      	str	r3, [r0, #32]
}
 8004818:	bd10      	pop	{r4, pc}

0800481a <HAL_TIM_Base_Init>:
{
 800481a:	b570      	push	{r4, r5, r6, lr}
 800481c:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800481e:	d01e      	beq.n	800485e <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004820:	2339      	movs	r3, #57	; 0x39
 8004822:	5cc3      	ldrb	r3, [r0, r3]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d014      	beq.n	8004852 <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	2539      	movs	r5, #57	; 0x39
 800482a:	2302      	movs	r3, #2
 800482c:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800482e:	0021      	movs	r1, r4
 8004830:	c901      	ldmia	r1!, {r0}
 8004832:	f7ff ff41 	bl	80046b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004836:	2301      	movs	r3, #1
 8004838:	223e      	movs	r2, #62	; 0x3e
 800483a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	3a04      	subs	r2, #4
 800483e:	54a3      	strb	r3, [r4, r2]
 8004840:	3201      	adds	r2, #1
 8004842:	54a3      	strb	r3, [r4, r2]
 8004844:	3201      	adds	r2, #1
 8004846:	54a3      	strb	r3, [r4, r2]
 8004848:	3201      	adds	r2, #1
 800484a:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800484c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800484e:	2000      	movs	r0, #0
}
 8004850:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004852:	3338      	adds	r3, #56	; 0x38
 8004854:	2200      	movs	r2, #0
 8004856:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8004858:	f006 fa60 	bl	800ad1c <HAL_TIM_Base_MspInit>
 800485c:	e7e4      	b.n	8004828 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800485e:	2001      	movs	r0, #1
 8004860:	e7f6      	b.n	8004850 <HAL_TIM_Base_Init+0x36>
	...

08004864 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004864:	2339      	movs	r3, #57	; 0x39
 8004866:	5cc3      	ldrb	r3, [r0, r3]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d126      	bne.n	80048ba <HAL_TIM_Base_Start_IT+0x56>
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	3338      	adds	r3, #56	; 0x38
 800486e:	2202      	movs	r2, #2
 8004870:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004872:	6802      	ldr	r2, [r0, #0]
 8004874:	68d3      	ldr	r3, [r2, #12]
 8004876:	2101      	movs	r1, #1
 8004878:	430b      	orrs	r3, r1
 800487a:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487c:	6803      	ldr	r3, [r0, #0]
 800487e:	2280      	movs	r2, #128	; 0x80
 8004880:	05d2      	lsls	r2, r2, #23
 8004882:	4293      	cmp	r3, r2
 8004884:	d00e      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x40>
 8004886:	4a0f      	ldr	r2, [pc, #60]	; (80048c4 <HAL_TIM_Base_Start_IT+0x60>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00b      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x40>
 800488c:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <HAL_TIM_Base_Start_IT+0x64>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d008      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x40>
 8004892:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <HAL_TIM_Base_Start_IT+0x68>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d005      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x40>
    __HAL_TIM_ENABLE(htim);
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2101      	movs	r1, #1
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80048a0:	2000      	movs	r0, #0
 80048a2:	e00b      	b.n	80048bc <HAL_TIM_Base_Start_IT+0x58>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a4:	6899      	ldr	r1, [r3, #8]
 80048a6:	2207      	movs	r2, #7
 80048a8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048aa:	2a06      	cmp	r2, #6
 80048ac:	d007      	beq.n	80048be <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2101      	movs	r1, #1
 80048b2:	430a      	orrs	r2, r1
 80048b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80048b6:	2000      	movs	r0, #0
 80048b8:	e000      	b.n	80048bc <HAL_TIM_Base_Start_IT+0x58>
    return HAL_ERROR;
 80048ba:	2001      	movs	r0, #1
}
 80048bc:	4770      	bx	lr
  return HAL_OK;
 80048be:	2000      	movs	r0, #0
 80048c0:	e7fc      	b.n	80048bc <HAL_TIM_Base_Start_IT+0x58>
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40010800 	.word	0x40010800
 80048cc:	40011400 	.word	0x40011400

080048d0 <HAL_TIM_PWM_Init>:
{
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80048d4:	d01e      	beq.n	8004914 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	2339      	movs	r3, #57	; 0x39
 80048d8:	5cc3      	ldrb	r3, [r0, r3]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d014      	beq.n	8004908 <HAL_TIM_PWM_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 80048de:	2539      	movs	r5, #57	; 0x39
 80048e0:	2302      	movs	r3, #2
 80048e2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e4:	0021      	movs	r1, r4
 80048e6:	c901      	ldmia	r1!, {r0}
 80048e8:	f7ff fee6 	bl	80046b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ec:	2301      	movs	r3, #1
 80048ee:	223e      	movs	r2, #62	; 0x3e
 80048f0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f2:	3a04      	subs	r2, #4
 80048f4:	54a3      	strb	r3, [r4, r2]
 80048f6:	3201      	adds	r2, #1
 80048f8:	54a3      	strb	r3, [r4, r2]
 80048fa:	3201      	adds	r2, #1
 80048fc:	54a3      	strb	r3, [r4, r2]
 80048fe:	3201      	adds	r2, #1
 8004900:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004902:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004904:	2000      	movs	r0, #0
}
 8004906:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004908:	3338      	adds	r3, #56	; 0x38
 800490a:	2200      	movs	r2, #0
 800490c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800490e:	f006 f9ed 	bl	800acec <HAL_TIM_PWM_MspInit>
 8004912:	e7e4      	b.n	80048de <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8004914:	2001      	movs	r0, #1
 8004916:	e7f6      	b.n	8004906 <HAL_TIM_PWM_Init+0x36>

08004918 <HAL_TIM_PWM_Start>:
{
 8004918:	b510      	push	{r4, lr}
 800491a:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800491c:	2900      	cmp	r1, #0
 800491e:	d124      	bne.n	800496a <HAL_TIM_PWM_Start+0x52>
 8004920:	233a      	movs	r3, #58	; 0x3a
 8004922:	5cc3      	ldrb	r3, [r0, r3]
 8004924:	3b01      	subs	r3, #1
 8004926:	1e5a      	subs	r2, r3, #1
 8004928:	4193      	sbcs	r3, r2
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d150      	bne.n	80049d2 <HAL_TIM_PWM_Start+0xba>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004930:	2900      	cmp	r1, #0
 8004932:	d133      	bne.n	800499c <HAL_TIM_PWM_Start+0x84>
 8004934:	333a      	adds	r3, #58	; 0x3a
 8004936:	2202      	movs	r2, #2
 8004938:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800493a:	2201      	movs	r2, #1
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	f7ff ff5f 	bl	8004800 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	2280      	movs	r2, #128	; 0x80
 8004946:	05d2      	lsls	r2, r2, #23
 8004948:	4293      	cmp	r3, r2
 800494a:	d037      	beq.n	80049bc <HAL_TIM_PWM_Start+0xa4>
 800494c:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_TIM_PWM_Start+0xc4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d034      	beq.n	80049bc <HAL_TIM_PWM_Start+0xa4>
 8004952:	4a23      	ldr	r2, [pc, #140]	; (80049e0 <HAL_TIM_PWM_Start+0xc8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d031      	beq.n	80049bc <HAL_TIM_PWM_Start+0xa4>
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <HAL_TIM_PWM_Start+0xcc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02e      	beq.n	80049bc <HAL_TIM_PWM_Start+0xa4>
    __HAL_TIM_ENABLE(htim);
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	430a      	orrs	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004966:	2000      	movs	r0, #0
 8004968:	e034      	b.n	80049d4 <HAL_TIM_PWM_Start+0xbc>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800496a:	2904      	cmp	r1, #4
 800496c:	d008      	beq.n	8004980 <HAL_TIM_PWM_Start+0x68>
 800496e:	2908      	cmp	r1, #8
 8004970:	d00d      	beq.n	800498e <HAL_TIM_PWM_Start+0x76>
 8004972:	233d      	movs	r3, #61	; 0x3d
 8004974:	5cc3      	ldrb	r3, [r0, r3]
 8004976:	3b01      	subs	r3, #1
 8004978:	1e5a      	subs	r2, r3, #1
 800497a:	4193      	sbcs	r3, r2
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e7d5      	b.n	800492c <HAL_TIM_PWM_Start+0x14>
 8004980:	233b      	movs	r3, #59	; 0x3b
 8004982:	5cc3      	ldrb	r3, [r0, r3]
 8004984:	3b01      	subs	r3, #1
 8004986:	1e5a      	subs	r2, r3, #1
 8004988:	4193      	sbcs	r3, r2
 800498a:	b2db      	uxtb	r3, r3
 800498c:	e7ce      	b.n	800492c <HAL_TIM_PWM_Start+0x14>
 800498e:	233c      	movs	r3, #60	; 0x3c
 8004990:	5cc3      	ldrb	r3, [r0, r3]
 8004992:	3b01      	subs	r3, #1
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	4193      	sbcs	r3, r2
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e7c7      	b.n	800492c <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800499c:	2904      	cmp	r1, #4
 800499e:	d005      	beq.n	80049ac <HAL_TIM_PWM_Start+0x94>
 80049a0:	2908      	cmp	r1, #8
 80049a2:	d007      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x9c>
 80049a4:	233d      	movs	r3, #61	; 0x3d
 80049a6:	2202      	movs	r2, #2
 80049a8:	54e2      	strb	r2, [r4, r3]
 80049aa:	e7c6      	b.n	800493a <HAL_TIM_PWM_Start+0x22>
 80049ac:	233b      	movs	r3, #59	; 0x3b
 80049ae:	2202      	movs	r2, #2
 80049b0:	54e2      	strb	r2, [r4, r3]
 80049b2:	e7c2      	b.n	800493a <HAL_TIM_PWM_Start+0x22>
 80049b4:	233c      	movs	r3, #60	; 0x3c
 80049b6:	2202      	movs	r2, #2
 80049b8:	54e2      	strb	r2, [r4, r3]
 80049ba:	e7be      	b.n	800493a <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049bc:	6899      	ldr	r1, [r3, #8]
 80049be:	2207      	movs	r2, #7
 80049c0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	2a06      	cmp	r2, #6
 80049c4:	d007      	beq.n	80049d6 <HAL_TIM_PWM_Start+0xbe>
      __HAL_TIM_ENABLE(htim);
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	2101      	movs	r1, #1
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80049ce:	2000      	movs	r0, #0
 80049d0:	e000      	b.n	80049d4 <HAL_TIM_PWM_Start+0xbc>
    return HAL_ERROR;
 80049d2:	2001      	movs	r0, #1
}
 80049d4:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80049d6:	2000      	movs	r0, #0
 80049d8:	e7fc      	b.n	80049d4 <HAL_TIM_PWM_Start+0xbc>
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40010800 	.word	0x40010800
 80049e4:	40011400 	.word	0x40011400

080049e8 <HAL_TIM_PWM_Stop>:
{
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	0004      	movs	r4, r0
 80049ec:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049ee:	2200      	movs	r2, #0
 80049f0:	6800      	ldr	r0, [r0, #0]
 80049f2:	f7ff ff05 	bl	8004800 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	6a19      	ldr	r1, [r3, #32]
 80049fa:	4a0f      	ldr	r2, [pc, #60]	; (8004a38 <HAL_TIM_PWM_Stop+0x50>)
 80049fc:	4211      	tst	r1, r2
 80049fe:	d103      	bne.n	8004a08 <HAL_TIM_PWM_Stop+0x20>
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	2101      	movs	r1, #1
 8004a04:	438a      	bics	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	2d00      	cmp	r5, #0
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_PWM_Stop+0x2e>
 8004a0c:	233a      	movs	r3, #58	; 0x3a
 8004a0e:	2201      	movs	r2, #1
 8004a10:	54e2      	strb	r2, [r4, r3]
}
 8004a12:	2000      	movs	r0, #0
 8004a14:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a16:	2d04      	cmp	r5, #4
 8004a18:	d005      	beq.n	8004a26 <HAL_TIM_PWM_Stop+0x3e>
 8004a1a:	2d08      	cmp	r5, #8
 8004a1c:	d007      	beq.n	8004a2e <HAL_TIM_PWM_Stop+0x46>
 8004a1e:	233d      	movs	r3, #61	; 0x3d
 8004a20:	2201      	movs	r2, #1
 8004a22:	54e2      	strb	r2, [r4, r3]
 8004a24:	e7f5      	b.n	8004a12 <HAL_TIM_PWM_Stop+0x2a>
 8004a26:	233b      	movs	r3, #59	; 0x3b
 8004a28:	2201      	movs	r2, #1
 8004a2a:	54e2      	strb	r2, [r4, r3]
 8004a2c:	e7f1      	b.n	8004a12 <HAL_TIM_PWM_Stop+0x2a>
 8004a2e:	233c      	movs	r3, #60	; 0x3c
 8004a30:	2201      	movs	r2, #1
 8004a32:	54e2      	strb	r2, [r4, r3]
 8004a34:	e7ed      	b.n	8004a12 <HAL_TIM_PWM_Stop+0x2a>
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	00001111 	.word	0x00001111

08004a3c <HAL_TIM_PWM_ConfigChannel>:
{
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	0004      	movs	r4, r0
 8004a40:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8004a42:	2338      	movs	r3, #56	; 0x38
 8004a44:	5cc3      	ldrb	r3, [r0, r3]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d100      	bne.n	8004a4c <HAL_TIM_PWM_ConfigChannel+0x10>
 8004a4a:	e06a      	b.n	8004b22 <HAL_TIM_PWM_ConfigChannel+0xe6>
 8004a4c:	2338      	movs	r3, #56	; 0x38
 8004a4e:	2101      	movs	r1, #1
 8004a50:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8004a52:	2a08      	cmp	r2, #8
 8004a54:	d050      	beq.n	8004af8 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8004a56:	d81c      	bhi.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	d038      	beq.n	8004ace <HAL_TIM_PWM_ConfigChannel+0x92>
 8004a5c:	2a04      	cmp	r2, #4
 8004a5e:	d116      	bne.n	8004a8e <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a60:	0029      	movs	r1, r5
 8004a62:	6800      	ldr	r0, [r0, #0]
 8004a64:	f7ff fe76 	bl	8004754 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	6991      	ldr	r1, [r2, #24]
 8004a6c:	2380      	movs	r3, #128	; 0x80
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	6993      	ldr	r3, [r2, #24]
 8004a78:	492b      	ldr	r1, [pc, #172]	; (8004b28 <HAL_TIM_PWM_ConfigChannel+0xec>)
 8004a7a:	400b      	ands	r3, r1
 8004a7c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a7e:	6821      	ldr	r1, [r4, #0]
 8004a80:	698b      	ldr	r3, [r1, #24]
 8004a82:	68ea      	ldr	r2, [r5, #12]
 8004a84:	0212      	lsls	r2, r2, #8
 8004a86:	4313      	orrs	r3, r2
 8004a88:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2000      	movs	r0, #0
      break;
 8004a8c:	e01b      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 8004a8e:	0008      	movs	r0, r1
 8004a90:	e019      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x8a>
 8004a92:	2a0c      	cmp	r2, #12
 8004a94:	d116      	bne.n	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a96:	0029      	movs	r1, r5
 8004a98:	6800      	ldr	r0, [r0, #0]
 8004a9a:	f7ff fe93 	bl	80047c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	69d1      	ldr	r1, [r2, #28]
 8004aa2:	2380      	movs	r3, #128	; 0x80
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aaa:	6822      	ldr	r2, [r4, #0]
 8004aac:	69d3      	ldr	r3, [r2, #28]
 8004aae:	491e      	ldr	r1, [pc, #120]	; (8004b28 <HAL_TIM_PWM_ConfigChannel+0xec>)
 8004ab0:	400b      	ands	r3, r1
 8004ab2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ab4:	6821      	ldr	r1, [r4, #0]
 8004ab6:	69cb      	ldr	r3, [r1, #28]
 8004ab8:	68ea      	ldr	r2, [r5, #12]
 8004aba:	0212      	lsls	r2, r2, #8
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2000      	movs	r0, #0
      break;
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 8004ac4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004ac6:	2338      	movs	r3, #56	; 0x38
 8004ac8:	2200      	movs	r2, #0
 8004aca:	54e2      	strb	r2, [r4, r3]
}
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ace:	0029      	movs	r1, r5
 8004ad0:	6800      	ldr	r0, [r0, #0]
 8004ad2:	f7ff fe29 	bl	8004728 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	6993      	ldr	r3, [r2, #24]
 8004ada:	2108      	movs	r1, #8
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	6993      	ldr	r3, [r2, #24]
 8004ae4:	3904      	subs	r1, #4
 8004ae6:	438b      	bics	r3, r1
 8004ae8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	6993      	ldr	r3, [r2, #24]
 8004aee:	68e9      	ldr	r1, [r5, #12]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2000      	movs	r0, #0
      break;
 8004af6:	e7e6      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004af8:	0029      	movs	r1, r5
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	f7ff fe46 	bl	800478c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b00:	6822      	ldr	r2, [r4, #0]
 8004b02:	69d3      	ldr	r3, [r2, #28]
 8004b04:	2108      	movs	r1, #8
 8004b06:	430b      	orrs	r3, r1
 8004b08:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	69d3      	ldr	r3, [r2, #28]
 8004b0e:	3904      	subs	r1, #4
 8004b10:	438b      	bics	r3, r1
 8004b12:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	69d3      	ldr	r3, [r2, #28]
 8004b18:	68e9      	ldr	r1, [r5, #12]
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2000      	movs	r0, #0
      break;
 8004b20:	e7d1      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x8a>
  __HAL_LOCK(htim);
 8004b22:	2002      	movs	r0, #2
 8004b24:	e7d2      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x90>
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	fffffbff 	.word	0xfffffbff

08004b2c <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004b2c:	4770      	bx	lr

08004b2e <HAL_TIM_IC_CaptureCallback>:
}
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_TriggerCallback>:
}
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIM_IRQHandler>:
{
 8004b34:	b510      	push	{r4, lr}
 8004b36:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b38:	6803      	ldr	r3, [r0, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	0792      	lsls	r2, r2, #30
 8004b3e:	d50f      	bpl.n	8004b60 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	0792      	lsls	r2, r2, #30
 8004b44:	d50c      	bpl.n	8004b60 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b46:	2203      	movs	r2, #3
 8004b48:	4252      	negs	r2, r2
 8004b4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b50:	6803      	ldr	r3, [r0, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	079b      	lsls	r3, r3, #30
 8004b56:	d055      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 8004b58:	f7ff ffe9 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	0752      	lsls	r2, r2, #29
 8004b66:	d512      	bpl.n	8004b8e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	0752      	lsls	r2, r2, #29
 8004b6c:	d50f      	bpl.n	8004b8e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b6e:	2205      	movs	r2, #5
 8004b70:	4252      	negs	r2, r2
 8004b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b74:	2302      	movs	r3, #2
 8004b76:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	23c0      	movs	r3, #192	; 0xc0
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	421a      	tst	r2, r3
 8004b82:	d045      	beq.n	8004c10 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b84:	0020      	movs	r0, r4
 8004b86:	f7ff ffd2 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	0712      	lsls	r2, r2, #28
 8004b94:	d510      	bpl.n	8004bb8 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	0712      	lsls	r2, r2, #28
 8004b9a:	d50d      	bpl.n	8004bb8 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b9c:	2209      	movs	r2, #9
 8004b9e:	4252      	negs	r2, r2
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	d037      	beq.n	8004c1e <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	0020      	movs	r0, r4
 8004bb0:	f7ff ffbd 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	06d2      	lsls	r2, r2, #27
 8004bbe:	d512      	bpl.n	8004be6 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	06d2      	lsls	r2, r2, #27
 8004bc4:	d50f      	bpl.n	8004be6 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bc6:	2211      	movs	r2, #17
 8004bc8:	4252      	negs	r2, r2
 8004bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bcc:	2308      	movs	r3, #8
 8004bce:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	23c0      	movs	r3, #192	; 0xc0
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	421a      	tst	r2, r3
 8004bda:	d027      	beq.n	8004c2c <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004bdc:	0020      	movs	r0, r4
 8004bde:	f7ff ffa6 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	2300      	movs	r3, #0
 8004be4:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	07d2      	lsls	r2, r2, #31
 8004bec:	d502      	bpl.n	8004bf4 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	07d2      	lsls	r2, r2, #31
 8004bf2:	d422      	bmi.n	8004c3a <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	0652      	lsls	r2, r2, #25
 8004bfa:	d502      	bpl.n	8004c02 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	0652      	lsls	r2, r2, #25
 8004c00:	d422      	bmi.n	8004c48 <HAL_TIM_IRQHandler+0x114>
}
 8004c02:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c04:	f7ff ff92 	bl	8004b2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	0020      	movs	r0, r4
 8004c0a:	f7ff ff91 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c0e:	e7a5      	b.n	8004b5c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c10:	0020      	movs	r0, r4
 8004c12:	f7ff ff8b 	bl	8004b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c16:	0020      	movs	r0, r4
 8004c18:	f7ff ff8a 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c1c:	e7b5      	b.n	8004b8a <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	0020      	movs	r0, r4
 8004c20:	f7ff ff84 	bl	8004b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	0020      	movs	r0, r4
 8004c26:	f7ff ff83 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c2a:	e7c3      	b.n	8004bb4 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2c:	0020      	movs	r0, r4
 8004c2e:	f7ff ff7d 	bl	8004b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c32:	0020      	movs	r0, r4
 8004c34:	f7ff ff7c 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c38:	e7d3      	b.n	8004be2 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	4252      	negs	r2, r2
 8004c3e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c40:	0020      	movs	r0, r4
 8004c42:	f004 fc51 	bl	80094e8 <HAL_TIM_PeriodElapsedCallback>
 8004c46:	e7d5      	b.n	8004bf4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c48:	2241      	movs	r2, #65	; 0x41
 8004c4a:	4252      	negs	r2, r2
 8004c4c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c4e:	0020      	movs	r0, r4
 8004c50:	f7ff ff6f 	bl	8004b32 <HAL_TIM_TriggerCallback>
}
 8004c54:	e7d5      	b.n	8004c02 <HAL_TIM_IRQHandler+0xce>
	...

08004c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c58:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c5a:	2338      	movs	r3, #56	; 0x38
 8004c5c:	5cc3      	ldrb	r3, [r0, r3]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d028      	beq.n	8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004c62:	2338      	movs	r3, #56	; 0x38
 8004c64:	2201      	movs	r2, #1
 8004c66:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	3301      	adds	r3, #1
 8004c6a:	3201      	adds	r2, #1
 8004c6c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c6e:	6803      	ldr	r3, [r0, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c72:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c74:	2570      	movs	r5, #112	; 0x70
 8004c76:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c78:	680d      	ldr	r5, [r1, #0]
 8004c7a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7e:	6803      	ldr	r3, [r0, #0]
 8004c80:	2280      	movs	r2, #128	; 0x80
 8004c82:	05d2      	lsls	r2, r2, #23
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d008      	beq.n	8004c9a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004c88:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d005      	beq.n	8004c9a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004c8e:	4a0b      	ldr	r2, [pc, #44]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d002      	beq.n	8004c9a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004c94:	4a0a      	ldr	r2, [pc, #40]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d104      	bne.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c9a:	2280      	movs	r2, #128	; 0x80
 8004c9c:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c9e:	684a      	ldr	r2, [r1, #4]
 8004ca0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca4:	2339      	movs	r3, #57	; 0x39
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004caa:	3b01      	subs	r3, #1
 8004cac:	2200      	movs	r2, #0
 8004cae:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004cb0:	2000      	movs	r0, #0
}
 8004cb2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004cb4:	2002      	movs	r0, #2
 8004cb6:	e7fc      	b.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40010800 	.word	0x40010800
 8004cc0:	40011400 	.word	0x40011400

08004cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc4:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd0:	6801      	ldr	r1, [r0, #0]
 8004cd2:	680b      	ldr	r3, [r1, #0]
 8004cd4:	4d11      	ldr	r5, [pc, #68]	; (8004d1c <UART_EndRxTransfer+0x58>)
 8004cd6:	402b      	ands	r3, r5
 8004cd8:	600b      	str	r3, [r1, #0]
 8004cda:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cde:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce6:	6801      	ldr	r1, [r0, #0]
 8004ce8:	688b      	ldr	r3, [r1, #8]
 8004cea:	4393      	bics	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
 8004cee:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d005      	beq.n	8004d04 <UART_EndRxTransfer+0x40>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d00:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004d02:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d04:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d08:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0c:	6802      	ldr	r2, [r0, #0]
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	2410      	movs	r4, #16
 8004d12:	43a3      	bics	r3, r4
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	f381 8810 	msr	PRIMASK, r1
}
 8004d1a:	e7ed      	b.n	8004cf8 <UART_EndRxTransfer+0x34>
 8004d1c:	fffffedf 	.word	0xfffffedf

08004d20 <HAL_UART_DeInit>:
{
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004d24:	d018      	beq.n	8004d58 <HAL_UART_DeInit+0x38>
  huart->gState = HAL_UART_STATE_BUSY;
 8004d26:	2324      	movs	r3, #36	; 0x24
 8004d28:	6783      	str	r3, [r0, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004d2a:	6802      	ldr	r2, [r0, #0]
 8004d2c:	6813      	ldr	r3, [r2, #0]
 8004d2e:	2101      	movs	r1, #1
 8004d30:	438b      	bics	r3, r1
 8004d32:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8004d34:	6803      	ldr	r3, [r0, #0]
 8004d36:	2500      	movs	r5, #0
 8004d38:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004d3a:	6803      	ldr	r3, [r0, #0]
 8004d3c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004d3e:	6803      	ldr	r3, [r0, #0]
 8004d40:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8004d42:	f006 f935 	bl	800afb0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d46:	2380      	movs	r3, #128	; 0x80
 8004d48:	50e5      	str	r5, [r4, r3]
  huart->gState = HAL_UART_STATE_RESET;
 8004d4a:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004d4c:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	6625      	str	r5, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8004d50:	3b0c      	subs	r3, #12
 8004d52:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8004d54:	2000      	movs	r0, #0
}
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004d58:	2001      	movs	r0, #1
 8004d5a:	e7fc      	b.n	8004d56 <HAL_UART_DeInit+0x36>

08004d5c <HAL_UART_TxCpltCallback>:
}
 8004d5c:	4770      	bx	lr

08004d5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d5e:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d60:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d64:	2301      	movs	r3, #1
 8004d66:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d6a:	6802      	ldr	r2, [r0, #0]
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	2440      	movs	r4, #64	; 0x40
 8004d70:	43a3      	bics	r3, r4
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d78:	2320      	movs	r3, #32
 8004d7a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d80:	f7ff ffec 	bl	8004d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d84:	bd10      	pop	{r4, pc}

08004d86 <HAL_UART_ErrorCallback>:
}
 8004d86:	4770      	bx	lr

08004d88 <UART_DMAAbortOnError>:
{
 8004d88:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	225a      	movs	r2, #90	; 0x5a
 8004d90:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004d92:	3a08      	subs	r2, #8
 8004d94:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8004d96:	f7ff fff6 	bl	8004d86 <HAL_UART_ErrorCallback>
}
 8004d9a:	bd10      	pop	{r4, pc}

08004d9c <HAL_UARTEx_RxEventCallback>:
}
 8004d9c:	4770      	bx	lr
	...

08004da0 <HAL_UART_IRQHandler>:
{
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004da4:	6802      	ldr	r2, [r0, #0]
 8004da6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004da8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004daa:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dac:	49ab      	ldr	r1, [pc, #684]	; (800505c <HAL_UART_IRQHandler+0x2bc>)
 8004dae:	001e      	movs	r6, r3
 8004db0:	400e      	ands	r6, r1
  if (errorflags == 0U)
 8004db2:	420b      	tst	r3, r1
 8004db4:	d103      	bne.n	8004dbe <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004db6:	0699      	lsls	r1, r3, #26
 8004db8:	d501      	bpl.n	8004dbe <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dba:	0681      	lsls	r1, r0, #26
 8004dbc:	d41d      	bmi.n	8004dfa <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != 0U)
 8004dbe:	2e00      	cmp	r6, #0
 8004dc0:	d007      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x32>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	000e      	movs	r6, r1
 8004dc6:	402e      	ands	r6, r5
 8004dc8:	4229      	tst	r1, r5
 8004dca:	d11c      	bne.n	8004e06 <HAL_UART_IRQHandler+0x66>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004dcc:	49a4      	ldr	r1, [pc, #656]	; (8005060 <HAL_UART_IRQHandler+0x2c0>)
 8004dce:	4208      	tst	r0, r1
 8004dd0:	d119      	bne.n	8004e06 <HAL_UART_IRQHandler+0x66>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004dd4:	2901      	cmp	r1, #1
 8004dd6:	d100      	bne.n	8004dda <HAL_UART_IRQHandler+0x3a>
 8004dd8:	e098      	b.n	8004f0c <HAL_UART_IRQHandler+0x16c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dda:	02d9      	lsls	r1, r3, #11
 8004ddc:	d502      	bpl.n	8004de4 <HAL_UART_IRQHandler+0x44>
 8004dde:	0269      	lsls	r1, r5, #9
 8004de0:	d500      	bpl.n	8004de4 <HAL_UART_IRQHandler+0x44>
 8004de2:	e128      	b.n	8005036 <HAL_UART_IRQHandler+0x296>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004de4:	061a      	lsls	r2, r3, #24
 8004de6:	d502      	bpl.n	8004dee <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004de8:	0602      	lsls	r2, r0, #24
 8004dea:	d500      	bpl.n	8004dee <HAL_UART_IRQHandler+0x4e>
 8004dec:	e12a      	b.n	8005044 <HAL_UART_IRQHandler+0x2a4>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dee:	065b      	lsls	r3, r3, #25
 8004df0:	d502      	bpl.n	8004df8 <HAL_UART_IRQHandler+0x58>
 8004df2:	0643      	lsls	r3, r0, #25
 8004df4:	d500      	bpl.n	8004df8 <HAL_UART_IRQHandler+0x58>
 8004df6:	e12c      	b.n	8005052 <HAL_UART_IRQHandler+0x2b2>
}
 8004df8:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8004dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0fb      	beq.n	8004df8 <HAL_UART_IRQHandler+0x58>
        huart->RxISR(huart);
 8004e00:	0020      	movs	r0, r4
 8004e02:	4798      	blx	r3
      return;
 8004e04:	e7f8      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e06:	07d9      	lsls	r1, r3, #31
 8004e08:	d507      	bpl.n	8004e1a <HAL_UART_IRQHandler+0x7a>
 8004e0a:	05c1      	lsls	r1, r0, #23
 8004e0c:	d505      	bpl.n	8004e1a <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e0e:	2501      	movs	r5, #1
 8004e10:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	5862      	ldr	r2, [r4, r1]
 8004e16:	432a      	orrs	r2, r5
 8004e18:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e1a:	079a      	lsls	r2, r3, #30
 8004e1c:	d509      	bpl.n	8004e32 <HAL_UART_IRQHandler+0x92>
 8004e1e:	2e00      	cmp	r6, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	2102      	movs	r1, #2
 8004e26:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e28:	317e      	adds	r1, #126	; 0x7e
 8004e2a:	5862      	ldr	r2, [r4, r1]
 8004e2c:	2504      	movs	r5, #4
 8004e2e:	432a      	orrs	r2, r5
 8004e30:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e32:	075a      	lsls	r2, r3, #29
 8004e34:	d509      	bpl.n	8004e4a <HAL_UART_IRQHandler+0xaa>
 8004e36:	2e00      	cmp	r6, #0
 8004e38:	d007      	beq.n	8004e4a <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	2104      	movs	r1, #4
 8004e3e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e40:	317c      	adds	r1, #124	; 0x7c
 8004e42:	5862      	ldr	r2, [r4, r1]
 8004e44:	2502      	movs	r5, #2
 8004e46:	432a      	orrs	r2, r5
 8004e48:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e4a:	071a      	lsls	r2, r3, #28
 8004e4c:	d50a      	bpl.n	8004e64 <HAL_UART_IRQHandler+0xc4>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e4e:	0682      	lsls	r2, r0, #26
 8004e50:	d401      	bmi.n	8004e56 <HAL_UART_IRQHandler+0xb6>
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	d006      	beq.n	8004e64 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	2508      	movs	r5, #8
 8004e5a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e5c:	2180      	movs	r1, #128	; 0x80
 8004e5e:	5862      	ldr	r2, [r4, r1]
 8004e60:	432a      	orrs	r2, r5
 8004e62:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e64:	051a      	lsls	r2, r3, #20
 8004e66:	d50a      	bpl.n	8004e7e <HAL_UART_IRQHandler+0xde>
 8004e68:	0142      	lsls	r2, r0, #5
 8004e6a:	d508      	bpl.n	8004e7e <HAL_UART_IRQHandler+0xde>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	2180      	movs	r1, #128	; 0x80
 8004e70:	0109      	lsls	r1, r1, #4
 8004e72:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e74:	2180      	movs	r1, #128	; 0x80
 8004e76:	5862      	ldr	r2, [r4, r1]
 8004e78:	2520      	movs	r5, #32
 8004e7a:	432a      	orrs	r2, r5
 8004e7c:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e7e:	2280      	movs	r2, #128	; 0x80
 8004e80:	58a2      	ldr	r2, [r4, r2]
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	d0b8      	beq.n	8004df8 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e86:	069b      	lsls	r3, r3, #26
 8004e88:	d506      	bpl.n	8004e98 <HAL_UART_IRQHandler+0xf8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e8a:	0683      	lsls	r3, r0, #26
 8004e8c:	d504      	bpl.n	8004e98 <HAL_UART_IRQHandler+0xf8>
        if (huart->RxISR != NULL)
 8004e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_UART_IRQHandler+0xf8>
          huart->RxISR(huart);
 8004e94:	0020      	movs	r0, r4
 8004e96:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	065b      	lsls	r3, r3, #25
 8004ea2:	d402      	bmi.n	8004eaa <HAL_UART_IRQHandler+0x10a>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ea4:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ea6:	4213      	tst	r3, r2
 8004ea8:	d029      	beq.n	8004efe <HAL_UART_IRQHandler+0x15e>
        UART_EndRxTransfer(huart);
 8004eaa:	0020      	movs	r0, r4
 8004eac:	f7ff ff0a 	bl	8004cc4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	065b      	lsls	r3, r3, #25
 8004eb6:	d51e      	bpl.n	8004ef6 <HAL_UART_IRQHandler+0x156>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	6893      	ldr	r3, [r2, #8]
 8004ec6:	2040      	movs	r0, #64	; 0x40
 8004ec8:	4383      	bics	r3, r0
 8004eca:	6093      	str	r3, [r2, #8]
 8004ecc:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8004ed0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_UART_IRQHandler+0x14e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ed6:	4a63      	ldr	r2, [pc, #396]	; (8005064 <HAL_UART_IRQHandler+0x2c4>)
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eda:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004edc:	f7fd ff85 	bl	8002dea <HAL_DMA_Abort_IT>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d100      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x146>
 8004ee4:	e788      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ee6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004ee8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004eea:	4798      	blx	r3
 8004eec:	e784      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8004eee:	0020      	movs	r0, r4
 8004ef0:	f7ff ff49 	bl	8004d86 <HAL_UART_ErrorCallback>
 8004ef4:	e780      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8004ef6:	0020      	movs	r0, r4
 8004ef8:	f7ff ff45 	bl	8004d86 <HAL_UART_ErrorCallback>
 8004efc:	e77c      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
        HAL_UART_ErrorCallback(huart);
 8004efe:	0020      	movs	r0, r4
 8004f00:	f7ff ff41 	bl	8004d86 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	2200      	movs	r2, #0
 8004f08:	50e2      	str	r2, [r4, r3]
    return;
 8004f0a:	e775      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f0c:	06d9      	lsls	r1, r3, #27
 8004f0e:	d400      	bmi.n	8004f12 <HAL_UART_IRQHandler+0x172>
 8004f10:	e763      	b.n	8004dda <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f12:	06c1      	lsls	r1, r0, #27
 8004f14:	d400      	bmi.n	8004f18 <HAL_UART_IRQHandler+0x178>
 8004f16:	e760      	b.n	8004dda <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f18:	2310      	movs	r3, #16
 8004f1a:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	065b      	lsls	r3, r3, #25
 8004f22:	d550      	bpl.n	8004fc6 <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f24:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d100      	bne.n	8004f32 <HAL_UART_IRQHandler+0x192>
 8004f30:	e762      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f32:	2158      	movs	r1, #88	; 0x58
 8004f34:	5a61      	ldrh	r1, [r4, r1]
 8004f36:	4299      	cmp	r1, r3
 8004f38:	d800      	bhi.n	8004f3c <HAL_UART_IRQHandler+0x19c>
 8004f3a:	e75d      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8004f3c:	215a      	movs	r1, #90	; 0x5a
 8004f3e:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f40:	6813      	ldr	r3, [r2, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	069b      	lsls	r3, r3, #26
 8004f46:	d509      	bpl.n	8004f5c <HAL_UART_IRQHandler+0x1bc>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f48:	2358      	movs	r3, #88	; 0x58
 8004f4a:	5ae1      	ldrh	r1, [r4, r3]
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	5ae3      	ldrh	r3, [r4, r3]
 8004f50:	1ac9      	subs	r1, r1, r3
 8004f52:	b289      	uxth	r1, r1
 8004f54:	0020      	movs	r0, r4
 8004f56:	f7ff ff21 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
      return;
 8004f5a:	e74d      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f60:	2301      	movs	r3, #1
 8004f62:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f66:	6821      	ldr	r1, [r4, #0]
 8004f68:	680a      	ldr	r2, [r1, #0]
 8004f6a:	4d3f      	ldr	r5, [pc, #252]	; (8005068 <HAL_UART_IRQHandler+0x2c8>)
 8004f6c:	402a      	ands	r2, r5
 8004f6e:	600a      	str	r2, [r1, #0]
 8004f70:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f74:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f78:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7c:	6821      	ldr	r1, [r4, #0]
 8004f7e:	688a      	ldr	r2, [r1, #8]
 8004f80:	439a      	bics	r2, r3
 8004f82:	608a      	str	r2, [r1, #8]
 8004f84:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f88:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f90:	6821      	ldr	r1, [r4, #0]
 8004f92:	688a      	ldr	r2, [r1, #8]
 8004f94:	3542      	adds	r5, #66	; 0x42
 8004f96:	35ff      	adds	r5, #255	; 0xff
 8004f98:	43aa      	bics	r2, r5
 8004f9a:	608a      	str	r2, [r1, #8]
 8004f9c:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fac:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	6822      	ldr	r2, [r4, #0]
 8004fb2:	6813      	ldr	r3, [r2, #0]
 8004fb4:	2010      	movs	r0, #16
 8004fb6:	4383      	bics	r3, r0
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fbe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004fc0:	f7fd feef 	bl	8002da2 <HAL_DMA_Abort>
 8004fc4:	e7c0      	b.n	8004f48 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fc6:	2358      	movs	r3, #88	; 0x58
 8004fc8:	5ae1      	ldrh	r1, [r4, r3]
 8004fca:	3302      	adds	r3, #2
 8004fcc:	5ae2      	ldrh	r2, [r4, r3]
 8004fce:	1a89      	subs	r1, r1, r2
 8004fd0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004fd2:	5ae3      	ldrh	r3, [r4, r3]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d100      	bne.n	8004fdc <HAL_UART_IRQHandler+0x23c>
 8004fda:	e70d      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
          && (nb_rx_data > 0U))
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	d100      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x242>
 8004fe0:	e70a      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	6802      	ldr	r2, [r0, #0]
 8004ff0:	4e1e      	ldr	r6, [pc, #120]	; (800506c <HAL_UART_IRQHandler+0x2cc>)
 8004ff2:	4032      	ands	r2, r6
 8004ff4:	6002      	str	r2, [r0, #0]
 8004ff6:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffe:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	6820      	ldr	r0, [r4, #0]
 8005004:	6882      	ldr	r2, [r0, #8]
 8005006:	439a      	bics	r2, r3
 8005008:	6082      	str	r2, [r0, #8]
 800500a:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 800500e:	2220      	movs	r2, #32
 8005010:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	2200      	movs	r2, #0
 8005014:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8005016:	6662      	str	r2, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005018:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005020:	6822      	ldr	r2, [r4, #0]
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	2510      	movs	r5, #16
 8005026:	43ab      	bics	r3, r5
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800502e:	0020      	movs	r0, r4
 8005030:	f7ff feb4 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
      return;
 8005034:	e6e0      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	035b      	lsls	r3, r3, #13
 800503a:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800503c:	0020      	movs	r0, r4
 800503e:	f000 fca1 	bl	8005984 <HAL_UARTEx_WakeupCallback>
    return;
 8005042:	e6d9      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
    if (huart->TxISR != NULL)
 8005044:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005046:	2b00      	cmp	r3, #0
 8005048:	d100      	bne.n	800504c <HAL_UART_IRQHandler+0x2ac>
 800504a:	e6d5      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
      huart->TxISR(huart);
 800504c:	0020      	movs	r0, r4
 800504e:	4798      	blx	r3
    return;
 8005050:	e6d2      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
    UART_EndTransmit_IT(huart);
 8005052:	0020      	movs	r0, r4
 8005054:	f7ff fe83 	bl	8004d5e <UART_EndTransmit_IT>
    return;
 8005058:	e6ce      	b.n	8004df8 <HAL_UART_IRQHandler+0x58>
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	0000080f 	.word	0x0000080f
 8005060:	04000120 	.word	0x04000120
 8005064:	08004d89 	.word	0x08004d89
 8005068:	fffffeff 	.word	0xfffffeff
 800506c:	fffffedf 	.word	0xfffffedf

08005070 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005070:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
 8005072:	235c      	movs	r3, #92	; 0x5c
 8005074:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005076:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005078:	2a22      	cmp	r2, #34	; 0x22
 800507a:	d005      	beq.n	8005088 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800507c:	6802      	ldr	r2, [r0, #0]
 800507e:	6993      	ldr	r3, [r2, #24]
 8005080:	2108      	movs	r1, #8
 8005082:	430b      	orrs	r3, r1
 8005084:	6193      	str	r3, [r2, #24]
  }
}
 8005086:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005088:	6802      	ldr	r2, [r0, #0]
 800508a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800508c:	b2db      	uxtb	r3, r3
 800508e:	4013      	ands	r3, r2
 8005090:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005092:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005094:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005096:	3301      	adds	r3, #1
 8005098:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800509a:	225a      	movs	r2, #90	; 0x5a
 800509c:	5a83      	ldrh	r3, [r0, r2]
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 80050a4:	5a83      	ldrh	r3, [r0, r2]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ec      	bne.n	8005086 <UART_RxISR_8BIT+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b0:	3a59      	subs	r2, #89	; 0x59
 80050b2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b6:	6801      	ldr	r1, [r0, #0]
 80050b8:	680b      	ldr	r3, [r1, #0]
 80050ba:	4d18      	ldr	r5, [pc, #96]	; (800511c <UART_RxISR_8BIT+0xac>)
 80050bc:	402b      	ands	r3, r5
 80050be:	600b      	str	r3, [r1, #0]
 80050c0:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	6801      	ldr	r1, [r0, #0]
 80050ce:	688b      	ldr	r3, [r1, #8]
 80050d0:	4393      	bics	r3, r2
 80050d2:	608b      	str	r3, [r1, #8]
 80050d4:	f384 8810 	msr	PRIMASK, r4
      huart->RxState = HAL_UART_STATE_READY;
 80050d8:	2320      	movs	r3, #32
 80050da:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d117      	bne.n	8005116 <UART_RxISR_8BIT+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e6:	2300      	movs	r3, #0
 80050e8:	6603      	str	r3, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ee:	3301      	adds	r3, #1
 80050f0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f4:	6801      	ldr	r1, [r0, #0]
 80050f6:	680b      	ldr	r3, [r1, #0]
 80050f8:	320f      	adds	r2, #15
 80050fa:	4393      	bics	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]
 80050fe:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005102:	6803      	ldr	r3, [r0, #0]
 8005104:	69d9      	ldr	r1, [r3, #28]
 8005106:	420a      	tst	r2, r1
 8005108:	d000      	beq.n	800510c <UART_RxISR_8BIT+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800510a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800510c:	2358      	movs	r3, #88	; 0x58
 800510e:	5ac1      	ldrh	r1, [r0, r3]
 8005110:	f7ff fe44 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
 8005114:	e7b7      	b.n	8005086 <UART_RxISR_8BIT+0x16>
        HAL_UART_RxCpltCallback(huart);
 8005116:	f003 ff71 	bl	8008ffc <HAL_UART_RxCpltCallback>
 800511a:	e7b4      	b.n	8005086 <UART_RxISR_8BIT+0x16>
 800511c:	fffffedf 	.word	0xfffffedf

08005120 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005120:	b570      	push	{r4, r5, r6, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005122:	235c      	movs	r3, #92	; 0x5c
 8005124:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005126:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005128:	2b22      	cmp	r3, #34	; 0x22
 800512a:	d005      	beq.n	8005138 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800512c:	6802      	ldr	r2, [r0, #0]
 800512e:	6993      	ldr	r3, [r2, #24]
 8005130:	2108      	movs	r1, #8
 8005132:	430b      	orrs	r3, r1
 8005134:	6193      	str	r3, [r2, #24]
  }
}
 8005136:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005138:	6803      	ldr	r3, [r0, #0]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800513c:	4013      	ands	r3, r2
 800513e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005140:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8005142:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005144:	3302      	adds	r3, #2
 8005146:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005148:	225a      	movs	r2, #90	; 0x5a
 800514a:	5a83      	ldrh	r3, [r0, r2]
 800514c:	3b01      	subs	r3, #1
 800514e:	b29b      	uxth	r3, r3
 8005150:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8005152:	5a83      	ldrh	r3, [r0, r2]
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1ed      	bne.n	8005136 <UART_RxISR_16BIT+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515e:	3a59      	subs	r2, #89	; 0x59
 8005160:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005164:	6801      	ldr	r1, [r0, #0]
 8005166:	680b      	ldr	r3, [r1, #0]
 8005168:	4d18      	ldr	r5, [pc, #96]	; (80051cc <UART_RxISR_16BIT+0xac>)
 800516a:	402b      	ands	r3, r5
 800516c:	600b      	str	r3, [r1, #0]
 800516e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005172:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005176:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	6801      	ldr	r1, [r0, #0]
 800517c:	688b      	ldr	r3, [r1, #8]
 800517e:	4393      	bics	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
 8005182:	f384 8810 	msr	PRIMASK, r4
      huart->RxState = HAL_UART_STATE_READY;
 8005186:	2320      	movs	r3, #32
 8005188:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005190:	2b01      	cmp	r3, #1
 8005192:	d117      	bne.n	80051c4 <UART_RxISR_16BIT+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005194:	2300      	movs	r3, #0
 8005196:	6603      	str	r3, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005198:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519c:	3301      	adds	r3, #1
 800519e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a2:	6801      	ldr	r1, [r0, #0]
 80051a4:	680b      	ldr	r3, [r1, #0]
 80051a6:	320f      	adds	r2, #15
 80051a8:	4393      	bics	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]
 80051ac:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051b0:	6803      	ldr	r3, [r0, #0]
 80051b2:	69d9      	ldr	r1, [r3, #28]
 80051b4:	420a      	tst	r2, r1
 80051b6:	d000      	beq.n	80051ba <UART_RxISR_16BIT+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051b8:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ba:	2358      	movs	r3, #88	; 0x58
 80051bc:	5ac1      	ldrh	r1, [r0, r3]
 80051be:	f7ff fded 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
 80051c2:	e7b8      	b.n	8005136 <UART_RxISR_16BIT+0x16>
        HAL_UART_RxCpltCallback(huart);
 80051c4:	f003 ff1a 	bl	8008ffc <HAL_UART_RxCpltCallback>
 80051c8:	e7b5      	b.n	8005136 <UART_RxISR_16BIT+0x16>
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	fffffedf 	.word	0xfffffedf

080051d0 <UART_SetConfig>:
{
 80051d0:	b5d0      	push	{r4, r6, r7, lr}
 80051d2:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80051d4:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d6:	6883      	ldr	r3, [r0, #8]
 80051d8:	6902      	ldr	r2, [r0, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	6942      	ldr	r2, [r0, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	69c2      	ldr	r2, [r0, #28]
 80051e2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051e4:	680a      	ldr	r2, [r1, #0]
 80051e6:	489b      	ldr	r0, [pc, #620]	; (8005454 <UART_SetConfig+0x284>)
 80051e8:	4002      	ands	r2, r0
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	6853      	ldr	r3, [r2, #4]
 80051f2:	4999      	ldr	r1, [pc, #612]	; (8005458 <UART_SetConfig+0x288>)
 80051f4:	400b      	ands	r3, r1
 80051f6:	68e1      	ldr	r1, [r4, #12]
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051fc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	4b96      	ldr	r3, [pc, #600]	; (800545c <UART_SetConfig+0x28c>)
 8005202:	429a      	cmp	r2, r3
 8005204:	d001      	beq.n	800520a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8005206:	6a23      	ldr	r3, [r4, #32]
 8005208:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800520a:	6893      	ldr	r3, [r2, #8]
 800520c:	4894      	ldr	r0, [pc, #592]	; (8005460 <UART_SetConfig+0x290>)
 800520e:	4003      	ands	r3, r0
 8005210:	430b      	orrs	r3, r1
 8005212:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005214:	6822      	ldr	r2, [r4, #0]
 8005216:	4b93      	ldr	r3, [pc, #588]	; (8005464 <UART_SetConfig+0x294>)
 8005218:	429a      	cmp	r2, r3
 800521a:	d00d      	beq.n	8005238 <UART_SetConfig+0x68>
 800521c:	4b92      	ldr	r3, [pc, #584]	; (8005468 <UART_SetConfig+0x298>)
 800521e:	429a      	cmp	r2, r3
 8005220:	d02a      	beq.n	8005278 <UART_SetConfig+0xa8>
 8005222:	4b92      	ldr	r3, [pc, #584]	; (800546c <UART_SetConfig+0x29c>)
 8005224:	429a      	cmp	r2, r3
 8005226:	d05e      	beq.n	80052e6 <UART_SetConfig+0x116>
 8005228:	4b91      	ldr	r3, [pc, #580]	; (8005470 <UART_SetConfig+0x2a0>)
 800522a:	429a      	cmp	r2, r3
 800522c:	d05d      	beq.n	80052ea <UART_SetConfig+0x11a>
 800522e:	4b8b      	ldr	r3, [pc, #556]	; (800545c <UART_SetConfig+0x28c>)
 8005230:	429a      	cmp	r2, r3
 8005232:	d032      	beq.n	800529a <UART_SetConfig+0xca>
 8005234:	2310      	movs	r3, #16
 8005236:	e00b      	b.n	8005250 <UART_SetConfig+0x80>
 8005238:	4b8e      	ldr	r3, [pc, #568]	; (8005474 <UART_SetConfig+0x2a4>)
 800523a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800523c:	2303      	movs	r3, #3
 800523e:	400b      	ands	r3, r1
 8005240:	2b02      	cmp	r3, #2
 8005242:	d042      	beq.n	80052ca <UART_SetConfig+0xfa>
 8005244:	d814      	bhi.n	8005270 <UART_SetConfig+0xa0>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d041      	beq.n	80052ce <UART_SetConfig+0xfe>
 800524a:	2b01      	cmp	r3, #1
 800524c:	d141      	bne.n	80052d2 <UART_SetConfig+0x102>
 800524e:	3303      	adds	r3, #3
  if (UART_INSTANCE_LOWPOWER(huart))
 8005250:	4982      	ldr	r1, [pc, #520]	; (800545c <UART_SetConfig+0x28c>)
 8005252:	428a      	cmp	r2, r1
 8005254:	d053      	beq.n	80052fe <UART_SetConfig+0x12e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005256:	69e0      	ldr	r0, [r4, #28]
 8005258:	2280      	movs	r2, #128	; 0x80
 800525a:	0212      	lsls	r2, r2, #8
 800525c:	4290      	cmp	r0, r2
 800525e:	d100      	bne.n	8005262 <UART_SetConfig+0x92>
 8005260:	e08a      	b.n	8005378 <UART_SetConfig+0x1a8>
    switch (clocksource)
 8005262:	2b08      	cmp	r3, #8
 8005264:	d900      	bls.n	8005268 <UART_SetConfig+0x98>
 8005266:	e0ee      	b.n	8005446 <UART_SetConfig+0x276>
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4a83      	ldr	r2, [pc, #524]	; (8005478 <UART_SetConfig+0x2a8>)
 800526c:	58d3      	ldr	r3, [r2, r3]
 800526e:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005270:	2b03      	cmp	r3, #3
 8005272:	d130      	bne.n	80052d6 <UART_SetConfig+0x106>
 8005274:	3305      	adds	r3, #5
 8005276:	e7eb      	b.n	8005250 <UART_SetConfig+0x80>
 8005278:	4b7e      	ldr	r3, [pc, #504]	; (8005474 <UART_SetConfig+0x2a4>)
 800527a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800527c:	230c      	movs	r3, #12
 800527e:	400b      	ands	r3, r1
 8005280:	2b08      	cmp	r3, #8
 8005282:	d02a      	beq.n	80052da <UART_SetConfig+0x10a>
 8005284:	d805      	bhi.n	8005292 <UART_SetConfig+0xc2>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d029      	beq.n	80052de <UART_SetConfig+0x10e>
 800528a:	2b04      	cmp	r3, #4
 800528c:	d0e0      	beq.n	8005250 <UART_SetConfig+0x80>
 800528e:	2310      	movs	r3, #16
 8005290:	e7de      	b.n	8005250 <UART_SetConfig+0x80>
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d125      	bne.n	80052e2 <UART_SetConfig+0x112>
 8005296:	3b04      	subs	r3, #4
 8005298:	e7da      	b.n	8005250 <UART_SetConfig+0x80>
 800529a:	4b76      	ldr	r3, [pc, #472]	; (8005474 <UART_SetConfig+0x2a4>)
 800529c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529e:	21c0      	movs	r1, #192	; 0xc0
 80052a0:	0109      	lsls	r1, r1, #4
 80052a2:	400b      	ands	r3, r1
 80052a4:	2180      	movs	r1, #128	; 0x80
 80052a6:	0109      	lsls	r1, r1, #4
 80052a8:	428b      	cmp	r3, r1
 80052aa:	d020      	beq.n	80052ee <UART_SetConfig+0x11e>
 80052ac:	d807      	bhi.n	80052be <UART_SetConfig+0xee>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01f      	beq.n	80052f2 <UART_SetConfig+0x122>
 80052b2:	2180      	movs	r1, #128	; 0x80
 80052b4:	00c9      	lsls	r1, r1, #3
 80052b6:	428b      	cmp	r3, r1
 80052b8:	d11d      	bne.n	80052f6 <UART_SetConfig+0x126>
 80052ba:	2304      	movs	r3, #4
 80052bc:	e7c8      	b.n	8005250 <UART_SetConfig+0x80>
 80052be:	21c0      	movs	r1, #192	; 0xc0
 80052c0:	0109      	lsls	r1, r1, #4
 80052c2:	428b      	cmp	r3, r1
 80052c4:	d119      	bne.n	80052fa <UART_SetConfig+0x12a>
 80052c6:	2308      	movs	r3, #8
 80052c8:	e7c2      	b.n	8005250 <UART_SetConfig+0x80>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e7c0      	b.n	8005250 <UART_SetConfig+0x80>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e7be      	b.n	8005250 <UART_SetConfig+0x80>
 80052d2:	2310      	movs	r3, #16
 80052d4:	e7bc      	b.n	8005250 <UART_SetConfig+0x80>
 80052d6:	2310      	movs	r3, #16
 80052d8:	e7ba      	b.n	8005250 <UART_SetConfig+0x80>
 80052da:	2302      	movs	r3, #2
 80052dc:	e7b8      	b.n	8005250 <UART_SetConfig+0x80>
 80052de:	2300      	movs	r3, #0
 80052e0:	e7b6      	b.n	8005250 <UART_SetConfig+0x80>
 80052e2:	2310      	movs	r3, #16
 80052e4:	e7b4      	b.n	8005250 <UART_SetConfig+0x80>
 80052e6:	2300      	movs	r3, #0
 80052e8:	e7b2      	b.n	8005250 <UART_SetConfig+0x80>
 80052ea:	2300      	movs	r3, #0
 80052ec:	e7b0      	b.n	8005250 <UART_SetConfig+0x80>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e7ae      	b.n	8005250 <UART_SetConfig+0x80>
 80052f2:	2300      	movs	r3, #0
 80052f4:	e7ac      	b.n	8005250 <UART_SetConfig+0x80>
 80052f6:	2310      	movs	r3, #16
 80052f8:	e7aa      	b.n	8005250 <UART_SetConfig+0x80>
 80052fa:	2310      	movs	r3, #16
 80052fc:	e7a8      	b.n	8005250 <UART_SetConfig+0x80>
    switch (clocksource)
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d035      	beq.n	800536e <UART_SetConfig+0x19e>
 8005302:	d80b      	bhi.n	800531c <UART_SetConfig+0x14c>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02c      	beq.n	8005362 <UART_SetConfig+0x192>
 8005308:	2b02      	cmp	r3, #2
 800530a:	d105      	bne.n	8005318 <UART_SetConfig+0x148>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800530c:	4b59      	ldr	r3, [pc, #356]	; (8005474 <UART_SetConfig+0x2a4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	06db      	lsls	r3, r3, #27
 8005312:	d42f      	bmi.n	8005374 <UART_SetConfig+0x1a4>
          pclk = (uint32_t) HSI_VALUE;
 8005314:	4859      	ldr	r0, [pc, #356]	; (800547c <UART_SetConfig+0x2ac>)
 8005316:	e005      	b.n	8005324 <UART_SetConfig+0x154>
    switch (clocksource)
 8005318:	2001      	movs	r0, #1
 800531a:	e073      	b.n	8005404 <UART_SetConfig+0x234>
 800531c:	2b08      	cmp	r3, #8
 800531e:	d11e      	bne.n	800535e <UART_SetConfig+0x18e>
 8005320:	2080      	movs	r0, #128	; 0x80
 8005322:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005324:	6862      	ldr	r2, [r4, #4]
 8005326:	0053      	lsls	r3, r2, #1
 8005328:	189b      	adds	r3, r3, r2
 800532a:	4283      	cmp	r3, r0
 800532c:	d900      	bls.n	8005330 <UART_SetConfig+0x160>
 800532e:	e07e      	b.n	800542e <UART_SetConfig+0x25e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005330:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005332:	4283      	cmp	r3, r0
 8005334:	d200      	bcs.n	8005338 <UART_SetConfig+0x168>
 8005336:	e07c      	b.n	8005432 <UART_SetConfig+0x262>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005338:	0e07      	lsrs	r7, r0, #24
 800533a:	0206      	lsls	r6, r0, #8
 800533c:	0850      	lsrs	r0, r2, #1
 800533e:	2100      	movs	r1, #0
 8005340:	1980      	adds	r0, r0, r6
 8005342:	4179      	adcs	r1, r7
 8005344:	2300      	movs	r3, #0
 8005346:	f7fb f89d 	bl	8000484 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800534a:	4b4d      	ldr	r3, [pc, #308]	; (8005480 <UART_SetConfig+0x2b0>)
 800534c:	18c2      	adds	r2, r0, r3
 800534e:	4b4d      	ldr	r3, [pc, #308]	; (8005484 <UART_SetConfig+0x2b4>)
 8005350:	429a      	cmp	r2, r3
 8005352:	d900      	bls.n	8005356 <UART_SetConfig+0x186>
 8005354:	e06f      	b.n	8005436 <UART_SetConfig+0x266>
          huart->Instance->BRR = usartdiv;
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	60d8      	str	r0, [r3, #12]
 800535a:	2000      	movs	r0, #0
 800535c:	e052      	b.n	8005404 <UART_SetConfig+0x234>
    switch (clocksource)
 800535e:	2001      	movs	r0, #1
 8005360:	e050      	b.n	8005404 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005362:	f7fe fba5 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005366:	2800      	cmp	r0, #0
 8005368:	d1dc      	bne.n	8005324 <UART_SetConfig+0x154>
 800536a:	2000      	movs	r0, #0
 800536c:	e04a      	b.n	8005404 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fd ff89 	bl	8003284 <HAL_RCC_GetSysClockFreq>
        break;
 8005372:	e7f8      	b.n	8005366 <UART_SetConfig+0x196>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005374:	4844      	ldr	r0, [pc, #272]	; (8005488 <UART_SetConfig+0x2b8>)
 8005376:	e7d5      	b.n	8005324 <UART_SetConfig+0x154>
    switch (clocksource)
 8005378:	2b08      	cmp	r3, #8
 800537a:	d85e      	bhi.n	800543a <UART_SetConfig+0x26a>
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4a43      	ldr	r2, [pc, #268]	; (800548c <UART_SetConfig+0x2bc>)
 8005380:	58d3      	ldr	r3, [r2, r3]
 8005382:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 8005384:	f7fe fb94 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005388:	2800      	cmp	r0, #0
 800538a:	d058      	beq.n	800543e <UART_SetConfig+0x26e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800538c:	0040      	lsls	r0, r0, #1
 800538e:	6863      	ldr	r3, [r4, #4]
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	18c0      	adds	r0, r0, r3
 8005394:	6861      	ldr	r1, [r4, #4]
 8005396:	f7fa fec1 	bl	800011c <__udivsi3>
 800539a:	b283      	uxth	r3, r0
 800539c:	0400      	lsls	r0, r0, #16
 800539e:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a0:	0001      	movs	r1, r0
 80053a2:	3910      	subs	r1, #16
 80053a4:	4a3a      	ldr	r2, [pc, #232]	; (8005490 <UART_SetConfig+0x2c0>)
 80053a6:	4291      	cmp	r1, r2
 80053a8:	d84b      	bhi.n	8005442 <UART_SetConfig+0x272>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053aa:	220f      	movs	r2, #15
 80053ac:	4393      	bics	r3, r2
 80053ae:	001a      	movs	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b0:	0840      	lsrs	r0, r0, #1
 80053b2:	2307      	movs	r3, #7
 80053b4:	4018      	ands	r0, r3
 80053b6:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	60d8      	str	r0, [r3, #12]
 80053bc:	2000      	movs	r0, #0
 80053be:	e021      	b.n	8005404 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c0:	f7fe fb86 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
        break;
 80053c4:	e7e0      	b.n	8005388 <UART_SetConfig+0x1b8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053c6:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <UART_SetConfig+0x2a4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	06db      	lsls	r3, r3, #27
 80053cc:	d404      	bmi.n	80053d8 <UART_SetConfig+0x208>
          pclk = (uint32_t) HSI_VALUE;
 80053ce:	482b      	ldr	r0, [pc, #172]	; (800547c <UART_SetConfig+0x2ac>)
 80053d0:	e7dc      	b.n	800538c <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetSysClockFreq();
 80053d2:	f7fd ff57 	bl	8003284 <HAL_RCC_GetSysClockFreq>
        break;
 80053d6:	e7d7      	b.n	8005388 <UART_SetConfig+0x1b8>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053d8:	482b      	ldr	r0, [pc, #172]	; (8005488 <UART_SetConfig+0x2b8>)
 80053da:	e7d7      	b.n	800538c <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053dc:	f7fe fb68 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d032      	beq.n	800544a <UART_SetConfig+0x27a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053e4:	6863      	ldr	r3, [r4, #4]
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	1818      	adds	r0, r3, r0
 80053ea:	6861      	ldr	r1, [r4, #4]
 80053ec:	f7fa fe96 	bl	800011c <__udivsi3>
 80053f0:	0400      	lsls	r0, r0, #16
 80053f2:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f4:	0002      	movs	r2, r0
 80053f6:	3a10      	subs	r2, #16
 80053f8:	4b25      	ldr	r3, [pc, #148]	; (8005490 <UART_SetConfig+0x2c0>)
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d827      	bhi.n	800544e <UART_SetConfig+0x27e>
        huart->Instance->BRR = usartdiv;
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	60d8      	str	r0, [r3, #12]
 8005402:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005408:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800540a:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800540c:	f7fe fb60 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
        break;
 8005410:	e7e6      	b.n	80053e0 <UART_SetConfig+0x210>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005412:	4b18      	ldr	r3, [pc, #96]	; (8005474 <UART_SetConfig+0x2a4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	06db      	lsls	r3, r3, #27
 8005418:	d407      	bmi.n	800542a <UART_SetConfig+0x25a>
          pclk = (uint32_t) HSI_VALUE;
 800541a:	4818      	ldr	r0, [pc, #96]	; (800547c <UART_SetConfig+0x2ac>)
 800541c:	e7e2      	b.n	80053e4 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 800541e:	f7fd ff31 	bl	8003284 <HAL_RCC_GetSysClockFreq>
        break;
 8005422:	e7dd      	b.n	80053e0 <UART_SetConfig+0x210>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005424:	2080      	movs	r0, #128	; 0x80
 8005426:	0200      	lsls	r0, r0, #8
 8005428:	e7dc      	b.n	80053e4 <UART_SetConfig+0x214>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800542a:	4817      	ldr	r0, [pc, #92]	; (8005488 <UART_SetConfig+0x2b8>)
 800542c:	e7da      	b.n	80053e4 <UART_SetConfig+0x214>
        ret = HAL_ERROR;
 800542e:	2001      	movs	r0, #1
 8005430:	e7e8      	b.n	8005404 <UART_SetConfig+0x234>
 8005432:	2001      	movs	r0, #1
 8005434:	e7e6      	b.n	8005404 <UART_SetConfig+0x234>
          ret = HAL_ERROR;
 8005436:	2001      	movs	r0, #1
 8005438:	e7e4      	b.n	8005404 <UART_SetConfig+0x234>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543a:	2001      	movs	r0, #1
 800543c:	e7e2      	b.n	8005404 <UART_SetConfig+0x234>
 800543e:	2000      	movs	r0, #0
 8005440:	e7e0      	b.n	8005404 <UART_SetConfig+0x234>
        ret = HAL_ERROR;
 8005442:	2001      	movs	r0, #1
 8005444:	e7de      	b.n	8005404 <UART_SetConfig+0x234>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005446:	2001      	movs	r0, #1
 8005448:	e7dc      	b.n	8005404 <UART_SetConfig+0x234>
 800544a:	2000      	movs	r0, #0
 800544c:	e7da      	b.n	8005404 <UART_SetConfig+0x234>
        ret = HAL_ERROR;
 800544e:	2001      	movs	r0, #1
 8005450:	e7d8      	b.n	8005404 <UART_SetConfig+0x234>
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	efff69f3 	.word	0xefff69f3
 8005458:	ffffcfff 	.word	0xffffcfff
 800545c:	40004800 	.word	0x40004800
 8005460:	fffff4ff 	.word	0xfffff4ff
 8005464:	40013800 	.word	0x40013800
 8005468:	40004400 	.word	0x40004400
 800546c:	40004c00 	.word	0x40004c00
 8005470:	40005000 	.word	0x40005000
 8005474:	40021000 	.word	0x40021000
 8005478:	0800c878 	.word	0x0800c878
 800547c:	00f42400 	.word	0x00f42400
 8005480:	fffffd00 	.word	0xfffffd00
 8005484:	000ffcff 	.word	0x000ffcff
 8005488:	003d0900 	.word	0x003d0900
 800548c:	0800c89c 	.word	0x0800c89c
 8005490:	0000ffef 	.word	0x0000ffef

08005494 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005494:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005496:	07db      	lsls	r3, r3, #31
 8005498:	d506      	bpl.n	80054a8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800549a:	6802      	ldr	r2, [r0, #0]
 800549c:	6853      	ldr	r3, [r2, #4]
 800549e:	492c      	ldr	r1, [pc, #176]	; (8005550 <UART_AdvFeatureConfig+0xbc>)
 80054a0:	400b      	ands	r3, r1
 80054a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054aa:	079b      	lsls	r3, r3, #30
 80054ac:	d506      	bpl.n	80054bc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ae:	6802      	ldr	r2, [r0, #0]
 80054b0:	6853      	ldr	r3, [r2, #4]
 80054b2:	4928      	ldr	r1, [pc, #160]	; (8005554 <UART_AdvFeatureConfig+0xc0>)
 80054b4:	400b      	ands	r3, r1
 80054b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054be:	075b      	lsls	r3, r3, #29
 80054c0:	d506      	bpl.n	80054d0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054c2:	6802      	ldr	r2, [r0, #0]
 80054c4:	6853      	ldr	r3, [r2, #4]
 80054c6:	4924      	ldr	r1, [pc, #144]	; (8005558 <UART_AdvFeatureConfig+0xc4>)
 80054c8:	400b      	ands	r3, r1
 80054ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054d2:	071b      	lsls	r3, r3, #28
 80054d4:	d506      	bpl.n	80054e4 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d6:	6802      	ldr	r2, [r0, #0]
 80054d8:	6853      	ldr	r3, [r2, #4]
 80054da:	4920      	ldr	r1, [pc, #128]	; (800555c <UART_AdvFeatureConfig+0xc8>)
 80054dc:	400b      	ands	r3, r1
 80054de:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80054e0:	430b      	orrs	r3, r1
 80054e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054e6:	06db      	lsls	r3, r3, #27
 80054e8:	d506      	bpl.n	80054f8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054ea:	6802      	ldr	r2, [r0, #0]
 80054ec:	6893      	ldr	r3, [r2, #8]
 80054ee:	491c      	ldr	r1, [pc, #112]	; (8005560 <UART_AdvFeatureConfig+0xcc>)
 80054f0:	400b      	ands	r3, r1
 80054f2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054fa:	069b      	lsls	r3, r3, #26
 80054fc:	d506      	bpl.n	800550c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054fe:	6802      	ldr	r2, [r0, #0]
 8005500:	6893      	ldr	r3, [r2, #8]
 8005502:	4918      	ldr	r1, [pc, #96]	; (8005564 <UART_AdvFeatureConfig+0xd0>)
 8005504:	400b      	ands	r3, r1
 8005506:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005508:	430b      	orrs	r3, r1
 800550a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800550c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800550e:	065b      	lsls	r3, r3, #25
 8005510:	d50b      	bpl.n	800552a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005512:	6802      	ldr	r2, [r0, #0]
 8005514:	6853      	ldr	r3, [r2, #4]
 8005516:	4914      	ldr	r1, [pc, #80]	; (8005568 <UART_AdvFeatureConfig+0xd4>)
 8005518:	400b      	ands	r3, r1
 800551a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800551c:	430b      	orrs	r3, r1
 800551e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	035b      	lsls	r3, r3, #13
 8005524:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005526:	429a      	cmp	r2, r3
 8005528:	d00a      	beq.n	8005540 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800552a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800552c:	061b      	lsls	r3, r3, #24
 800552e:	d506      	bpl.n	800553e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005530:	6802      	ldr	r2, [r0, #0]
 8005532:	6853      	ldr	r3, [r2, #4]
 8005534:	490d      	ldr	r1, [pc, #52]	; (800556c <UART_AdvFeatureConfig+0xd8>)
 8005536:	400b      	ands	r3, r1
 8005538:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800553a:	430b      	orrs	r3, r1
 800553c:	6053      	str	r3, [r2, #4]
}
 800553e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005540:	6802      	ldr	r2, [r0, #0]
 8005542:	6853      	ldr	r3, [r2, #4]
 8005544:	490a      	ldr	r1, [pc, #40]	; (8005570 <UART_AdvFeatureConfig+0xdc>)
 8005546:	400b      	ands	r3, r1
 8005548:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800554a:	430b      	orrs	r3, r1
 800554c:	6053      	str	r3, [r2, #4]
 800554e:	e7ec      	b.n	800552a <UART_AdvFeatureConfig+0x96>
 8005550:	fffdffff 	.word	0xfffdffff
 8005554:	fffeffff 	.word	0xfffeffff
 8005558:	fffbffff 	.word	0xfffbffff
 800555c:	ffff7fff 	.word	0xffff7fff
 8005560:	ffffefff 	.word	0xffffefff
 8005564:	ffffdfff 	.word	0xffffdfff
 8005568:	ffefffff 	.word	0xffefffff
 800556c:	fff7ffff 	.word	0xfff7ffff
 8005570:	ff9fffff 	.word	0xff9fffff

08005574 <UART_WaitOnFlagUntilTimeout>:
{
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	46ce      	mov	lr, r9
 8005578:	4647      	mov	r7, r8
 800557a:	b580      	push	{r7, lr}
 800557c:	0006      	movs	r6, r0
 800557e:	000d      	movs	r5, r1
 8005580:	0017      	movs	r7, r2
 8005582:	4699      	mov	r9, r3
 8005584:	9b08      	ldr	r3, [sp, #32]
 8005586:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005588:	6833      	ldr	r3, [r6, #0]
 800558a:	69dc      	ldr	r4, [r3, #28]
 800558c:	402c      	ands	r4, r5
 800558e:	1b64      	subs	r4, r4, r5
 8005590:	4263      	negs	r3, r4
 8005592:	415c      	adcs	r4, r3
 8005594:	42bc      	cmp	r4, r7
 8005596:	d153      	bne.n	8005640 <UART_WaitOnFlagUntilTimeout+0xcc>
    if (Timeout != HAL_MAX_DELAY)
 8005598:	4643      	mov	r3, r8
 800559a:	3301      	adds	r3, #1
 800559c:	d0f4      	beq.n	8005588 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fc ff2b 	bl	80023f8 <HAL_GetTick>
 80055a2:	464b      	mov	r3, r9
 80055a4:	1ac0      	subs	r0, r0, r3
 80055a6:	4540      	cmp	r0, r8
 80055a8:	d82c      	bhi.n	8005604 <UART_WaitOnFlagUntilTimeout+0x90>
 80055aa:	4643      	mov	r3, r8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d029      	beq.n	8005604 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	0752      	lsls	r2, r2, #29
 80055b6:	d5e7      	bpl.n	8005588 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	0512      	lsls	r2, r2, #20
 80055bc:	d5e4      	bpl.n	8005588 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055be:	2280      	movs	r2, #128	; 0x80
 80055c0:	0112      	lsls	r2, r2, #4
 80055c2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c8:	2201      	movs	r2, #1
 80055ca:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ce:	6831      	ldr	r1, [r6, #0]
 80055d0:	680b      	ldr	r3, [r1, #0]
 80055d2:	4c1e      	ldr	r4, [pc, #120]	; (800564c <UART_WaitOnFlagUntilTimeout+0xd8>)
 80055d4:	4023      	ands	r3, r4
 80055d6:	600b      	str	r3, [r1, #0]
 80055d8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055dc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e0:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e4:	6831      	ldr	r1, [r6, #0]
 80055e6:	688b      	ldr	r3, [r1, #8]
 80055e8:	4393      	bics	r3, r2
 80055ea:	608b      	str	r3, [r1, #8]
 80055ec:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80055f0:	2320      	movs	r3, #32
 80055f2:	67b3      	str	r3, [r6, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055f4:	67f3      	str	r3, [r6, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055f6:	327f      	adds	r2, #127	; 0x7f
 80055f8:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 80055fa:	3354      	adds	r3, #84	; 0x54
 80055fc:	2200      	movs	r2, #0
 80055fe:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8005600:	2003      	movs	r0, #3
 8005602:	e01e      	b.n	8005642 <UART_WaitOnFlagUntilTimeout+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005604:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005608:	2201      	movs	r2, #1
 800560a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800560e:	6831      	ldr	r1, [r6, #0]
 8005610:	680b      	ldr	r3, [r1, #0]
 8005612:	4c0e      	ldr	r4, [pc, #56]	; (800564c <UART_WaitOnFlagUntilTimeout+0xd8>)
 8005614:	4023      	ands	r3, r4
 8005616:	600b      	str	r3, [r1, #0]
 8005618:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005620:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005624:	6831      	ldr	r1, [r6, #0]
 8005626:	688b      	ldr	r3, [r1, #8]
 8005628:	4393      	bics	r3, r2
 800562a:	608b      	str	r3, [r1, #8]
 800562c:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8005630:	2320      	movs	r3, #32
 8005632:	67b3      	str	r3, [r6, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005634:	67f3      	str	r3, [r6, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8005636:	3354      	adds	r3, #84	; 0x54
 8005638:	2200      	movs	r2, #0
 800563a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800563c:	2003      	movs	r0, #3
 800563e:	e000      	b.n	8005642 <UART_WaitOnFlagUntilTimeout+0xce>
  return HAL_OK;
 8005640:	2000      	movs	r0, #0
}
 8005642:	bcc0      	pop	{r6, r7}
 8005644:	46b9      	mov	r9, r7
 8005646:	46b0      	mov	r8, r6
 8005648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	fffffe5f 	.word	0xfffffe5f

08005650 <HAL_UART_Transmit>:
{
 8005650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005652:	46c6      	mov	lr, r8
 8005654:	b500      	push	{lr}
 8005656:	b082      	sub	sp, #8
 8005658:	0004      	movs	r4, r0
 800565a:	000d      	movs	r5, r1
 800565c:	4690      	mov	r8, r2
 800565e:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005660:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005662:	2b20      	cmp	r3, #32
 8005664:	d166      	bne.n	8005734 <HAL_UART_Transmit+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8005666:	2900      	cmp	r1, #0
 8005668:	d069      	beq.n	800573e <HAL_UART_Transmit+0xee>
 800566a:	2a00      	cmp	r2, #0
 800566c:	d069      	beq.n	8005742 <HAL_UART_Transmit+0xf2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	015b      	lsls	r3, r3, #5
 8005672:	6882      	ldr	r2, [r0, #8]
 8005674:	429a      	cmp	r2, r3
 8005676:	d01e      	beq.n	80056b6 <HAL_UART_Transmit+0x66>
    __HAL_LOCK(huart);
 8005678:	2374      	movs	r3, #116	; 0x74
 800567a:	5ce3      	ldrb	r3, [r4, r3]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d062      	beq.n	8005746 <HAL_UART_Transmit+0xf6>
 8005680:	2374      	movs	r3, #116	; 0x74
 8005682:	2201      	movs	r2, #1
 8005684:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005686:	330c      	adds	r3, #12
 8005688:	2200      	movs	r2, #0
 800568a:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800568c:	3b5f      	subs	r3, #95	; 0x5f
 800568e:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005690:	f7fc feb2 	bl	80023f8 <HAL_GetTick>
 8005694:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8005696:	2350      	movs	r3, #80	; 0x50
 8005698:	4642      	mov	r2, r8
 800569a:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 800569c:	3302      	adds	r3, #2
 800569e:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	015b      	lsls	r3, r3, #5
 80056a4:	68a2      	ldr	r2, [r4, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d00c      	beq.n	80056c4 <HAL_UART_Transmit+0x74>
      pdata16bits = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	4698      	mov	r8, r3
    __HAL_UNLOCK(huart);
 80056ae:	2374      	movs	r3, #116	; 0x74
 80056b0:	2200      	movs	r2, #0
 80056b2:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 80056b4:	e01d      	b.n	80056f2 <HAL_UART_Transmit+0xa2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b6:	6903      	ldr	r3, [r0, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1dd      	bne.n	8005678 <HAL_UART_Transmit+0x28>
      if ((((uint32_t)pData) & 1U) != 0U)
 80056bc:	07cb      	lsls	r3, r1, #31
 80056be:	d5db      	bpl.n	8005678 <HAL_UART_Transmit+0x28>
        return  HAL_ERROR;
 80056c0:	2001      	movs	r0, #1
 80056c2:	e038      	b.n	8005736 <HAL_UART_Transmit+0xe6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c4:	6923      	ldr	r3, [r4, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_UART_Transmit+0x80>
      pdata16bits = NULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	4698      	mov	r8, r3
 80056ce:	e7ee      	b.n	80056ae <HAL_UART_Transmit+0x5e>
      pdata16bits = (uint16_t *) pData;
 80056d0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80056d2:	2500      	movs	r5, #0
 80056d4:	e7eb      	b.n	80056ae <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056d6:	4643      	mov	r3, r8
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	05db      	lsls	r3, r3, #23
 80056de:	0ddb      	lsrs	r3, r3, #23
 80056e0:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80056e2:	2302      	movs	r3, #2
 80056e4:	469c      	mov	ip, r3
 80056e6:	44e0      	add	r8, ip
      huart->TxXferCount--;
 80056e8:	2352      	movs	r3, #82	; 0x52
 80056ea:	5ae2      	ldrh	r2, [r4, r3]
 80056ec:	3a01      	subs	r2, #1
 80056ee:	b292      	uxth	r2, r2
 80056f0:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 80056f2:	2352      	movs	r3, #82	; 0x52
 80056f4:	5ae3      	ldrh	r3, [r4, r3]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00f      	beq.n	800571c <HAL_UART_Transmit+0xcc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056fc:	9600      	str	r6, [sp, #0]
 80056fe:	003b      	movs	r3, r7
 8005700:	2200      	movs	r2, #0
 8005702:	2180      	movs	r1, #128	; 0x80
 8005704:	0020      	movs	r0, r4
 8005706:	f7ff ff35 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 800570a:	2800      	cmp	r0, #0
 800570c:	d11d      	bne.n	800574a <HAL_UART_Transmit+0xfa>
      if (pdata8bits == NULL)
 800570e:	2d00      	cmp	r5, #0
 8005710:	d0e1      	beq.n	80056d6 <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005712:	782a      	ldrb	r2, [r5, #0]
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005718:	3501      	adds	r5, #1
 800571a:	e7e5      	b.n	80056e8 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800571c:	9600      	str	r6, [sp, #0]
 800571e:	003b      	movs	r3, r7
 8005720:	2200      	movs	r2, #0
 8005722:	2140      	movs	r1, #64	; 0x40
 8005724:	0020      	movs	r0, r4
 8005726:	f7ff ff25 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 800572a:	2800      	cmp	r0, #0
 800572c:	d10f      	bne.n	800574e <HAL_UART_Transmit+0xfe>
    huart->gState = HAL_UART_STATE_READY;
 800572e:	2320      	movs	r3, #32
 8005730:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005732:	e000      	b.n	8005736 <HAL_UART_Transmit+0xe6>
    return HAL_BUSY;
 8005734:	2002      	movs	r0, #2
}
 8005736:	b002      	add	sp, #8
 8005738:	bc80      	pop	{r7}
 800573a:	46b8      	mov	r8, r7
 800573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800573e:	2001      	movs	r0, #1
 8005740:	e7f9      	b.n	8005736 <HAL_UART_Transmit+0xe6>
 8005742:	2001      	movs	r0, #1
 8005744:	e7f7      	b.n	8005736 <HAL_UART_Transmit+0xe6>
    __HAL_LOCK(huart);
 8005746:	2002      	movs	r0, #2
 8005748:	e7f5      	b.n	8005736 <HAL_UART_Transmit+0xe6>
        return HAL_TIMEOUT;
 800574a:	2003      	movs	r0, #3
 800574c:	e7f3      	b.n	8005736 <HAL_UART_Transmit+0xe6>
      return HAL_TIMEOUT;
 800574e:	2003      	movs	r0, #3
 8005750:	e7f1      	b.n	8005736 <HAL_UART_Transmit+0xe6>
	...

08005754 <UART_CheckIdleState>:
{
 8005754:	b530      	push	{r4, r5, lr}
 8005756:	b083      	sub	sp, #12
 8005758:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	2200      	movs	r2, #0
 800575e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8005760:	f7fc fe4a 	bl	80023f8 <HAL_GetTick>
 8005764:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	071b      	lsls	r3, r3, #28
 800576c:	d40d      	bmi.n	800578a <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	075b      	lsls	r3, r3, #29
 8005774:	d416      	bmi.n	80057a4 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8005776:	2320      	movs	r3, #32
 8005778:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800577a:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577c:	2300      	movs	r3, #0
 800577e:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005780:	2274      	movs	r2, #116	; 0x74
 8005782:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005784:	2000      	movs	r0, #0
}
 8005786:	b003      	add	sp, #12
 8005788:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800578a:	2180      	movs	r1, #128	; 0x80
 800578c:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <UART_CheckIdleState+0x6c>)
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	0003      	movs	r3, r0
 8005792:	2200      	movs	r2, #0
 8005794:	0389      	lsls	r1, r1, #14
 8005796:	0020      	movs	r0, r4
 8005798:	f7ff feec 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 800579c:	2800      	cmp	r0, #0
 800579e:	d0e6      	beq.n	800576e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80057a0:	2003      	movs	r0, #3
 80057a2:	e7f0      	b.n	8005786 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a4:	2180      	movs	r1, #128	; 0x80
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <UART_CheckIdleState+0x6c>)
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	002b      	movs	r3, r5
 80057ac:	2200      	movs	r2, #0
 80057ae:	03c9      	lsls	r1, r1, #15
 80057b0:	0020      	movs	r0, r4
 80057b2:	f7ff fedf 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d0dd      	beq.n	8005776 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 80057ba:	2003      	movs	r0, #3
 80057bc:	e7e3      	b.n	8005786 <UART_CheckIdleState+0x32>
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	01ffffff 	.word	0x01ffffff

080057c4 <HAL_UART_Init>:
{
 80057c4:	b510      	push	{r4, lr}
 80057c6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80057c8:	d02e      	beq.n	8005828 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80057ca:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d021      	beq.n	8005814 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80057d0:	2324      	movs	r3, #36	; 0x24
 80057d2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80057d4:	6822      	ldr	r2, [r4, #0]
 80057d6:	6813      	ldr	r3, [r2, #0]
 80057d8:	2101      	movs	r1, #1
 80057da:	438b      	bics	r3, r1
 80057dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057de:	0020      	movs	r0, r4
 80057e0:	f7ff fcf6 	bl	80051d0 <UART_SetConfig>
 80057e4:	2801      	cmp	r0, #1
 80057e6:	d014      	beq.n	8005812 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d118      	bne.n	8005820 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ee:	6822      	ldr	r2, [r4, #0]
 80057f0:	6853      	ldr	r3, [r2, #4]
 80057f2:	490e      	ldr	r1, [pc, #56]	; (800582c <HAL_UART_Init+0x68>)
 80057f4:	400b      	ands	r3, r1
 80057f6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	6893      	ldr	r3, [r2, #8]
 80057fc:	212a      	movs	r1, #42	; 0x2a
 80057fe:	438b      	bics	r3, r1
 8005800:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005802:	6822      	ldr	r2, [r4, #0]
 8005804:	6813      	ldr	r3, [r2, #0]
 8005806:	3929      	subs	r1, #41	; 0x29
 8005808:	430b      	orrs	r3, r1
 800580a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800580c:	0020      	movs	r0, r4
 800580e:	f7ff ffa1 	bl	8005754 <UART_CheckIdleState>
}
 8005812:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005814:	3374      	adds	r3, #116	; 0x74
 8005816:	2200      	movs	r2, #0
 8005818:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800581a:	f005 fb65 	bl	800aee8 <HAL_UART_MspInit>
 800581e:	e7d7      	b.n	80057d0 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005820:	0020      	movs	r0, r4
 8005822:	f7ff fe37 	bl	8005494 <UART_AdvFeatureConfig>
 8005826:	e7e2      	b.n	80057ee <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005828:	2001      	movs	r0, #1
 800582a:	e7f2      	b.n	8005812 <HAL_UART_Init+0x4e>
 800582c:	ffffb7ff 	.word	0xffffb7ff

08005830 <UART_Start_Receive_IT>:
{
 8005830:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8005832:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005834:	2358      	movs	r3, #88	; 0x58
 8005836:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 8005838:	3302      	adds	r3, #2
 800583a:	52c2      	strh	r2, [r0, r3]
  huart->RxISR       = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005840:	6883      	ldr	r3, [r0, #8]
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	0152      	lsls	r2, r2, #5
 8005846:	4293      	cmp	r3, r2
 8005848:	d008      	beq.n	800585c <UART_Start_Receive_IT+0x2c>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d115      	bne.n	800587a <UART_Start_Receive_IT+0x4a>
 800584e:	6903      	ldr	r3, [r0, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10e      	bne.n	8005872 <UART_Start_Receive_IT+0x42>
 8005854:	335c      	adds	r3, #92	; 0x5c
 8005856:	22ff      	movs	r2, #255	; 0xff
 8005858:	52c2      	strh	r2, [r0, r3]
 800585a:	e015      	b.n	8005888 <UART_Start_Receive_IT+0x58>
 800585c:	6903      	ldr	r3, [r0, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <UART_Start_Receive_IT+0x3a>
 8005862:	335c      	adds	r3, #92	; 0x5c
 8005864:	4a25      	ldr	r2, [pc, #148]	; (80058fc <UART_Start_Receive_IT+0xcc>)
 8005866:	52c2      	strh	r2, [r0, r3]
 8005868:	e00e      	b.n	8005888 <UART_Start_Receive_IT+0x58>
 800586a:	235c      	movs	r3, #92	; 0x5c
 800586c:	22ff      	movs	r2, #255	; 0xff
 800586e:	52c2      	strh	r2, [r0, r3]
 8005870:	e00a      	b.n	8005888 <UART_Start_Receive_IT+0x58>
 8005872:	235c      	movs	r3, #92	; 0x5c
 8005874:	227f      	movs	r2, #127	; 0x7f
 8005876:	52c2      	strh	r2, [r0, r3]
 8005878:	e006      	b.n	8005888 <UART_Start_Receive_IT+0x58>
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	0552      	lsls	r2, r2, #21
 800587e:	4293      	cmp	r3, r2
 8005880:	d02b      	beq.n	80058da <UART_Start_Receive_IT+0xaa>
 8005882:	235c      	movs	r3, #92	; 0x5c
 8005884:	2200      	movs	r2, #0
 8005886:	52c2      	strh	r2, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	2200      	movs	r2, #0
 800588c:	50c2      	str	r2, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800588e:	3b5e      	subs	r3, #94	; 0x5e
 8005890:	67c3      	str	r3, [r0, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005892:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005896:	2101      	movs	r1, #1
 8005898:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589c:	6802      	ldr	r2, [r0, #0]
 800589e:	6893      	ldr	r3, [r2, #8]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6093      	str	r3, [r2, #8]
 80058a4:	f384 8810 	msr	PRIMASK, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	015b      	lsls	r3, r3, #5
 80058ac:	6882      	ldr	r2, [r0, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d01e      	beq.n	80058f0 <UART_Start_Receive_IT+0xc0>
    huart->RxISR = UART_RxISR_8BIT;
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <UART_Start_Receive_IT+0xd0>)
 80058b4:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80058b6:	2374      	movs	r3, #116	; 0x74
 80058b8:	2200      	movs	r2, #0
 80058ba:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058bc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c0:	3b73      	subs	r3, #115	; 0x73
 80058c2:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80058c6:	6802      	ldr	r2, [r0, #0]
 80058c8:	6810      	ldr	r0, [r2, #0]
 80058ca:	3320      	adds	r3, #32
 80058cc:	33ff      	adds	r3, #255	; 0xff
 80058ce:	4303      	orrs	r3, r0
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	f381 8810 	msr	PRIMASK, r1
}
 80058d6:	2000      	movs	r0, #0
 80058d8:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80058da:	6903      	ldr	r3, [r0, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d103      	bne.n	80058e8 <UART_Start_Receive_IT+0xb8>
 80058e0:	335c      	adds	r3, #92	; 0x5c
 80058e2:	227f      	movs	r2, #127	; 0x7f
 80058e4:	52c2      	strh	r2, [r0, r3]
 80058e6:	e7cf      	b.n	8005888 <UART_Start_Receive_IT+0x58>
 80058e8:	235c      	movs	r3, #92	; 0x5c
 80058ea:	223f      	movs	r2, #63	; 0x3f
 80058ec:	52c2      	strh	r2, [r0, r3]
 80058ee:	e7cb      	b.n	8005888 <UART_Start_Receive_IT+0x58>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f0:	6903      	ldr	r3, [r0, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1dd      	bne.n	80058b2 <UART_Start_Receive_IT+0x82>
    huart->RxISR = UART_RxISR_16BIT;
 80058f6:	4b03      	ldr	r3, [pc, #12]	; (8005904 <UART_Start_Receive_IT+0xd4>)
 80058f8:	6643      	str	r3, [r0, #100]	; 0x64
 80058fa:	e7dc      	b.n	80058b6 <UART_Start_Receive_IT+0x86>
 80058fc:	000001ff 	.word	0x000001ff
 8005900:	08005071 	.word	0x08005071
 8005904:	08005121 	.word	0x08005121

08005908 <HAL_UART_Receive_IT>:
{
 8005908:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800590a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800590c:	2b20      	cmp	r3, #32
 800590e:	d12f      	bne.n	8005970 <HAL_UART_Receive_IT+0x68>
    if ((pData == NULL) || (Size == 0U))
 8005910:	2900      	cmp	r1, #0
 8005912:	d02f      	beq.n	8005974 <HAL_UART_Receive_IT+0x6c>
 8005914:	2a00      	cmp	r2, #0
 8005916:	d02f      	beq.n	8005978 <HAL_UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	015b      	lsls	r3, r3, #5
 800591c:	6884      	ldr	r4, [r0, #8]
 800591e:	429c      	cmp	r4, r3
 8005920:	d01f      	beq.n	8005962 <HAL_UART_Receive_IT+0x5a>
    __HAL_LOCK(huart);
 8005922:	2374      	movs	r3, #116	; 0x74
 8005924:	5cc3      	ldrb	r3, [r0, r3]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d028      	beq.n	800597c <HAL_UART_Receive_IT+0x74>
 800592a:	2374      	movs	r3, #116	; 0x74
 800592c:	2401      	movs	r4, #1
 800592e:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005930:	2300      	movs	r3, #0
 8005932:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005934:	6803      	ldr	r3, [r0, #0]
 8005936:	4c12      	ldr	r4, [pc, #72]	; (8005980 <HAL_UART_Receive_IT+0x78>)
 8005938:	42a3      	cmp	r3, r4
 800593a:	d00f      	beq.n	800595c <HAL_UART_Receive_IT+0x54>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	d50c      	bpl.n	800595c <HAL_UART_Receive_IT+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005942:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	2301      	movs	r3, #1
 8005948:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800594c:	6804      	ldr	r4, [r0, #0]
 800594e:	6826      	ldr	r6, [r4, #0]
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	04db      	lsls	r3, r3, #19
 8005954:	4333      	orrs	r3, r6
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 800595c:	f7ff ff68 	bl	8005830 <UART_Start_Receive_IT>
 8005960:	e007      	b.n	8005972 <HAL_UART_Receive_IT+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005962:	6903      	ldr	r3, [r0, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1dc      	bne.n	8005922 <HAL_UART_Receive_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005968:	07cb      	lsls	r3, r1, #31
 800596a:	d5da      	bpl.n	8005922 <HAL_UART_Receive_IT+0x1a>
        return  HAL_ERROR;
 800596c:	2001      	movs	r0, #1
 800596e:	e000      	b.n	8005972 <HAL_UART_Receive_IT+0x6a>
    return HAL_BUSY;
 8005970:	2002      	movs	r0, #2
}
 8005972:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005974:	2001      	movs	r0, #1
 8005976:	e7fc      	b.n	8005972 <HAL_UART_Receive_IT+0x6a>
 8005978:	2001      	movs	r0, #1
 800597a:	e7fa      	b.n	8005972 <HAL_UART_Receive_IT+0x6a>
    __HAL_LOCK(huart);
 800597c:	2002      	movs	r0, #2
 800597e:	e7f8      	b.n	8005972 <HAL_UART_Receive_IT+0x6a>
 8005980:	40004800 	.word	0x40004800

08005984 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005984:	4770      	bx	lr
	...

08005988 <check_busy_high>:
 8005988:	b510      	push	{r4, lr}
 800598a:	2180      	movs	r1, #128	; 0x80
 800598c:	20a0      	movs	r0, #160	; 0xa0
 800598e:	0049      	lsls	r1, r1, #1
 8005990:	05c0      	lsls	r0, r0, #23
 8005992:	f7fd fc07 	bl	80031a4 <HAL_GPIO_ReadPin>
 8005996:	2800      	cmp	r0, #0
 8005998:	d103      	bne.n	80059a2 <check_busy_high+0x1a>
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <check_busy_high+0x30>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	069b      	lsls	r3, r3, #26
 80059a0:	d5f3      	bpl.n	800598a <check_busy_high+0x2>
 80059a2:	4a05      	ldr	r2, [pc, #20]	; (80059b8 <check_busy_high+0x30>)
 80059a4:	7813      	ldrb	r3, [r2, #0]
 80059a6:	2108      	movs	r1, #8
 80059a8:	438b      	bics	r3, r1
 80059aa:	3118      	adds	r1, #24
 80059ac:	438b      	bics	r3, r1
 80059ae:	7013      	strb	r3, [r2, #0]
 80059b0:	4b02      	ldr	r3, [pc, #8]	; (80059bc <check_busy_high+0x34>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	bd10      	pop	{r4, pc}
 80059b8:	2000032c 	.word	0x2000032c
 80059bc:	20000240 	.word	0x20000240

080059c0 <check_busy_low>:
 80059c0:	b510      	push	{r4, lr}
 80059c2:	2180      	movs	r1, #128	; 0x80
 80059c4:	20a0      	movs	r0, #160	; 0xa0
 80059c6:	0049      	lsls	r1, r1, #1
 80059c8:	05c0      	lsls	r0, r0, #23
 80059ca:	f7fd fbeb 	bl	80031a4 <HAL_GPIO_ReadPin>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d003      	beq.n	80059da <check_busy_low+0x1a>
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <check_busy_low+0x30>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	069b      	lsls	r3, r3, #26
 80059d8:	d5f3      	bpl.n	80059c2 <check_busy_low+0x2>
 80059da:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <check_busy_low+0x30>)
 80059dc:	7813      	ldrb	r3, [r2, #0]
 80059de:	2108      	movs	r1, #8
 80059e0:	438b      	bics	r3, r1
 80059e2:	3118      	adds	r1, #24
 80059e4:	438b      	bics	r3, r1
 80059e6:	7013      	strb	r3, [r2, #0]
 80059e8:	4b02      	ldr	r3, [pc, #8]	; (80059f4 <check_busy_low+0x34>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	bd10      	pop	{r4, pc}
 80059f0:	2000032c 	.word	0x2000032c
 80059f4:	20000240 	.word	0x20000240

080059f8 <spi_9b_init>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	4c0b      	ldr	r4, [pc, #44]	; (8005a28 <spi_9b_init+0x30>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	2108      	movs	r1, #8
 8005a00:	0020      	movs	r0, r4
 8005a02:	f7fd fbd6 	bl	80031b2 <HAL_GPIO_WritePin>
 8005a06:	2201      	movs	r2, #1
 8005a08:	2120      	movs	r1, #32
 8005a0a:	0020      	movs	r0, r4
 8005a0c:	f7fd fbd1 	bl	80031b2 <HAL_GPIO_WritePin>
 8005a10:	2180      	movs	r1, #128	; 0x80
 8005a12:	20a0      	movs	r0, #160	; 0xa0
 8005a14:	2201      	movs	r2, #1
 8005a16:	0209      	lsls	r1, r1, #8
 8005a18:	05c0      	lsls	r0, r0, #23
 8005a1a:	f7fd fbca 	bl	80031b2 <HAL_GPIO_WritePin>
 8005a1e:	200a      	movs	r0, #10
 8005a20:	f7fc fcf0 	bl	8002404 <HAL_Delay>
 8005a24:	bd10      	pop	{r4, pc}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	50000400 	.word	0x50000400

08005a2c <spi_9b_send>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	0005      	movs	r5, r0
 8005a30:	000c      	movs	r4, r1
 8005a32:	2180      	movs	r1, #128	; 0x80
 8005a34:	20a0      	movs	r0, #160	; 0xa0
 8005a36:	2200      	movs	r2, #0
 8005a38:	0209      	lsls	r1, r1, #8
 8005a3a:	05c0      	lsls	r0, r0, #23
 8005a3c:	f7fd fbb9 	bl	80031b2 <HAL_GPIO_WritePin>
 8005a40:	2300      	movs	r3, #0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dd0d      	ble.n	8005a62 <spi_9b_send+0x36>
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	d00d      	beq.n	8005a66 <spi_9b_send+0x3a>
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	2120      	movs	r1, #32
 8005a4e:	4830      	ldr	r0, [pc, #192]	; (8005b10 <spi_9b_send+0xe4>)
 8005a50:	f7fd fbaf 	bl	80031b2 <HAL_GPIO_WritePin>
 8005a54:	2201      	movs	r2, #1
 8005a56:	2108      	movs	r1, #8
 8005a58:	482d      	ldr	r0, [pc, #180]	; (8005b10 <spi_9b_send+0xe4>)
 8005a5a:	f7fd fbaa 	bl	80031b2 <HAL_GPIO_WritePin>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e008      	b.n	8005a74 <spi_9b_send+0x48>
 8005a62:	3301      	adds	r3, #1
 8005a64:	e7ed      	b.n	8005a42 <spi_9b_send+0x16>
 8005a66:	2200      	movs	r2, #0
 8005a68:	2120      	movs	r1, #32
 8005a6a:	4829      	ldr	r0, [pc, #164]	; (8005b10 <spi_9b_send+0xe4>)
 8005a6c:	f7fd fba1 	bl	80031b2 <HAL_GPIO_WritePin>
 8005a70:	e7f0      	b.n	8005a54 <spi_9b_send+0x28>
 8005a72:	3301      	adds	r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	ddfc      	ble.n	8005a72 <spi_9b_send+0x46>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2108      	movs	r1, #8
 8005a7c:	4824      	ldr	r0, [pc, #144]	; (8005b10 <spi_9b_send+0xe4>)
 8005a7e:	f7fd fb98 	bl	80031b2 <HAL_GPIO_WritePin>
 8005a82:	2300      	movs	r3, #0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	dd01      	ble.n	8005a8c <spi_9b_send+0x60>
 8005a88:	2500      	movs	r5, #0
 8005a8a:	e018      	b.n	8005abe <spi_9b_send+0x92>
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	e7f9      	b.n	8005a84 <spi_9b_send+0x58>
 8005a90:	2201      	movs	r2, #1
 8005a92:	2120      	movs	r1, #32
 8005a94:	481e      	ldr	r0, [pc, #120]	; (8005b10 <spi_9b_send+0xe4>)
 8005a96:	f7fd fb8c 	bl	80031b2 <HAL_GPIO_WritePin>
 8005a9a:	e01a      	b.n	8005ad2 <spi_9b_send+0xa6>
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	2108      	movs	r1, #8
 8005aa0:	481b      	ldr	r0, [pc, #108]	; (8005b10 <spi_9b_send+0xe4>)
 8005aa2:	f7fd fb86 	bl	80031b2 <HAL_GPIO_WritePin>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dd17      	ble.n	8005adc <spi_9b_send+0xb0>
 8005aac:	2200      	movs	r2, #0
 8005aae:	2108      	movs	r1, #8
 8005ab0:	4817      	ldr	r0, [pc, #92]	; (8005b10 <spi_9b_send+0xe4>)
 8005ab2:	f7fd fb7e 	bl	80031b2 <HAL_GPIO_WritePin>
 8005ab6:	0064      	lsls	r4, r4, #1
 8005ab8:	b2e4      	uxtb	r4, r4
 8005aba:	3501      	adds	r5, #1
 8005abc:	b2ed      	uxtb	r5, r5
 8005abe:	2d07      	cmp	r5, #7
 8005ac0:	d80e      	bhi.n	8005ae0 <spi_9b_send+0xb4>
 8005ac2:	b263      	sxtb	r3, r4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dbe3      	blt.n	8005a90 <spi_9b_send+0x64>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2120      	movs	r1, #32
 8005acc:	4810      	ldr	r0, [pc, #64]	; (8005b10 <spi_9b_send+0xe4>)
 8005ace:	f7fd fb70 	bl	80031b2 <HAL_GPIO_WritePin>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dce1      	bgt.n	8005a9c <spi_9b_send+0x70>
 8005ad8:	3301      	adds	r3, #1
 8005ada:	e7fb      	b.n	8005ad4 <spi_9b_send+0xa8>
 8005adc:	3301      	adds	r3, #1
 8005ade:	e7e3      	b.n	8005aa8 <spi_9b_send+0x7c>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2120      	movs	r1, #32
 8005ae4:	480a      	ldr	r0, [pc, #40]	; (8005b10 <spi_9b_send+0xe4>)
 8005ae6:	f7fd fb64 	bl	80031b2 <HAL_GPIO_WritePin>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dc01      	bgt.n	8005af4 <spi_9b_send+0xc8>
 8005af0:	3301      	adds	r3, #1
 8005af2:	e7fb      	b.n	8005aec <spi_9b_send+0xc0>
 8005af4:	2180      	movs	r1, #128	; 0x80
 8005af6:	20a0      	movs	r0, #160	; 0xa0
 8005af8:	2201      	movs	r2, #1
 8005afa:	0209      	lsls	r1, r1, #8
 8005afc:	05c0      	lsls	r0, r0, #23
 8005afe:	f7fd fb58 	bl	80031b2 <HAL_GPIO_WritePin>
 8005b02:	2300      	movs	r3, #0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dd00      	ble.n	8005b0a <spi_9b_send+0xde>
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	e7fa      	b.n	8005b04 <spi_9b_send+0xd8>
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	50000400 	.word	0x50000400

08005b14 <spi_9b_send_9b>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	05c3      	lsls	r3, r0, #23
 8005b18:	d505      	bpl.n	8005b26 <spi_9b_send_9b+0x12>
 8005b1a:	21ff      	movs	r1, #255	; 0xff
 8005b1c:	4001      	ands	r1, r0
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f7ff ff84 	bl	8005a2c <spi_9b_send>
 8005b24:	bd10      	pop	{r4, pc}
 8005b26:	21ff      	movs	r1, #255	; 0xff
 8005b28:	4001      	ands	r1, r0
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f7ff ff7e 	bl	8005a2c <spi_9b_send>
 8005b30:	e7f8      	b.n	8005b24 <spi_9b_send_9b+0x10>
	...

08005b34 <EPD_Init>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	f7ff ff5f 	bl	80059f8 <spi_9b_init>
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2104      	movs	r1, #4
 8005b3e:	4891      	ldr	r0, [pc, #580]	; (8005d84 <EPD_Init+0x250>)
 8005b40:	f7fd fb37 	bl	80031b2 <HAL_GPIO_WritePin>
 8005b44:	2300      	movs	r3, #0
 8005b46:	e000      	b.n	8005b4a <EPD_Init+0x16>
 8005b48:	3301      	adds	r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	ddfc      	ble.n	8005b48 <EPD_Init+0x14>
 8005b4e:	2201      	movs	r2, #1
 8005b50:	2104      	movs	r1, #4
 8005b52:	488c      	ldr	r0, [pc, #560]	; (8005d84 <EPD_Init+0x250>)
 8005b54:	f7fd fb2d 	bl	80031b2 <HAL_GPIO_WritePin>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	dc00      	bgt.n	8005b60 <EPD_Init+0x2c>
 8005b5e:	e10c      	b.n	8005d7a <EPD_Init+0x246>
 8005b60:	2004      	movs	r0, #4
 8005b62:	f7ff ffd7 	bl	8005b14 <spi_9b_send_9b>
 8005b66:	4c88      	ldr	r4, [pc, #544]	; (8005d88 <EPD_Init+0x254>)
 8005b68:	7823      	ldrb	r3, [r4, #0]
 8005b6a:	2208      	movs	r2, #8
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	7023      	strb	r3, [r4, #0]
 8005b70:	f7ff ff0a 	bl	8005988 <check_busy_high>
 8005b74:	2001      	movs	r0, #1
 8005b76:	f7ff ffcd 	bl	8005b14 <spi_9b_send_9b>
 8005b7a:	2103      	movs	r1, #3
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	f7ff ff55 	bl	8005a2c <spi_9b_send>
 8005b82:	2107      	movs	r1, #7
 8005b84:	2001      	movs	r0, #1
 8005b86:	f7ff ff51 	bl	8005a2c <spi_9b_send>
 8005b8a:	210d      	movs	r1, #13
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f7ff ff4d 	bl	8005a2c <spi_9b_send>
 8005b92:	210d      	movs	r1, #13
 8005b94:	2001      	movs	r0, #1
 8005b96:	f7ff ff49 	bl	8005a2c <spi_9b_send>
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f7ff ff45 	bl	8005a2c <spi_9b_send>
 8005ba2:	2006      	movs	r0, #6
 8005ba4:	f7ff ffb6 	bl	8005b14 <spi_9b_send_9b>
 8005ba8:	2157      	movs	r1, #87	; 0x57
 8005baa:	2001      	movs	r0, #1
 8005bac:	f7ff ff3e 	bl	8005a2c <spi_9b_send>
 8005bb0:	2163      	movs	r1, #99	; 0x63
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	f7ff ff3a 	bl	8005a2c <spi_9b_send>
 8005bb8:	2131      	movs	r1, #49	; 0x31
 8005bba:	2001      	movs	r0, #1
 8005bbc:	f7ff ff36 	bl	8005a2c <spi_9b_send>
 8005bc0:	2060      	movs	r0, #96	; 0x60
 8005bc2:	f7ff ffa7 	bl	8005b14 <spi_9b_send_9b>
 8005bc6:	2104      	movs	r1, #4
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7ff ff2f 	bl	8005a2c <spi_9b_send>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f7ff ffa0 	bl	8005b14 <spi_9b_send_9b>
 8005bd4:	216f      	movs	r1, #111	; 0x6f
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	f7ff ff28 	bl	8005a2c <spi_9b_send>
 8005bdc:	2003      	movs	r0, #3
 8005bde:	f7ff ff99 	bl	8005b14 <spi_9b_send_9b>
 8005be2:	2100      	movs	r1, #0
 8005be4:	2001      	movs	r0, #1
 8005be6:	f7ff ff21 	bl	8005a2c <spi_9b_send>
 8005bea:	2030      	movs	r0, #48	; 0x30
 8005bec:	f7ff ff92 	bl	8005b14 <spi_9b_send_9b>
 8005bf0:	213c      	movs	r1, #60	; 0x3c
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f7ff ff1a 	bl	8005a2c <spi_9b_send>
 8005bf8:	2061      	movs	r0, #97	; 0x61
 8005bfa:	f7ff ff8b 	bl	8005b14 <spi_9b_send_9b>
 8005bfe:	2101      	movs	r1, #1
 8005c00:	2001      	movs	r0, #1
 8005c02:	f7ff ff13 	bl	8005a2c <spi_9b_send>
 8005c06:	2118      	movs	r1, #24
 8005c08:	2001      	movs	r0, #1
 8005c0a:	f7ff ff0f 	bl	8005a2c <spi_9b_send>
 8005c0e:	2101      	movs	r1, #1
 8005c10:	2001      	movs	r0, #1
 8005c12:	f7ff ff0b 	bl	8005a2c <spi_9b_send>
 8005c16:	21e0      	movs	r1, #224	; 0xe0
 8005c18:	2001      	movs	r0, #1
 8005c1a:	f7ff ff07 	bl	8005a2c <spi_9b_send>
 8005c1e:	2050      	movs	r0, #80	; 0x50
 8005c20:	f7ff ff78 	bl	8005b14 <spi_9b_send_9b>
 8005c24:	2137      	movs	r1, #55	; 0x37
 8005c26:	2001      	movs	r0, #1
 8005c28:	f7ff ff00 	bl	8005a2c <spi_9b_send>
 8005c2c:	2026      	movs	r0, #38	; 0x26
 8005c2e:	f7ff ff71 	bl	8005b14 <spi_9b_send_9b>
 8005c32:	210f      	movs	r1, #15
 8005c34:	2001      	movs	r0, #1
 8005c36:	f7ff fef9 	bl	8005a2c <spi_9b_send>
 8005c3a:	2062      	movs	r0, #98	; 0x62
 8005c3c:	f7ff ff6a 	bl	8005b14 <spi_9b_send_9b>
 8005c40:	2100      	movs	r1, #0
 8005c42:	2001      	movs	r0, #1
 8005c44:	f7ff fef2 	bl	8005a2c <spi_9b_send>
 8005c48:	2100      	movs	r1, #0
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	f7ff feee 	bl	8005a2c <spi_9b_send>
 8005c50:	2100      	movs	r1, #0
 8005c52:	2001      	movs	r0, #1
 8005c54:	f7ff feea 	bl	8005a2c <spi_9b_send>
 8005c58:	2100      	movs	r1, #0
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	f7ff fee6 	bl	8005a2c <spi_9b_send>
 8005c60:	20f8      	movs	r0, #248	; 0xf8
 8005c62:	f7ff ff57 	bl	8005b14 <spi_9b_send_9b>
 8005c66:	2160      	movs	r1, #96	; 0x60
 8005c68:	2001      	movs	r0, #1
 8005c6a:	f7ff fedf 	bl	8005a2c <spi_9b_send>
 8005c6e:	21a5      	movs	r1, #165	; 0xa5
 8005c70:	2001      	movs	r0, #1
 8005c72:	f7ff fedb 	bl	8005a2c <spi_9b_send>
 8005c76:	20f8      	movs	r0, #248	; 0xf8
 8005c78:	f7ff ff4c 	bl	8005b14 <spi_9b_send_9b>
 8005c7c:	2189      	movs	r1, #137	; 0x89
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f7ff fed4 	bl	8005a2c <spi_9b_send>
 8005c84:	21a5      	movs	r1, #165	; 0xa5
 8005c86:	2001      	movs	r0, #1
 8005c88:	f7ff fed0 	bl	8005a2c <spi_9b_send>
 8005c8c:	20f8      	movs	r0, #248	; 0xf8
 8005c8e:	f7ff ff41 	bl	8005b14 <spi_9b_send_9b>
 8005c92:	21a1      	movs	r1, #161	; 0xa1
 8005c94:	2001      	movs	r0, #1
 8005c96:	f7ff fec9 	bl	8005a2c <spi_9b_send>
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	f7ff fec5 	bl	8005a2c <spi_9b_send>
 8005ca2:	20f8      	movs	r0, #248	; 0xf8
 8005ca4:	f7ff ff36 	bl	8005b14 <spi_9b_send_9b>
 8005ca8:	2173      	movs	r1, #115	; 0x73
 8005caa:	2001      	movs	r0, #1
 8005cac:	f7ff febe 	bl	8005a2c <spi_9b_send>
 8005cb0:	2105      	movs	r1, #5
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	f7ff feba 	bl	8005a2c <spi_9b_send>
 8005cb8:	20f8      	movs	r0, #248	; 0xf8
 8005cba:	f7ff ff2b 	bl	8005b14 <spi_9b_send_9b>
 8005cbe:	217e      	movs	r1, #126	; 0x7e
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	f7ff feb3 	bl	8005a2c <spi_9b_send>
 8005cc6:	2131      	movs	r1, #49	; 0x31
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f7ff feaf 	bl	8005a2c <spi_9b_send>
 8005cce:	20f8      	movs	r0, #248	; 0xf8
 8005cd0:	f7ff ff20 	bl	8005b14 <spi_9b_send_9b>
 8005cd4:	21b8      	movs	r1, #184	; 0xb8
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	f7ff fea8 	bl	8005a2c <spi_9b_send>
 8005cdc:	2180      	movs	r1, #128	; 0x80
 8005cde:	2001      	movs	r0, #1
 8005ce0:	f7ff fea4 	bl	8005a2c <spi_9b_send>
 8005ce4:	20f8      	movs	r0, #248	; 0xf8
 8005ce6:	f7ff ff15 	bl	8005b14 <spi_9b_send_9b>
 8005cea:	2192      	movs	r1, #146	; 0x92
 8005cec:	2001      	movs	r0, #1
 8005cee:	f7ff fe9d 	bl	8005a2c <spi_9b_send>
 8005cf2:	2108      	movs	r1, #8
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	f7ff fe99 	bl	8005a2c <spi_9b_send>
 8005cfa:	20f8      	movs	r0, #248	; 0xf8
 8005cfc:	f7ff ff0a 	bl	8005b14 <spi_9b_send_9b>
 8005d00:	2187      	movs	r1, #135	; 0x87
 8005d02:	2001      	movs	r0, #1
 8005d04:	f7ff fe92 	bl	8005a2c <spi_9b_send>
 8005d08:	2111      	movs	r1, #17
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	f7ff fe8e 	bl	8005a2c <spi_9b_send>
 8005d10:	20f8      	movs	r0, #248	; 0xf8
 8005d12:	f7ff feff 	bl	8005b14 <spi_9b_send_9b>
 8005d16:	2188      	movs	r1, #136	; 0x88
 8005d18:	2001      	movs	r0, #1
 8005d1a:	f7ff fe87 	bl	8005a2c <spi_9b_send>
 8005d1e:	2102      	movs	r1, #2
 8005d20:	2001      	movs	r0, #1
 8005d22:	f7ff fe83 	bl	8005a2c <spi_9b_send>
 8005d26:	20f8      	movs	r0, #248	; 0xf8
 8005d28:	f7ff fef4 	bl	8005b14 <spi_9b_send_9b>
 8005d2c:	21a8      	movs	r1, #168	; 0xa8
 8005d2e:	2001      	movs	r0, #1
 8005d30:	f7ff fe7c 	bl	8005a2c <spi_9b_send>
 8005d34:	213a      	movs	r1, #58	; 0x3a
 8005d36:	2001      	movs	r0, #1
 8005d38:	f7ff fe78 	bl	8005a2c <spi_9b_send>
 8005d3c:	2004      	movs	r0, #4
 8005d3e:	f7ff fee9 	bl	8005b14 <spi_9b_send_9b>
 8005d42:	2080      	movs	r0, #128	; 0x80
 8005d44:	f7ff fee6 	bl	8005b14 <spi_9b_send_9b>
 8005d48:	2111      	movs	r1, #17
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	f7ff fe6e 	bl	8005a2c <spi_9b_send>
 8005d50:	2082      	movs	r0, #130	; 0x82
 8005d52:	f7ff fedf 	bl	8005b14 <spi_9b_send_9b>
 8005d56:	2082      	movs	r0, #130	; 0x82
 8005d58:	f7ff fedc 	bl	8005b14 <spi_9b_send_9b>
 8005d5c:	2117      	movs	r1, #23
 8005d5e:	2001      	movs	r0, #1
 8005d60:	f7ff fe64 	bl	8005a2c <spi_9b_send>
 8005d64:	2002      	movs	r0, #2
 8005d66:	f7ff fed5 	bl	8005b14 <spi_9b_send_9b>
 8005d6a:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <EPD_Init+0x258>)
 8005d6c:	4a08      	ldr	r2, [pc, #32]	; (8005d90 <EPD_Init+0x25c>)
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	7863      	ldrb	r3, [r4, #1]
 8005d72:	079b      	lsls	r3, r3, #30
 8005d74:	d503      	bpl.n	8005d7e <EPD_Init+0x24a>
 8005d76:	2001      	movs	r0, #1
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	e6ed      	b.n	8005b5a <EPD_Init+0x26>
 8005d7e:	2000      	movs	r0, #0
 8005d80:	e7fa      	b.n	8005d78 <EPD_Init+0x244>
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	50000400 	.word	0x50000400
 8005d88:	2000032c 	.word	0x2000032c
 8005d8c:	200002f0 	.word	0x200002f0
 8005d90:	000041a0 	.word	0x000041a0

08005d94 <EPD_Load_LUTC>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	000c      	movs	r4, r1
 8005d98:	f7ff febc 	bl	8005b14 <spi_9b_send_9b>
 8005d9c:	2500      	movs	r5, #0
 8005d9e:	e005      	b.n	8005dac <EPD_Load_LUTC+0x18>
 8005da0:	7821      	ldrb	r1, [r4, #0]
 8005da2:	2001      	movs	r0, #1
 8005da4:	f7ff fe42 	bl	8005a2c <spi_9b_send>
 8005da8:	3401      	adds	r4, #1
 8005daa:	3501      	adds	r5, #1
 8005dac:	2d3b      	cmp	r5, #59	; 0x3b
 8005dae:	ddf7      	ble.n	8005da0 <EPD_Load_LUTC+0xc>
 8005db0:	bd70      	pop	{r4, r5, r6, pc}

08005db2 <EPD_Load_LUT>:
 8005db2:	b570      	push	{r4, r5, r6, lr}
 8005db4:	000c      	movs	r4, r1
 8005db6:	f7ff fead 	bl	8005b14 <spi_9b_send_9b>
 8005dba:	2500      	movs	r5, #0
 8005dbc:	e005      	b.n	8005dca <EPD_Load_LUT+0x18>
 8005dbe:	7821      	ldrb	r1, [r4, #0]
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	f7ff fe33 	bl	8005a2c <spi_9b_send>
 8005dc6:	3401      	adds	r4, #1
 8005dc8:	3501      	adds	r5, #1
 8005dca:	2d29      	cmp	r5, #41	; 0x29
 8005dcc:	ddf7      	ble.n	8005dbe <EPD_Load_LUT+0xc>
 8005dce:	bd70      	pop	{r4, r5, r6, pc}

08005dd0 <Upload_Temperature_LUT>:
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	4c0d      	ldr	r4, [pc, #52]	; (8005e08 <Upload_Temperature_LUT+0x38>)
 8005dd4:	0021      	movs	r1, r4
 8005dd6:	2020      	movs	r0, #32
 8005dd8:	f7ff ffdc 	bl	8005d94 <EPD_Load_LUTC>
 8005ddc:	0021      	movs	r1, r4
 8005dde:	313c      	adds	r1, #60	; 0x3c
 8005de0:	2021      	movs	r0, #33	; 0x21
 8005de2:	f7ff ffe6 	bl	8005db2 <EPD_Load_LUT>
 8005de6:	0021      	movs	r1, r4
 8005de8:	3168      	adds	r1, #104	; 0x68
 8005dea:	2022      	movs	r0, #34	; 0x22
 8005dec:	f7ff ffd2 	bl	8005d94 <EPD_Load_LUTC>
 8005df0:	4c06      	ldr	r4, [pc, #24]	; (8005e0c <Upload_Temperature_LUT+0x3c>)
 8005df2:	0021      	movs	r1, r4
 8005df4:	3124      	adds	r1, #36	; 0x24
 8005df6:	2023      	movs	r0, #35	; 0x23
 8005df8:	f7ff ffdb 	bl	8005db2 <EPD_Load_LUT>
 8005dfc:	0021      	movs	r1, r4
 8005dfe:	3150      	adds	r1, #80	; 0x50
 8005e00:	2024      	movs	r0, #36	; 0x24
 8005e02:	f7ff ffd6 	bl	8005db2 <EPD_Load_LUT>
 8005e06:	bd10      	pop	{r4, pc}
 8005e08:	0800c8c0 	.word	0x0800c8c0
 8005e0c:	0800c940 	.word	0x0800c940

08005e10 <EPD_Display_KW>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	0004      	movs	r4, r0
 8005e14:	2004      	movs	r0, #4
 8005e16:	f7ff fe7d 	bl	8005b14 <spi_9b_send_9b>
 8005e1a:	4d1e      	ldr	r5, [pc, #120]	; (8005e94 <EPD_Display_KW+0x84>)
 8005e1c:	782b      	ldrb	r3, [r5, #0]
 8005e1e:	2208      	movs	r2, #8
 8005e20:	4313      	orrs	r3, r2
 8005e22:	702b      	strb	r3, [r5, #0]
 8005e24:	f7ff fdb0 	bl	8005988 <check_busy_high>
 8005e28:	2010      	movs	r0, #16
 8005e2a:	f7ff fe73 	bl	8005b14 <spi_9b_send_9b>
 8005e2e:	782b      	ldrb	r3, [r5, #0]
 8005e30:	079b      	lsls	r3, r3, #30
 8005e32:	d500      	bpl.n	8005e36 <EPD_Display_KW+0x26>
 8005e34:	3403      	adds	r4, #3
 8005e36:	2500      	movs	r5, #0
 8005e38:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <EPD_Display_KW+0x88>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	42ab      	cmp	r3, r5
 8005e3e:	d906      	bls.n	8005e4e <EPD_Display_KW+0x3e>
 8005e40:	7821      	ldrb	r1, [r4, #0]
 8005e42:	2001      	movs	r0, #1
 8005e44:	f7ff fdf2 	bl	8005a2c <spi_9b_send>
 8005e48:	3401      	adds	r4, #1
 8005e4a:	3501      	adds	r5, #1
 8005e4c:	e7f4      	b.n	8005e38 <EPD_Display_KW+0x28>
 8005e4e:	2013      	movs	r0, #19
 8005e50:	f7ff fe60 	bl	8005b14 <spi_9b_send_9b>
 8005e54:	2400      	movs	r4, #0
 8005e56:	e004      	b.n	8005e62 <EPD_Display_KW+0x52>
 8005e58:	21ff      	movs	r1, #255	; 0xff
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	f7ff fde6 	bl	8005a2c <spi_9b_send>
 8005e60:	3401      	adds	r4, #1
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <EPD_Display_KW+0x88>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	d8f6      	bhi.n	8005e58 <EPD_Display_KW+0x48>
 8005e6a:	f7ff ffb1 	bl	8005dd0 <Upload_Temperature_LUT>
 8005e6e:	2012      	movs	r0, #18
 8005e70:	f7ff fe50 	bl	8005b14 <spi_9b_send_9b>
 8005e74:	2300      	movs	r3, #0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	dd0a      	ble.n	8005e90 <EPD_Display_KW+0x80>
 8005e7a:	2002      	movs	r0, #2
 8005e7c:	f7ff fe4a 	bl	8005b14 <spi_9b_send_9b>
 8005e80:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <EPD_Display_KW+0x84>)
 8005e82:	7813      	ldrb	r3, [r2, #0]
 8005e84:	2108      	movs	r1, #8
 8005e86:	430b      	orrs	r3, r1
 8005e88:	7013      	strb	r3, [r2, #0]
 8005e8a:	f7ff fd99 	bl	80059c0 <check_busy_low>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	3301      	adds	r3, #1
 8005e92:	e7f0      	b.n	8005e76 <EPD_Display_KW+0x66>
 8005e94:	2000032c 	.word	0x2000032c
 8005e98:	200002f0 	.word	0x200002f0

08005e9c <Get_ADC_Average_Single>:
 * return			: avg_value   - calculated average unsigned int
 * Description 		: This Function is written to calculate average of single ADC Channel.
 *
 ***************************************************************************************************/
unsigned int Get_ADC_Average_Single(unsigned char adc_ch)
{
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	0005      	movs	r5, r0
	unsigned char loop_cnt;
	unsigned int avg_value;

	for(loop_cnt = 0 ; loop_cnt < D_NO_OF_SAMPLES ; loop_cnt++)
 8005ea0:	2400      	movs	r4, #0
 8005ea2:	e013      	b.n	8005ecc <Get_ADC_Average_Single+0x30>
	{
		ADCTotalSum += ADC_Sample[adc_ch][loop_cnt];
 8005ea4:	00ab      	lsls	r3, r5, #2
 8005ea6:	195b      	adds	r3, r3, r5
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	191b      	adds	r3, r3, r4
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4a0f      	ldr	r2, [pc, #60]	; (8005eec <Get_ADC_Average_Single+0x50>)
 8005eb0:	5898      	ldr	r0, [r3, r2]
 8005eb2:	4e0f      	ldr	r6, [pc, #60]	; (8005ef0 <Get_ADC_Average_Single+0x54>)
 8005eb4:	f7fc fa0a 	bl	80022cc <__aeabi_ui2d>
 8005eb8:	0002      	movs	r2, r0
 8005eba:	000b      	movs	r3, r1
 8005ebc:	6830      	ldr	r0, [r6, #0]
 8005ebe:	6871      	ldr	r1, [r6, #4]
 8005ec0:	f7fa fc12 	bl	80006e8 <__aeabi_dadd>
 8005ec4:	6030      	str	r0, [r6, #0]
 8005ec6:	6071      	str	r1, [r6, #4]
	for(loop_cnt = 0 ; loop_cnt < D_NO_OF_SAMPLES ; loop_cnt++)
 8005ec8:	3401      	adds	r4, #1
 8005eca:	b2e4      	uxtb	r4, r4
 8005ecc:	2c13      	cmp	r4, #19
 8005ece:	d9e9      	bls.n	8005ea4 <Get_ADC_Average_Single+0x8>
	}
	avg_value = ADCTotalSum / D_NO_OF_SAMPLES;
 8005ed0:	4c07      	ldr	r4, [pc, #28]	; (8005ef0 <Get_ADC_Average_Single+0x54>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <Get_ADC_Average_Single+0x58>)
 8005ed6:	6820      	ldr	r0, [r4, #0]
 8005ed8:	6861      	ldr	r1, [r4, #4]
 8005eda:	f7fa ff6f 	bl	8000dbc <__aeabi_ddiv>
 8005ede:	f7fa fb19 	bl	8000514 <__aeabi_d2uiz>
	ADCTotalSum = 0;
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	6022      	str	r2, [r4, #0]
 8005ee8:	6063      	str	r3, [r4, #4]

	return avg_value;
}
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	20000350 	.word	0x20000350
 8005ef0:	20000340 	.word	0x20000340
 8005ef4:	40340000 	.word	0x40340000

08005ef8 <Get_ADC_Value_Converted>:
 * return			: value   - calculated value float
 * Description 		: This Function is written to calculate the actual value of parameter connected to ADC Channel
 * 					  eg.: Temperature (deg. C) , Current (Ampere) , Voltage(Volts)
 ***************************************************************************************************/
void Get_ADC_Value_Converted(unsigned char adc_ch, double *Val_Dest)
{
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	000c      	movs	r4, r1

	double value;

	value = ADC_Average[adc_ch] * 3.3;
 8005efc:	00c3      	lsls	r3, r0, #3
 8005efe:	4809      	ldr	r0, [pc, #36]	; (8005f24 <Get_ADC_Value_Converted+0x2c>)
 8005f00:	18c0      	adds	r0, r0, r3
 8005f02:	6841      	ldr	r1, [r0, #4]
 8005f04:	6800      	ldr	r0, [r0, #0]
 8005f06:	4a08      	ldr	r2, [pc, #32]	; (8005f28 <Get_ADC_Value_Converted+0x30>)
 8005f08:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <Get_ADC_Value_Converted+0x34>)
 8005f0a:	f7fb fb5d 	bl	80015c8 <__aeabi_dmul>
	value = value / 4096.00;
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <Get_ADC_Value_Converted+0x38>)
 8005f12:	f7fb fb59 	bl	80015c8 <__aeabi_dmul>
	value = value * 2.00;
 8005f16:	0002      	movs	r2, r0
 8005f18:	000b      	movs	r3, r1
 8005f1a:	f7fa fbe5 	bl	80006e8 <__aeabi_dadd>
	*Val_Dest = value;
 8005f1e:	6020      	str	r0, [r4, #0]
 8005f20:	6061      	str	r1, [r4, #4]
}
 8005f22:	bd10      	pop	{r4, pc}
 8005f24:	20000338 	.word	0x20000338
 8005f28:	66666666 	.word	0x66666666
 8005f2c:	400a6666 	.word	0x400a6666
 8005f30:	3f300000 	.word	0x3f300000

08005f34 <ADC_Sensing_Operation>:
 * @param None
 * @retval None
 */

int ADC_Sensing_Operation(void)
{
 8005f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f36:	b08b      	sub	sp, #44	; 0x2c
	/*F_Unlock_Door = 1 -> When motor is in ON condition
  F_Check_RFID_tag_Presence = 1 ->  When card is present*/

	//if(F_Unlock_Door == 0)
	//{
	ADC_Average[0] = Get_ADC_Average_Single(0);
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f7ff ffaf 	bl	8005e9c <Get_ADC_Average_Single>
 8005f3e:	f7fc f9c5 	bl	80022cc <__aeabi_ui2d>
 8005f42:	4b95      	ldr	r3, [pc, #596]	; (8006198 <ADC_Sensing_Operation+0x264>)
 8005f44:	6018      	str	r0, [r3, #0]
 8005f46:	6059      	str	r1, [r3, #4]

	Get_ADC_Value_Converted(0,&Battery_Voltage);
 8005f48:	4c94      	ldr	r4, [pc, #592]	; (800619c <ADC_Sensing_Operation+0x268>)
 8005f4a:	0021      	movs	r1, r4
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f7ff ffd3 	bl	8005ef8 <Get_ADC_Value_Converted>

	if(Battery_Voltage < BATTERY_VOLTAGE_LOW_LEVEL1)
 8005f52:	6865      	ldr	r5, [r4, #4]
 8005f54:	6824      	ldr	r4, [r4, #0]
 8005f56:	4a92      	ldr	r2, [pc, #584]	; (80061a0 <ADC_Sensing_Operation+0x26c>)
 8005f58:	4b92      	ldr	r3, [pc, #584]	; (80061a4 <ADC_Sensing_Operation+0x270>)
 8005f5a:	0020      	movs	r0, r4
 8005f5c:	0029      	movs	r1, r5
 8005f5e:	f7fa fa69 	bl	8000434 <__aeabi_dcmplt>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d05e      	beq.n	8006024 <ADC_Sensing_Operation+0xf0>
	{

		if(flags.F_Monitor_Low_Battery_Voltage == 0)
 8005f66:	4b90      	ldr	r3, [pc, #576]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8005f68:	795b      	ldrb	r3, [r3, #5]
 8005f6a:	069b      	lsls	r3, r3, #26
 8005f6c:	d407      	bmi.n	8005f7e <ADC_Sensing_Operation+0x4a>
		{
			flags.F_Monitor_Low_Battery_Voltage = 1;
 8005f6e:	4a8e      	ldr	r2, [pc, #568]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8005f70:	7953      	ldrb	r3, [r2, #5]
 8005f72:	2120      	movs	r1, #32
 8005f74:	430b      	orrs	r3, r1
 8005f76:	7153      	strb	r3, [r2, #5]
			Monitor_Low_Battery_Voltage_Counter = 0;
 8005f78:	4b8c      	ldr	r3, [pc, #560]	; (80061ac <ADC_Sensing_Operation+0x278>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
		}


		if(flags.F_Low_Battery_Voltage_Confirmed == 1)
 8005f7e:	4b8a      	ldr	r3, [pc, #552]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8005f80:	799b      	ldrb	r3, [r3, #6]
 8005f82:	07db      	lsls	r3, r3, #31
 8005f84:	d418      	bmi.n	8005fb8 <ADC_Sensing_Operation+0x84>
	else
	{
		Monitor_Low_Battery_Voltage_Counter = 0;
	}

	if(flags.Battery_status_updated_flag == 1)
 8005f86:	4b88      	ldr	r3, [pc, #544]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8005f88:	799b      	ldrb	r3, [r3, #6]
 8005f8a:	071b      	lsls	r3, r3, #28
 8005f8c:	d512      	bpl.n	8005fb4 <ADC_Sensing_Operation+0x80>
	{
		if(flags.Check_reapet_battery_voltage_flag == 1)
 8005f8e:	4b86      	ldr	r3, [pc, #536]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8005f90:	795b      	ldrb	r3, [r3, #5]
 8005f92:	079b      	lsls	r3, r3, #30
 8005f94:	d500      	bpl.n	8005f98 <ADC_Sensing_Operation+0x64>
 8005f96:	e0ea      	b.n	800616e <ADC_Sensing_Operation+0x23a>
			flags.F_Run_Stop2_Mode =1;
			flags.Check_reapet_battery_voltage_flag = 0;
		}
		else if(flags.Check_reapet_battery_voltage_flag == 0)
		{
			flags.Initialize_ble_flag = 1;
 8005f98:	4b83      	ldr	r3, [pc, #524]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8005f9a:	789a      	ldrb	r2, [r3, #2]
 8005f9c:	2104      	movs	r1, #4
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	709a      	strb	r2, [r3, #2]
			flags.Battery_status_updated_flag = 0;
 8005fa2:	799a      	ldrb	r2, [r3, #6]
 8005fa4:	2108      	movs	r1, #8
 8005fa6:	438a      	bics	r2, r1
 8005fa8:	719a      	strb	r2, [r3, #6]
			flags.Check_battery_voltage_flag = 0;
 8005faa:	795a      	ldrb	r2, [r3, #5]
 8005fac:	3907      	subs	r1, #7
 8005fae:	438a      	bics	r2, r1
 8005fb0:	715a      	strb	r2, [r3, #5]
			return SUCCESS;
 8005fb2:	2000      	movs	r0, #0
		}
	}

}
 8005fb4:	b00b      	add	sp, #44	; 0x2c
 8005fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Initiate_Buzzer_Beep3();					//tune - low, high, low, high - 2
 8005fb8:	f002 fecc 	bl	8008d54 <Initiate_Buzzer_Beep3>
			Execute_Buzzer_Beep3();
 8005fbc:	f002 fed4 	bl	8008d68 <Execute_Buzzer_Beep3>
			Vibrator_Motor_H;
 8005fc0:	2180      	movs	r1, #128	; 0x80
 8005fc2:	4d7b      	ldr	r5, [pc, #492]	; (80061b0 <ADC_Sensing_Operation+0x27c>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	01c9      	lsls	r1, r1, #7
 8005fc8:	0028      	movs	r0, r5
 8005fca:	f7fd f8f2 	bl	80031b2 <HAL_GPIO_WritePin>
			flags.Start_vibrator_motor_flag = 1;
 8005fce:	4c76      	ldr	r4, [pc, #472]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8005fd0:	7922      	ldrb	r2, [r4, #4]
 8005fd2:	2380      	movs	r3, #128	; 0x80
 8005fd4:	425b      	negs	r3, r3
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	7123      	strb	r3, [r4, #4]
			uint8_t test_1[23]="Low Battery, please charge battery\r\n";
 8005fda:	4668      	mov	r0, sp
 8005fdc:	4b75      	ldr	r3, [pc, #468]	; (80061b4 <ADC_Sensing_Operation+0x280>)
 8005fde:	0002      	movs	r2, r0
 8005fe0:	cbc2      	ldmia	r3!, {r1, r6, r7}
 8005fe2:	c2c2      	stmia	r2!, {r1, r6, r7}
 8005fe4:	cb42      	ldmia	r3!, {r1, r6}
 8005fe6:	c242      	stmia	r2!, {r1, r6}
 8005fe8:	8819      	ldrh	r1, [r3, #0]
 8005fea:	8011      	strh	r1, [r2, #0]
 8005fec:	789b      	ldrb	r3, [r3, #2]
 8005fee:	7093      	strb	r3, [r2, #2]
			UART1_Transmit(test_1,23);
 8005ff0:	2117      	movs	r1, #23
 8005ff2:	f003 fb09 	bl	8009608 <UART1_Transmit>
			HAL_Delay(4000);
 8005ff6:	20fa      	movs	r0, #250	; 0xfa
 8005ff8:	0100      	lsls	r0, r0, #4
 8005ffa:	f7fc fa03 	bl	8002404 <HAL_Delay>
			flags.F_Low_Battery_Voltage_Confirmed = 0;
 8005ffe:	79a3      	ldrb	r3, [r4, #6]
 8006000:	2201      	movs	r2, #1
 8006002:	4393      	bics	r3, r2
 8006004:	71a3      	strb	r3, [r4, #6]
			MX_GPIO_DeInit();
 8006006:	f003 fd5b 	bl	8009ac0 <MX_GPIO_DeInit>
			Ble_Mosfet_H;
 800600a:	20a0      	movs	r0, #160	; 0xa0
 800600c:	2201      	movs	r2, #1
 800600e:	2180      	movs	r1, #128	; 0x80
 8006010:	05c0      	lsls	r0, r0, #23
 8006012:	f7fd f8ce 	bl	80031b2 <HAL_GPIO_WritePin>
			MCU_Mosfet_H;
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	2201      	movs	r2, #1
 800601a:	0189      	lsls	r1, r1, #6
 800601c:	0028      	movs	r0, r5
 800601e:	f7fd f8c8 	bl	80031b2 <HAL_GPIO_WritePin>
 8006022:	e7b0      	b.n	8005f86 <ADC_Sensing_Operation+0x52>
	else if(Battery_Voltage < BATTERY_HALF_CHARGE)
 8006024:	4a64      	ldr	r2, [pc, #400]	; (80061b8 <ADC_Sensing_Operation+0x284>)
 8006026:	4b65      	ldr	r3, [pc, #404]	; (80061bc <ADC_Sensing_Operation+0x288>)
 8006028:	0020      	movs	r0, r4
 800602a:	0029      	movs	r1, r5
 800602c:	f7fa fa02 	bl	8000434 <__aeabi_dcmplt>
 8006030:	2800      	cmp	r0, #0
 8006032:	d044      	beq.n	80060be <ADC_Sensing_Operation+0x18a>
		if(flags.F_Monitor_Low_Battery_Voltage == 0)
 8006034:	4b5c      	ldr	r3, [pc, #368]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8006036:	795b      	ldrb	r3, [r3, #5]
 8006038:	069b      	lsls	r3, r3, #26
 800603a:	d407      	bmi.n	800604c <ADC_Sensing_Operation+0x118>
			flags.F_Monitor_Low_Battery_Voltage = 1;
 800603c:	4a5a      	ldr	r2, [pc, #360]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 800603e:	7953      	ldrb	r3, [r2, #5]
 8006040:	2120      	movs	r1, #32
 8006042:	430b      	orrs	r3, r1
 8006044:	7153      	strb	r3, [r2, #5]
			Monitor_Low_Battery_Voltage_Counter = 0;
 8006046:	4b59      	ldr	r3, [pc, #356]	; (80061ac <ADC_Sensing_Operation+0x278>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
		if(flags.F_Low_Battery_Voltage_Confirmed == 1)
 800604c:	4b56      	ldr	r3, [pc, #344]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 800604e:	799b      	ldrb	r3, [r3, #6]
 8006050:	07db      	lsls	r3, r3, #31
 8006052:	d598      	bpl.n	8005f86 <ADC_Sensing_Operation+0x52>
			flags.F_Low_Battery_Voltage_Confirmed = 0;
 8006054:	4c54      	ldr	r4, [pc, #336]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8006056:	79a3      	ldrb	r3, [r4, #6]
 8006058:	2201      	movs	r2, #1
 800605a:	4393      	bics	r3, r2
 800605c:	71a3      	strb	r3, [r4, #6]
				flags.F_Low_Battery_Voltage = 1;              //Low Battery Detected
 800605e:	7963      	ldrb	r3, [r4, #5]
 8006060:	2204      	movs	r2, #4
 8006062:	4313      	orrs	r3, r2
 8006064:	7163      	strb	r3, [r4, #5]
				HAL_GPIO_WritePin(Buzzer_EN_GPIO_Port, Buzzer_EN_Pin, GPIO_PIN_SET);/* Enable Buzzer */
 8006066:	4d52      	ldr	r5, [pc, #328]	; (80061b0 <ADC_Sensing_Operation+0x27c>)
 8006068:	2201      	movs	r2, #1
 800606a:	2102      	movs	r1, #2
 800606c:	0028      	movs	r0, r5
 800606e:	f7fd f8a0 	bl	80031b2 <HAL_GPIO_WritePin>
				Initiate_Buzzer_Beep2();					//beep 2
 8006072:	f002 f941 	bl	80082f8 <Initiate_Buzzer_Beep2>
				Execute_Buzzer_Beep2();
 8006076:	f002 f949 	bl	800830c <Execute_Buzzer_Beep2>
				Vibrator_Motor_H;
 800607a:	2180      	movs	r1, #128	; 0x80
 800607c:	2201      	movs	r2, #1
 800607e:	01c9      	lsls	r1, r1, #7
 8006080:	0028      	movs	r0, r5
 8006082:	f7fd f896 	bl	80031b2 <HAL_GPIO_WritePin>
				flags.Start_vibrator_motor_flag = 1;
 8006086:	7922      	ldrb	r2, [r4, #4]
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	425b      	negs	r3, r3
 800608c:	4313      	orrs	r3, r2
 800608e:	7123      	strb	r3, [r4, #4]
				uint8_t test_1[40]="Low Battery 10%, please charge battery\r\n";
 8006090:	4668      	mov	r0, sp
 8006092:	4b4b      	ldr	r3, [pc, #300]	; (80061c0 <ADC_Sensing_Operation+0x28c>)
 8006094:	0002      	movs	r2, r0
 8006096:	cb62      	ldmia	r3!, {r1, r5, r6}
 8006098:	c262      	stmia	r2!, {r1, r5, r6}
 800609a:	cb62      	ldmia	r3!, {r1, r5, r6}
 800609c:	c262      	stmia	r2!, {r1, r5, r6}
 800609e:	cb62      	ldmia	r3!, {r1, r5, r6}
 80060a0:	c262      	stmia	r2!, {r1, r5, r6}
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6013      	str	r3, [r2, #0]
				UART1_Transmit(test_1,40);
 80060a6:	2128      	movs	r1, #40	; 0x28
 80060a8:	f003 faae 	bl	8009608 <UART1_Transmit>
				HAL_Delay(1000);
 80060ac:	20fa      	movs	r0, #250	; 0xfa
 80060ae:	0080      	lsls	r0, r0, #2
 80060b0:	f7fc f9a8 	bl	8002404 <HAL_Delay>
				flags.Battery_status_updated_flag = 1;
 80060b4:	79a3      	ldrb	r3, [r4, #6]
 80060b6:	2208      	movs	r2, #8
 80060b8:	4313      	orrs	r3, r2
 80060ba:	71a3      	strb	r3, [r4, #6]
 80060bc:	e763      	b.n	8005f86 <ADC_Sensing_Operation+0x52>
	else if(Battery_Voltage >= BATTERY_HALF_CHARGE && Battery_Voltage <= BATTERY_FULL_CHARGE)
 80060be:	4a3e      	ldr	r2, [pc, #248]	; (80061b8 <ADC_Sensing_Operation+0x284>)
 80060c0:	4b3e      	ldr	r3, [pc, #248]	; (80061bc <ADC_Sensing_Operation+0x288>)
 80060c2:	0020      	movs	r0, r4
 80060c4:	0029      	movs	r1, r5
 80060c6:	f7fa f9d3 	bl	8000470 <__aeabi_dcmpge>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d028      	beq.n	8006120 <ADC_Sensing_Operation+0x1ec>
 80060ce:	4a3d      	ldr	r2, [pc, #244]	; (80061c4 <ADC_Sensing_Operation+0x290>)
 80060d0:	4b3d      	ldr	r3, [pc, #244]	; (80061c8 <ADC_Sensing_Operation+0x294>)
 80060d2:	0020      	movs	r0, r4
 80060d4:	0029      	movs	r1, r5
 80060d6:	f7fa f9b7 	bl	8000448 <__aeabi_dcmple>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d020      	beq.n	8006120 <ADC_Sensing_Operation+0x1ec>
		if(flags.F_Monitor_half_Battery_Voltage == 0)
 80060de:	4b32      	ldr	r3, [pc, #200]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 80060e0:	795b      	ldrb	r3, [r3, #5]
 80060e2:	065b      	lsls	r3, r3, #25
 80060e4:	d407      	bmi.n	80060f6 <ADC_Sensing_Operation+0x1c2>
			flags.F_Monitor_half_Battery_Voltage = 1;
 80060e6:	4a30      	ldr	r2, [pc, #192]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 80060e8:	7953      	ldrb	r3, [r2, #5]
 80060ea:	2140      	movs	r1, #64	; 0x40
 80060ec:	430b      	orrs	r3, r1
 80060ee:	7153      	strb	r3, [r2, #5]
			Monitor_half_Battery_Voltage_Counter = 0;
 80060f0:	4b2e      	ldr	r3, [pc, #184]	; (80061ac <ADC_Sensing_Operation+0x278>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	605a      	str	r2, [r3, #4]
		if(flags.F_half_Battery_Voltage_Confirmed == 1)
 80060f6:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 80060f8:	799b      	ldrb	r3, [r3, #6]
 80060fa:	075b      	lsls	r3, r3, #29
 80060fc:	d400      	bmi.n	8006100 <ADC_Sensing_Operation+0x1cc>
 80060fe:	e742      	b.n	8005f86 <ADC_Sensing_Operation+0x52>
			flags.F_half_Battery_Voltage_Confirmed = 0;
 8006100:	4c29      	ldr	r4, [pc, #164]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8006102:	79a3      	ldrb	r3, [r4, #6]
 8006104:	2204      	movs	r2, #4
 8006106:	4393      	bics	r3, r2
 8006108:	71a3      	strb	r3, [r4, #6]
			HAL_GPIO_WritePin(LCD_Mosfet_GPIO_Port,LCD_Mosfet_Pin,0);
 800610a:	20a0      	movs	r0, #160	; 0xa0
 800610c:	2200      	movs	r2, #0
 800610e:	2102      	movs	r1, #2
 8006110:	05c0      	lsls	r0, r0, #23
 8006112:	f7fd f84e 	bl	80031b2 <HAL_GPIO_WritePin>
			flags.Battery_status_updated_flag = 1;
 8006116:	79a3      	ldrb	r3, [r4, #6]
 8006118:	2208      	movs	r2, #8
 800611a:	4313      	orrs	r3, r2
 800611c:	71a3      	strb	r3, [r4, #6]
 800611e:	e732      	b.n	8005f86 <ADC_Sensing_Operation+0x52>
	else if(Battery_Voltage > BATTERY_FULL_CHARGE)
 8006120:	4a28      	ldr	r2, [pc, #160]	; (80061c4 <ADC_Sensing_Operation+0x290>)
 8006122:	4b29      	ldr	r3, [pc, #164]	; (80061c8 <ADC_Sensing_Operation+0x294>)
 8006124:	0020      	movs	r0, r4
 8006126:	0029      	movs	r1, r5
 8006128:	f7fa f998 	bl	800045c <__aeabi_dcmpgt>
 800612c:	2800      	cmp	r0, #0
 800612e:	d01a      	beq.n	8006166 <ADC_Sensing_Operation+0x232>
		if(flags.F_Monitor_full_Battery_Voltage == 0)
 8006130:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8006132:	795b      	ldrb	r3, [r3, #5]
 8006134:	b25b      	sxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	db08      	blt.n	800614c <ADC_Sensing_Operation+0x218>
			flags.F_Monitor_full_Battery_Voltage = 1;
 800613a:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 800613c:	7951      	ldrb	r1, [r2, #5]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	425b      	negs	r3, r3
 8006142:	430b      	orrs	r3, r1
 8006144:	7153      	strb	r3, [r2, #5]
			Monitor_full_Battery_Voltage_Counter = 0;
 8006146:	4b21      	ldr	r3, [pc, #132]	; (80061cc <ADC_Sensing_Operation+0x298>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]
		if(flags.F_full_Battery_Voltage_Confirmed == 1)
 800614c:	4b16      	ldr	r3, [pc, #88]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 800614e:	799b      	ldrb	r3, [r3, #6]
 8006150:	079b      	lsls	r3, r3, #30
 8006152:	d400      	bmi.n	8006156 <ADC_Sensing_Operation+0x222>
 8006154:	e717      	b.n	8005f86 <ADC_Sensing_Operation+0x52>
			flags.F_full_Battery_Voltage_Confirmed = 0;
 8006156:	4a14      	ldr	r2, [pc, #80]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8006158:	7993      	ldrb	r3, [r2, #6]
			flags.Battery_status_updated_flag = 1;
 800615a:	2102      	movs	r1, #2
 800615c:	438b      	bics	r3, r1
 800615e:	2108      	movs	r1, #8
 8006160:	430b      	orrs	r3, r1
 8006162:	7193      	strb	r3, [r2, #6]
 8006164:	e70f      	b.n	8005f86 <ADC_Sensing_Operation+0x52>
		Monitor_Low_Battery_Voltage_Counter = 0;
 8006166:	4b11      	ldr	r3, [pc, #68]	; (80061ac <ADC_Sensing_Operation+0x278>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e70b      	b.n	8005f86 <ADC_Sensing_Operation+0x52>
			DeInit_ADC();
 800616e:	f003 fe9b 	bl	8009ea8 <DeInit_ADC>
			HAL_RTC_MspDeInit(&hrtc);
 8006172:	4c17      	ldr	r4, [pc, #92]	; (80061d0 <ADC_Sensing_Operation+0x29c>)
 8006174:	0020      	movs	r0, r4
 8006176:	f004 faa5 	bl	800a6c4 <HAL_RTC_MspDeInit>
			HAL_RTC_MspInit(&hrtc);
 800617a:	0020      	movs	r0, r4
 800617c:	f004 fa88 	bl	800a690 <HAL_RTC_MspInit>
			MX_RTC_Init_1();
 8006180:	f004 fab6 	bl	800a6f0 <MX_RTC_Init_1>
			flags.F_Run_Stop2_Mode =1;
 8006184:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <ADC_Sensing_Operation+0x274>)
 8006186:	785a      	ldrb	r2, [r3, #1]
 8006188:	2140      	movs	r1, #64	; 0x40
 800618a:	430a      	orrs	r2, r1
 800618c:	705a      	strb	r2, [r3, #1]
			flags.Check_reapet_battery_voltage_flag = 0;
 800618e:	795a      	ldrb	r2, [r3, #5]
 8006190:	2102      	movs	r1, #2
 8006192:	438a      	bics	r2, r1
 8006194:	715a      	strb	r2, [r3, #5]
}
 8006196:	e70d      	b.n	8005fb4 <ADC_Sensing_Operation+0x80>
 8006198:	20000338 	.word	0x20000338
 800619c:	20000348 	.word	0x20000348
 80061a0:	33333333 	.word	0x33333333
 80061a4:	400b3333 	.word	0x400b3333
 80061a8:	2000032c 	.word	0x2000032c
 80061ac:	200001d4 	.word	0x200001d4
 80061b0:	50000400 	.word	0x50000400
 80061b4:	08010d68 	.word	0x08010d68
 80061b8:	9999999a 	.word	0x9999999a
 80061bc:	400d9999 	.word	0x400d9999
 80061c0:	08010d80 	.word	0x08010d80
 80061c4:	66666666 	.word	0x66666666
 80061c8:	400e6666 	.word	0x400e6666
 80061cc:	200003a8 	.word	0x200003a8
 80061d0:	200048ac 	.word	0x200048ac

080061d4 <Save_RTC_Value_Application>:
 * @author Bhakti Deshpande
 */
//***************************************************************************************************************************

void Save_RTC_Value_Application(void)
{
 80061d4:	b510      	push	{r4, lr}
	CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART1_Time,3);
 80061d6:	2103      	movs	r1, #3
 80061d8:	485c      	ldr	r0, [pc, #368]	; (800634c <Save_RTC_Value_Application+0x178>)
 80061da:	f002 fefb 	bl	8008fd4 <Calculate_Block_CRC16>
 80061de:	4b5c      	ldr	r3, [pc, #368]	; (8006350 <Save_RTC_Value_Application+0x17c>)
 80061e0:	8018      	strh	r0, [r3, #0]
	if(flags.LPUART1_Receive_time_frame_flag == 1)
 80061e2:	4b5c      	ldr	r3, [pc, #368]	; (8006354 <Save_RTC_Value_Application+0x180>)
 80061e4:	79db      	ldrb	r3, [r3, #7]
 80061e6:	07da      	lsls	r2, r3, #31
 80061e8:	d556      	bpl.n	8006298 <Save_RTC_Value_Application+0xc4>
	{
		if((CRC_Value.CRC_Value_char[1]== LPUART1_Time[3]) && (CRC_Value.CRC_Value_char[0]== LPUART1_Time[4]))
 80061ea:	4b58      	ldr	r3, [pc, #352]	; (800634c <Save_RTC_Value_Application+0x178>)
 80061ec:	78da      	ldrb	r2, [r3, #3]
 80061ee:	0403      	lsls	r3, r0, #16
 80061f0:	0e1b      	lsrs	r3, r3, #24
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d104      	bne.n	8006200 <Save_RTC_Value_Application+0x2c>
 80061f6:	4b55      	ldr	r3, [pc, #340]	; (800634c <Save_RTC_Value_Application+0x178>)
 80061f8:	791b      	ldrb	r3, [r3, #4]
 80061fa:	b2c0      	uxtb	r0, r0
 80061fc:	4283      	cmp	r3, r0
 80061fe:	d018      	beq.n	8006232 <Save_RTC_Value_Application+0x5e>
			flags.Receive_time_frame_done_flag = 1;
		}
		else
		{

			LPUART_1_Transmit_Buffer[0] = '*';
 8006200:	4c55      	ldr	r4, [pc, #340]	; (8006358 <Save_RTC_Value_Application+0x184>)
 8006202:	232a      	movs	r3, #42	; 0x2a
 8006204:	7023      	strb	r3, [r4, #0]
			LPUART_1_Transmit_Buffer[1] = 'N';
 8006206:	3324      	adds	r3, #36	; 0x24
 8006208:	7063      	strb	r3, [r4, #1]
			LPUART_1_Transmit_Buffer[2] = 'A';
 800620a:	3b0d      	subs	r3, #13
 800620c:	70a3      	strb	r3, [r4, #2]
			LPUART_1_Transmit_Buffer[3] = 'K';
 800620e:	330a      	adds	r3, #10
 8006210:	70e3      	strb	r3, [r4, #3]
			CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART_1_Transmit_Buffer,4);
 8006212:	2104      	movs	r1, #4
 8006214:	0020      	movs	r0, r4
 8006216:	f002 fedd 	bl	8008fd4 <Calculate_Block_CRC16>
 800621a:	4b4d      	ldr	r3, [pc, #308]	; (8006350 <Save_RTC_Value_Application+0x17c>)
 800621c:	8018      	strh	r0, [r3, #0]
			LPUART_1_Transmit_Buffer[4] = CRC_Value.CRC_Value_char[1];
 800621e:	0a03      	lsrs	r3, r0, #8
 8006220:	7123      	strb	r3, [r4, #4]
			LPUART_1_Transmit_Buffer[5] = CRC_Value.CRC_Value_char[0];
 8006222:	7160      	strb	r0, [r4, #5]
			LPUART_1_Transmit_Buffer[6] = '#';
 8006224:	2323      	movs	r3, #35	; 0x23
 8006226:	71a3      	strb	r3, [r4, #6]
			LP_UART1_Transmit(LPUART_1_Transmit_Buffer,7);							/* Received CRC doesn't  with calculated CRC */
 8006228:	2107      	movs	r1, #7
 800622a:	0020      	movs	r0, r4
 800622c:	f003 f9fe 	bl	800962c <LP_UART1_Transmit>

		}
	}
	/* Calculate CRC of 16803 bytes in UART_1_Image Buffer */

}
 8006230:	bd10      	pop	{r4, pc}
			Hours_count = hex_to_dec(LPUART1_Time[1]);
 8006232:	4c46      	ldr	r4, [pc, #280]	; (800634c <Save_RTC_Value_Application+0x178>)
 8006234:	7860      	ldrb	r0, [r4, #1]
 8006236:	f003 fda1 	bl	8009d7c <hex_to_dec>
 800623a:	4b48      	ldr	r3, [pc, #288]	; (800635c <Save_RTC_Value_Application+0x188>)
 800623c:	6018      	str	r0, [r3, #0]
			Min_count = hex_to_dec(LPUART1_Time[2]);
 800623e:	78a0      	ldrb	r0, [r4, #2]
 8006240:	f003 fd9c 	bl	8009d7c <hex_to_dec>
 8006244:	4b46      	ldr	r3, [pc, #280]	; (8006360 <Save_RTC_Value_Application+0x18c>)
 8006246:	6018      	str	r0, [r3, #0]
			if(Min_count>55)
 8006248:	2837      	cmp	r0, #55	; 0x37
 800624a:	d906      	bls.n	800625a <Save_RTC_Value_Application+0x86>
				Hours_count=Hours_count+1;
 800624c:	4a43      	ldr	r2, [pc, #268]	; (800635c <Save_RTC_Value_Application+0x188>)
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	6013      	str	r3, [r2, #0]
				Min_count=0;
 8006254:	4b42      	ldr	r3, [pc, #264]	; (8006360 <Save_RTC_Value_Application+0x18c>)
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
			LPUART_1_Transmit_Buffer[0] = '*';
 800625a:	4c3f      	ldr	r4, [pc, #252]	; (8006358 <Save_RTC_Value_Application+0x184>)
 800625c:	232a      	movs	r3, #42	; 0x2a
 800625e:	7023      	strb	r3, [r4, #0]
			LPUART_1_Transmit_Buffer[1] = 'A';
 8006260:	3317      	adds	r3, #23
 8006262:	7063      	strb	r3, [r4, #1]
			LPUART_1_Transmit_Buffer[2] = 'C';
 8006264:	3302      	adds	r3, #2
 8006266:	70a3      	strb	r3, [r4, #2]
			LPUART_1_Transmit_Buffer[3] = 'K';
 8006268:	3308      	adds	r3, #8
 800626a:	70e3      	strb	r3, [r4, #3]
			CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART_1_Transmit_Buffer,4);
 800626c:	2104      	movs	r1, #4
 800626e:	0020      	movs	r0, r4
 8006270:	f002 feb0 	bl	8008fd4 <Calculate_Block_CRC16>
 8006274:	4b36      	ldr	r3, [pc, #216]	; (8006350 <Save_RTC_Value_Application+0x17c>)
 8006276:	8018      	strh	r0, [r3, #0]
			LPUART_1_Transmit_Buffer[4] = CRC_Value.CRC_Value_char[1];
 8006278:	0a03      	lsrs	r3, r0, #8
 800627a:	7123      	strb	r3, [r4, #4]
			LPUART_1_Transmit_Buffer[5] = CRC_Value.CRC_Value_char[0];
 800627c:	7160      	strb	r0, [r4, #5]
			LPUART_1_Transmit_Buffer[6] = '#';
 800627e:	2323      	movs	r3, #35	; 0x23
 8006280:	71a3      	strb	r3, [r4, #6]
			LP_UART1_Transmit(LPUART_1_Transmit_Buffer,7);							/* Received CRC matched with calculated CRC */
 8006282:	2107      	movs	r1, #7
 8006284:	0020      	movs	r0, r4
 8006286:	f003 f9d1 	bl	800962c <LP_UART1_Transmit>
			flags.Receive_time_frame_done_flag = 1;
 800628a:	4a32      	ldr	r2, [pc, #200]	; (8006354 <Save_RTC_Value_Application+0x180>)
 800628c:	7891      	ldrb	r1, [r2, #2]
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	425b      	negs	r3, r3
 8006292:	430b      	orrs	r3, r1
 8006294:	7093      	strb	r3, [r2, #2]
 8006296:	e7cb      	b.n	8006230 <Save_RTC_Value_Application+0x5c>
	else if(flags. UART1_Receive_time_frame_flag == 1)
 8006298:	079b      	lsls	r3, r3, #30
 800629a:	d5c9      	bpl.n	8006230 <Save_RTC_Value_Application+0x5c>
		if((CRC_Value.CRC_Value_char[1]== LPUART1_Time[3]) && (CRC_Value.CRC_Value_char[0]== LPUART1_Time[4]))
 800629c:	4b2b      	ldr	r3, [pc, #172]	; (800634c <Save_RTC_Value_Application+0x178>)
 800629e:	78da      	ldrb	r2, [r3, #3]
 80062a0:	0403      	lsls	r3, r0, #16
 80062a2:	0e1b      	lsrs	r3, r3, #24
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d104      	bne.n	80062b2 <Save_RTC_Value_Application+0xde>
 80062a8:	4b28      	ldr	r3, [pc, #160]	; (800634c <Save_RTC_Value_Application+0x178>)
 80062aa:	791b      	ldrb	r3, [r3, #4]
 80062ac:	b2c0      	uxtb	r0, r0
 80062ae:	4283      	cmp	r3, r0
 80062b0:	d018      	beq.n	80062e4 <Save_RTC_Value_Application+0x110>
			UART_1_Transmit_Buffer[0] = '*';
 80062b2:	4c2c      	ldr	r4, [pc, #176]	; (8006364 <Save_RTC_Value_Application+0x190>)
 80062b4:	232a      	movs	r3, #42	; 0x2a
 80062b6:	7023      	strb	r3, [r4, #0]
			UART_1_Transmit_Buffer[1] = 'N';
 80062b8:	3324      	adds	r3, #36	; 0x24
 80062ba:	7063      	strb	r3, [r4, #1]
			UART_1_Transmit_Buffer[2] = 'A';
 80062bc:	3b0d      	subs	r3, #13
 80062be:	70a3      	strb	r3, [r4, #2]
			UART_1_Transmit_Buffer[3] = 'K';
 80062c0:	330a      	adds	r3, #10
 80062c2:	70e3      	strb	r3, [r4, #3]
			CRC_Value.CRC_Value_int=Calculate_Block_CRC16(UART_1_Transmit_Buffer,4);
 80062c4:	2104      	movs	r1, #4
 80062c6:	0020      	movs	r0, r4
 80062c8:	f002 fe84 	bl	8008fd4 <Calculate_Block_CRC16>
 80062cc:	4b20      	ldr	r3, [pc, #128]	; (8006350 <Save_RTC_Value_Application+0x17c>)
 80062ce:	8018      	strh	r0, [r3, #0]
			UART_1_Transmit_Buffer[4] = CRC_Value.CRC_Value_char[1];
 80062d0:	0a03      	lsrs	r3, r0, #8
 80062d2:	7123      	strb	r3, [r4, #4]
			UART_1_Transmit_Buffer[5] = CRC_Value.CRC_Value_char[0];
 80062d4:	7160      	strb	r0, [r4, #5]
			UART_1_Transmit_Buffer[6] = '#';
 80062d6:	2323      	movs	r3, #35	; 0x23
 80062d8:	71a3      	strb	r3, [r4, #6]
			UART1_Transmit(UART_1_Transmit_Buffer,7);							/* Received CRC doesn't  with calculated CRC */
 80062da:	2107      	movs	r1, #7
 80062dc:	0020      	movs	r0, r4
 80062de:	f003 f993 	bl	8009608 <UART1_Transmit>
}
 80062e2:	e7a5      	b.n	8006230 <Save_RTC_Value_Application+0x5c>
			Hours_count = hex_to_dec(LPUART1_Time[1]);
 80062e4:	4c19      	ldr	r4, [pc, #100]	; (800634c <Save_RTC_Value_Application+0x178>)
 80062e6:	7860      	ldrb	r0, [r4, #1]
 80062e8:	f003 fd48 	bl	8009d7c <hex_to_dec>
 80062ec:	4b1b      	ldr	r3, [pc, #108]	; (800635c <Save_RTC_Value_Application+0x188>)
 80062ee:	6018      	str	r0, [r3, #0]
			Min_count = hex_to_dec(LPUART1_Time[2]);
 80062f0:	78a0      	ldrb	r0, [r4, #2]
 80062f2:	f003 fd43 	bl	8009d7c <hex_to_dec>
 80062f6:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <Save_RTC_Value_Application+0x18c>)
 80062f8:	6018      	str	r0, [r3, #0]
			if(Min_count>55)
 80062fa:	2837      	cmp	r0, #55	; 0x37
 80062fc:	d906      	bls.n	800630c <Save_RTC_Value_Application+0x138>
				Hours_count=Hours_count+1;
 80062fe:	4a17      	ldr	r2, [pc, #92]	; (800635c <Save_RTC_Value_Application+0x188>)
 8006300:	6813      	ldr	r3, [r2, #0]
 8006302:	3301      	adds	r3, #1
 8006304:	6013      	str	r3, [r2, #0]
				Min_count=0;
 8006306:	4b16      	ldr	r3, [pc, #88]	; (8006360 <Save_RTC_Value_Application+0x18c>)
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
			UART_1_Transmit_Buffer[0] = '*';
 800630c:	4c15      	ldr	r4, [pc, #84]	; (8006364 <Save_RTC_Value_Application+0x190>)
 800630e:	232a      	movs	r3, #42	; 0x2a
 8006310:	7023      	strb	r3, [r4, #0]
			UART_1_Transmit_Buffer[1] = 'A';
 8006312:	3317      	adds	r3, #23
 8006314:	7063      	strb	r3, [r4, #1]
			UART_1_Transmit_Buffer[2] = 'C';
 8006316:	3302      	adds	r3, #2
 8006318:	70a3      	strb	r3, [r4, #2]
			UART_1_Transmit_Buffer[3] = 'K';
 800631a:	3308      	adds	r3, #8
 800631c:	70e3      	strb	r3, [r4, #3]
			CRC_Value.CRC_Value_int=Calculate_Block_CRC16(UART_1_Transmit_Buffer,4);
 800631e:	2104      	movs	r1, #4
 8006320:	0020      	movs	r0, r4
 8006322:	f002 fe57 	bl	8008fd4 <Calculate_Block_CRC16>
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <Save_RTC_Value_Application+0x17c>)
 8006328:	8018      	strh	r0, [r3, #0]
			UART_1_Transmit_Buffer[4] = CRC_Value.CRC_Value_char[1];
 800632a:	0a03      	lsrs	r3, r0, #8
 800632c:	7123      	strb	r3, [r4, #4]
			UART_1_Transmit_Buffer[5] = CRC_Value.CRC_Value_char[0];
 800632e:	7160      	strb	r0, [r4, #5]
			UART_1_Transmit_Buffer[6] = '#';
 8006330:	2323      	movs	r3, #35	; 0x23
 8006332:	71a3      	strb	r3, [r4, #6]
			UART1_Transmit(UART_1_Transmit_Buffer,7);							/* Received CRC matched with calculated CRC */
 8006334:	2107      	movs	r1, #7
 8006336:	0020      	movs	r0, r4
 8006338:	f003 f966 	bl	8009608 <UART1_Transmit>
			flags.Receive_time_frame_done_flag = 1;
 800633c:	4a05      	ldr	r2, [pc, #20]	; (8006354 <Save_RTC_Value_Application+0x180>)
 800633e:	7891      	ldrb	r1, [r2, #2]
 8006340:	2380      	movs	r3, #128	; 0x80
 8006342:	425b      	negs	r3, r3
 8006344:	430b      	orrs	r3, r1
 8006346:	7093      	strb	r3, [r2, #2]
 8006348:	e772      	b.n	8006230 <Save_RTC_Value_Application+0x5c>
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	2000472c 	.word	0x2000472c
 8006350:	200004f8 	.word	0x200004f8
 8006354:	2000032c 	.word	0x2000032c
 8006358:	20000450 	.word	0x20000450
 800635c:	200001e4 	.word	0x200001e4
 8006360:	20000008 	.word	0x20000008
 8006364:	200002f8 	.word	0x200002f8

08006368 <Display_Application>:
 */
//***************************************************************************************************************************


void Display_Application(void)
{
 8006368:	b570      	push	{r4, r5, r6, lr}

	CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART1_Image_Buffer1,144);
 800636a:	2190      	movs	r1, #144	; 0x90
 800636c:	48d1      	ldr	r0, [pc, #836]	; (80066b4 <Display_Application+0x34c>)
 800636e:	f002 fe31 	bl	8008fd4 <Calculate_Block_CRC16>
 8006372:	4bd1      	ldr	r3, [pc, #836]	; (80066b8 <Display_Application+0x350>)
 8006374:	8018      	strh	r0, [r3, #0]

	/* Calculate CRC of 16803 bytes in UART_1_Image Buffer */
	if((CRC_Value.CRC_Value_char[1]== LPUART1_CRC[0]) && (CRC_Value.CRC_Value_char[0]== LPUART1_CRC[1]))
 8006376:	4bd1      	ldr	r3, [pc, #836]	; (80066bc <Display_Application+0x354>)
 8006378:	781a      	ldrb	r2, [r3, #0]
 800637a:	0403      	lsls	r3, r0, #16
 800637c:	0e1b      	lsrs	r3, r3, #24
 800637e:	4293      	cmp	r3, r2
 8006380:	d050      	beq.n	8006424 <Display_Application+0xbc>
	{
		flags.CRC_Verified_Flag = 1; 							/* Received CRC matched with calculated CRC */
	}
	else
	{
		flags.CRC_Verified_Flag = 0;  							/* Received CRC doesn't  with calculated CRC */
 8006382:	4acf      	ldr	r2, [pc, #828]	; (80066c0 <Display_Application+0x358>)
 8006384:	7811      	ldrb	r1, [r2, #0]
 8006386:	237f      	movs	r3, #127	; 0x7f
 8006388:	400b      	ands	r3, r1
 800638a:	7013      	strb	r3, [r2, #0]
	}
	if(flags.CRC_Verified_Flag == 1)
 800638c:	4bcc      	ldr	r3, [pc, #816]	; (80066c0 <Display_Application+0x358>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b25b      	sxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	db52      	blt.n	800643c <Display_Application+0xd4>
		flags.CRC_Verified_Flag = 0;

	}
	else if(flags.CRC_Verified_Flag == 0)
	{
		Initiate_Buzzer_Beep2();					//tune - low, high, low, high - 2
 8006396:	f001 ffaf 	bl	80082f8 <Initiate_Buzzer_Beep2>
		Execute_Buzzer_Beep2();
 800639a:	f001 ffb7 	bl	800830c <Execute_Buzzer_Beep2>
		Vibrator_Motor_H;
 800639e:	2180      	movs	r1, #128	; 0x80
 80063a0:	2201      	movs	r2, #1
 80063a2:	01c9      	lsls	r1, r1, #7
 80063a4:	48c7      	ldr	r0, [pc, #796]	; (80066c4 <Display_Application+0x35c>)
 80063a6:	f7fc ff04 	bl	80031b2 <HAL_GPIO_WritePin>
		flags.Start_vibrator_motor_flag = 1;
 80063aa:	4ac5      	ldr	r2, [pc, #788]	; (80066c0 <Display_Application+0x358>)
 80063ac:	7911      	ldrb	r1, [r2, #4]
 80063ae:	2380      	movs	r3, #128	; 0x80
 80063b0:	425b      	negs	r3, r3
 80063b2:	430b      	orrs	r3, r1
 80063b4:	7113      	strb	r3, [r2, #4]
		LPUART_1_Transmit_Buffer[0] = START_BYTE;
 80063b6:	4cc4      	ldr	r4, [pc, #784]	; (80066c8 <Display_Application+0x360>)
 80063b8:	23a0      	movs	r3, #160	; 0xa0
 80063ba:	7023      	strb	r3, [r4, #0]
		LPUART_1_Transmit_Buffer[1] = START_BYTE;
 80063bc:	7063      	strb	r3, [r4, #1]
		strcat(LPUART_1_Transmit_Buffer,MAC_buffer);
 80063be:	49c3      	ldr	r1, [pc, #780]	; (80066cc <Display_Application+0x364>)
 80063c0:	0020      	movs	r0, r4
 80063c2:	f004 feab 	bl	800b11c <strcat>
		LPUART_1_Transmit_Buffer[8] = 'E';
 80063c6:	2345      	movs	r3, #69	; 0x45
 80063c8:	7223      	strb	r3, [r4, #8]
		LPUART_1_Transmit_Buffer[9] = '0';
 80063ca:	3b15      	subs	r3, #21
 80063cc:	7263      	strb	r3, [r4, #9]
		LPUART_1_Transmit_Buffer[10] = '1';
 80063ce:	3301      	adds	r3, #1
 80063d0:	72a3      	strb	r3, [r4, #10]
		CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART_1_Transmit_Buffer,11);
 80063d2:	210b      	movs	r1, #11
 80063d4:	0020      	movs	r0, r4
 80063d6:	f002 fdfd 	bl	8008fd4 <Calculate_Block_CRC16>
 80063da:	4bb7      	ldr	r3, [pc, #732]	; (80066b8 <Display_Application+0x350>)
 80063dc:	8018      	strh	r0, [r3, #0]
		LPUART_1_Transmit_Buffer[11] = CRC_Value.CRC_Value_char[1];
 80063de:	0a03      	lsrs	r3, r0, #8
 80063e0:	72e3      	strb	r3, [r4, #11]
		LPUART_1_Transmit_Buffer[12] = CRC_Value.CRC_Value_char[0];
 80063e2:	7320      	strb	r0, [r4, #12]
		LPUART_1_Transmit_Buffer[13] = END_BYTE;
 80063e4:	230a      	movs	r3, #10
 80063e6:	7363      	strb	r3, [r4, #13]
		LPUART_1_Transmit_Buffer[14] = END_BYTE;
 80063e8:	73a3      	strb	r3, [r4, #14]
		LP_UART1_Transmit(LPUART_1_Transmit_Buffer,15);	/* Send response frame with display error */
 80063ea:	210f      	movs	r1, #15
 80063ec:	0020      	movs	r0, r4
 80063ee:	f003 f91d 	bl	800962c <LP_UART1_Transmit>
#if(D_DEBUG)
		uint8_t test_1[30]="E01:CRC Miss match Error\r\n";
		UART1_Transmit(test_1,26);
#endif
		HAL_Delay(2000);
 80063f2:	20fa      	movs	r0, #250	; 0xfa
 80063f4:	00c0      	lsls	r0, r0, #3
 80063f6:	f7fc f805 	bl	8002404 <HAL_Delay>
		memset(LPUART1_Image_Buffer1,0,144);
		memset(LPUART1_Footer,0,2);
		memset(LPUART1_CRC,0,2);
 80063fa:	2202      	movs	r2, #2
 80063fc:	2100      	movs	r1, #0
 80063fe:	48af      	ldr	r0, [pc, #700]	; (80066bc <Display_Application+0x354>)
 8006400:	f004 fe63 	bl	800b0ca <memset>
		memset(LPUART_1_Transmit_Buffer,0,sizeof(LPUART_1_Transmit_Buffer));
		memset(LPUART1_Image_Buffer1,0,sizeof(LPUART1_Image_Buffer1));
 8006404:	2290      	movs	r2, #144	; 0x90
 8006406:	2100      	movs	r1, #0
 8006408:	48aa      	ldr	r0, [pc, #680]	; (80066b4 <Display_Application+0x34c>)
 800640a:	f004 fe5e 	bl	800b0ca <memset>
		memset(LPUART1_Footer,0,2);
 800640e:	2202      	movs	r2, #2
 8006410:	2100      	movs	r1, #0
 8006412:	48af      	ldr	r0, [pc, #700]	; (80066d0 <Display_Application+0x368>)
 8006414:	f004 fe59 	bl	800b0ca <memset>
		memset(LPUART_1_Transmit_Buffer,0,15);
 8006418:	220f      	movs	r2, #15
 800641a:	2100      	movs	r1, #0
 800641c:	0020      	movs	r0, r4
 800641e:	f004 fe54 	bl	800b0ca <memset>
	}
}
 8006422:	bd70      	pop	{r4, r5, r6, pc}
	if((CRC_Value.CRC_Value_char[1]== LPUART1_CRC[0]) && (CRC_Value.CRC_Value_char[0]== LPUART1_CRC[1]))
 8006424:	4ba5      	ldr	r3, [pc, #660]	; (80066bc <Display_Application+0x354>)
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	b2c0      	uxtb	r0, r0
 800642a:	4283      	cmp	r3, r0
 800642c:	d1a9      	bne.n	8006382 <Display_Application+0x1a>
		flags.CRC_Verified_Flag = 1; 							/* Received CRC matched with calculated CRC */
 800642e:	4aa4      	ldr	r2, [pc, #656]	; (80066c0 <Display_Application+0x358>)
 8006430:	7811      	ldrb	r1, [r2, #0]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	425b      	negs	r3, r3
 8006436:	430b      	orrs	r3, r1
 8006438:	7013      	strb	r3, [r2, #0]
 800643a:	e7a7      	b.n	800638c <Display_Application+0x24>
		memcpy((LPUART1_Image_Data_Buffer + Frame_count),LPUART1_Image_Buffer1+4,140);
 800643c:	4ba5      	ldr	r3, [pc, #660]	; (80066d4 <Display_Application+0x36c>)
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	4ba5      	ldr	r3, [pc, #660]	; (80066d8 <Display_Application+0x370>)
 8006442:	18c0      	adds	r0, r0, r3
 8006444:	4da5      	ldr	r5, [pc, #660]	; (80066dc <Display_Application+0x374>)
 8006446:	228c      	movs	r2, #140	; 0x8c
 8006448:	0029      	movs	r1, r5
 800644a:	f004 fe35 	bl	800b0b8 <memcpy>
		LPUART_1_Transmit_Buffer[0] = START_BYTE;
 800644e:	4c9e      	ldr	r4, [pc, #632]	; (80066c8 <Display_Application+0x360>)
 8006450:	23a0      	movs	r3, #160	; 0xa0
 8006452:	7023      	strb	r3, [r4, #0]
		LPUART_1_Transmit_Buffer[1] = START_BYTE;
 8006454:	7063      	strb	r3, [r4, #1]
		strcat(&LPUART_1_Transmit_Buffer,MAC_buffer);
 8006456:	499d      	ldr	r1, [pc, #628]	; (80066cc <Display_Application+0x364>)
 8006458:	0020      	movs	r0, r4
 800645a:	f004 fe5f 	bl	800b11c <strcat>
		LPUART_1_Transmit_Buffer[8] = 'A';
 800645e:	2341      	movs	r3, #65	; 0x41
 8006460:	7223      	strb	r3, [r4, #8]
		LPUART_1_Transmit_Buffer[9] = 'C';
 8006462:	3302      	adds	r3, #2
 8006464:	7263      	strb	r3, [r4, #9]
		LPUART_1_Transmit_Buffer[10] = 'K';
 8006466:	3308      	adds	r3, #8
 8006468:	72a3      	strb	r3, [r4, #10]
		CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART_1_Transmit_Buffer,11);
 800646a:	210b      	movs	r1, #11
 800646c:	0020      	movs	r0, r4
 800646e:	f002 fdb1 	bl	8008fd4 <Calculate_Block_CRC16>
 8006472:	4b91      	ldr	r3, [pc, #580]	; (80066b8 <Display_Application+0x350>)
 8006474:	8018      	strh	r0, [r3, #0]
		LPUART_1_Transmit_Buffer[11] = CRC_Value.CRC_Value_char[1];
 8006476:	0a03      	lsrs	r3, r0, #8
 8006478:	72e3      	strb	r3, [r4, #11]
		LPUART_1_Transmit_Buffer[12] = CRC_Value.CRC_Value_char[0];
 800647a:	7320      	strb	r0, [r4, #12]
		LPUART_1_Transmit_Buffer[13] = END_BYTE;
 800647c:	230a      	movs	r3, #10
 800647e:	7363      	strb	r3, [r4, #13]
		LPUART_1_Transmit_Buffer[14] = END_BYTE;
 8006480:	73a3      	strb	r3, [r4, #14]
		LP_UART1_Transmit(LPUART_1_Transmit_Buffer,15);	/* Send response frame with display error */
 8006482:	210f      	movs	r1, #15
 8006484:	0020      	movs	r0, r4
 8006486:	f003 f8d1 	bl	800962c <LP_UART1_Transmit>
		memset(LPUART1_Image_Buffer1,0,144);
 800648a:	1f28      	subs	r0, r5, #4
 800648c:	2290      	movs	r2, #144	; 0x90
 800648e:	2100      	movs	r1, #0
 8006490:	f004 fe1b 	bl	800b0ca <memset>
		memset(LPUART1_Footer,0,2);
 8006494:	2202      	movs	r2, #2
 8006496:	2100      	movs	r1, #0
 8006498:	488d      	ldr	r0, [pc, #564]	; (80066d0 <Display_Application+0x368>)
 800649a:	f004 fe16 	bl	800b0ca <memset>
		memset(LPUART1_CRC,0,2);
 800649e:	2202      	movs	r2, #2
 80064a0:	2100      	movs	r1, #0
 80064a2:	4886      	ldr	r0, [pc, #536]	; (80066bc <Display_Application+0x354>)
 80064a4:	f004 fe11 	bl	800b0ca <memset>
		memset(LPUART_1_Transmit_Buffer,0,15);
 80064a8:	220f      	movs	r2, #15
 80064aa:	2100      	movs	r1, #0
 80064ac:	0020      	movs	r0, r4
 80064ae:	f004 fe0c 	bl	800b0ca <memset>
		if(flags.print_display == 1)
 80064b2:	4b83      	ldr	r3, [pc, #524]	; (80066c0 <Display_Application+0x358>)
 80064b4:	78db      	ldrb	r3, [r3, #3]
 80064b6:	07db      	lsls	r3, r3, #31
 80064b8:	d405      	bmi.n	80064c6 <Display_Application+0x15e>
		flags.CRC_Verified_Flag = 0;
 80064ba:	4a81      	ldr	r2, [pc, #516]	; (80066c0 <Display_Application+0x358>)
 80064bc:	7811      	ldrb	r1, [r2, #0]
 80064be:	237f      	movs	r3, #127	; 0x7f
 80064c0:	400b      	ands	r3, r1
 80064c2:	7013      	strb	r3, [r2, #0]
 80064c4:	e7ad      	b.n	8006422 <Display_Application+0xba>
			flags.Ckeck_communication_error = 0;
 80064c6:	4a7e      	ldr	r2, [pc, #504]	; (80066c0 <Display_Application+0x358>)
 80064c8:	78d3      	ldrb	r3, [r2, #3]
 80064ca:	2140      	movs	r1, #64	; 0x40
 80064cc:	438b      	bics	r3, r1
 80064ce:	70d3      	strb	r3, [r2, #3]
			if(EPD_Init()== SUCCESS)
 80064d0:	f7ff fb30 	bl	8005b34 <EPD_Init>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d07a      	beq.n	80065ce <Display_Application+0x266>
			if(flags.Busy_pin_error_flag == 1) 				    /* Check for display update error error E02*/
 80064d8:	4b79      	ldr	r3, [pc, #484]	; (80066c0 <Display_Application+0x358>)
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	079b      	lsls	r3, r3, #30
 80064de:	d57b      	bpl.n	80065d8 <Display_Application+0x270>
				LPUART_1_Transmit_Buffer[0] = START_BYTE;
 80064e0:	4c79      	ldr	r4, [pc, #484]	; (80066c8 <Display_Application+0x360>)
 80064e2:	23a0      	movs	r3, #160	; 0xa0
 80064e4:	7023      	strb	r3, [r4, #0]
				LPUART_1_Transmit_Buffer[1] = START_BYTE;
 80064e6:	7063      	strb	r3, [r4, #1]
				strcat(LPUART_1_Transmit_Buffer,MAC_buffer);
 80064e8:	4978      	ldr	r1, [pc, #480]	; (80066cc <Display_Application+0x364>)
 80064ea:	0020      	movs	r0, r4
 80064ec:	f004 fe16 	bl	800b11c <strcat>
				LPUART_1_Transmit_Buffer[8] = 'E';
 80064f0:	2345      	movs	r3, #69	; 0x45
 80064f2:	7223      	strb	r3, [r4, #8]
				LPUART_1_Transmit_Buffer[9] = '0';
 80064f4:	3b15      	subs	r3, #21
 80064f6:	7263      	strb	r3, [r4, #9]
				LPUART_1_Transmit_Buffer[10] = '2';
 80064f8:	3302      	adds	r3, #2
 80064fa:	72a3      	strb	r3, [r4, #10]
				CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART_1_Transmit_Buffer,11);
 80064fc:	210b      	movs	r1, #11
 80064fe:	0020      	movs	r0, r4
 8006500:	f002 fd68 	bl	8008fd4 <Calculate_Block_CRC16>
 8006504:	4b6c      	ldr	r3, [pc, #432]	; (80066b8 <Display_Application+0x350>)
 8006506:	8018      	strh	r0, [r3, #0]
				LPUART_1_Transmit_Buffer[11] = CRC_Value.CRC_Value_char[1];
 8006508:	0a03      	lsrs	r3, r0, #8
 800650a:	72e3      	strb	r3, [r4, #11]
				LPUART_1_Transmit_Buffer[12] = CRC_Value.CRC_Value_char[0];
 800650c:	7320      	strb	r0, [r4, #12]
				LPUART_1_Transmit_Buffer[13] = END_BYTE;
 800650e:	230a      	movs	r3, #10
 8006510:	7363      	strb	r3, [r4, #13]
				LPUART_1_Transmit_Buffer[14] = END_BYTE;
 8006512:	73a3      	strb	r3, [r4, #14]
				LP_UART1_Transmit(LPUART_1_Transmit_Buffer,15);	/* Send response frame with display error */
 8006514:	210f      	movs	r1, #15
 8006516:	0020      	movs	r0, r4
 8006518:	f003 f888 	bl	800962c <LP_UART1_Transmit>
				HAL_Delay(2000);
 800651c:	25fa      	movs	r5, #250	; 0xfa
 800651e:	00ed      	lsls	r5, r5, #3
 8006520:	0028      	movs	r0, r5
 8006522:	f7fb ff6f 	bl	8002404 <HAL_Delay>
				memset(LPUART1_Image_Buffer1,0,144);
 8006526:	2290      	movs	r2, #144	; 0x90
 8006528:	2100      	movs	r1, #0
 800652a:	4862      	ldr	r0, [pc, #392]	; (80066b4 <Display_Application+0x34c>)
 800652c:	f004 fdcd 	bl	800b0ca <memset>
				memset(LPUART1_Footer,0,2);
 8006530:	2202      	movs	r2, #2
 8006532:	2100      	movs	r1, #0
 8006534:	4866      	ldr	r0, [pc, #408]	; (80066d0 <Display_Application+0x368>)
 8006536:	f004 fdc8 	bl	800b0ca <memset>
				memset(LPUART1_CRC,0,2);
 800653a:	2202      	movs	r2, #2
 800653c:	2100      	movs	r1, #0
 800653e:	485f      	ldr	r0, [pc, #380]	; (80066bc <Display_Application+0x354>)
 8006540:	f004 fdc3 	bl	800b0ca <memset>
				memset(LPUART_1_Transmit_Buffer,0,15);
 8006544:	220f      	movs	r2, #15
 8006546:	2100      	movs	r1, #0
 8006548:	0020      	movs	r0, r4
 800654a:	f004 fdbe 	bl	800b0ca <memset>
				Initiate_Buzzer_Beep2();					//tune - low, high, low, high - 2
 800654e:	f001 fed3 	bl	80082f8 <Initiate_Buzzer_Beep2>
				Execute_Buzzer_Beep2();
 8006552:	f001 fedb 	bl	800830c <Execute_Buzzer_Beep2>
				Vibrator_Motor_H;
 8006556:	2180      	movs	r1, #128	; 0x80
 8006558:	2201      	movs	r2, #1
 800655a:	01c9      	lsls	r1, r1, #7
 800655c:	4859      	ldr	r0, [pc, #356]	; (80066c4 <Display_Application+0x35c>)
 800655e:	f7fc fe28 	bl	80031b2 <HAL_GPIO_WritePin>
				flags.Start_vibrator_motor_flag = 1;
 8006562:	4c57      	ldr	r4, [pc, #348]	; (80066c0 <Display_Application+0x358>)
 8006564:	7922      	ldrb	r2, [r4, #4]
 8006566:	2380      	movs	r3, #128	; 0x80
 8006568:	425b      	negs	r3, r3
 800656a:	4313      	orrs	r3, r2
 800656c:	7123      	strb	r3, [r4, #4]
				HAL_Delay(2000);
 800656e:	0028      	movs	r0, r5
 8006570:	f7fb ff48 	bl	8002404 <HAL_Delay>
				flags.Busy_pin_error_flag = 0;				/* Reset display update error flag */
 8006574:	7863      	ldrb	r3, [r4, #1]
 8006576:	2202      	movs	r2, #2
 8006578:	4393      	bics	r3, r2
 800657a:	7063      	strb	r3, [r4, #1]
				flags.Shutdown_MCU_mosfet = 1;
 800657c:	78e3      	ldrb	r3, [r4, #3]
 800657e:	2208      	movs	r2, #8
 8006580:	4313      	orrs	r3, r2
 8006582:	70e3      	strb	r3, [r4, #3]
			memset(LPUART_1_Transmit_Buffer,0,sizeof(LPUART_1_Transmit_Buffer));
 8006584:	220f      	movs	r2, #15
 8006586:	2100      	movs	r1, #0
 8006588:	484f      	ldr	r0, [pc, #316]	; (80066c8 <Display_Application+0x360>)
 800658a:	f004 fd9e 	bl	800b0ca <memset>
			memset(LPUART1_Image_Buffer1,0,sizeof(LPUART1_Image_Buffer1));
 800658e:	2290      	movs	r2, #144	; 0x90
 8006590:	2100      	movs	r1, #0
 8006592:	4848      	ldr	r0, [pc, #288]	; (80066b4 <Display_Application+0x34c>)
 8006594:	f004 fd99 	bl	800b0ca <memset>
			memset(LPUART1_Footer,0,2);
 8006598:	2202      	movs	r2, #2
 800659a:	2100      	movs	r1, #0
 800659c:	484c      	ldr	r0, [pc, #304]	; (80066d0 <Display_Application+0x368>)
 800659e:	f004 fd94 	bl	800b0ca <memset>
			flags.Communication_started_flag = 0;
 80065a2:	4a47      	ldr	r2, [pc, #284]	; (80066c0 <Display_Application+0x358>)
 80065a4:	78d3      	ldrb	r3, [r2, #3]
 80065a6:	2120      	movs	r1, #32
 80065a8:	438b      	bics	r3, r1
 80065aa:	70d3      	strb	r3, [r2, #3]
			Communication_timeout_counter = 0;
 80065ac:	4b4c      	ldr	r3, [pc, #304]	; (80066e0 <Display_Application+0x378>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
			if(Hours_count == 0 && Min_count == 0)
 80065b2:	4b4c      	ldr	r3, [pc, #304]	; (80066e4 <Display_Application+0x37c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d155      	bne.n	8006666 <Display_Application+0x2fe>
 80065ba:	4b4b      	ldr	r3, [pc, #300]	; (80066e8 <Display_Application+0x380>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d151      	bne.n	8006666 <Display_Application+0x2fe>
				flags.Shutdown_MCU_mosfet = 1;
 80065c2:	4a3f      	ldr	r2, [pc, #252]	; (80066c0 <Display_Application+0x358>)
 80065c4:	78d3      	ldrb	r3, [r2, #3]
 80065c6:	2108      	movs	r1, #8
 80065c8:	430b      	orrs	r3, r1
 80065ca:	70d3      	strb	r3, [r2, #3]
 80065cc:	e06b      	b.n	80066a6 <Display_Application+0x33e>
				EPD_Display_KW(LPUART1_Image_Data_Buffer,16800);
 80065ce:	4947      	ldr	r1, [pc, #284]	; (80066ec <Display_Application+0x384>)
 80065d0:	4841      	ldr	r0, [pc, #260]	; (80066d8 <Display_Application+0x370>)
 80065d2:	f7ff fc1d 	bl	8005e10 <EPD_Display_KW>
 80065d6:	e77f      	b.n	80064d8 <Display_Application+0x170>
				Initiate_Buzzer_Beep1();					//beep 2
 80065d8:	f001 fc82 	bl	8007ee0 <Initiate_Buzzer_Beep1>
				Execute_Buzzer_Beep1();
 80065dc:	f001 fc8c 	bl	8007ef8 <Execute_Buzzer_Beep1>
				Vibrator_Motor_H;
 80065e0:	2180      	movs	r1, #128	; 0x80
 80065e2:	2201      	movs	r2, #1
 80065e4:	01c9      	lsls	r1, r1, #7
 80065e6:	4837      	ldr	r0, [pc, #220]	; (80066c4 <Display_Application+0x35c>)
 80065e8:	f7fc fde3 	bl	80031b2 <HAL_GPIO_WritePin>
				flags.Start_vibrator_motor_flag = 1;
 80065ec:	4a34      	ldr	r2, [pc, #208]	; (80066c0 <Display_Application+0x358>)
 80065ee:	7911      	ldrb	r1, [r2, #4]
 80065f0:	2380      	movs	r3, #128	; 0x80
 80065f2:	425b      	negs	r3, r3
 80065f4:	430b      	orrs	r3, r1
 80065f6:	7113      	strb	r3, [r2, #4]
				LPUART_1_Transmit_Buffer[0] = START_BYTE;
 80065f8:	4c33      	ldr	r4, [pc, #204]	; (80066c8 <Display_Application+0x360>)
 80065fa:	23a0      	movs	r3, #160	; 0xa0
 80065fc:	7023      	strb	r3, [r4, #0]
				LPUART_1_Transmit_Buffer[1] = START_BYTE;
 80065fe:	7063      	strb	r3, [r4, #1]
				strcat(LPUART_1_Transmit_Buffer,MAC_buffer);
 8006600:	4932      	ldr	r1, [pc, #200]	; (80066cc <Display_Application+0x364>)
 8006602:	0020      	movs	r0, r4
 8006604:	f004 fd8a 	bl	800b11c <strcat>
				LPUART_1_Transmit_Buffer[8] = 'S';
 8006608:	2353      	movs	r3, #83	; 0x53
 800660a:	7223      	strb	r3, [r4, #8]
				LPUART_1_Transmit_Buffer[9] = 'U';
 800660c:	3302      	adds	r3, #2
 800660e:	7263      	strb	r3, [r4, #9]
				LPUART_1_Transmit_Buffer[10] = 'C';
 8006610:	3b12      	subs	r3, #18
 8006612:	72a3      	strb	r3, [r4, #10]
				CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART_1_Transmit_Buffer,11);
 8006614:	210b      	movs	r1, #11
 8006616:	0020      	movs	r0, r4
 8006618:	f002 fcdc 	bl	8008fd4 <Calculate_Block_CRC16>
 800661c:	4b26      	ldr	r3, [pc, #152]	; (80066b8 <Display_Application+0x350>)
 800661e:	8018      	strh	r0, [r3, #0]
				LPUART_1_Transmit_Buffer[11] = CRC_Value.CRC_Value_char[1];
 8006620:	0a03      	lsrs	r3, r0, #8
 8006622:	72e3      	strb	r3, [r4, #11]
				LPUART_1_Transmit_Buffer[12] = CRC_Value.CRC_Value_char[0];
 8006624:	7320      	strb	r0, [r4, #12]
				LPUART_1_Transmit_Buffer[13] = END_BYTE;
 8006626:	230a      	movs	r3, #10
 8006628:	7363      	strb	r3, [r4, #13]
				LPUART_1_Transmit_Buffer[14] = END_BYTE;
 800662a:	73a3      	strb	r3, [r4, #14]
				LP_UART1_Transmit(LPUART_1_Transmit_Buffer,15);	/* Send response frame with success message */
 800662c:	210f      	movs	r1, #15
 800662e:	0020      	movs	r0, r4
 8006630:	f002 fffc 	bl	800962c <LP_UART1_Transmit>
				memset(LPUART1_Image_Buffer1,0,144);
 8006634:	2290      	movs	r2, #144	; 0x90
 8006636:	2100      	movs	r1, #0
 8006638:	481e      	ldr	r0, [pc, #120]	; (80066b4 <Display_Application+0x34c>)
 800663a:	f004 fd46 	bl	800b0ca <memset>
				memset(LPUART1_Footer,0,2);
 800663e:	2202      	movs	r2, #2
 8006640:	2100      	movs	r1, #0
 8006642:	4823      	ldr	r0, [pc, #140]	; (80066d0 <Display_Application+0x368>)
 8006644:	f004 fd41 	bl	800b0ca <memset>
				memset(LPUART1_CRC,0,2);
 8006648:	2202      	movs	r2, #2
 800664a:	2100      	movs	r1, #0
 800664c:	481b      	ldr	r0, [pc, #108]	; (80066bc <Display_Application+0x354>)
 800664e:	f004 fd3c 	bl	800b0ca <memset>
				memset(LPUART_1_Transmit_Buffer,0,15);
 8006652:	220f      	movs	r2, #15
 8006654:	2100      	movs	r1, #0
 8006656:	0020      	movs	r0, r4
 8006658:	f004 fd37 	bl	800b0ca <memset>
				HAL_Delay(1000);
 800665c:	20fa      	movs	r0, #250	; 0xfa
 800665e:	0080      	lsls	r0, r0, #2
 8006660:	f7fb fed0 	bl	8002404 <HAL_Delay>
 8006664:	e78e      	b.n	8006584 <Display_Application+0x21c>
				Send_Command_State = 2;
 8006666:	4b22      	ldr	r3, [pc, #136]	; (80066f0 <Display_Application+0x388>)
 8006668:	2202      	movs	r2, #2
 800666a:	701a      	strb	r2, [r3, #0]
				flags.configure_ble_beacons = 1;
 800666c:	4c14      	ldr	r4, [pc, #80]	; (80066c0 <Display_Application+0x358>)
 800666e:	7923      	ldrb	r3, [r4, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	4313      	orrs	r3, r2
 8006674:	7123      	strb	r3, [r4, #4]
				flags.Ble_connected_flag = 0;
 8006676:	78a3      	ldrb	r3, [r4, #2]
 8006678:	2208      	movs	r2, #8
 800667a:	4393      	bics	r3, r2
 800667c:	70a3      	strb	r3, [r4, #2]
				flags.Communication_error_flag = 0;
 800667e:	78e3      	ldrb	r3, [r4, #3]
 8006680:	3208      	adds	r2, #8
 8006682:	4393      	bics	r3, r2
 8006684:	70e3      	strb	r3, [r4, #3]
				Ble_Mosfet_L;
 8006686:	25a0      	movs	r5, #160	; 0xa0
 8006688:	05ed      	lsls	r5, r5, #23
 800668a:	2200      	movs	r2, #0
 800668c:	2180      	movs	r1, #128	; 0x80
 800668e:	0028      	movs	r0, r5
 8006690:	f7fc fd8f 	bl	80031b2 <HAL_GPIO_WritePin>
				BLEControl_L;
 8006694:	2200      	movs	r2, #0
 8006696:	2101      	movs	r1, #1
 8006698:	0028      	movs	r0, r5
 800669a:	f7fc fd8a 	bl	80031b2 <HAL_GPIO_WritePin>
				flags.Start_Ble_beacons = 1;
 800669e:	7923      	ldrb	r3, [r4, #4]
 80066a0:	2202      	movs	r2, #2
 80066a2:	4313      	orrs	r3, r2
 80066a4:	7123      	strb	r3, [r4, #4]
			flags.print_display = 0;
 80066a6:	4a06      	ldr	r2, [pc, #24]	; (80066c0 <Display_Application+0x358>)
 80066a8:	78d3      	ldrb	r3, [r2, #3]
 80066aa:	2101      	movs	r1, #1
 80066ac:	438b      	bics	r3, r1
 80066ae:	70d3      	strb	r3, [r2, #3]
 80066b0:	e703      	b.n	80064ba <Display_Application+0x152>
 80066b2:	46c0      	nop			; (mov r8, r8)
 80066b4:	20004740 	.word	0x20004740
 80066b8:	200004f8 	.word	0x200004f8
 80066bc:	20004738 	.word	0x20004738
 80066c0:	2000032c 	.word	0x2000032c
 80066c4:	50000400 	.word	0x50000400
 80066c8:	20000450 	.word	0x20000450
 80066cc:	20000460 	.word	0x20000460
 80066d0:	200047dc 	.word	0x200047dc
 80066d4:	20004728 	.word	0x20004728
 80066d8:	20000500 	.word	0x20000500
 80066dc:	20004744 	.word	0x20004744
 80066e0:	20000248 	.word	0x20000248
 80066e4:	200001e4 	.word	0x200001e4
 80066e8:	20000008 	.word	0x20000008
 80066ec:	000041a0 	.word	0x000041a0
 80066f0:	2000000c 	.word	0x2000000c

080066f4 <Ckeck_communication_error>:
 * @author Bhakti Deshpande
 */
//***************************************************************************************************************************

void Ckeck_communication_error(void)
{
 80066f4:	b570      	push	{r4, r5, r6, lr}

	if(flags.Communication_error_flag == 1 && (Frame_number != Frame_number+1))//Previouse_frame_number || Frame_number == 0 ) )
 80066f6:	4b2a      	ldr	r3, [pc, #168]	; (80067a0 <Ckeck_communication_error+0xac>)
 80066f8:	78db      	ldrb	r3, [r3, #3]
 80066fa:	06db      	lsls	r3, r3, #27
 80066fc:	d400      	bmi.n	8006700 <Ckeck_communication_error+0xc>
		//MCU_Mosfet2_H;
		flags.Shutdown_MCU_mosfet = 1;
	}

	//	Previouse_frame_number = Frame_number;
}
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
		Vibrator_Motor_H;
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	2201      	movs	r2, #1
 8006704:	01c9      	lsls	r1, r1, #7
 8006706:	4827      	ldr	r0, [pc, #156]	; (80067a4 <Ckeck_communication_error+0xb0>)
 8006708:	f7fc fd53 	bl	80031b2 <HAL_GPIO_WritePin>
		flags.Start_vibrator_motor_flag = 1;
 800670c:	4d24      	ldr	r5, [pc, #144]	; (80067a0 <Ckeck_communication_error+0xac>)
 800670e:	792a      	ldrb	r2, [r5, #4]
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	425b      	negs	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	712b      	strb	r3, [r5, #4]
		Initiate_Buzzer_Beep2();					//tune - low, high, low, high - 2
 8006718:	f001 fdee 	bl	80082f8 <Initiate_Buzzer_Beep2>
		Execute_Buzzer_Beep2();
 800671c:	f001 fdf6 	bl	800830c <Execute_Buzzer_Beep2>
		LPUART_1_Transmit_Buffer[0] = START_BYTE;
 8006720:	4c21      	ldr	r4, [pc, #132]	; (80067a8 <Ckeck_communication_error+0xb4>)
 8006722:	23a0      	movs	r3, #160	; 0xa0
 8006724:	7023      	strb	r3, [r4, #0]
		LPUART_1_Transmit_Buffer[1] = START_BYTE;
 8006726:	7063      	strb	r3, [r4, #1]
		strcat(LPUART_1_Transmit_Buffer,MAC_buffer);
 8006728:	4920      	ldr	r1, [pc, #128]	; (80067ac <Ckeck_communication_error+0xb8>)
 800672a:	0020      	movs	r0, r4
 800672c:	f004 fcf6 	bl	800b11c <strcat>
		LPUART_1_Transmit_Buffer[8] = 'E';
 8006730:	2345      	movs	r3, #69	; 0x45
 8006732:	7223      	strb	r3, [r4, #8]
		LPUART_1_Transmit_Buffer[9] = '0';
 8006734:	3b15      	subs	r3, #21
 8006736:	7263      	strb	r3, [r4, #9]
		LPUART_1_Transmit_Buffer[10] = '3';
 8006738:	3303      	adds	r3, #3
 800673a:	72a3      	strb	r3, [r4, #10]
		CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART_1_Transmit_Buffer,11);
 800673c:	210b      	movs	r1, #11
 800673e:	0020      	movs	r0, r4
 8006740:	f002 fc48 	bl	8008fd4 <Calculate_Block_CRC16>
 8006744:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <Ckeck_communication_error+0xbc>)
 8006746:	8018      	strh	r0, [r3, #0]
		LPUART_1_Transmit_Buffer[11] = CRC_Value.CRC_Value_char[1];
 8006748:	0a03      	lsrs	r3, r0, #8
 800674a:	72e3      	strb	r3, [r4, #11]
		LPUART_1_Transmit_Buffer[12] = CRC_Value.CRC_Value_char[0];
 800674c:	7320      	strb	r0, [r4, #12]
		LPUART_1_Transmit_Buffer[13] = END_BYTE;
 800674e:	230a      	movs	r3, #10
 8006750:	7363      	strb	r3, [r4, #13]
		LPUART_1_Transmit_Buffer[14] = END_BYTE;
 8006752:	73a3      	strb	r3, [r4, #14]
		LP_UART1_Transmit(LPUART_1_Transmit_Buffer,15);	/* Send response frame with display error */
 8006754:	210f      	movs	r1, #15
 8006756:	0020      	movs	r0, r4
 8006758:	f002 ff68 	bl	800962c <LP_UART1_Transmit>
		memset(LPUART1_CRC,0,2);
 800675c:	2202      	movs	r2, #2
 800675e:	2100      	movs	r1, #0
 8006760:	4814      	ldr	r0, [pc, #80]	; (80067b4 <Ckeck_communication_error+0xc0>)
 8006762:	f004 fcb2 	bl	800b0ca <memset>
		memset(LPUART1_Image_Buffer1,0,sizeof(LPUART1_Image_Buffer1));
 8006766:	2290      	movs	r2, #144	; 0x90
 8006768:	2100      	movs	r1, #0
 800676a:	4813      	ldr	r0, [pc, #76]	; (80067b8 <Ckeck_communication_error+0xc4>)
 800676c:	f004 fcad 	bl	800b0ca <memset>
		memset(LPUART1_Footer,0,2);
 8006770:	2202      	movs	r2, #2
 8006772:	2100      	movs	r1, #0
 8006774:	4811      	ldr	r0, [pc, #68]	; (80067bc <Ckeck_communication_error+0xc8>)
 8006776:	f004 fca8 	bl	800b0ca <memset>
		memset(LPUART_1_Transmit_Buffer,0,15);
 800677a:	220f      	movs	r2, #15
 800677c:	2100      	movs	r1, #0
 800677e:	0020      	movs	r0, r4
 8006780:	f004 fca3 	bl	800b0ca <memset>
		flags.Ckeck_communication_error = 0;
 8006784:	78eb      	ldrb	r3, [r5, #3]
 8006786:	2240      	movs	r2, #64	; 0x40
 8006788:	4393      	bics	r3, r2
 800678a:	70eb      	strb	r3, [r5, #3]
		HAL_Delay(2000);
 800678c:	20fa      	movs	r0, #250	; 0xfa
 800678e:	00c0      	lsls	r0, r0, #3
 8006790:	f7fb fe38 	bl	8002404 <HAL_Delay>
		flags.Shutdown_MCU_mosfet = 1;
 8006794:	78eb      	ldrb	r3, [r5, #3]
 8006796:	2208      	movs	r2, #8
 8006798:	4313      	orrs	r3, r2
 800679a:	70eb      	strb	r3, [r5, #3]
}
 800679c:	e7af      	b.n	80066fe <Ckeck_communication_error+0xa>
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	2000032c 	.word	0x2000032c
 80067a4:	50000400 	.word	0x50000400
 80067a8:	20000450 	.word	0x20000450
 80067ac:	20000460 	.word	0x20000460
 80067b0:	200004f8 	.word	0x200004f8
 80067b4:	20004738 	.word	0x20004738
 80067b8:	20004740 	.word	0x20004740
 80067bc:	200047dc 	.word	0x200047dc

080067c0 <UART1_Display_Application>:



void UART1_Display_Application(void)
{
 80067c0:	b510      	push	{r4, lr}

	CRC_Value.CRC_Value_int=Calculate_Block_CRC16(LPUART1_Image_Data_Buffer,16803);
 80067c2:	4970      	ldr	r1, [pc, #448]	; (8006984 <UART1_Display_Application+0x1c4>)
 80067c4:	4870      	ldr	r0, [pc, #448]	; (8006988 <UART1_Display_Application+0x1c8>)
 80067c6:	f002 fc05 	bl	8008fd4 <Calculate_Block_CRC16>
 80067ca:	4b70      	ldr	r3, [pc, #448]	; (800698c <UART1_Display_Application+0x1cc>)
 80067cc:	8018      	strh	r0, [r3, #0]
	/* Calculate CRC of 16803 bytes in UART_1_Image Buffer */
	if((CRC_Value.CRC_Value_char[1]== UART1_CRC[0]) && (CRC_Value.CRC_Value_char[0]== UART1_CRC[1]))
 80067ce:	4b70      	ldr	r3, [pc, #448]	; (8006990 <UART1_Display_Application+0x1d0>)
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	0403      	lsls	r3, r0, #16
 80067d4:	0e1b      	lsrs	r3, r3, #24
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d02e      	beq.n	8006838 <UART1_Display_Application+0x78>
	{
		flags.CRC_Verified_Flag = 1; 							/* Received CRC matched with calculated CRC */
	}
	else
	{
		flags.CRC_Verified_Flag = 0;  							/* Received CRC doesn't  with calculated CRC */
 80067da:	4a6e      	ldr	r2, [pc, #440]	; (8006994 <UART1_Display_Application+0x1d4>)
 80067dc:	7811      	ldrb	r1, [r2, #0]
 80067de:	237f      	movs	r3, #127	; 0x7f
 80067e0:	400b      	ands	r3, r1
 80067e2:	7013      	strb	r3, [r2, #0]
	}

	if(flags.CRC_Verified_Flag == 1)
 80067e4:	4b6b      	ldr	r3, [pc, #428]	; (8006994 <UART1_Display_Application+0x1d4>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	b25b      	sxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	db30      	blt.n	8006850 <UART1_Display_Application+0x90>
					//flags.print_display = 0;
		}
	}
	else
	{
		UART_1_Transmit_Buffer[0] = START_BYTE;
 80067ee:	4c6a      	ldr	r4, [pc, #424]	; (8006998 <UART1_Display_Application+0x1d8>)
 80067f0:	23a0      	movs	r3, #160	; 0xa0
 80067f2:	7023      	strb	r3, [r4, #0]
		UART_1_Transmit_Buffer[1] = START_BYTE;
 80067f4:	7063      	strb	r3, [r4, #1]
		UART_1_Transmit_Buffer[2] = 'E';
 80067f6:	3b5b      	subs	r3, #91	; 0x5b
 80067f8:	70a3      	strb	r3, [r4, #2]
		UART_1_Transmit_Buffer[3] = '0';
 80067fa:	3b15      	subs	r3, #21
 80067fc:	70e3      	strb	r3, [r4, #3]
		UART_1_Transmit_Buffer[4] = '1';
 80067fe:	3301      	adds	r3, #1
 8006800:	7123      	strb	r3, [r4, #4]
		CRC_Value.CRC_Value_int=Calculate_Block_CRC16(UART_1_Transmit_Buffer,3);
 8006802:	2103      	movs	r1, #3
 8006804:	0020      	movs	r0, r4
 8006806:	f002 fbe5 	bl	8008fd4 <Calculate_Block_CRC16>
 800680a:	4b60      	ldr	r3, [pc, #384]	; (800698c <UART1_Display_Application+0x1cc>)
 800680c:	8018      	strh	r0, [r3, #0]
		UART_1_Transmit_Buffer[5] = CRC_Value.CRC_Value_char[1];
 800680e:	0a03      	lsrs	r3, r0, #8
 8006810:	7163      	strb	r3, [r4, #5]
		UART_1_Transmit_Buffer[6] = CRC_Value.CRC_Value_char[0];
 8006812:	71a0      	strb	r0, [r4, #6]
		UART_1_Transmit_Buffer[7] = END_BYTE;
 8006814:	230a      	movs	r3, #10
 8006816:	71e3      	strb	r3, [r4, #7]
		UART_1_Transmit_Buffer[8] = END_BYTE;
 8006818:	7223      	strb	r3, [r4, #8]

		UART1_Transmit(UART_1_Transmit_Buffer,9);	/* Send response frame with CRC miss match error */
 800681a:	2109      	movs	r1, #9
 800681c:	0020      	movs	r0, r4
 800681e:	f002 fef3 	bl	8009608 <UART1_Transmit>
		memset(UART_1_Transmit_Buffer,0,sizeof(UART_1_Transmit_Buffer));
 8006822:	2232      	movs	r2, #50	; 0x32
 8006824:	2100      	movs	r1, #0
 8006826:	0020      	movs	r0, r4
 8006828:	f004 fc4f 	bl	800b0ca <memset>
		//	memset(UART_1_Image_Buffer,0,sizeof(UART_1_Image_Buffer));
		memset(UART1_Footer,0,2);
 800682c:	2202      	movs	r2, #2
 800682e:	2100      	movs	r1, #0
 8006830:	485a      	ldr	r0, [pc, #360]	; (800699c <UART1_Display_Application+0x1dc>)
 8006832:	f004 fc4a 	bl	800b0ca <memset>

	}

}
 8006836:	bd10      	pop	{r4, pc}
	if((CRC_Value.CRC_Value_char[1]== UART1_CRC[0]) && (CRC_Value.CRC_Value_char[0]== UART1_CRC[1]))
 8006838:	4b55      	ldr	r3, [pc, #340]	; (8006990 <UART1_Display_Application+0x1d0>)
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	b2c0      	uxtb	r0, r0
 800683e:	4283      	cmp	r3, r0
 8006840:	d1cb      	bne.n	80067da <UART1_Display_Application+0x1a>
		flags.CRC_Verified_Flag = 1; 							/* Received CRC matched with calculated CRC */
 8006842:	4a54      	ldr	r2, [pc, #336]	; (8006994 <UART1_Display_Application+0x1d4>)
 8006844:	7811      	ldrb	r1, [r2, #0]
 8006846:	2380      	movs	r3, #128	; 0x80
 8006848:	425b      	negs	r3, r3
 800684a:	430b      	orrs	r3, r1
 800684c:	7013      	strb	r3, [r2, #0]
 800684e:	e7c9      	b.n	80067e4 <UART1_Display_Application+0x24>
		EPD_Init();          							    /* Initialize display */
 8006850:	f7ff f970 	bl	8005b34 <EPD_Init>
		HAL_Delay(100);
 8006854:	2064      	movs	r0, #100	; 0x64
 8006856:	f7fb fdd5 	bl	8002404 <HAL_Delay>
		EPD_Display_KW(LPUART1_Image_Data_Buffer,16800);
 800685a:	4951      	ldr	r1, [pc, #324]	; (80069a0 <UART1_Display_Application+0x1e0>)
 800685c:	484a      	ldr	r0, [pc, #296]	; (8006988 <UART1_Display_Application+0x1c8>)
 800685e:	f7ff fad7 	bl	8005e10 <EPD_Display_KW>
		if(flags.Busy_pin_error_flag == 1) 				    /* Check for display update error error E02*/
 8006862:	4b4c      	ldr	r3, [pc, #304]	; (8006994 <UART1_Display_Application+0x1d4>)
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	079b      	lsls	r3, r3, #30
 8006868:	d51f      	bpl.n	80068aa <UART1_Display_Application+0xea>
			UART_1_Transmit_Buffer[0] = START_BYTE;
 800686a:	4c4b      	ldr	r4, [pc, #300]	; (8006998 <UART1_Display_Application+0x1d8>)
 800686c:	23a0      	movs	r3, #160	; 0xa0
 800686e:	7023      	strb	r3, [r4, #0]
			UART_1_Transmit_Buffer[1] = START_BYTE;
 8006870:	7063      	strb	r3, [r4, #1]
			UART_1_Transmit_Buffer[2] = 'E';
 8006872:	3b5b      	subs	r3, #91	; 0x5b
 8006874:	70a3      	strb	r3, [r4, #2]
			UART_1_Transmit_Buffer[3] = '0';
 8006876:	3b15      	subs	r3, #21
 8006878:	70e3      	strb	r3, [r4, #3]
			UART_1_Transmit_Buffer[4] = '2';
 800687a:	3302      	adds	r3, #2
 800687c:	7123      	strb	r3, [r4, #4]
			CRC_Value.CRC_Value_int=Calculate_Block_CRC16(UART_1_Transmit_Buffer,5);
 800687e:	2105      	movs	r1, #5
 8006880:	0020      	movs	r0, r4
 8006882:	f002 fba7 	bl	8008fd4 <Calculate_Block_CRC16>
 8006886:	4b41      	ldr	r3, [pc, #260]	; (800698c <UART1_Display_Application+0x1cc>)
 8006888:	8018      	strh	r0, [r3, #0]
			UART_1_Transmit_Buffer[5] = CRC_Value.CRC_Value_char[1];
 800688a:	0a03      	lsrs	r3, r0, #8
 800688c:	7163      	strb	r3, [r4, #5]
			UART_1_Transmit_Buffer[6] = CRC_Value.CRC_Value_char[0];
 800688e:	71a0      	strb	r0, [r4, #6]
			UART_1_Transmit_Buffer[7] = END_BYTE;
 8006890:	230a      	movs	r3, #10
 8006892:	71e3      	strb	r3, [r4, #7]
			UART_1_Transmit_Buffer[8] = END_BYTE;
 8006894:	7223      	strb	r3, [r4, #8]
			UART1_Transmit(UART_1_Transmit_Buffer,9);	/* Send response frame with display error */
 8006896:	2109      	movs	r1, #9
 8006898:	0020      	movs	r0, r4
 800689a:	f002 feb5 	bl	8009608 <UART1_Transmit>
			flags.Busy_pin_error_flag = 0;				/* Reset display update error flag */
 800689e:	4a3d      	ldr	r2, [pc, #244]	; (8006994 <UART1_Display_Application+0x1d4>)
 80068a0:	7853      	ldrb	r3, [r2, #1]
 80068a2:	2102      	movs	r1, #2
 80068a4:	438b      	bics	r3, r1
 80068a6:	7053      	strb	r3, [r2, #1]
 80068a8:	e7c5      	b.n	8006836 <UART1_Display_Application+0x76>
			flags.Image_USB_Received_Flag = 0;
 80068aa:	4c3a      	ldr	r4, [pc, #232]	; (8006994 <UART1_Display_Application+0x1d4>)
 80068ac:	7823      	ldrb	r3, [r4, #0]
 80068ae:	2202      	movs	r2, #2
 80068b0:	4393      	bics	r3, r2
 80068b2:	7023      	strb	r3, [r4, #0]
			Initiate_Buzzer_Beep1();					//beep 2
 80068b4:	f001 fb14 	bl	8007ee0 <Initiate_Buzzer_Beep1>
			Execute_Buzzer_Beep1();
 80068b8:	f001 fb1e 	bl	8007ef8 <Execute_Buzzer_Beep1>
			Vibrator_Motor_H;
 80068bc:	2180      	movs	r1, #128	; 0x80
 80068be:	2201      	movs	r2, #1
 80068c0:	01c9      	lsls	r1, r1, #7
 80068c2:	4838      	ldr	r0, [pc, #224]	; (80069a4 <UART1_Display_Application+0x1e4>)
 80068c4:	f7fc fc75 	bl	80031b2 <HAL_GPIO_WritePin>
			flags.Start_vibrator_motor_flag = 1;
 80068c8:	7922      	ldrb	r2, [r4, #4]
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	425b      	negs	r3, r3
 80068ce:	4313      	orrs	r3, r2
 80068d0:	7123      	strb	r3, [r4, #4]
			UART_1_Transmit_Buffer[0] = START_BYTE;
 80068d2:	4c31      	ldr	r4, [pc, #196]	; (8006998 <UART1_Display_Application+0x1d8>)
 80068d4:	23a0      	movs	r3, #160	; 0xa0
 80068d6:	7023      	strb	r3, [r4, #0]
			UART_1_Transmit_Buffer[1] = START_BYTE;
 80068d8:	7063      	strb	r3, [r4, #1]
			UART_1_Transmit_Buffer[2] = 'A';
 80068da:	3b5f      	subs	r3, #95	; 0x5f
 80068dc:	70a3      	strb	r3, [r4, #2]
			UART_1_Transmit_Buffer[3] = 'C';
 80068de:	3302      	adds	r3, #2
 80068e0:	70e3      	strb	r3, [r4, #3]
			UART_1_Transmit_Buffer[4] = 'K';
 80068e2:	3308      	adds	r3, #8
 80068e4:	7123      	strb	r3, [r4, #4]
			CRC_Value.CRC_Value_int = Calculate_Block_CRC16(UART_1_Transmit_Buffer,5);
 80068e6:	2105      	movs	r1, #5
 80068e8:	0020      	movs	r0, r4
 80068ea:	f002 fb73 	bl	8008fd4 <Calculate_Block_CRC16>
 80068ee:	4b27      	ldr	r3, [pc, #156]	; (800698c <UART1_Display_Application+0x1cc>)
 80068f0:	8018      	strh	r0, [r3, #0]
			UART_1_Transmit_Buffer[5] = CRC_Value.CRC_Value_char[1];
 80068f2:	0a03      	lsrs	r3, r0, #8
 80068f4:	7163      	strb	r3, [r4, #5]
			UART_1_Transmit_Buffer[6] = CRC_Value.CRC_Value_char[0];
 80068f6:	71a0      	strb	r0, [r4, #6]
			UART_1_Transmit_Buffer[7] = END_BYTE;
 80068f8:	230a      	movs	r3, #10
 80068fa:	71e3      	strb	r3, [r4, #7]
			UART_1_Transmit_Buffer[8] = END_BYTE;
 80068fc:	7223      	strb	r3, [r4, #8]
			UART1_Transmit(UART_1_Transmit_Buffer,9);	/* Send response frame with Acknowledgment */
 80068fe:	2109      	movs	r1, #9
 8006900:	0020      	movs	r0, r4
 8006902:	f002 fe81 	bl	8009608 <UART1_Transmit>
			j=3;
 8006906:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <UART1_Display_Application+0x1e8>)
 8006908:	2203      	movs	r2, #3
 800690a:	601a      	str	r2, [r3, #0]
			for(i=0;i<16800;i++)
 800690c:	4b27      	ldr	r3, [pc, #156]	; (80069ac <UART1_Display_Application+0x1ec>)
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e006      	b.n	8006922 <UART1_Display_Application+0x162>
				LPUART1_Image_Data_Buffer[i] = 	LPUART1_Image_Data_Buffer[i+j];
 8006914:	1cd9      	adds	r1, r3, #3
 8006916:	4a1c      	ldr	r2, [pc, #112]	; (8006988 <UART1_Display_Application+0x1c8>)
 8006918:	5c51      	ldrb	r1, [r2, r1]
 800691a:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<16800;i++)
 800691c:	3301      	adds	r3, #1
 800691e:	4a23      	ldr	r2, [pc, #140]	; (80069ac <UART1_Display_Application+0x1ec>)
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	4b22      	ldr	r3, [pc, #136]	; (80069ac <UART1_Display_Application+0x1ec>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a22      	ldr	r2, [pc, #136]	; (80069b0 <UART1_Display_Application+0x1f0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d9f3      	bls.n	8006914 <UART1_Display_Application+0x154>
			memset(UART_1_Transmit_Buffer,0,sizeof(UART_1_Transmit_Buffer));
 800692c:	2232      	movs	r2, #50	; 0x32
 800692e:	2100      	movs	r1, #0
 8006930:	4819      	ldr	r0, [pc, #100]	; (8006998 <UART1_Display_Application+0x1d8>)
 8006932:	f004 fbca 	bl	800b0ca <memset>
			memset(UART1_Footer,0,2);
 8006936:	2202      	movs	r2, #2
 8006938:	2100      	movs	r1, #0
 800693a:	4818      	ldr	r0, [pc, #96]	; (800699c <UART1_Display_Application+0x1dc>)
 800693c:	f004 fbc5 	bl	800b0ca <memset>
			if(Hours_count == 0 && Min_count == 0)
 8006940:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <UART1_Display_Application+0x1f4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d109      	bne.n	800695c <UART1_Display_Application+0x19c>
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <UART1_Display_Application+0x1f8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <UART1_Display_Application+0x19c>
						flags.Shutdown_MCU_mosfet = 1;
 8006950:	4a10      	ldr	r2, [pc, #64]	; (8006994 <UART1_Display_Application+0x1d4>)
 8006952:	78d3      	ldrb	r3, [r2, #3]
 8006954:	2108      	movs	r1, #8
 8006956:	430b      	orrs	r3, r1
 8006958:	70d3      	strb	r3, [r2, #3]
 800695a:	e76c      	b.n	8006836 <UART1_Display_Application+0x76>
						Send_Command_State = 2;
 800695c:	4b17      	ldr	r3, [pc, #92]	; (80069bc <UART1_Display_Application+0x1fc>)
 800695e:	2202      	movs	r2, #2
 8006960:	701a      	strb	r2, [r3, #0]
						flags.configure_ble_beacons = 1;
 8006962:	4a0c      	ldr	r2, [pc, #48]	; (8006994 <UART1_Display_Application+0x1d4>)
 8006964:	7913      	ldrb	r3, [r2, #4]
 8006966:	2101      	movs	r1, #1
 8006968:	430b      	orrs	r3, r1
						flags.Ble_connected_flag = 0;
 800696a:	7891      	ldrb	r1, [r2, #2]
 800696c:	2008      	movs	r0, #8
 800696e:	4381      	bics	r1, r0
 8006970:	7091      	strb	r1, [r2, #2]
						flags.Communication_error_flag = 0;
 8006972:	78d1      	ldrb	r1, [r2, #3]
 8006974:	3008      	adds	r0, #8
 8006976:	4381      	bics	r1, r0
 8006978:	70d1      	strb	r1, [r2, #3]
						flags.Start_Ble_beacons = 1;
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2102      	movs	r1, #2
 800697e:	430b      	orrs	r3, r1
 8006980:	7113      	strb	r3, [r2, #4]
 8006982:	e758      	b.n	8006836 <UART1_Display_Application+0x76>
 8006984:	000041a3 	.word	0x000041a3
 8006988:	20000500 	.word	0x20000500
 800698c:	200004f8 	.word	0x200004f8
 8006990:	200047d4 	.word	0x200047d4
 8006994:	2000032c 	.word	0x2000032c
 8006998:	200002f8 	.word	0x200002f8
 800699c:	20004734 	.word	0x20004734
 80069a0:	000041a0 	.word	0x000041a0
 80069a4:	50000400 	.word	0x50000400
 80069a8:	200003b4 	.word	0x200003b4
 80069ac:	200003c0 	.word	0x200003c0
 80069b0:	0000419f 	.word	0x0000419f
 80069b4:	200001e4 	.word	0x200001e4
 80069b8:	20000008 	.word	0x20000008
 80069bc:	2000000c 	.word	0x2000000c

080069c0 <Check_Response_1>:
 * @brief  Check device connection and disconnection response only
 * @param  None
 * @retval None
 */
void Check_Response_1( uint8_t* Rx_strng, int size)
{
 80069c0:	b510      	push	{r4, lr}
 80069c2:	0001      	movs	r1, r0
	if((strstr(LPUART1_Receive_Buffer,Rx_strng)) != 0)
 80069c4:	4808      	ldr	r0, [pc, #32]	; (80069e8 <Check_Response_1+0x28>)
 80069c6:	f004 fbbe 	bl	800b146 <strstr>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d005      	beq.n	80069da <Check_Response_1+0x1a>
	{
		flags.Response_OK_flag = 1;
 80069ce:	4a07      	ldr	r2, [pc, #28]	; (80069ec <Check_Response_1+0x2c>)
 80069d0:	7853      	ldrb	r3, [r2, #1]
 80069d2:	2120      	movs	r1, #32
 80069d4:	430b      	orrs	r3, r1
 80069d6:	7053      	strb	r3, [r2, #1]
	else
	{
		flags.Response_OK_flag = 0;
	}

}
 80069d8:	bd10      	pop	{r4, pc}
		flags.Response_OK_flag = 0;
 80069da:	4a04      	ldr	r2, [pc, #16]	; (80069ec <Check_Response_1+0x2c>)
 80069dc:	7853      	ldrb	r3, [r2, #1]
 80069de:	2120      	movs	r1, #32
 80069e0:	438b      	bics	r3, r1
 80069e2:	7053      	strb	r3, [r2, #1]
}
 80069e4:	e7f8      	b.n	80069d8 <Check_Response_1+0x18>
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	20000260 	.word	0x20000260
 80069ec:	2000032c 	.word	0x2000032c

080069f0 <Check_Get_Response>:
 * @brief  Check bluetooth command's response
 * @param  None
 * @retval None
 */
void Check_Get_Response(uint8_t* Rx_strng, unsigned int size)
{
 80069f0:	b510      	push	{r4, lr}
 80069f2:	0001      	movs	r1, r0
#if(D_DEBUG)

	UART1_Transmit(LPUART1_Receive_Buffer, 10);
#endif

	if((strstr(LPUART1_Receive_Buffer,Rx_strng)) != 0)
 80069f4:	4808      	ldr	r0, [pc, #32]	; (8006a18 <Check_Get_Response+0x28>)
 80069f6:	f004 fba6 	bl	800b146 <strstr>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d005      	beq.n	8006a0a <Check_Get_Response+0x1a>
	{
		flags.Response_OK_flag = 1;
 80069fe:	4a07      	ldr	r2, [pc, #28]	; (8006a1c <Check_Get_Response+0x2c>)
 8006a00:	7853      	ldrb	r3, [r2, #1]
 8006a02:	2120      	movs	r1, #32
 8006a04:	430b      	orrs	r3, r1
 8006a06:	7053      	strb	r3, [r2, #1]
		UART1_Transmit(Response_string_2,19);
#endif

	}

}
 8006a08:	bd10      	pop	{r4, pc}
		flags.Response_OK_flag = 0;
 8006a0a:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <Check_Get_Response+0x2c>)
 8006a0c:	7853      	ldrb	r3, [r2, #1]
 8006a0e:	2120      	movs	r1, #32
 8006a10:	438b      	bics	r3, r1
 8006a12:	7053      	strb	r3, [r2, #1]
}
 8006a14:	e7f8      	b.n	8006a08 <Check_Get_Response+0x18>
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	20000260 	.word	0x20000260
 8006a1c:	2000032c 	.word	0x2000032c

08006a20 <Send_BLE_Commands>:
 * @brief  send bluetooth initialization commands
 * @param  None
 * @retval None
 */
void Send_BLE_Commands(void)
{
 8006a20:	b570      	push	{r4, r5, r6, lr}
	switch(Send_Command_State)
 8006a22:	4bd5      	ldr	r3, [pc, #852]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	2a11      	cmp	r2, #17
 8006a28:	d816      	bhi.n	8006a58 <Send_BLE_Commands+0x38>
 8006a2a:	0093      	lsls	r3, r2, #2
 8006a2c:	49d3      	ldr	r1, [pc, #844]	; (8006d7c <Send_BLE_Commands+0x35c>)
 8006a2e:	58cb      	ldr	r3, [r1, r3]
 8006a30:	469f      	mov	pc, r3
	{
	case 0:
		check_ble_command_response = 1;
 8006a32:	4bd3      	ldr	r3, [pc, #844]	; (8006d80 <Send_BLE_Commands+0x360>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_0,5);
 8006a38:	4ccf      	ldr	r4, [pc, #828]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006a3a:	1d20      	adds	r0, r4, #4
 8006a3c:	2105      	movs	r1, #5
 8006a3e:	f002 fdf5 	bl	800962c <LP_UART1_Transmit>
#if(D_DEBUG)

		UART1_Transmit(BM71_Command_0,5);
#endif

		flags.Start_Command_Response_time = 1;
 8006a42:	4ad0      	ldr	r2, [pc, #832]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006a44:	7813      	ldrb	r3, [r2, #0]
 8006a46:	2110      	movs	r1, #16
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8006a4c:	4bce      	ldr	r3, [pc, #824]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 8006a52:	7823      	ldrb	r3, [r4, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	7023      	strb	r3, [r4, #0]
				Send_Command_State = 0;
			}
		}
		break;
	}
}
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
		if(flags.Data_Received_Flag == 1)
 8006a5a:	4bca      	ldr	r3, [pc, #808]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	07d9      	lsls	r1, r3, #31
 8006a60:	d524      	bpl.n	8006aac <Send_BLE_Commands+0x8c>
			flags.Data_Received_Flag = 0;
 8006a62:	49c8      	ldr	r1, [pc, #800]	; (8006d84 <Send_BLE_Commands+0x364>)
			flags.Start_Command_Response_time = 0;
 8006a64:	2001      	movs	r0, #1
 8006a66:	4383      	bics	r3, r0
 8006a68:	300f      	adds	r0, #15
 8006a6a:	4383      	bics	r3, r0
 8006a6c:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8006a6e:	4bc6      	ldr	r3, [pc, #792]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006a70:	2000      	movs	r0, #0
 8006a72:	6018      	str	r0, [r3, #0]
			if(flags.Response_OK_flag == 1)
 8006a74:	784b      	ldrb	r3, [r1, #1]
 8006a76:	069b      	lsls	r3, r3, #26
 8006a78:	d506      	bpl.n	8006a88 <Send_BLE_Commands+0x68>
				Send_Command_State++;
 8006a7a:	3201      	adds	r2, #1
 8006a7c:	4bbe      	ldr	r3, [pc, #760]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006a7e:	701a      	strb	r2, [r3, #0]
				Send_cmd_Error_Cnt = 0;
 8006a80:	4bc2      	ldr	r3, [pc, #776]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	e7e7      	b.n	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State--;
 8006a88:	3a01      	subs	r2, #1
 8006a8a:	4bbb      	ldr	r3, [pc, #748]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006a8c:	701a      	strb	r2, [r3, #0]
				Send_cmd_Error_Cnt++;
 8006a8e:	4abf      	ldr	r2, [pc, #764]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006a90:	6813      	ldr	r3, [r2, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 5)
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	d9de      	bls.n	8006a58 <Send_BLE_Commands+0x38>
					flags.No_responce_Shutdown_MCU_mosfet = 1;
 8006a9a:	4aba      	ldr	r2, [pc, #744]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006a9c:	78d3      	ldrb	r3, [r2, #3]
 8006a9e:	2102      	movs	r1, #2
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	70d3      	strb	r3, [r2, #3]
					Send_Command_State = 0;
 8006aa4:	4bb4      	ldr	r3, [pc, #720]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	e7d5      	b.n	8006a58 <Send_BLE_Commands+0x38>
		else if(flags.Command_Response_timeout == 1)
 8006aac:	065b      	lsls	r3, r3, #25
 8006aae:	d5d3      	bpl.n	8006a58 <Send_BLE_Commands+0x38>
			flags.Command_Response_timeout = 0;
 8006ab0:	49b4      	ldr	r1, [pc, #720]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006ab2:	780b      	ldrb	r3, [r1, #0]
 8006ab4:	2040      	movs	r0, #64	; 0x40
 8006ab6:	4383      	bics	r3, r0
 8006ab8:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8006aba:	4bb3      	ldr	r3, [pc, #716]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006abc:	2100      	movs	r1, #0
 8006abe:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8006ac0:	3a01      	subs	r2, #1
 8006ac2:	4bad      	ldr	r3, [pc, #692]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006ac4:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 8006ac6:	4ab1      	ldr	r2, [pc, #708]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006ac8:	6813      	ldr	r3, [r2, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 5)
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d9c2      	bls.n	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State = 0;
 8006ad2:	4ba9      	ldr	r3, [pc, #676]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	701a      	strb	r2, [r3, #0]
				flags.No_responce_Shutdown_MCU_mosfet = 1;
 8006ad8:	4aaa      	ldr	r2, [pc, #680]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006ada:	78d3      	ldrb	r3, [r2, #3]
 8006adc:	2102      	movs	r1, #2
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	70d3      	strb	r3, [r2, #3]
 8006ae2:	e7b9      	b.n	8006a58 <Send_BLE_Commands+0x38>
		check_ble_command_response = 2;
 8006ae4:	4ba6      	ldr	r3, [pc, #664]	; (8006d80 <Send_BLE_Commands+0x360>)
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	701a      	strb	r2, [r3, #0]
		memset(LPUART1_Receive_Buffer,0,sizeof(LPUART1_Receive_Buffer));
 8006aea:	328a      	adds	r2, #138	; 0x8a
 8006aec:	2100      	movs	r1, #0
 8006aee:	48a8      	ldr	r0, [pc, #672]	; (8006d90 <Send_BLE_Commands+0x370>)
 8006af0:	f004 faeb 	bl	800b0ca <memset>
		LP_UART1_Transmit(BM71_Command_1,3);
 8006af4:	4ca0      	ldr	r4, [pc, #640]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006af6:	0020      	movs	r0, r4
 8006af8:	300c      	adds	r0, #12
 8006afa:	2103      	movs	r1, #3
 8006afc:	f002 fd96 	bl	800962c <LP_UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 8006b00:	4aa0      	ldr	r2, [pc, #640]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006b02:	7813      	ldrb	r3, [r2, #0]
 8006b04:	2110      	movs	r1, #16
 8006b06:	430b      	orrs	r3, r1
 8006b08:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8006b0a:	4b9f      	ldr	r3, [pc, #636]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 8006b10:	7823      	ldrb	r3, [r4, #0]
 8006b12:	3301      	adds	r3, #1
 8006b14:	7023      	strb	r3, [r4, #0]
		break;
 8006b16:	e79f      	b.n	8006a58 <Send_BLE_Commands+0x38>
		if(flags.Data_Received_Flag == 1)
 8006b18:	4b9a      	ldr	r3, [pc, #616]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	07d9      	lsls	r1, r3, #31
 8006b1e:	d419      	bmi.n	8006b54 <Send_BLE_Commands+0x134>
		else if(flags.Command_Response_timeout == 1)
 8006b20:	065b      	lsls	r3, r3, #25
 8006b22:	d599      	bpl.n	8006a58 <Send_BLE_Commands+0x38>
			flags.Command_Response_timeout = 0;
 8006b24:	4997      	ldr	r1, [pc, #604]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006b26:	780b      	ldrb	r3, [r1, #0]
 8006b28:	2040      	movs	r0, #64	; 0x40
 8006b2a:	4383      	bics	r3, r0
 8006b2c:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8006b2e:	4b96      	ldr	r3, [pc, #600]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006b30:	2100      	movs	r1, #0
 8006b32:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8006b34:	3a01      	subs	r2, #1
 8006b36:	4b90      	ldr	r3, [pc, #576]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006b38:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 8006b3a:	4a94      	ldr	r2, [pc, #592]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006b3c:	6813      	ldr	r3, [r2, #0]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 2)
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d800      	bhi.n	8006b48 <Send_BLE_Commands+0x128>
 8006b46:	e787      	b.n	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4a8b      	ldr	r2, [pc, #556]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006b4c:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 8006b4e:	4a8f      	ldr	r2, [pc, #572]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	e781      	b.n	8006a58 <Send_BLE_Commands+0x38>
			flags.Data_Received_Flag = 0;
 8006b54:	4c8b      	ldr	r4, [pc, #556]	; (8006d84 <Send_BLE_Commands+0x364>)
			flags.Start_Command_Response_time = 0;
 8006b56:	2201      	movs	r2, #1
 8006b58:	4393      	bics	r3, r2
 8006b5a:	320f      	adds	r2, #15
 8006b5c:	4393      	bics	r3, r2
 8006b5e:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8006b60:	4b89      	ldr	r3, [pc, #548]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_0,5);
 8006b66:	4884      	ldr	r0, [pc, #528]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006b68:	2105      	movs	r1, #5
 8006b6a:	3010      	adds	r0, #16
 8006b6c:	f7ff ff40 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8006b70:	7863      	ldrb	r3, [r4, #1]
 8006b72:	069b      	lsls	r3, r3, #26
 8006b74:	d507      	bpl.n	8006b86 <Send_BLE_Commands+0x166>
				Send_Command_State++;
 8006b76:	4a80      	ldr	r2, [pc, #512]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006b78:	7813      	ldrb	r3, [r2, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 8006b7e:	4b83      	ldr	r3, [pc, #524]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e768      	b.n	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State--;
 8006b86:	4a7c      	ldr	r2, [pc, #496]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006b88:	7813      	ldrb	r3, [r2, #0]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8006b8e:	4a7f      	ldr	r2, [pc, #508]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006b90:	6813      	ldr	r3, [r2, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d800      	bhi.n	8006b9c <Send_BLE_Commands+0x17c>
 8006b9a:	e75d      	b.n	8006a58 <Send_BLE_Commands+0x38>
					Send_cmd_Error_Cnt = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	6013      	str	r3, [r2, #0]
					Send_Command_State = 0;
 8006ba0:	4a75      	ldr	r2, [pc, #468]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006ba2:	7013      	strb	r3, [r2, #0]
 8006ba4:	e758      	b.n	8006a58 <Send_BLE_Commands+0x38>
			check_ble_command_response = 3;
 8006ba6:	4b76      	ldr	r3, [pc, #472]	; (8006d80 <Send_BLE_Commands+0x360>)
 8006ba8:	2203      	movs	r2, #3
 8006baa:	701a      	strb	r2, [r3, #0]
			LP_UART1_Transmit(BM71_Command_6,5);
 8006bac:	4c72      	ldr	r4, [pc, #456]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006bae:	0020      	movs	r0, r4
 8006bb0:	3018      	adds	r0, #24
 8006bb2:	2105      	movs	r1, #5
 8006bb4:	f002 fd3a 	bl	800962c <LP_UART1_Transmit>
			flags.Start_Command_Response_time = 1;
 8006bb8:	4a72      	ldr	r2, [pc, #456]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006bba:	7813      	ldrb	r3, [r2, #0]
 8006bbc:	2110      	movs	r1, #16
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	7013      	strb	r3, [r2, #0]
			Counter_Response_Time = 0;
 8006bc2:	4b71      	ldr	r3, [pc, #452]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
			Send_Command_State++;
 8006bc8:	7823      	ldrb	r3, [r4, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	7023      	strb	r3, [r4, #0]
			break;
 8006bce:	e743      	b.n	8006a58 <Send_BLE_Commands+0x38>
			if(flags.Data_Received_Flag == 1)
 8006bd0:	4b6c      	ldr	r3, [pc, #432]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	07d9      	lsls	r1, r3, #31
 8006bd6:	d418      	bmi.n	8006c0a <Send_BLE_Commands+0x1ea>
			else if(flags.Command_Response_timeout == 1)
 8006bd8:	065b      	lsls	r3, r3, #25
 8006bda:	d400      	bmi.n	8006bde <Send_BLE_Commands+0x1be>
 8006bdc:	e73c      	b.n	8006a58 <Send_BLE_Commands+0x38>
				flags.Command_Response_timeout = 0;
 8006bde:	4969      	ldr	r1, [pc, #420]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006be0:	780b      	ldrb	r3, [r1, #0]
 8006be2:	2040      	movs	r0, #64	; 0x40
 8006be4:	4383      	bics	r3, r0
 8006be6:	700b      	strb	r3, [r1, #0]
				Counter_Response_Time = 0;
 8006be8:	4b67      	ldr	r3, [pc, #412]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006bea:	2100      	movs	r1, #0
 8006bec:	6019      	str	r1, [r3, #0]
				Send_Command_State--;
 8006bee:	3a01      	subs	r2, #1
 8006bf0:	4b61      	ldr	r3, [pc, #388]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006bf2:	701a      	strb	r2, [r3, #0]
				Send_cmd_Error_Cnt++;
 8006bf4:	4a65      	ldr	r2, [pc, #404]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d800      	bhi.n	8006c02 <Send_BLE_Commands+0x1e2>
 8006c00:	e72a      	b.n	8006a58 <Send_BLE_Commands+0x38>
					Send_Command_State = 0;
 8006c02:	4b5d      	ldr	r3, [pc, #372]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e726      	b.n	8006a58 <Send_BLE_Commands+0x38>
				flags.Data_Received_Flag = 0;
 8006c0a:	4c5e      	ldr	r4, [pc, #376]	; (8006d84 <Send_BLE_Commands+0x364>)
				flags.Start_Command_Response_time = 0;
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	4393      	bics	r3, r2
 8006c10:	320f      	adds	r2, #15
 8006c12:	4393      	bics	r3, r2
 8006c14:	7023      	strb	r3, [r4, #0]
				Counter_Response_Time = 0;
 8006c16:	4b5c      	ldr	r3, [pc, #368]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
				Check_Get_Response(BLE_Response_1,9);
 8006c1c:	4856      	ldr	r0, [pc, #344]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006c1e:	2109      	movs	r1, #9
 8006c20:	3020      	adds	r0, #32
 8006c22:	f7ff fee5 	bl	80069f0 <Check_Get_Response>
				if(flags.Response_OK_flag == 1)
 8006c26:	7863      	ldrb	r3, [r4, #1]
 8006c28:	069b      	lsls	r3, r3, #26
 8006c2a:	d507      	bpl.n	8006c3c <Send_BLE_Commands+0x21c>
					Send_Command_State ++;
 8006c2c:	4a52      	ldr	r2, [pc, #328]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006c2e:	7813      	ldrb	r3, [r2, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	7013      	strb	r3, [r2, #0]
					Send_cmd_Error_Cnt = 0;
 8006c34:	4b55      	ldr	r3, [pc, #340]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e70d      	b.n	8006a58 <Send_BLE_Commands+0x38>
					Send_Command_State--;
 8006c3c:	4a4e      	ldr	r2, [pc, #312]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006c3e:	7813      	ldrb	r3, [r2, #0]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	7013      	strb	r3, [r2, #0]
					Send_cmd_Error_Cnt++;
 8006c44:	4a51      	ldr	r2, [pc, #324]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	6013      	str	r3, [r2, #0]
					if(Send_cmd_Error_Cnt > 2)
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d800      	bhi.n	8006c52 <Send_BLE_Commands+0x232>
 8006c50:	e702      	b.n	8006a58 <Send_BLE_Commands+0x38>
						Send_Command_State = 0;
 8006c52:	4b49      	ldr	r3, [pc, #292]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	e6fe      	b.n	8006a58 <Send_BLE_Commands+0x38>
		check_ble_command_response = 3;
 8006c5a:	4b49      	ldr	r3, [pc, #292]	; (8006d80 <Send_BLE_Commands+0x360>)
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_2,6);
 8006c60:	4c45      	ldr	r4, [pc, #276]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006c62:	0020      	movs	r0, r4
 8006c64:	302c      	adds	r0, #44	; 0x2c
 8006c66:	2106      	movs	r1, #6
 8006c68:	f002 fce0 	bl	800962c <LP_UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 8006c6c:	4a45      	ldr	r2, [pc, #276]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006c6e:	7813      	ldrb	r3, [r2, #0]
 8006c70:	2110      	movs	r1, #16
 8006c72:	430b      	orrs	r3, r1
 8006c74:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8006c76:	4b44      	ldr	r3, [pc, #272]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 8006c7c:	7823      	ldrb	r3, [r4, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	7023      	strb	r3, [r4, #0]
		break;
 8006c82:	e6e9      	b.n	8006a58 <Send_BLE_Commands+0x38>
		if(flags.Data_Received_Flag == 1)
 8006c84:	4b3f      	ldr	r3, [pc, #252]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	07d9      	lsls	r1, r3, #31
 8006c8a:	d419      	bmi.n	8006cc0 <Send_BLE_Commands+0x2a0>
		else if(flags.Command_Response_timeout == 1)
 8006c8c:	065b      	lsls	r3, r3, #25
 8006c8e:	d400      	bmi.n	8006c92 <Send_BLE_Commands+0x272>
 8006c90:	e6e2      	b.n	8006a58 <Send_BLE_Commands+0x38>
			flags.Command_Response_timeout = 0;
 8006c92:	493c      	ldr	r1, [pc, #240]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006c94:	780b      	ldrb	r3, [r1, #0]
 8006c96:	2040      	movs	r0, #64	; 0x40
 8006c98:	4383      	bics	r3, r0
 8006c9a:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8006c9c:	4b3a      	ldr	r3, [pc, #232]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	4b34      	ldr	r3, [pc, #208]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006ca6:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 8006ca8:	4a38      	ldr	r2, [pc, #224]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006caa:	6813      	ldr	r3, [r2, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 2)
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d800      	bhi.n	8006cb6 <Send_BLE_Commands+0x296>
 8006cb4:	e6d0      	b.n	8006a58 <Send_BLE_Commands+0x38>
				Send_cmd_Error_Cnt = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6013      	str	r3, [r2, #0]
				Send_Command_State = 0;
 8006cba:	4a2f      	ldr	r2, [pc, #188]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006cbc:	7013      	strb	r3, [r2, #0]
 8006cbe:	e6cb      	b.n	8006a58 <Send_BLE_Commands+0x38>
			flags.Data_Received_Flag = 0;
 8006cc0:	4c30      	ldr	r4, [pc, #192]	; (8006d84 <Send_BLE_Commands+0x364>)
			flags.Start_Command_Response_time = 0;
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	4393      	bics	r3, r2
 8006cc6:	320f      	adds	r2, #15
 8006cc8:	4393      	bics	r3, r2
 8006cca:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8006ccc:	4b2e      	ldr	r3, [pc, #184]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_1,9);
 8006cd2:	4829      	ldr	r0, [pc, #164]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006cd4:	2109      	movs	r1, #9
 8006cd6:	3020      	adds	r0, #32
 8006cd8:	f7ff fe8a 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8006cdc:	7863      	ldrb	r3, [r4, #1]
 8006cde:	069b      	lsls	r3, r3, #26
 8006ce0:	d507      	bpl.n	8006cf2 <Send_BLE_Commands+0x2d2>
				Send_Command_State++;
 8006ce2:	4a25      	ldr	r2, [pc, #148]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006ce4:	7813      	ldrb	r3, [r2, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 8006cea:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	e6b2      	b.n	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State--;
 8006cf2:	4a21      	ldr	r2, [pc, #132]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006cf4:	7813      	ldrb	r3, [r2, #0]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8006cfa:	4a24      	ldr	r2, [pc, #144]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d800      	bhi.n	8006d08 <Send_BLE_Commands+0x2e8>
 8006d06:	e6a7      	b.n	8006a58 <Send_BLE_Commands+0x38>
					Send_cmd_Error_Cnt = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6013      	str	r3, [r2, #0]
					Send_Command_State = 0;
 8006d0c:	4a1a      	ldr	r2, [pc, #104]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006d0e:	7013      	strb	r3, [r2, #0]
 8006d10:	e6a2      	b.n	8006a58 <Send_BLE_Commands+0x38>
		check_ble_command_response = 5;
 8006d12:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <Send_BLE_Commands+0x360>)
 8006d14:	2205      	movs	r2, #5
 8006d16:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_3,3);
 8006d18:	4c17      	ldr	r4, [pc, #92]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006d1a:	0020      	movs	r0, r4
 8006d1c:	3034      	adds	r0, #52	; 0x34
 8006d1e:	2103      	movs	r1, #3
 8006d20:	f002 fc84 	bl	800962c <LP_UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 8006d24:	4a17      	ldr	r2, [pc, #92]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006d26:	7813      	ldrb	r3, [r2, #0]
 8006d28:	2110      	movs	r1, #16
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8006d2e:	4b16      	ldr	r3, [pc, #88]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 8006d34:	7823      	ldrb	r3, [r4, #0]
 8006d36:	3301      	adds	r3, #1
 8006d38:	7023      	strb	r3, [r4, #0]
		break;
 8006d3a:	e68d      	b.n	8006a58 <Send_BLE_Commands+0x38>
		if(flags.Data_Received_Flag == 1)
 8006d3c:	4b11      	ldr	r3, [pc, #68]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	07d9      	lsls	r1, r3, #31
 8006d42:	d427      	bmi.n	8006d94 <Send_BLE_Commands+0x374>
		else if(flags.Command_Response_timeout == 1)
 8006d44:	065b      	lsls	r3, r3, #25
 8006d46:	d400      	bmi.n	8006d4a <Send_BLE_Commands+0x32a>
 8006d48:	e686      	b.n	8006a58 <Send_BLE_Commands+0x38>
			flags.Command_Response_timeout = 0;
 8006d4a:	490e      	ldr	r1, [pc, #56]	; (8006d84 <Send_BLE_Commands+0x364>)
 8006d4c:	780b      	ldrb	r3, [r1, #0]
 8006d4e:	2040      	movs	r0, #64	; 0x40
 8006d50:	4383      	bics	r3, r0
 8006d52:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8006d54:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <Send_BLE_Commands+0x368>)
 8006d56:	2100      	movs	r1, #0
 8006d58:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8006d5a:	3a01      	subs	r2, #1
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006d5e:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 8006d60:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <Send_BLE_Commands+0x36c>)
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 2)
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d800      	bhi.n	8006d6e <Send_BLE_Commands+0x34e>
 8006d6c:	e674      	b.n	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State = 0;
 8006d6e:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <Send_BLE_Commands+0x358>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	e670      	b.n	8006a58 <Send_BLE_Commands+0x38>
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	2000000c 	.word	0x2000000c
 8006d7c:	0800ca98 	.word	0x0800ca98
 8006d80:	200047de 	.word	0x200047de
 8006d84:	2000032c 	.word	0x2000032c
 8006d88:	20000240 	.word	0x20000240
 8006d8c:	200002ec 	.word	0x200002ec
 8006d90:	20000260 	.word	0x20000260
			flags.Data_Received_Flag = 0;
 8006d94:	4cd7      	ldr	r4, [pc, #860]	; (80070f4 <Send_BLE_Commands+0x6d4>)
			flags.Start_Command_Response_time = 0;
 8006d96:	2201      	movs	r2, #1
 8006d98:	4393      	bics	r3, r2
 8006d9a:	320f      	adds	r2, #15
 8006d9c:	4393      	bics	r3, r2
 8006d9e:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8006da0:	4bd5      	ldr	r3, [pc, #852]	; (80070f8 <Send_BLE_Commands+0x6d8>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_6,5);
 8006da6:	48d5      	ldr	r0, [pc, #852]	; (80070fc <Send_BLE_Commands+0x6dc>)
 8006da8:	2105      	movs	r1, #5
 8006daa:	3038      	adds	r0, #56	; 0x38
 8006dac:	f7ff fe20 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8006db0:	7863      	ldrb	r3, [r4, #1]
 8006db2:	069b      	lsls	r3, r3, #26
 8006db4:	d400      	bmi.n	8006db8 <Send_BLE_Commands+0x398>
 8006db6:	e15b      	b.n	8007070 <Send_BLE_Commands+0x650>
				Send_cmd_Error_Cnt = 0;
 8006db8:	4bd1      	ldr	r3, [pc, #836]	; (8007100 <Send_BLE_Commands+0x6e0>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
				Send_Command_State++;
 8006dbe:	4acf      	ldr	r2, [pc, #828]	; (80070fc <Send_BLE_Commands+0x6dc>)
 8006dc0:	7813      	ldrb	r3, [r2, #0]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	7013      	strb	r3, [r2, #0]
				for(k=0; k<12; k++)
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e005      	b.n	8006dd6 <Send_BLE_Commands+0x3b6>
					content[k] = LPUART1_Receive_Buffer[4+k];
 8006dca:	1d1a      	adds	r2, r3, #4
 8006dcc:	49cd      	ldr	r1, [pc, #820]	; (8007104 <Send_BLE_Commands+0x6e4>)
 8006dce:	5c89      	ldrb	r1, [r1, r2]
 8006dd0:	4acd      	ldr	r2, [pc, #820]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006dd2:	54d1      	strb	r1, [r2, r3]
				for(k=0; k<12; k++)
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	2b0b      	cmp	r3, #11
 8006dd8:	ddf7      	ble.n	8006dca <Send_BLE_Commands+0x3aa>
				for(k=0; k<12; k++)
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b0b      	cmp	r3, #11
 8006dde:	dc06      	bgt.n	8006dee <Send_BLE_Commands+0x3ce>
					MAC_ADD[k] = LPUART1_Receive_Buffer[4+k];
 8006de0:	1d1a      	adds	r2, r3, #4
 8006de2:	49c8      	ldr	r1, [pc, #800]	; (8007104 <Send_BLE_Commands+0x6e4>)
 8006de4:	5c89      	ldrb	r1, [r1, r2]
 8006de6:	4ac9      	ldr	r2, [pc, #804]	; (800710c <Send_BLE_Commands+0x6ec>)
 8006de8:	54d1      	strb	r1, [r2, r3]
				for(k=0; k<12; k++)
 8006dea:	3301      	adds	r3, #1
 8006dec:	e7f6      	b.n	8006ddc <Send_BLE_Commands+0x3bc>
				strcpy(Test_1234,content);
 8006dee:	49c6      	ldr	r1, [pc, #792]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006df0:	48c7      	ldr	r0, [pc, #796]	; (8007110 <Send_BLE_Commands+0x6f0>)
 8006df2:	f004 f9a0 	bl	800b136 <strcpy>
				for(kk=0; kk<12; kk++)
 8006df6:	4bc7      	ldr	r3, [pc, #796]	; (8007114 <Send_BLE_Commands+0x6f4>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e00a      	b.n	8006e14 <Send_BLE_Commands+0x3f4>
					Test_123[kk+3] = Test_1234[jj];
 8006dfe:	1cd1      	adds	r1, r2, #3
 8006e00:	48c3      	ldr	r0, [pc, #780]	; (8007110 <Send_BLE_Commands+0x6f0>)
 8006e02:	5cc4      	ldrb	r4, [r0, r3]
 8006e04:	48c4      	ldr	r0, [pc, #784]	; (8007118 <Send_BLE_Commands+0x6f8>)
 8006e06:	5444      	strb	r4, [r0, r1]
					jj=jj+2;
 8006e08:	3302      	adds	r3, #2
 8006e0a:	49bc      	ldr	r1, [pc, #752]	; (80070fc <Send_BLE_Commands+0x6dc>)
 8006e0c:	63cb      	str	r3, [r1, #60]	; 0x3c
				for(kk=0; kk<12; kk++)
 8006e0e:	3201      	adds	r2, #1
 8006e10:	4bc0      	ldr	r3, [pc, #768]	; (8007114 <Send_BLE_Commands+0x6f4>)
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	4bbf      	ldr	r3, [pc, #764]	; (8007114 <Send_BLE_Commands+0x6f4>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	2a0b      	cmp	r2, #11
 8006e1a:	dc09      	bgt.n	8006e30 <Send_BLE_Commands+0x410>
					if(Test_1234[jj] > 0x40)
 8006e1c:	4bb7      	ldr	r3, [pc, #732]	; (80070fc <Send_BLE_Commands+0x6dc>)
 8006e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e20:	49bb      	ldr	r1, [pc, #748]	; (8007110 <Send_BLE_Commands+0x6f0>)
 8006e22:	5cc9      	ldrb	r1, [r1, r3]
 8006e24:	2940      	cmp	r1, #64	; 0x40
 8006e26:	d9ea      	bls.n	8006dfe <Send_BLE_Commands+0x3de>
						Test_1234[jj]=Test_1234[jj]-0x7;
 8006e28:	3907      	subs	r1, #7
 8006e2a:	48b9      	ldr	r0, [pc, #740]	; (8007110 <Send_BLE_Commands+0x6f0>)
 8006e2c:	54c1      	strb	r1, [r0, r3]
 8006e2e:	e7e6      	b.n	8006dfe <Send_BLE_Commands+0x3de>
				if(content[0] <= 0x39) content[0] = content[0] - 0x30;
 8006e30:	4bb5      	ldr	r3, [pc, #724]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b39      	cmp	r3, #57	; 0x39
 8006e36:	d900      	bls.n	8006e3a <Send_BLE_Commands+0x41a>
 8006e38:	e0d2      	b.n	8006fe0 <Send_BLE_Commands+0x5c0>
 8006e3a:	3b30      	subs	r3, #48	; 0x30
 8006e3c:	4ab2      	ldr	r2, [pc, #712]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e3e:	7013      	strb	r3, [r2, #0]
				if(content[1] <= 0x39) content[1] = content[1] - 0x30;
 8006e40:	4bb1      	ldr	r3, [pc, #708]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b39      	cmp	r3, #57	; 0x39
 8006e46:	d900      	bls.n	8006e4a <Send_BLE_Commands+0x42a>
 8006e48:	e0d0      	b.n	8006fec <Send_BLE_Commands+0x5cc>
 8006e4a:	3b30      	subs	r3, #48	; 0x30
 8006e4c:	4aae      	ldr	r2, [pc, #696]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e4e:	7053      	strb	r3, [r2, #1]
				if(content[2] <= 0x39) content[2] = content[2] - 0x30;
 8006e50:	4bad      	ldr	r3, [pc, #692]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e52:	789b      	ldrb	r3, [r3, #2]
 8006e54:	2b39      	cmp	r3, #57	; 0x39
 8006e56:	d900      	bls.n	8006e5a <Send_BLE_Commands+0x43a>
 8006e58:	e0ce      	b.n	8006ff8 <Send_BLE_Commands+0x5d8>
 8006e5a:	3b30      	subs	r3, #48	; 0x30
 8006e5c:	4aaa      	ldr	r2, [pc, #680]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e5e:	7093      	strb	r3, [r2, #2]
				if(content[3] <= 0x39) content[3] = content[3] - 0x30;
 8006e60:	4ba9      	ldr	r3, [pc, #676]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e62:	78db      	ldrb	r3, [r3, #3]
 8006e64:	2b39      	cmp	r3, #57	; 0x39
 8006e66:	d900      	bls.n	8006e6a <Send_BLE_Commands+0x44a>
 8006e68:	e0cc      	b.n	8007004 <Send_BLE_Commands+0x5e4>
 8006e6a:	3b30      	subs	r3, #48	; 0x30
 8006e6c:	4aa6      	ldr	r2, [pc, #664]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e6e:	70d3      	strb	r3, [r2, #3]
				if(content[4] <= 0x39)
 8006e70:	4ba5      	ldr	r3, [pc, #660]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e72:	791b      	ldrb	r3, [r3, #4]
 8006e74:	2b39      	cmp	r3, #57	; 0x39
 8006e76:	d900      	bls.n	8006e7a <Send_BLE_Commands+0x45a>
 8006e78:	e0ca      	b.n	8007010 <Send_BLE_Commands+0x5f0>
					content[4] = content[4] - 0x30;
 8006e7a:	3b30      	subs	r3, #48	; 0x30
					content[4] = content[4] & 0x0F;
 8006e7c:	220f      	movs	r2, #15
 8006e7e:	4013      	ands	r3, r2
 8006e80:	4aa1      	ldr	r2, [pc, #644]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e82:	7113      	strb	r3, [r2, #4]
				if(content[5] <= 0x39) content[5] = content[5] - 0x30;
 8006e84:	4ba0      	ldr	r3, [pc, #640]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e86:	795b      	ldrb	r3, [r3, #5]
 8006e88:	2b39      	cmp	r3, #57	; 0x39
 8006e8a:	d900      	bls.n	8006e8e <Send_BLE_Commands+0x46e>
 8006e8c:	e0c6      	b.n	800701c <Send_BLE_Commands+0x5fc>
 8006e8e:	3b30      	subs	r3, #48	; 0x30
 8006e90:	4a9d      	ldr	r2, [pc, #628]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e92:	7153      	strb	r3, [r2, #5]
				if(content[6] <= 0x39) content[6] = content[6] - 0x30;
 8006e94:	4b9c      	ldr	r3, [pc, #624]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006e96:	799b      	ldrb	r3, [r3, #6]
 8006e98:	2b39      	cmp	r3, #57	; 0x39
 8006e9a:	d900      	bls.n	8006e9e <Send_BLE_Commands+0x47e>
 8006e9c:	e0c4      	b.n	8007028 <Send_BLE_Commands+0x608>
 8006e9e:	3b30      	subs	r3, #48	; 0x30
 8006ea0:	4a99      	ldr	r2, [pc, #612]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ea2:	7193      	strb	r3, [r2, #6]
				if(content[7] <= 0x39) content[7] = content[7] - 0x30;
 8006ea4:	4b98      	ldr	r3, [pc, #608]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ea6:	79db      	ldrb	r3, [r3, #7]
 8006ea8:	2b39      	cmp	r3, #57	; 0x39
 8006eaa:	d900      	bls.n	8006eae <Send_BLE_Commands+0x48e>
 8006eac:	e0c2      	b.n	8007034 <Send_BLE_Commands+0x614>
 8006eae:	3b30      	subs	r3, #48	; 0x30
 8006eb0:	4a95      	ldr	r2, [pc, #596]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006eb2:	71d3      	strb	r3, [r2, #7]
				if(content[8] <= 0x39) content[8] = content[8] - 0x30;
 8006eb4:	4b94      	ldr	r3, [pc, #592]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006eb6:	7a1b      	ldrb	r3, [r3, #8]
 8006eb8:	2b39      	cmp	r3, #57	; 0x39
 8006eba:	d900      	bls.n	8006ebe <Send_BLE_Commands+0x49e>
 8006ebc:	e0c0      	b.n	8007040 <Send_BLE_Commands+0x620>
 8006ebe:	3b30      	subs	r3, #48	; 0x30
 8006ec0:	4a91      	ldr	r2, [pc, #580]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ec2:	7213      	strb	r3, [r2, #8]
				if(content[9] <= 0x39) content[9] = content[9] - 0x30;
 8006ec4:	4b90      	ldr	r3, [pc, #576]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ec6:	7a5b      	ldrb	r3, [r3, #9]
 8006ec8:	2b39      	cmp	r3, #57	; 0x39
 8006eca:	d900      	bls.n	8006ece <Send_BLE_Commands+0x4ae>
 8006ecc:	e0be      	b.n	800704c <Send_BLE_Commands+0x62c>
 8006ece:	3b30      	subs	r3, #48	; 0x30
 8006ed0:	4a8d      	ldr	r2, [pc, #564]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ed2:	7253      	strb	r3, [r2, #9]
				if(content[10] <= 0x39) content[10] = content[10] - 0x30;
 8006ed4:	4b8c      	ldr	r3, [pc, #560]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ed6:	7a9b      	ldrb	r3, [r3, #10]
 8006ed8:	2b39      	cmp	r3, #57	; 0x39
 8006eda:	d900      	bls.n	8006ede <Send_BLE_Commands+0x4be>
 8006edc:	e0bc      	b.n	8007058 <Send_BLE_Commands+0x638>
 8006ede:	3b30      	subs	r3, #48	; 0x30
 8006ee0:	4a89      	ldr	r2, [pc, #548]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ee2:	7293      	strb	r3, [r2, #10]
				if(content[11] <= 0x39) content[11] = content[11] - 0x30;
 8006ee4:	4b88      	ldr	r3, [pc, #544]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ee6:	7adb      	ldrb	r3, [r3, #11]
 8006ee8:	2b39      	cmp	r3, #57	; 0x39
 8006eea:	d900      	bls.n	8006eee <Send_BLE_Commands+0x4ce>
 8006eec:	e0ba      	b.n	8007064 <Send_BLE_Commands+0x644>
 8006eee:	3b30      	subs	r3, #48	; 0x30
 8006ef0:	4a85      	ldr	r2, [pc, #532]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ef2:	72d3      	strb	r3, [r2, #11]
				Test_123[0] = 'S';
 8006ef4:	4d88      	ldr	r5, [pc, #544]	; (8007118 <Send_BLE_Commands+0x6f8>)
 8006ef6:	2353      	movs	r3, #83	; 0x53
 8006ef8:	702b      	strb	r3, [r5, #0]
				Test_123[1] = 'P';
 8006efa:	3b03      	subs	r3, #3
 8006efc:	706b      	strb	r3, [r5, #1]
				Test_123[2] = ',';
 8006efe:	3b24      	subs	r3, #36	; 0x24
 8006f00:	70ab      	strb	r3, [r5, #2]
				Test_123[9] = '\r';
 8006f02:	3b1f      	subs	r3, #31
 8006f04:	726b      	strb	r3, [r5, #9]
				Test_123[10] = '\n';
 8006f06:	3b03      	subs	r3, #3
 8006f08:	72ab      	strb	r3, [r5, #10]
				MAC_buffer[0] = (content[0] << 4)| content[1];
 8006f0a:	4b7f      	ldr	r3, [pc, #508]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	0112      	lsls	r2, r2, #4
 8006f10:	2001      	movs	r0, #1
 8006f12:	5618      	ldrsb	r0, [r3, r0]
 8006f14:	4310      	orrs	r0, r2
 8006f16:	b2c0      	uxtb	r0, r0
 8006f18:	4c80      	ldr	r4, [pc, #512]	; (800711c <Send_BLE_Commands+0x6fc>)
 8006f1a:	7020      	strb	r0, [r4, #0]
				MAC_buffer[1] = (content[2]<< 4)| content[3];
 8006f1c:	7899      	ldrb	r1, [r3, #2]
 8006f1e:	0109      	lsls	r1, r1, #4
 8006f20:	2203      	movs	r2, #3
 8006f22:	569a      	ldrsb	r2, [r3, r2]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	7062      	strb	r2, [r4, #1]
				MAC_buffer[2] = (content[4]<< 4)| content[5];
 8006f28:	7919      	ldrb	r1, [r3, #4]
 8006f2a:	0109      	lsls	r1, r1, #4
 8006f2c:	2205      	movs	r2, #5
 8006f2e:	569a      	ldrsb	r2, [r3, r2]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	70a2      	strb	r2, [r4, #2]
				MAC_buffer[3] = (content[6]<< 4)| content[7];
 8006f34:	7999      	ldrb	r1, [r3, #6]
 8006f36:	0109      	lsls	r1, r1, #4
 8006f38:	2207      	movs	r2, #7
 8006f3a:	569a      	ldrsb	r2, [r3, r2]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	70e2      	strb	r2, [r4, #3]
				MAC_buffer[4] = (content[8]<< 4)| content[9];
 8006f40:	7a19      	ldrb	r1, [r3, #8]
 8006f42:	0109      	lsls	r1, r1, #4
 8006f44:	2209      	movs	r2, #9
 8006f46:	569a      	ldrsb	r2, [r3, r2]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	7122      	strb	r2, [r4, #4]
				MAC_buffer[5] = (content[10]<< 4)| content[11];
 8006f4c:	7a9a      	ldrb	r2, [r3, #10]
 8006f4e:	0112      	lsls	r2, r2, #4
 8006f50:	7adb      	ldrb	r3, [r3, #11]
 8006f52:	b25b      	sxtb	r3, r3
 8006f54:	4313      	orrs	r3, r2
 8006f56:	7163      	strb	r3, [r4, #5]
				passkey_1 = hex_to_dec(MAC_buffer[0]);
 8006f58:	f002 ff10 	bl	8009d7c <hex_to_dec>
 8006f5c:	4b70      	ldr	r3, [pc, #448]	; (8007120 <Send_BLE_Commands+0x700>)
 8006f5e:	6018      	str	r0, [r3, #0]
				passkey_2 = hex_to_dec(MAC_buffer[1]);
 8006f60:	7860      	ldrb	r0, [r4, #1]
 8006f62:	f002 ff0b 	bl	8009d7c <hex_to_dec>
 8006f66:	4b6f      	ldr	r3, [pc, #444]	; (8007124 <Send_BLE_Commands+0x704>)
 8006f68:	6018      	str	r0, [r3, #0]
				passkey_3 = hex_to_dec(MAC_buffer[2]);
 8006f6a:	78a0      	ldrb	r0, [r4, #2]
 8006f6c:	f002 ff06 	bl	8009d7c <hex_to_dec>
 8006f70:	4b6d      	ldr	r3, [pc, #436]	; (8007128 <Send_BLE_Commands+0x708>)
 8006f72:	6018      	str	r0, [r3, #0]
				passkey_4 = hex_to_dec(MAC_buffer[3]);
 8006f74:	78e0      	ldrb	r0, [r4, #3]
 8006f76:	f002 ff01 	bl	8009d7c <hex_to_dec>
 8006f7a:	4b6c      	ldr	r3, [pc, #432]	; (800712c <Send_BLE_Commands+0x70c>)
 8006f7c:	6018      	str	r0, [r3, #0]
				passkey_5 = hex_to_dec(MAC_buffer[4]);
 8006f7e:	7920      	ldrb	r0, [r4, #4]
 8006f80:	f002 fefc 	bl	8009d7c <hex_to_dec>
 8006f84:	4b6a      	ldr	r3, [pc, #424]	; (8007130 <Send_BLE_Commands+0x710>)
 8006f86:	6018      	str	r0, [r3, #0]
				passkey_6 = hex_to_dec(MAC_buffer[5]);
 8006f88:	7960      	ldrb	r0, [r4, #5]
 8006f8a:	f002 fef7 	bl	8009d7c <hex_to_dec>
 8006f8e:	4b69      	ldr	r3, [pc, #420]	; (8007134 <Send_BLE_Commands+0x714>)
 8006f90:	6018      	str	r0, [r3, #0]
				Test_123[3] = passkey_Sum(MAC_buffer[0])+0x30;
 8006f92:	7820      	ldrb	r0, [r4, #0]
 8006f94:	f002 ff54 	bl	8009e40 <passkey_Sum>
 8006f98:	3030      	adds	r0, #48	; 0x30
 8006f9a:	70e8      	strb	r0, [r5, #3]
				Test_123[4] = passkey_Sum(MAC_buffer[1])+0x30;
 8006f9c:	7860      	ldrb	r0, [r4, #1]
 8006f9e:	f002 ff4f 	bl	8009e40 <passkey_Sum>
 8006fa2:	3030      	adds	r0, #48	; 0x30
 8006fa4:	7128      	strb	r0, [r5, #4]
				Test_123[5] = passkey_Sum(MAC_buffer[2])+0x30;
 8006fa6:	78a0      	ldrb	r0, [r4, #2]
 8006fa8:	f002 ff4a 	bl	8009e40 <passkey_Sum>
 8006fac:	3030      	adds	r0, #48	; 0x30
 8006fae:	7168      	strb	r0, [r5, #5]
				Test_123[6] = passkey_Sum(MAC_buffer[3])+0x30;
 8006fb0:	78e0      	ldrb	r0, [r4, #3]
 8006fb2:	f002 ff45 	bl	8009e40 <passkey_Sum>
 8006fb6:	3030      	adds	r0, #48	; 0x30
 8006fb8:	71a8      	strb	r0, [r5, #6]
				Test_123[7] = passkey_Sum(MAC_buffer[4])+0x30;
 8006fba:	7920      	ldrb	r0, [r4, #4]
 8006fbc:	f002 ff40 	bl	8009e40 <passkey_Sum>
 8006fc0:	3030      	adds	r0, #48	; 0x30
 8006fc2:	71e8      	strb	r0, [r5, #7]
				Test_123[8] = passkey_Sum(MAC_buffer[5])+0x30;
 8006fc4:	7960      	ldrb	r0, [r4, #5]
 8006fc6:	f002 ff3b 	bl	8009e40 <passkey_Sum>
 8006fca:	3030      	adds	r0, #48	; 0x30
 8006fcc:	7228      	strb	r0, [r5, #8]
				if(Send_cmd_Error_Cnt > 5)
 8006fce:	4b4c      	ldr	r3, [pc, #304]	; (8007100 <Send_BLE_Commands+0x6e0>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d800      	bhi.n	8006fd8 <Send_BLE_Commands+0x5b8>
 8006fd6:	e53f      	b.n	8006a58 <Send_BLE_Commands+0x38>
					Send_Command_State = 0;
 8006fd8:	4b48      	ldr	r3, [pc, #288]	; (80070fc <Send_BLE_Commands+0x6dc>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e53b      	b.n	8006a58 <Send_BLE_Commands+0x38>
					content[0] = content[0] - 0x57;
 8006fe0:	3b57      	subs	r3, #87	; 0x57
					content[0] = content[0] & 0x0F;
 8006fe2:	220f      	movs	r2, #15
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	4a48      	ldr	r2, [pc, #288]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006fe8:	7013      	strb	r3, [r2, #0]
 8006fea:	e729      	b.n	8006e40 <Send_BLE_Commands+0x420>
					content[1] = content[1] - 0x57;
 8006fec:	3b57      	subs	r3, #87	; 0x57
					content[1] = content[1] & 0x0F;
 8006fee:	220f      	movs	r2, #15
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	4a45      	ldr	r2, [pc, #276]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8006ff4:	7053      	strb	r3, [r2, #1]
 8006ff6:	e72b      	b.n	8006e50 <Send_BLE_Commands+0x430>
					content[2] = content[2] - 0x57;
 8006ff8:	3b57      	subs	r3, #87	; 0x57
					content[2] = content[2] & 0x0F;
 8006ffa:	220f      	movs	r2, #15
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	4a42      	ldr	r2, [pc, #264]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8007000:	7093      	strb	r3, [r2, #2]
 8007002:	e72d      	b.n	8006e60 <Send_BLE_Commands+0x440>
					content[3] = content[3] - 0x57;
 8007004:	3b57      	subs	r3, #87	; 0x57
					content[3] = content[3] & 0x0F;
 8007006:	220f      	movs	r2, #15
 8007008:	4013      	ands	r3, r2
 800700a:	4a3f      	ldr	r2, [pc, #252]	; (8007108 <Send_BLE_Commands+0x6e8>)
 800700c:	70d3      	strb	r3, [r2, #3]
 800700e:	e72f      	b.n	8006e70 <Send_BLE_Commands+0x450>
					content[4] = content[4] - 0x57;
 8007010:	3b57      	subs	r3, #87	; 0x57
					content[4] = content[4] & 0x0F;
 8007012:	220f      	movs	r2, #15
 8007014:	4013      	ands	r3, r2
 8007016:	4a3c      	ldr	r2, [pc, #240]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8007018:	7113      	strb	r3, [r2, #4]
 800701a:	e733      	b.n	8006e84 <Send_BLE_Commands+0x464>
					content[5] = content[5] - 0x57;
 800701c:	3b57      	subs	r3, #87	; 0x57
					content[5] = content[5] & 0x0F;
 800701e:	220f      	movs	r2, #15
 8007020:	4013      	ands	r3, r2
 8007022:	4a39      	ldr	r2, [pc, #228]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8007024:	7153      	strb	r3, [r2, #5]
 8007026:	e735      	b.n	8006e94 <Send_BLE_Commands+0x474>
					content[6] = content[6] - 0x57;
 8007028:	3b57      	subs	r3, #87	; 0x57
					content[6] = content[6] & 0x0F;
 800702a:	220f      	movs	r2, #15
 800702c:	4013      	ands	r3, r2
 800702e:	4a36      	ldr	r2, [pc, #216]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8007030:	7193      	strb	r3, [r2, #6]
 8007032:	e737      	b.n	8006ea4 <Send_BLE_Commands+0x484>
					content[7] = content[7] - 0x57;
 8007034:	3b57      	subs	r3, #87	; 0x57
					content[7] = content[7] & 0x0F;
 8007036:	220f      	movs	r2, #15
 8007038:	4013      	ands	r3, r2
 800703a:	4a33      	ldr	r2, [pc, #204]	; (8007108 <Send_BLE_Commands+0x6e8>)
 800703c:	71d3      	strb	r3, [r2, #7]
 800703e:	e739      	b.n	8006eb4 <Send_BLE_Commands+0x494>
					content[8] = content[8] - 0x57;
 8007040:	3b57      	subs	r3, #87	; 0x57
					content[8] = content[8] & 0x0F;
 8007042:	220f      	movs	r2, #15
 8007044:	4013      	ands	r3, r2
 8007046:	4a30      	ldr	r2, [pc, #192]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8007048:	7213      	strb	r3, [r2, #8]
 800704a:	e73b      	b.n	8006ec4 <Send_BLE_Commands+0x4a4>
					content[9] = content[9] - 0x57;
 800704c:	3b57      	subs	r3, #87	; 0x57
					content[9] = content[9] & 0x0F;
 800704e:	220f      	movs	r2, #15
 8007050:	4013      	ands	r3, r2
 8007052:	4a2d      	ldr	r2, [pc, #180]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8007054:	7253      	strb	r3, [r2, #9]
 8007056:	e73d      	b.n	8006ed4 <Send_BLE_Commands+0x4b4>
					content[10] = content[10] - 0x57;
 8007058:	3b57      	subs	r3, #87	; 0x57
					content[10] = content[10] & 0x0F;
 800705a:	220f      	movs	r2, #15
 800705c:	4013      	ands	r3, r2
 800705e:	4a2a      	ldr	r2, [pc, #168]	; (8007108 <Send_BLE_Commands+0x6e8>)
 8007060:	7293      	strb	r3, [r2, #10]
 8007062:	e73f      	b.n	8006ee4 <Send_BLE_Commands+0x4c4>
					content[11] = content[11] - 0x57;
 8007064:	3b57      	subs	r3, #87	; 0x57
					content[11] = content[11] & 0x0F;
 8007066:	220f      	movs	r2, #15
 8007068:	4013      	ands	r3, r2
 800706a:	4a27      	ldr	r2, [pc, #156]	; (8007108 <Send_BLE_Commands+0x6e8>)
 800706c:	72d3      	strb	r3, [r2, #11]
 800706e:	e741      	b.n	8006ef4 <Send_BLE_Commands+0x4d4>
				Send_Command_State--;
 8007070:	4a22      	ldr	r2, [pc, #136]	; (80070fc <Send_BLE_Commands+0x6dc>)
 8007072:	7813      	ldrb	r3, [r2, #0]
 8007074:	3b01      	subs	r3, #1
 8007076:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8007078:	4a21      	ldr	r2, [pc, #132]	; (8007100 <Send_BLE_Commands+0x6e0>)
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 8007080:	2b02      	cmp	r3, #2
 8007082:	d800      	bhi.n	8007086 <Send_BLE_Commands+0x666>
 8007084:	e4e8      	b.n	8006a58 <Send_BLE_Commands+0x38>
					Send_cmd_Error_Cnt = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	6013      	str	r3, [r2, #0]
					Send_Command_State = 0;
 800708a:	4a1c      	ldr	r2, [pc, #112]	; (80070fc <Send_BLE_Commands+0x6dc>)
 800708c:	7013      	strb	r3, [r2, #0]
 800708e:	e4e3      	b.n	8006a58 <Send_BLE_Commands+0x38>
		check_ble_command_response = 3;
 8007090:	4b29      	ldr	r3, [pc, #164]	; (8007138 <Send_BLE_Commands+0x718>)
 8007092:	2203      	movs	r2, #3
 8007094:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_4,17);
 8007096:	4c19      	ldr	r4, [pc, #100]	; (80070fc <Send_BLE_Commands+0x6dc>)
 8007098:	0020      	movs	r0, r4
 800709a:	3040      	adds	r0, #64	; 0x40
 800709c:	2111      	movs	r1, #17
 800709e:	f002 fac5 	bl	800962c <LP_UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 80070a2:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <Send_BLE_Commands+0x6d4>)
 80070a4:	7813      	ldrb	r3, [r2, #0]
 80070a6:	2110      	movs	r1, #16
 80070a8:	430b      	orrs	r3, r1
 80070aa:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 80070ac:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <Send_BLE_Commands+0x6d8>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 80070b2:	7823      	ldrb	r3, [r4, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	7023      	strb	r3, [r4, #0]
		break;
 80070b8:	e4ce      	b.n	8006a58 <Send_BLE_Commands+0x38>
		if(flags.Data_Received_Flag == 1)
 80070ba:	4b0e      	ldr	r3, [pc, #56]	; (80070f4 <Send_BLE_Commands+0x6d4>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	07d9      	lsls	r1, r3, #31
 80070c0:	d43c      	bmi.n	800713c <Send_BLE_Commands+0x71c>
		else if(flags.Command_Response_timeout == 1)
 80070c2:	065b      	lsls	r3, r3, #25
 80070c4:	d400      	bmi.n	80070c8 <Send_BLE_Commands+0x6a8>
 80070c6:	e4c7      	b.n	8006a58 <Send_BLE_Commands+0x38>
			flags.Command_Response_timeout = 0;
 80070c8:	490a      	ldr	r1, [pc, #40]	; (80070f4 <Send_BLE_Commands+0x6d4>)
 80070ca:	780b      	ldrb	r3, [r1, #0]
 80070cc:	2040      	movs	r0, #64	; 0x40
 80070ce:	4383      	bics	r3, r0
 80070d0:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 80070d2:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <Send_BLE_Commands+0x6d8>)
 80070d4:	2100      	movs	r1, #0
 80070d6:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 80070d8:	3a01      	subs	r2, #1
 80070da:	4b08      	ldr	r3, [pc, #32]	; (80070fc <Send_BLE_Commands+0x6dc>)
 80070dc:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 80070de:	4a08      	ldr	r2, [pc, #32]	; (8007100 <Send_BLE_Commands+0x6e0>)
 80070e0:	6813      	ldr	r3, [r2, #0]
 80070e2:	3301      	adds	r3, #1
 80070e4:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 3)
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d800      	bhi.n	80070ec <Send_BLE_Commands+0x6cc>
 80070ea:	e4b5      	b.n	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State = 0;
 80070ec:	4b03      	ldr	r3, [pc, #12]	; (80070fc <Send_BLE_Commands+0x6dc>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e4b1      	b.n	8006a58 <Send_BLE_Commands+0x38>
 80070f4:	2000032c 	.word	0x2000032c
 80070f8:	20000240 	.word	0x20000240
 80070fc:	2000000c 	.word	0x2000000c
 8007100:	200002ec 	.word	0x200002ec
 8007104:	20000260 	.word	0x20000260
 8007108:	20000468 	.word	0x20000468
 800710c:	20000494 	.word	0x20000494
 8007110:	200004c4 	.word	0x200004c4
 8007114:	200001e8 	.word	0x200001e8
 8007118:	20000480 	.word	0x20000480
 800711c:	20000460 	.word	0x20000460
 8007120:	2000047c 	.word	0x2000047c
 8007124:	2000048c 	.word	0x2000048c
 8007128:	200004a4 	.word	0x200004a4
 800712c:	200004a0 	.word	0x200004a0
 8007130:	20000490 	.word	0x20000490
 8007134:	20000474 	.word	0x20000474
 8007138:	200047de 	.word	0x200047de
			flags.Data_Received_Flag = 0;
 800713c:	4ca7      	ldr	r4, [pc, #668]	; (80073dc <Send_BLE_Commands+0x9bc>)
			flags.Start_Command_Response_time = 0;
 800713e:	2201      	movs	r2, #1
 8007140:	4393      	bics	r3, r2
 8007142:	320f      	adds	r2, #15
 8007144:	4393      	bics	r3, r2
 8007146:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8007148:	4ba5      	ldr	r3, [pc, #660]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_1,9);
 800714e:	48a5      	ldr	r0, [pc, #660]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 8007150:	2109      	movs	r1, #9
 8007152:	3020      	adds	r0, #32
 8007154:	f7ff fc4c 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8007158:	7863      	ldrb	r3, [r4, #1]
 800715a:	069b      	lsls	r3, r3, #26
 800715c:	d507      	bpl.n	800716e <Send_BLE_Commands+0x74e>
				Send_Command_State ++;
 800715e:	4aa1      	ldr	r2, [pc, #644]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 8007160:	7813      	ldrb	r3, [r2, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 8007166:	4ba0      	ldr	r3, [pc, #640]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e474      	b.n	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State--;
 800716e:	4a9d      	ldr	r2, [pc, #628]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 8007170:	7813      	ldrb	r3, [r2, #0]
 8007172:	3b01      	subs	r3, #1
 8007174:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8007176:	4a9c      	ldr	r2, [pc, #624]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 8007178:	6813      	ldr	r3, [r2, #0]
 800717a:	3301      	adds	r3, #1
 800717c:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 800717e:	2b02      	cmp	r3, #2
 8007180:	d800      	bhi.n	8007184 <Send_BLE_Commands+0x764>
 8007182:	e469      	b.n	8006a58 <Send_BLE_Commands+0x38>
					Send_Command_State = 0;
 8007184:	4b97      	ldr	r3, [pc, #604]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 8007186:	2200      	movs	r2, #0
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	e465      	b.n	8006a58 <Send_BLE_Commands+0x38>
		check_ble_command_response = 1;
 800718c:	4b97      	ldr	r3, [pc, #604]	; (80073ec <Send_BLE_Commands+0x9cc>)
 800718e:	2201      	movs	r2, #1
 8007190:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_0,5);
 8007192:	4c94      	ldr	r4, [pc, #592]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 8007194:	1d20      	adds	r0, r4, #4
 8007196:	2105      	movs	r1, #5
 8007198:	f002 fa48 	bl	800962c <LP_UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 800719c:	4a8f      	ldr	r2, [pc, #572]	; (80073dc <Send_BLE_Commands+0x9bc>)
 800719e:	7813      	ldrb	r3, [r2, #0]
 80071a0:	2110      	movs	r1, #16
 80071a2:	430b      	orrs	r3, r1
 80071a4:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 80071a6:	4b8e      	ldr	r3, [pc, #568]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 80071ac:	7823      	ldrb	r3, [r4, #0]
 80071ae:	3301      	adds	r3, #1
 80071b0:	7023      	strb	r3, [r4, #0]
		break;
 80071b2:	e451      	b.n	8006a58 <Send_BLE_Commands+0x38>
		if(flags.Data_Received_Flag == 1)
 80071b4:	4b89      	ldr	r3, [pc, #548]	; (80073dc <Send_BLE_Commands+0x9bc>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	d51a      	bpl.n	80071f2 <Send_BLE_Commands+0x7d2>
			flags.Data_Received_Flag = 0;
 80071bc:	4987      	ldr	r1, [pc, #540]	; (80073dc <Send_BLE_Commands+0x9bc>)
			flags.Start_Command_Response_time = 0;
 80071be:	2001      	movs	r0, #1
 80071c0:	4383      	bics	r3, r0
 80071c2:	300f      	adds	r0, #15
 80071c4:	4383      	bics	r3, r0
 80071c6:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 80071c8:	4b85      	ldr	r3, [pc, #532]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 80071ca:	2000      	movs	r0, #0
 80071cc:	6018      	str	r0, [r3, #0]
			if(flags.Response_OK_flag == 1)
 80071ce:	784b      	ldrb	r3, [r1, #1]
 80071d0:	069b      	lsls	r3, r3, #26
 80071d2:	d506      	bpl.n	80071e2 <Send_BLE_Commands+0x7c2>
				Send_Command_State++;
 80071d4:	3201      	adds	r2, #1
 80071d6:	4b83      	ldr	r3, [pc, #524]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 80071d8:	701a      	strb	r2, [r3, #0]
				Send_cmd_Error_Cnt = 0;
 80071da:	4b83      	ldr	r3, [pc, #524]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	e43a      	b.n	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State--;
 80071e2:	3a01      	subs	r2, #1
 80071e4:	4b7f      	ldr	r3, [pc, #508]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 80071e6:	701a      	strb	r2, [r3, #0]
				Send_cmd_Error_Cnt++;
 80071e8:	4a7f      	ldr	r2, [pc, #508]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 80071ea:	6813      	ldr	r3, [r2, #0]
 80071ec:	3301      	adds	r3, #1
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	e432      	b.n	8006a58 <Send_BLE_Commands+0x38>
		else if(flags.Command_Response_timeout == 1)
 80071f2:	065b      	lsls	r3, r3, #25
 80071f4:	d400      	bmi.n	80071f8 <Send_BLE_Commands+0x7d8>
 80071f6:	e42f      	b.n	8006a58 <Send_BLE_Commands+0x38>
			flags.Command_Response_timeout = 0;
 80071f8:	4978      	ldr	r1, [pc, #480]	; (80073dc <Send_BLE_Commands+0x9bc>)
 80071fa:	780b      	ldrb	r3, [r1, #0]
 80071fc:	2040      	movs	r0, #64	; 0x40
 80071fe:	4383      	bics	r3, r0
 8007200:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8007202:	4b77      	ldr	r3, [pc, #476]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 8007204:	2100      	movs	r1, #0
 8007206:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8007208:	3a01      	subs	r2, #1
 800720a:	4b76      	ldr	r3, [pc, #472]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 800720c:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 800720e:	4a76      	ldr	r2, [pc, #472]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 8007210:	6813      	ldr	r3, [r2, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 2)
 8007216:	2b02      	cmp	r3, #2
 8007218:	d801      	bhi.n	800721e <Send_BLE_Commands+0x7fe>
 800721a:	f7ff fc1d 	bl	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State = 0;
 800721e:	4b71      	ldr	r3, [pc, #452]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	f7ff fc18 	bl	8006a58 <Send_BLE_Commands+0x38>
		check_ble_command_response = 2;
 8007228:	4b70      	ldr	r3, [pc, #448]	; (80073ec <Send_BLE_Commands+0x9cc>)
 800722a:	2202      	movs	r2, #2
 800722c:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_1,3);
 800722e:	4c6d      	ldr	r4, [pc, #436]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 8007230:	0020      	movs	r0, r4
 8007232:	300c      	adds	r0, #12
 8007234:	2103      	movs	r1, #3
 8007236:	f002 f9f9 	bl	800962c <LP_UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 800723a:	4a68      	ldr	r2, [pc, #416]	; (80073dc <Send_BLE_Commands+0x9bc>)
 800723c:	7813      	ldrb	r3, [r2, #0]
 800723e:	2110      	movs	r1, #16
 8007240:	430b      	orrs	r3, r1
 8007242:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8007244:	4b66      	ldr	r3, [pc, #408]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 800724a:	7823      	ldrb	r3, [r4, #0]
 800724c:	3301      	adds	r3, #1
 800724e:	7023      	strb	r3, [r4, #0]
		break;
 8007250:	f7ff fc02 	bl	8006a58 <Send_BLE_Commands+0x38>
		if(flags.Data_Received_Flag == 1)
 8007254:	4b61      	ldr	r3, [pc, #388]	; (80073dc <Send_BLE_Commands+0x9bc>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	07d9      	lsls	r1, r3, #31
 800725a:	d41b      	bmi.n	8007294 <Send_BLE_Commands+0x874>
		else if(flags.Command_Response_timeout == 1)
 800725c:	065b      	lsls	r3, r3, #25
 800725e:	d401      	bmi.n	8007264 <Send_BLE_Commands+0x844>
 8007260:	f7ff fbfa 	bl	8006a58 <Send_BLE_Commands+0x38>
			flags.Command_Response_timeout = 0;
 8007264:	495d      	ldr	r1, [pc, #372]	; (80073dc <Send_BLE_Commands+0x9bc>)
 8007266:	780b      	ldrb	r3, [r1, #0]
 8007268:	2040      	movs	r0, #64	; 0x40
 800726a:	4383      	bics	r3, r0
 800726c:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 800726e:	4b5c      	ldr	r3, [pc, #368]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 8007270:	2100      	movs	r1, #0
 8007272:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8007274:	3a01      	subs	r2, #1
 8007276:	4b5b      	ldr	r3, [pc, #364]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 8007278:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 800727a:	4a5b      	ldr	r2, [pc, #364]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 800727c:	6813      	ldr	r3, [r2, #0]
 800727e:	3301      	adds	r3, #1
 8007280:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 3)
 8007282:	2b03      	cmp	r3, #3
 8007284:	d801      	bhi.n	800728a <Send_BLE_Commands+0x86a>
 8007286:	f7ff fbe7 	bl	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State = 0;
 800728a:	4b56      	ldr	r3, [pc, #344]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	f7ff fbe2 	bl	8006a58 <Send_BLE_Commands+0x38>
			flags.Data_Received_Flag = 0;
 8007294:	4c51      	ldr	r4, [pc, #324]	; (80073dc <Send_BLE_Commands+0x9bc>)
			flags.Start_Command_Response_time = 0;
 8007296:	2201      	movs	r2, #1
 8007298:	4393      	bics	r3, r2
 800729a:	320f      	adds	r2, #15
 800729c:	4393      	bics	r3, r2
 800729e:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 80072a0:	4b4f      	ldr	r3, [pc, #316]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_0,5);
 80072a6:	484f      	ldr	r0, [pc, #316]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 80072a8:	2105      	movs	r1, #5
 80072aa:	3010      	adds	r0, #16
 80072ac:	f7ff fba0 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 80072b0:	7863      	ldrb	r3, [r4, #1]
 80072b2:	069b      	lsls	r3, r3, #26
 80072b4:	d508      	bpl.n	80072c8 <Send_BLE_Commands+0x8a8>
				Send_Command_State ++;
 80072b6:	4a4b      	ldr	r2, [pc, #300]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 80072b8:	7813      	ldrb	r3, [r2, #0]
 80072ba:	3301      	adds	r3, #1
 80072bc:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 80072be:	4b4a      	ldr	r3, [pc, #296]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f7ff fbc8 	bl	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State--;
 80072c8:	4a46      	ldr	r2, [pc, #280]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 80072ca:	7813      	ldrb	r3, [r2, #0]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 80072d0:	4a45      	ldr	r2, [pc, #276]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 80072d2:	6813      	ldr	r3, [r2, #0]
 80072d4:	3301      	adds	r3, #1
 80072d6:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d801      	bhi.n	80072e0 <Send_BLE_Commands+0x8c0>
 80072dc:	f7ff fbbc 	bl	8006a58 <Send_BLE_Commands+0x38>
					Send_Command_State = 0;
 80072e0:	4b40      	ldr	r3, [pc, #256]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	f7ff fbb7 	bl	8006a58 <Send_BLE_Commands+0x38>
		check_ble_command_response = 3;
 80072ea:	4b40      	ldr	r3, [pc, #256]	; (80073ec <Send_BLE_Commands+0x9cc>)
 80072ec:	2203      	movs	r2, #3
 80072ee:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_5,5);
 80072f0:	4c3c      	ldr	r4, [pc, #240]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 80072f2:	0020      	movs	r0, r4
 80072f4:	3054      	adds	r0, #84	; 0x54
 80072f6:	2105      	movs	r1, #5
 80072f8:	f002 f998 	bl	800962c <LP_UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 80072fc:	4a37      	ldr	r2, [pc, #220]	; (80073dc <Send_BLE_Commands+0x9bc>)
 80072fe:	7813      	ldrb	r3, [r2, #0]
 8007300:	2110      	movs	r1, #16
 8007302:	430b      	orrs	r3, r1
 8007304:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8007306:	4b36      	ldr	r3, [pc, #216]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 800730c:	7823      	ldrb	r3, [r4, #0]
 800730e:	3301      	adds	r3, #1
 8007310:	7023      	strb	r3, [r4, #0]
		break;
 8007312:	f7ff fba1 	bl	8006a58 <Send_BLE_Commands+0x38>
		if(flags.Data_Received_Flag == 1)
 8007316:	4b31      	ldr	r3, [pc, #196]	; (80073dc <Send_BLE_Commands+0x9bc>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	07d9      	lsls	r1, r3, #31
 800731c:	d41b      	bmi.n	8007356 <Send_BLE_Commands+0x936>
		else if(flags.Command_Response_timeout == 1)
 800731e:	065b      	lsls	r3, r3, #25
 8007320:	d401      	bmi.n	8007326 <Send_BLE_Commands+0x906>
 8007322:	f7ff fb99 	bl	8006a58 <Send_BLE_Commands+0x38>
			flags.Command_Response_timeout = 0;
 8007326:	492d      	ldr	r1, [pc, #180]	; (80073dc <Send_BLE_Commands+0x9bc>)
 8007328:	780b      	ldrb	r3, [r1, #0]
 800732a:	2040      	movs	r0, #64	; 0x40
 800732c:	4383      	bics	r3, r0
 800732e:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8007330:	4b2b      	ldr	r3, [pc, #172]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 8007332:	2100      	movs	r1, #0
 8007334:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8007336:	3a01      	subs	r2, #1
 8007338:	4b2a      	ldr	r3, [pc, #168]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 800733a:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 800733c:	4a2a      	ldr	r2, [pc, #168]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 800733e:	6813      	ldr	r3, [r2, #0]
 8007340:	3301      	adds	r3, #1
 8007342:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 5)
 8007344:	2b05      	cmp	r3, #5
 8007346:	d801      	bhi.n	800734c <Send_BLE_Commands+0x92c>
 8007348:	f7ff fb86 	bl	8006a58 <Send_BLE_Commands+0x38>
				Send_Command_State = 0;
 800734c:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]
}
 8007352:	f7ff fb81 	bl	8006a58 <Send_BLE_Commands+0x38>
			flags.Data_Received_Flag = 0;
 8007356:	4c21      	ldr	r4, [pc, #132]	; (80073dc <Send_BLE_Commands+0x9bc>)
			flags.Start_Command_Response_time = 0;
 8007358:	2201      	movs	r2, #1
 800735a:	4393      	bics	r3, r2
 800735c:	320f      	adds	r2, #15
 800735e:	4393      	bics	r3, r2
 8007360:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8007362:	4b1f      	ldr	r3, [pc, #124]	; (80073e0 <Send_BLE_Commands+0x9c0>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_1,9);
 8007368:	481e      	ldr	r0, [pc, #120]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 800736a:	2109      	movs	r1, #9
 800736c:	3020      	adds	r0, #32
 800736e:	f7ff fb3f 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8007372:	7863      	ldrb	r3, [r4, #1]
 8007374:	069b      	lsls	r3, r3, #26
 8007376:	d410      	bmi.n	800739a <Send_BLE_Commands+0x97a>
				Send_Command_State--;
 8007378:	4a1a      	ldr	r2, [pc, #104]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 800737a:	7813      	ldrb	r3, [r2, #0]
 800737c:	3b01      	subs	r3, #1
 800737e:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8007380:	4a19      	ldr	r2, [pc, #100]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 8007382:	6813      	ldr	r3, [r2, #0]
 8007384:	3301      	adds	r3, #1
 8007386:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 5)
 8007388:	2b05      	cmp	r3, #5
 800738a:	d801      	bhi.n	8007390 <Send_BLE_Commands+0x970>
 800738c:	f7ff fb64 	bl	8006a58 <Send_BLE_Commands+0x38>
					Send_Command_State = 0;
 8007390:	4b14      	ldr	r3, [pc, #80]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	f7ff fb5f 	bl	8006a58 <Send_BLE_Commands+0x38>
				Send_cmd_Error_Cnt = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	4a12      	ldr	r2, [pc, #72]	; (80073e8 <Send_BLE_Commands+0x9c8>)
 800739e:	6013      	str	r3, [r2, #0]
				Ble_Connect_Counter_Response_Time = 0;
 80073a0:	4a13      	ldr	r2, [pc, #76]	; (80073f0 <Send_BLE_Commands+0x9d0>)
 80073a2:	6013      	str	r3, [r2, #0]
				flags.Start_Ble_Connect_timeout_flag = 1;
 80073a4:	4c0d      	ldr	r4, [pc, #52]	; (80073dc <Send_BLE_Commands+0x9bc>)
 80073a6:	78e3      	ldrb	r3, [r4, #3]
 80073a8:	2504      	movs	r5, #4
 80073aa:	2204      	movs	r2, #4
 80073ac:	4313      	orrs	r3, r2
 80073ae:	70e3      	strb	r3, [r4, #3]
				BLEControl_H;
 80073b0:	20a0      	movs	r0, #160	; 0xa0
 80073b2:	2201      	movs	r2, #1
 80073b4:	2101      	movs	r1, #1
 80073b6:	05c0      	lsls	r0, r0, #23
 80073b8:	f7fb fefb 	bl	80031b2 <HAL_GPIO_WritePin>
				Send_Command_State++;
 80073bc:	4a09      	ldr	r2, [pc, #36]	; (80073e4 <Send_BLE_Commands+0x9c4>)
 80073be:	7813      	ldrb	r3, [r2, #0]
 80073c0:	3301      	adds	r3, #1
 80073c2:	7013      	strb	r3, [r2, #0]
				check_ble_command_response = 4;
 80073c4:	4b09      	ldr	r3, [pc, #36]	; (80073ec <Send_BLE_Commands+0x9cc>)
 80073c6:	701d      	strb	r5, [r3, #0]
				flags.Initialize_ble_flag = 0;
 80073c8:	78a3      	ldrb	r3, [r4, #2]
 80073ca:	43ab      	bics	r3, r5
 80073cc:	70a3      	strb	r3, [r4, #2]
				flags.Start_Led_blinking = 1;
 80073ce:	79a3      	ldrb	r3, [r4, #6]
 80073d0:	2220      	movs	r2, #32
 80073d2:	4313      	orrs	r3, r2
 80073d4:	71a3      	strb	r3, [r4, #6]
 80073d6:	f7ff fb3f 	bl	8006a58 <Send_BLE_Commands+0x38>
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	2000032c 	.word	0x2000032c
 80073e0:	20000240 	.word	0x20000240
 80073e4:	2000000c 	.word	0x2000000c
 80073e8:	200002ec 	.word	0x200002ec
 80073ec:	200047de 	.word	0x200047de
 80073f0:	20000244 	.word	0x20000244

080073f4 <Check_Device_Connection>:
 * @param  None
 * @retval None
 */

void Check_Device_Connection()
{
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Check_Response_1(BLE_Response_4,6);
 80073f6:	4847      	ldr	r0, [pc, #284]	; (8007514 <Check_Device_Connection+0x120>)
 80073f8:	2106      	movs	r1, #6
 80073fa:	305c      	adds	r0, #92	; 0x5c
 80073fc:	f7ff fae0 	bl	80069c0 <Check_Response_1>
	if(flags.Response_OK_flag == 1)
 8007400:	4b45      	ldr	r3, [pc, #276]	; (8007518 <Check_Device_Connection+0x124>)
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	069b      	lsls	r3, r3, #26
 8007406:	d509      	bpl.n	800741c <Check_Device_Connection+0x28>
	{
		flags.Data_Received_Flag = 1;
 8007408:	4b43      	ldr	r3, [pc, #268]	; (8007518 <Check_Device_Connection+0x124>)
 800740a:	781a      	ldrb	r2, [r3, #0]
 800740c:	2101      	movs	r1, #1
 800740e:	430a      	orrs	r2, r1
 8007410:	701a      	strb	r2, [r3, #0]
		flags.F_Device_Data_Received = 0;
 8007412:	789a      	ldrb	r2, [r3, #2]
 8007414:	2110      	movs	r1, #16
 8007416:	438a      	bics	r2, r1
 8007418:	709a      	strb	r2, [r3, #2]
					flags.Pair_data_Received_Flag = 0;
				}
			}
		}
	}
}
 800741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Check_Response_1(BLE_Response_2,12);
 800741c:	483d      	ldr	r0, [pc, #244]	; (8007514 <Check_Device_Connection+0x120>)
 800741e:	210c      	movs	r1, #12
 8007420:	3068      	adds	r0, #104	; 0x68
 8007422:	f7ff facd 	bl	80069c0 <Check_Response_1>
		if(flags.Response_OK_flag == 1)
 8007426:	4b3c      	ldr	r3, [pc, #240]	; (8007518 <Check_Device_Connection+0x124>)
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	069b      	lsls	r3, r3, #26
 800742c:	d516      	bpl.n	800745c <Check_Device_Connection+0x68>
			if(flags.Communication_started_flag == 1)
 800742e:	4b3a      	ldr	r3, [pc, #232]	; (8007518 <Check_Device_Connection+0x124>)
 8007430:	78db      	ldrb	r3, [r3, #3]
 8007432:	069b      	lsls	r3, r3, #26
 8007434:	d505      	bpl.n	8007442 <Check_Device_Connection+0x4e>
				flags.Disconnect_ble_flag = 1;
 8007436:	4a38      	ldr	r2, [pc, #224]	; (8007518 <Check_Device_Connection+0x124>)
 8007438:	78d1      	ldrb	r1, [r2, #3]
 800743a:	2380      	movs	r3, #128	; 0x80
 800743c:	425b      	negs	r3, r3
 800743e:	430b      	orrs	r3, r1
 8007440:	70d3      	strb	r3, [r2, #3]
			Send_cmd_Error_Cnt = 0;
 8007442:	4b36      	ldr	r3, [pc, #216]	; (800751c <Check_Device_Connection+0x128>)
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
			flags.F_Device_Data_Received = 0;
 8007448:	4b33      	ldr	r3, [pc, #204]	; (8007518 <Check_Device_Connection+0x124>)
 800744a:	789a      	ldrb	r2, [r3, #2]
 800744c:	2110      	movs	r1, #16
 800744e:	438a      	bics	r2, r1
 8007450:	709a      	strb	r2, [r3, #2]
			flags.Pair_data_Received_Flag = 0;
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	390c      	subs	r1, #12
 8007456:	438a      	bics	r2, r1
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	e7de      	b.n	800741a <Check_Device_Connection+0x26>
			Check_Response_1(BLE_Response_3,6);
 800745c:	482d      	ldr	r0, [pc, #180]	; (8007514 <Check_Device_Connection+0x120>)
 800745e:	2106      	movs	r1, #6
 8007460:	3078      	adds	r0, #120	; 0x78
 8007462:	f7ff faad 	bl	80069c0 <Check_Response_1>
			if(flags.Response_OK_flag == 1)
 8007466:	4b2c      	ldr	r3, [pc, #176]	; (8007518 <Check_Device_Connection+0x124>)
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	069b      	lsls	r3, r3, #26
 800746c:	d51c      	bpl.n	80074a8 <Check_Device_Connection+0xb4>
				Ble_Connect_Counter_Response_Time = 0;
 800746e:	4f2c      	ldr	r7, [pc, #176]	; (8007520 <Check_Device_Connection+0x12c>)
 8007470:	2600      	movs	r6, #0
 8007472:	603e      	str	r6, [r7, #0]
				flags.Start_Ble_Connect_timeout_flag = 0;
 8007474:	4c28      	ldr	r4, [pc, #160]	; (8007518 <Check_Device_Connection+0x124>)
 8007476:	78e3      	ldrb	r3, [r4, #3]
 8007478:	2504      	movs	r5, #4
 800747a:	43ab      	bics	r3, r5
 800747c:	70e3      	strb	r3, [r4, #3]
				BLEControl_L;
 800747e:	20a0      	movs	r0, #160	; 0xa0
 8007480:	2200      	movs	r2, #0
 8007482:	2101      	movs	r1, #1
 8007484:	05c0      	lsls	r0, r0, #23
 8007486:	f7fb fe94 	bl	80031b2 <HAL_GPIO_WritePin>
				Send_cmd_Error_Cnt = 0;
 800748a:	4b24      	ldr	r3, [pc, #144]	; (800751c <Check_Device_Connection+0x128>)
 800748c:	601e      	str	r6, [r3, #0]
				flags.Ble_connected_flag = 1;
 800748e:	78a3      	ldrb	r3, [r4, #2]
 8007490:	2208      	movs	r2, #8
 8007492:	4313      	orrs	r3, r2
				flags.Initialize_ble_flag = 0;
 8007494:	b2db      	uxtb	r3, r3
				flags.F_Device_Data_Received = 0;
 8007496:	43ab      	bics	r3, r5
 8007498:	2210      	movs	r2, #16
 800749a:	4393      	bics	r3, r2
 800749c:	70a3      	strb	r3, [r4, #2]
				Ble_Connect_Counter_Response_Time = 0;
 800749e:	603e      	str	r6, [r7, #0]
				flags.Pair_data_Received_Flag = 0;
 80074a0:	7823      	ldrb	r3, [r4, #0]
 80074a2:	43ab      	bics	r3, r5
 80074a4:	7023      	strb	r3, [r4, #0]
				flags.F_Device_Data_Received = 0;
 80074a6:	e7b8      	b.n	800741a <Check_Device_Connection+0x26>
				Check_Response_1(BLE_Response_5,8);
 80074a8:	2108      	movs	r1, #8
 80074aa:	481e      	ldr	r0, [pc, #120]	; (8007524 <Check_Device_Connection+0x130>)
 80074ac:	f7ff fa88 	bl	80069c0 <Check_Response_1>
				if(flags.Response_OK_flag == 1)
 80074b0:	4b19      	ldr	r3, [pc, #100]	; (8007518 <Check_Device_Connection+0x124>)
 80074b2:	785b      	ldrb	r3, [r3, #1]
 80074b4:	069b      	lsls	r3, r3, #26
 80074b6:	d40c      	bmi.n	80074d2 <Check_Device_Connection+0xde>
					Send_cmd_Error_Cnt = 0;
 80074b8:	4b18      	ldr	r3, [pc, #96]	; (800751c <Check_Device_Connection+0x128>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
					flags.F_Device_Data_Received = 0;
 80074be:	4b16      	ldr	r3, [pc, #88]	; (8007518 <Check_Device_Connection+0x124>)
 80074c0:	789a      	ldrb	r2, [r3, #2]
 80074c2:	2110      	movs	r1, #16
 80074c4:	438a      	bics	r2, r1
 80074c6:	709a      	strb	r2, [r3, #2]
					flags.Pair_data_Received_Flag = 0;
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	390c      	subs	r1, #12
 80074cc:	438a      	bics	r2, r1
 80074ce:	701a      	strb	r2, [r3, #0]
}
 80074d0:	e7a3      	b.n	800741a <Check_Device_Connection+0x26>
					Ble_Connect_Counter_Response_Time = 0;
 80074d2:	4f13      	ldr	r7, [pc, #76]	; (8007520 <Check_Device_Connection+0x12c>)
 80074d4:	2600      	movs	r6, #0
 80074d6:	603e      	str	r6, [r7, #0]
					flags.Start_Ble_Connect_timeout_flag = 0;
 80074d8:	4c0f      	ldr	r4, [pc, #60]	; (8007518 <Check_Device_Connection+0x124>)
 80074da:	78e3      	ldrb	r3, [r4, #3]
 80074dc:	2504      	movs	r5, #4
 80074de:	43ab      	bics	r3, r5
 80074e0:	70e3      	strb	r3, [r4, #3]
					BLEControl_L;
 80074e2:	20a0      	movs	r0, #160	; 0xa0
 80074e4:	2200      	movs	r2, #0
 80074e6:	2101      	movs	r1, #1
 80074e8:	05c0      	lsls	r0, r0, #23
 80074ea:	f7fb fe62 	bl	80031b2 <HAL_GPIO_WritePin>
					Send_cmd_Error_Cnt = 0;
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <Check_Device_Connection+0x128>)
 80074f0:	601e      	str	r6, [r3, #0]
					flags.Ble_connected_flag = 1;
 80074f2:	78a3      	ldrb	r3, [r4, #2]
 80074f4:	2208      	movs	r2, #8
 80074f6:	4313      	orrs	r3, r2
					flags.Initialize_ble_flag = 0;
 80074f8:	b2db      	uxtb	r3, r3
					flags.F_Device_Data_Received = 0;
 80074fa:	43ab      	bics	r3, r5
 80074fc:	2210      	movs	r2, #16
 80074fe:	4393      	bics	r3, r2
 8007500:	70a3      	strb	r3, [r4, #2]
					flags.Start_Ble_Connect_timeout_flag = 0;
 8007502:	78e3      	ldrb	r3, [r4, #3]
 8007504:	43ab      	bics	r3, r5
 8007506:	70e3      	strb	r3, [r4, #3]
					Ble_Connect_Counter_Response_Time = 0;
 8007508:	603e      	str	r6, [r7, #0]
					flags.Pair_data_Received_Flag = 0;
 800750a:	7823      	ldrb	r3, [r4, #0]
 800750c:	43ab      	bics	r3, r5
 800750e:	7023      	strb	r3, [r4, #0]
					flags.F_Device_Data_Received = 0;
 8007510:	e783      	b.n	800741a <Check_Device_Connection+0x26>
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	2000000c 	.word	0x2000000c
 8007518:	2000032c 	.word	0x2000032c
 800751c:	200002ec 	.word	0x200002ec
 8007520:	20000244 	.word	0x20000244
 8007524:	2000008c 	.word	0x2000008c

08007528 <Send_BLE_Beacons_Commands>:

void Send_BLE_Beacons_Commands(void)
{
 8007528:	b570      	push	{r4, r5, r6, lr}
	switch(Send_Command_State)
 800752a:	4bda      	ldr	r3, [pc, #872]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 800752c:	781a      	ldrb	r2, [r3, #0]
 800752e:	2a10      	cmp	r2, #16
 8007530:	d81f      	bhi.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
 8007532:	0093      	lsls	r3, r2, #2
 8007534:	49d8      	ldr	r1, [pc, #864]	; (8007898 <Send_BLE_Beacons_Commands+0x370>)
 8007536:	58cb      	ldr	r3, [r1, r3]
 8007538:	469f      	mov	pc, r3
	{
	case 0:
		check_ble_command_response = 1;
 800753a:	4bd8      	ldr	r3, [pc, #864]	; (800789c <Send_BLE_Beacons_Commands+0x374>)
 800753c:	2201      	movs	r2, #1
 800753e:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_0,5);
 8007540:	4cd4      	ldr	r4, [pc, #848]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007542:	1d25      	adds	r5, r4, #4
 8007544:	2105      	movs	r1, #5
 8007546:	0028      	movs	r0, r5
 8007548:	f002 f870 	bl	800962c <LP_UART1_Transmit>
#if(D_DEBUG1)
		UART1_Transmit(BM71_Command_0,5);
 800754c:	2105      	movs	r1, #5
 800754e:	0028      	movs	r0, r5
 8007550:	f002 f85a 	bl	8009608 <UART1_Transmit>
#endif
		flags.Start_Command_Response_time = 1;
 8007554:	4ad2      	ldr	r2, [pc, #840]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 8007556:	7813      	ldrb	r3, [r2, #0]
 8007558:	2110      	movs	r1, #16
 800755a:	430b      	orrs	r3, r1
 800755c:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 800755e:	4bd1      	ldr	r3, [pc, #836]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 8007564:	20fa      	movs	r0, #250	; 0xfa
 8007566:	0080      	lsls	r0, r0, #2
 8007568:	f7fa ff4c 	bl	8002404 <HAL_Delay>
		Send_Command_State++;
 800756c:	7823      	ldrb	r3, [r4, #0]
 800756e:	3301      	adds	r3, #1
 8007570:	7023      	strb	r3, [r4, #0]
		Ble_Connect_Counter_Response_Time = 0;
		flags.Tag_printing_done_flag=1;
		//check_ble_command_response = 1;
		break;
	}
}
 8007572:	bd70      	pop	{r4, r5, r6, pc}
		if(flags.Data_Received_Flag == 1)
 8007574:	4bca      	ldr	r3, [pc, #808]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	07d9      	lsls	r1, r3, #31
 800757a:	d525      	bpl.n	80075c8 <Send_BLE_Beacons_Commands+0xa0>
			flags.Data_Received_Flag = 0;
 800757c:	49c8      	ldr	r1, [pc, #800]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
			flags.Start_Command_Response_time = 0;
 800757e:	2001      	movs	r0, #1
 8007580:	4383      	bics	r3, r0
 8007582:	300f      	adds	r0, #15
 8007584:	4383      	bics	r3, r0
 8007586:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8007588:	4bc6      	ldr	r3, [pc, #792]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 800758a:	2000      	movs	r0, #0
 800758c:	6018      	str	r0, [r3, #0]
			if(flags.Response_OK_flag == 1)
 800758e:	784b      	ldrb	r3, [r1, #1]
 8007590:	069b      	lsls	r3, r3, #26
 8007592:	d40c      	bmi.n	80075ae <Send_BLE_Beacons_Commands+0x86>
				Send_Command_State--;
 8007594:	3a01      	subs	r2, #1
 8007596:	4bbf      	ldr	r3, [pc, #764]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007598:	701a      	strb	r2, [r3, #0]
				Send_cmd_Error_Cnt++;
 800759a:	4ac3      	ldr	r2, [pc, #780]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 800759c:	6813      	ldr	r3, [r2, #0]
 800759e:	3301      	adds	r3, #1
 80075a0:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d9e5      	bls.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
					Send_Command_State = 0;
 80075a6:	4bbb      	ldr	r3, [pc, #748]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	e7e1      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				UART1_Transmit(Response_string_1,13);
 80075ae:	48bf      	ldr	r0, [pc, #764]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 80075b0:	210d      	movs	r1, #13
 80075b2:	300c      	adds	r0, #12
 80075b4:	f002 f828 	bl	8009608 <UART1_Transmit>
				Send_Command_State++;
 80075b8:	4ab6      	ldr	r2, [pc, #728]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80075ba:	7813      	ldrb	r3, [r2, #0]
 80075bc:	3301      	adds	r3, #1
 80075be:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 80075c0:	4bb9      	ldr	r3, [pc, #740]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	e7d4      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		else if(flags.Command_Response_timeout == 1)
 80075c8:	065b      	lsls	r3, r3, #25
 80075ca:	d5d2      	bpl.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Command_Response_timeout = 0;
 80075cc:	49b4      	ldr	r1, [pc, #720]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 80075ce:	780b      	ldrb	r3, [r1, #0]
 80075d0:	2040      	movs	r0, #64	; 0x40
 80075d2:	4383      	bics	r3, r0
 80075d4:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 80075d6:	4bb3      	ldr	r3, [pc, #716]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 80075d8:	2100      	movs	r1, #0
 80075da:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 80075dc:	3a01      	subs	r2, #1
 80075de:	4bad      	ldr	r3, [pc, #692]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80075e0:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 80075e2:	4ab1      	ldr	r2, [pc, #708]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 80075e4:	6813      	ldr	r3, [r2, #0]
 80075e6:	3301      	adds	r3, #1
 80075e8:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 5)
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d907      	bls.n	80075fe <Send_BLE_Beacons_Commands+0xd6>
				Send_Command_State = 0;
 80075ee:	4ba9      	ldr	r3, [pc, #676]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
				flags.Shutdown_MCU_mosfet=1;
 80075f4:	4aaa      	ldr	r2, [pc, #680]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 80075f6:	78d3      	ldrb	r3, [r2, #3]
 80075f8:	2108      	movs	r1, #8
 80075fa:	430b      	orrs	r3, r1
 80075fc:	70d3      	strb	r3, [r2, #3]
			UART1_Transmit(Response_string_2,19);
 80075fe:	48ab      	ldr	r0, [pc, #684]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 8007600:	2113      	movs	r1, #19
 8007602:	301c      	adds	r0, #28
 8007604:	f002 f800 	bl	8009608 <UART1_Transmit>
 8007608:	e7b3      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		check_ble_command_response = 2;
 800760a:	4ba4      	ldr	r3, [pc, #656]	; (800789c <Send_BLE_Beacons_Commands+0x374>)
 800760c:	2202      	movs	r2, #2
 800760e:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_11,1);
 8007610:	48a6      	ldr	r0, [pc, #664]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 8007612:	2101      	movs	r1, #1
 8007614:	3030      	adds	r0, #48	; 0x30
 8007616:	f002 f809 	bl	800962c <LP_UART1_Transmit>
		HAL_Delay(100);
 800761a:	2064      	movs	r0, #100	; 0x64
 800761c:	f7fa fef2 	bl	8002404 <HAL_Delay>
		LP_UART1_Transmit(BM71_Command_1,3);
 8007620:	4c9c      	ldr	r4, [pc, #624]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007622:	0025      	movs	r5, r4
 8007624:	350c      	adds	r5, #12
 8007626:	2103      	movs	r1, #3
 8007628:	0028      	movs	r0, r5
 800762a:	f001 ffff 	bl	800962c <LP_UART1_Transmit>
		UART1_Transmit(BM71_Command_1,3);
 800762e:	2103      	movs	r1, #3
 8007630:	0028      	movs	r0, r5
 8007632:	f001 ffe9 	bl	8009608 <UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 8007636:	4a9a      	ldr	r2, [pc, #616]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 8007638:	7813      	ldrb	r3, [r2, #0]
 800763a:	2110      	movs	r1, #16
 800763c:	430b      	orrs	r3, r1
 800763e:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8007640:	4b98      	ldr	r3, [pc, #608]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 8007646:	7823      	ldrb	r3, [r4, #0]
 8007648:	3301      	adds	r3, #1
 800764a:	7023      	strb	r3, [r4, #0]
		break;
 800764c:	e791      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		if(flags.Data_Received_Flag == 1)
 800764e:	4b94      	ldr	r3, [pc, #592]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	07d9      	lsls	r1, r3, #31
 8007654:	d41e      	bmi.n	8007694 <Send_BLE_Beacons_Commands+0x16c>
		else if(flags.Command_Response_timeout == 1)
 8007656:	065b      	lsls	r3, r3, #25
 8007658:	d400      	bmi.n	800765c <Send_BLE_Beacons_Commands+0x134>
 800765a:	e78a      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Command_Response_timeout = 0;
 800765c:	4990      	ldr	r1, [pc, #576]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 800765e:	780b      	ldrb	r3, [r1, #0]
 8007660:	2040      	movs	r0, #64	; 0x40
 8007662:	4383      	bics	r3, r0
 8007664:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8007666:	4b8f      	ldr	r3, [pc, #572]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 8007668:	2100      	movs	r1, #0
 800766a:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 800766c:	3a01      	subs	r2, #1
 800766e:	4b89      	ldr	r3, [pc, #548]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007670:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 8007672:	4a8d      	ldr	r2, [pc, #564]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 8007674:	6813      	ldr	r3, [r2, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	6013      	str	r3, [r2, #0]
			if(Send_cmd_Error_Cnt > 5)
 800767a:	2b05      	cmp	r3, #5
 800767c:	d904      	bls.n	8007688 <Send_BLE_Beacons_Commands+0x160>
				Send_Command_State = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	4a84      	ldr	r2, [pc, #528]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007682:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 8007684:	4a88      	ldr	r2, [pc, #544]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 8007686:	6013      	str	r3, [r2, #0]
			UART1_Transmit(Response_string_2,19);
 8007688:	4888      	ldr	r0, [pc, #544]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 800768a:	2113      	movs	r1, #19
 800768c:	301c      	adds	r0, #28
 800768e:	f001 ffbb 	bl	8009608 <UART1_Transmit>
 8007692:	e76e      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Data_Received_Flag = 0;
 8007694:	4c82      	ldr	r4, [pc, #520]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
			flags.Start_Command_Response_time = 0;
 8007696:	2201      	movs	r2, #1
 8007698:	4393      	bics	r3, r2
 800769a:	320f      	adds	r2, #15
 800769c:	4393      	bics	r3, r2
 800769e:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 80076a0:	4b80      	ldr	r3, [pc, #512]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_0,5);
 80076a6:	487b      	ldr	r0, [pc, #492]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80076a8:	2105      	movs	r1, #5
 80076aa:	3010      	adds	r0, #16
 80076ac:	f7ff f9a0 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 80076b0:	7863      	ldrb	r3, [r4, #1]
 80076b2:	069b      	lsls	r3, r3, #26
 80076b4:	d414      	bmi.n	80076e0 <Send_BLE_Beacons_Commands+0x1b8>
				Send_Command_State--;
 80076b6:	4a77      	ldr	r2, [pc, #476]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80076b8:	7813      	ldrb	r3, [r2, #0]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 80076be:	4a7a      	ldr	r2, [pc, #488]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 80076c0:	6813      	ldr	r3, [r2, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d904      	bls.n	80076d4 <Send_BLE_Beacons_Commands+0x1ac>
					Send_Command_State = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	4a71      	ldr	r2, [pc, #452]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80076ce:	7013      	strb	r3, [r2, #0]
					Send_cmd_Error_Cnt = 0;
 80076d0:	4a75      	ldr	r2, [pc, #468]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 80076d2:	6013      	str	r3, [r2, #0]
				UART1_Transmit(Response_string_2,19);
 80076d4:	4875      	ldr	r0, [pc, #468]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 80076d6:	2113      	movs	r1, #19
 80076d8:	301c      	adds	r0, #28
 80076da:	f001 ff95 	bl	8009608 <UART1_Transmit>
 80076de:	e748      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				UART1_Transmit(Response_string_1,13);
 80076e0:	4872      	ldr	r0, [pc, #456]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 80076e2:	210d      	movs	r1, #13
 80076e4:	300c      	adds	r0, #12
 80076e6:	f001 ff8f 	bl	8009608 <UART1_Transmit>
				Send_Command_State++;
 80076ea:	4a6a      	ldr	r2, [pc, #424]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80076ec:	7813      	ldrb	r3, [r2, #0]
 80076ee:	3301      	adds	r3, #1
 80076f0:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 80076f2:	4b6d      	ldr	r3, [pc, #436]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e73b      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		check_ble_command_response = 3;
 80076fa:	4b68      	ldr	r3, [pc, #416]	; (800789c <Send_BLE_Beacons_Commands+0x374>)
 80076fc:	2203      	movs	r2, #3
 80076fe:	701a      	strb	r2, [r3, #0]
		LP_UART1_Transmit(BM71_Command_6,5);
 8007700:	4c64      	ldr	r4, [pc, #400]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007702:	0025      	movs	r5, r4
 8007704:	3518      	adds	r5, #24
 8007706:	2105      	movs	r1, #5
 8007708:	0028      	movs	r0, r5
 800770a:	f001 ff8f 	bl	800962c <LP_UART1_Transmit>
		UART1_Transmit(BM71_Command_6,5);
 800770e:	2105      	movs	r1, #5
 8007710:	0028      	movs	r0, r5
 8007712:	f001 ff79 	bl	8009608 <UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 8007716:	4a62      	ldr	r2, [pc, #392]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 8007718:	7813      	ldrb	r3, [r2, #0]
 800771a:	2110      	movs	r1, #16
 800771c:	430b      	orrs	r3, r1
 800771e:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8007720:	4b60      	ldr	r3, [pc, #384]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 8007726:	7823      	ldrb	r3, [r4, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	7023      	strb	r3, [r4, #0]
		break;
 800772c:	e721      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		if(flags.Data_Received_Flag == 1)
 800772e:	4b5c      	ldr	r3, [pc, #368]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	07d9      	lsls	r1, r3, #31
 8007734:	d41e      	bmi.n	8007774 <Send_BLE_Beacons_Commands+0x24c>
		else if(flags.Command_Response_timeout == 1)
 8007736:	065b      	lsls	r3, r3, #25
 8007738:	d400      	bmi.n	800773c <Send_BLE_Beacons_Commands+0x214>
 800773a:	e71a      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Command_Response_timeout = 0;
 800773c:	4958      	ldr	r1, [pc, #352]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 800773e:	780b      	ldrb	r3, [r1, #0]
 8007740:	2040      	movs	r0, #64	; 0x40
 8007742:	4383      	bics	r3, r0
 8007744:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8007746:	4b57      	ldr	r3, [pc, #348]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 8007748:	2100      	movs	r1, #0
 800774a:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 800774c:	3a01      	subs	r2, #1
 800774e:	4b51      	ldr	r3, [pc, #324]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007750:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 8007752:	4c55      	ldr	r4, [pc, #340]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	3301      	adds	r3, #1
 8007758:	6023      	str	r3, [r4, #0]
			UART1_Transmit(Response_string_2,19);
 800775a:	4854      	ldr	r0, [pc, #336]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 800775c:	3113      	adds	r1, #19
 800775e:	301c      	adds	r0, #28
 8007760:	f001 ff52 	bl	8009608 <UART1_Transmit>
			if(Send_cmd_Error_Cnt > 2)
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d800      	bhi.n	800776c <Send_BLE_Beacons_Commands+0x244>
 800776a:	e702      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				Send_Command_State = 0;
 800776c:	4b49      	ldr	r3, [pc, #292]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	e6fe      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Data_Received_Flag = 0;
 8007774:	4c4a      	ldr	r4, [pc, #296]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
			flags.Start_Command_Response_time = 0;
 8007776:	2201      	movs	r2, #1
 8007778:	4393      	bics	r3, r2
 800777a:	320f      	adds	r2, #15
 800777c:	4393      	bics	r3, r2
 800777e:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8007780:	4b48      	ldr	r3, [pc, #288]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_1,9);
 8007786:	4843      	ldr	r0, [pc, #268]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007788:	2109      	movs	r1, #9
 800778a:	3020      	adds	r0, #32
 800778c:	f7ff f930 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8007790:	7863      	ldrb	r3, [r4, #1]
 8007792:	069b      	lsls	r3, r3, #26
 8007794:	d412      	bmi.n	80077bc <Send_BLE_Beacons_Commands+0x294>
				Send_Command_State--;
 8007796:	4a3f      	ldr	r2, [pc, #252]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007798:	7813      	ldrb	r3, [r2, #0]
 800779a:	3b01      	subs	r3, #1
 800779c:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 800779e:	4a42      	ldr	r2, [pc, #264]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 80077a0:	6813      	ldr	r3, [r2, #0]
 80077a2:	3301      	adds	r3, #1
 80077a4:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d902      	bls.n	80077b0 <Send_BLE_Beacons_Commands+0x288>
					Send_Command_State = 0;
 80077aa:	4b3a      	ldr	r3, [pc, #232]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	701a      	strb	r2, [r3, #0]
				UART1_Transmit(Response_string_2,19);
 80077b0:	483e      	ldr	r0, [pc, #248]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 80077b2:	2113      	movs	r1, #19
 80077b4:	301c      	adds	r0, #28
 80077b6:	f001 ff27 	bl	8009608 <UART1_Transmit>
 80077ba:	e6da      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				UART1_Transmit(Response_string_1,13);
 80077bc:	483b      	ldr	r0, [pc, #236]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 80077be:	210d      	movs	r1, #13
 80077c0:	300c      	adds	r0, #12
 80077c2:	f001 ff21 	bl	8009608 <UART1_Transmit>
				Send_Command_State ++;
 80077c6:	4a33      	ldr	r2, [pc, #204]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80077c8:	7813      	ldrb	r3, [r2, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 80077ce:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	e6cd      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		LP_UART1_Transmit(BM71_Command_8,6);
 80077d6:	4c35      	ldr	r4, [pc, #212]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 80077d8:	3434      	adds	r4, #52	; 0x34
 80077da:	2106      	movs	r1, #6
 80077dc:	0020      	movs	r0, r4
 80077de:	f001 ff25 	bl	800962c <LP_UART1_Transmit>
		UART1_Transmit(BM71_Command_8,6);
 80077e2:	2106      	movs	r1, #6
 80077e4:	0020      	movs	r0, r4
 80077e6:	f001 ff0f 	bl	8009608 <UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 80077ea:	4a2d      	ldr	r2, [pc, #180]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 80077ec:	7813      	ldrb	r3, [r2, #0]
 80077ee:	2110      	movs	r1, #16
 80077f0:	430b      	orrs	r3, r1
 80077f2:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 80077f4:	4b2b      	ldr	r3, [pc, #172]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 80077fa:	4a26      	ldr	r2, [pc, #152]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 80077fc:	7813      	ldrb	r3, [r2, #0]
 80077fe:	3301      	adds	r3, #1
 8007800:	7013      	strb	r3, [r2, #0]
		break;
 8007802:	e6b6      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		if(flags.Data_Received_Flag == 1)
 8007804:	4b26      	ldr	r3, [pc, #152]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	07d9      	lsls	r1, r3, #31
 800780a:	d41e      	bmi.n	800784a <Send_BLE_Beacons_Commands+0x322>
		else if(flags.Command_Response_timeout == 1)
 800780c:	065b      	lsls	r3, r3, #25
 800780e:	d400      	bmi.n	8007812 <Send_BLE_Beacons_Commands+0x2ea>
 8007810:	e6af      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Command_Response_timeout = 0;
 8007812:	4923      	ldr	r1, [pc, #140]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
 8007814:	780b      	ldrb	r3, [r1, #0]
 8007816:	2040      	movs	r0, #64	; 0x40
 8007818:	4383      	bics	r3, r0
 800781a:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 800781c:	4b21      	ldr	r3, [pc, #132]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 800781e:	2100      	movs	r1, #0
 8007820:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8007822:	3a01      	subs	r2, #1
 8007824:	4b1b      	ldr	r3, [pc, #108]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007826:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 8007828:	4c1f      	ldr	r4, [pc, #124]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	6023      	str	r3, [r4, #0]
			UART1_Transmit(Response_string_2,19);
 8007830:	481e      	ldr	r0, [pc, #120]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 8007832:	3113      	adds	r1, #19
 8007834:	301c      	adds	r0, #28
 8007836:	f001 fee7 	bl	8009608 <UART1_Transmit>
			if(Send_cmd_Error_Cnt > 2)
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d800      	bhi.n	8007842 <Send_BLE_Beacons_Commands+0x31a>
 8007840:	e697      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				Send_Command_State = 0;
 8007842:	4b14      	ldr	r3, [pc, #80]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e693      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Data_Received_Flag = 0;
 800784a:	4c15      	ldr	r4, [pc, #84]	; (80078a0 <Send_BLE_Beacons_Commands+0x378>)
			flags.Start_Command_Response_time = 0;
 800784c:	2201      	movs	r2, #1
 800784e:	4393      	bics	r3, r2
 8007850:	320f      	adds	r2, #15
 8007852:	4393      	bics	r3, r2
 8007854:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <Send_BLE_Beacons_Commands+0x37c>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_1,9);
 800785c:	480d      	ldr	r0, [pc, #52]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 800785e:	2109      	movs	r1, #9
 8007860:	3020      	adds	r0, #32
 8007862:	f7ff f8c5 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8007866:	7863      	ldrb	r3, [r4, #1]
 8007868:	069b      	lsls	r3, r3, #26
 800786a:	d421      	bmi.n	80078b0 <Send_BLE_Beacons_Commands+0x388>
				Send_Command_State--;
 800786c:	4a09      	ldr	r2, [pc, #36]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 800786e:	7813      	ldrb	r3, [r2, #0]
 8007870:	3b01      	subs	r3, #1
 8007872:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8007874:	4a0c      	ldr	r2, [pc, #48]	; (80078a8 <Send_BLE_Beacons_Commands+0x380>)
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	3301      	adds	r3, #1
 800787a:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 800787c:	2b02      	cmp	r3, #2
 800787e:	d902      	bls.n	8007886 <Send_BLE_Beacons_Commands+0x35e>
					Send_Command_State = 0;
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <Send_BLE_Beacons_Commands+0x36c>)
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
				UART1_Transmit(Response_string_2,19);
 8007886:	4809      	ldr	r0, [pc, #36]	; (80078ac <Send_BLE_Beacons_Commands+0x384>)
 8007888:	2113      	movs	r1, #19
 800788a:	301c      	adds	r0, #28
 800788c:	f001 febc 	bl	8009608 <UART1_Transmit>
 8007890:	e66f      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	2000000c 	.word	0x2000000c
 8007898:	0800cae0 	.word	0x0800cae0
 800789c:	200047de 	.word	0x200047de
 80078a0:	2000032c 	.word	0x2000032c
 80078a4:	20000240 	.word	0x20000240
 80078a8:	200002ec 	.word	0x200002ec
 80078ac:	2000008c 	.word	0x2000008c
				UART1_Transmit(Response_string_1,13);
 80078b0:	48dc      	ldr	r0, [pc, #880]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 80078b2:	210d      	movs	r1, #13
 80078b4:	300c      	adds	r0, #12
 80078b6:	f001 fea7 	bl	8009608 <UART1_Transmit>
				Send_Command_State ++;
 80078ba:	4adb      	ldr	r2, [pc, #876]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 80078bc:	7813      	ldrb	r3, [r2, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 80078c2:	4bda      	ldr	r3, [pc, #872]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	e653      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		LP_UART1_Transmit(BM71_Command_9,10);
 80078ca:	4cd6      	ldr	r4, [pc, #856]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 80078cc:	343c      	adds	r4, #60	; 0x3c
 80078ce:	210a      	movs	r1, #10
 80078d0:	0020      	movs	r0, r4
 80078d2:	f001 feab 	bl	800962c <LP_UART1_Transmit>
		UART1_Transmit(BM71_Command_9,10);
 80078d6:	210a      	movs	r1, #10
 80078d8:	0020      	movs	r0, r4
 80078da:	f001 fe95 	bl	8009608 <UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 80078de:	4ad4      	ldr	r2, [pc, #848]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 80078e0:	7813      	ldrb	r3, [r2, #0]
 80078e2:	2110      	movs	r1, #16
 80078e4:	430b      	orrs	r3, r1
 80078e6:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 80078e8:	4bd2      	ldr	r3, [pc, #840]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 80078ee:	4ace      	ldr	r2, [pc, #824]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 80078f0:	7813      	ldrb	r3, [r2, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	7013      	strb	r3, [r2, #0]
		break;
 80078f6:	e63c      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		if(flags.Data_Received_Flag == 1)
 80078f8:	4bcd      	ldr	r3, [pc, #820]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	07d9      	lsls	r1, r3, #31
 80078fe:	d41e      	bmi.n	800793e <Send_BLE_Beacons_Commands+0x416>
		else if(flags.Command_Response_timeout == 1)
 8007900:	065b      	lsls	r3, r3, #25
 8007902:	d400      	bmi.n	8007906 <Send_BLE_Beacons_Commands+0x3de>
 8007904:	e635      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Command_Response_timeout = 0;
 8007906:	49ca      	ldr	r1, [pc, #808]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 8007908:	780b      	ldrb	r3, [r1, #0]
 800790a:	2040      	movs	r0, #64	; 0x40
 800790c:	4383      	bics	r3, r0
 800790e:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8007910:	4bc8      	ldr	r3, [pc, #800]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 8007912:	2100      	movs	r1, #0
 8007914:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8007916:	3a01      	subs	r2, #1
 8007918:	4bc3      	ldr	r3, [pc, #780]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 800791a:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 800791c:	4cc3      	ldr	r4, [pc, #780]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	6023      	str	r3, [r4, #0]
			UART1_Transmit(Response_string_2,19);
 8007924:	48bf      	ldr	r0, [pc, #764]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007926:	3113      	adds	r1, #19
 8007928:	301c      	adds	r0, #28
 800792a:	f001 fe6d 	bl	8009608 <UART1_Transmit>
			if(Send_cmd_Error_Cnt > 2)
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d800      	bhi.n	8007936 <Send_BLE_Beacons_Commands+0x40e>
 8007934:	e61d      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				Send_Command_State = 0;
 8007936:	4bbc      	ldr	r3, [pc, #752]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	e619      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Data_Received_Flag = 0;
 800793e:	4cbc      	ldr	r4, [pc, #752]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
			flags.Start_Command_Response_time = 0;
 8007940:	2201      	movs	r2, #1
 8007942:	4393      	bics	r3, r2
 8007944:	320f      	adds	r2, #15
 8007946:	4393      	bics	r3, r2
 8007948:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 800794a:	4bba      	ldr	r3, [pc, #744]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_1,9);
 8007950:	48b5      	ldr	r0, [pc, #724]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007952:	2109      	movs	r1, #9
 8007954:	3020      	adds	r0, #32
 8007956:	f7ff f84b 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 800795a:	7863      	ldrb	r3, [r4, #1]
 800795c:	069b      	lsls	r3, r3, #26
 800795e:	d412      	bmi.n	8007986 <Send_BLE_Beacons_Commands+0x45e>
				Send_Command_State--;
 8007960:	4ab1      	ldr	r2, [pc, #708]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007962:	7813      	ldrb	r3, [r2, #0]
 8007964:	3b01      	subs	r3, #1
 8007966:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8007968:	4ab0      	ldr	r2, [pc, #704]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 800796a:	6813      	ldr	r3, [r2, #0]
 800796c:	3301      	adds	r3, #1
 800796e:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 8007970:	2b02      	cmp	r3, #2
 8007972:	d902      	bls.n	800797a <Send_BLE_Beacons_Commands+0x452>
					Send_Command_State = 0;
 8007974:	4bac      	ldr	r3, [pc, #688]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
				UART1_Transmit(Response_string_2,19);
 800797a:	48aa      	ldr	r0, [pc, #680]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 800797c:	2113      	movs	r1, #19
 800797e:	301c      	adds	r0, #28
 8007980:	f001 fe42 	bl	8009608 <UART1_Transmit>
 8007984:	e5f5      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				UART1_Transmit(Response_string_1,13);
 8007986:	48a7      	ldr	r0, [pc, #668]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007988:	210d      	movs	r1, #13
 800798a:	300c      	adds	r0, #12
 800798c:	f001 fe3c 	bl	8009608 <UART1_Transmit>
				Send_Command_State ++;
 8007990:	4aa5      	ldr	r2, [pc, #660]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007992:	7813      	ldrb	r3, [r2, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 8007998:	4ba4      	ldr	r3, [pc, #656]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e5e8      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		LP_UART1_Transmit(BM71_Command_10,6);
 80079a0:	4ca0      	ldr	r4, [pc, #640]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 80079a2:	3448      	adds	r4, #72	; 0x48
 80079a4:	2106      	movs	r1, #6
 80079a6:	0020      	movs	r0, r4
 80079a8:	f001 fe40 	bl	800962c <LP_UART1_Transmit>
		UART1_Transmit(BM71_Command_10,6);
 80079ac:	2106      	movs	r1, #6
 80079ae:	0020      	movs	r0, r4
 80079b0:	f001 fe2a 	bl	8009608 <UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 80079b4:	4a9e      	ldr	r2, [pc, #632]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 80079b6:	7813      	ldrb	r3, [r2, #0]
 80079b8:	2110      	movs	r1, #16
 80079ba:	430b      	orrs	r3, r1
 80079bc:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 80079be:	4b9d      	ldr	r3, [pc, #628]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 80079c4:	4a98      	ldr	r2, [pc, #608]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 80079c6:	7813      	ldrb	r3, [r2, #0]
 80079c8:	3301      	adds	r3, #1
 80079ca:	7013      	strb	r3, [r2, #0]
		break;
 80079cc:	e5d1      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		if(flags.Data_Received_Flag == 1)
 80079ce:	4b98      	ldr	r3, [pc, #608]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	07d9      	lsls	r1, r3, #31
 80079d4:	d41e      	bmi.n	8007a14 <Send_BLE_Beacons_Commands+0x4ec>
		else if(flags.Command_Response_timeout == 1)
 80079d6:	065b      	lsls	r3, r3, #25
 80079d8:	d400      	bmi.n	80079dc <Send_BLE_Beacons_Commands+0x4b4>
 80079da:	e5ca      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Command_Response_timeout = 0;
 80079dc:	4994      	ldr	r1, [pc, #592]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 80079de:	780b      	ldrb	r3, [r1, #0]
 80079e0:	2040      	movs	r0, #64	; 0x40
 80079e2:	4383      	bics	r3, r0
 80079e4:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 80079e6:	4b93      	ldr	r3, [pc, #588]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 80079e8:	2100      	movs	r1, #0
 80079ea:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 80079ec:	3a01      	subs	r2, #1
 80079ee:	4b8e      	ldr	r3, [pc, #568]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 80079f0:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 80079f2:	4c8e      	ldr	r4, [pc, #568]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	3301      	adds	r3, #1
 80079f8:	6023      	str	r3, [r4, #0]
			UART1_Transmit(Response_string_2,19);
 80079fa:	488a      	ldr	r0, [pc, #552]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 80079fc:	3113      	adds	r1, #19
 80079fe:	301c      	adds	r0, #28
 8007a00:	f001 fe02 	bl	8009608 <UART1_Transmit>
			if(Send_cmd_Error_Cnt > 2)
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d800      	bhi.n	8007a0c <Send_BLE_Beacons_Commands+0x4e4>
 8007a0a:	e5b2      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				Send_Command_State = 0;
 8007a0c:	4b86      	ldr	r3, [pc, #536]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
 8007a12:	e5ae      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Data_Received_Flag = 0;
 8007a14:	4c86      	ldr	r4, [pc, #536]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
			flags.Start_Command_Response_time = 0;
 8007a16:	2201      	movs	r2, #1
 8007a18:	4393      	bics	r3, r2
 8007a1a:	320f      	adds	r2, #15
 8007a1c:	4393      	bics	r3, r2
 8007a1e:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8007a20:	4b84      	ldr	r3, [pc, #528]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_1,9);
 8007a26:	4880      	ldr	r0, [pc, #512]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007a28:	2109      	movs	r1, #9
 8007a2a:	3020      	adds	r0, #32
 8007a2c:	f7fe ffe0 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8007a30:	7863      	ldrb	r3, [r4, #1]
 8007a32:	069b      	lsls	r3, r3, #26
 8007a34:	d412      	bmi.n	8007a5c <Send_BLE_Beacons_Commands+0x534>
				Send_Command_State--;
 8007a36:	4a7c      	ldr	r2, [pc, #496]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007a38:	7813      	ldrb	r3, [r2, #0]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8007a3e:	4a7b      	ldr	r2, [pc, #492]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 8007a40:	6813      	ldr	r3, [r2, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 2)
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d902      	bls.n	8007a50 <Send_BLE_Beacons_Commands+0x528>
					Send_Command_State = 0;
 8007a4a:	4b77      	ldr	r3, [pc, #476]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
				UART1_Transmit(Response_string_2,19);
 8007a50:	4874      	ldr	r0, [pc, #464]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007a52:	2113      	movs	r1, #19
 8007a54:	301c      	adds	r0, #28
 8007a56:	f001 fdd7 	bl	8009608 <UART1_Transmit>
 8007a5a:	e58a      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				UART1_Transmit(Response_string_1,13);
 8007a5c:	4871      	ldr	r0, [pc, #452]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007a5e:	210d      	movs	r1, #13
 8007a60:	300c      	adds	r0, #12
 8007a62:	f001 fdd1 	bl	8009608 <UART1_Transmit>
				Send_Command_State ++;
 8007a66:	4a70      	ldr	r2, [pc, #448]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007a68:	7813      	ldrb	r3, [r2, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 8007a6e:	4b6f      	ldr	r3, [pc, #444]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e57d      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		memset(Send_MAC_ADD,0,28);
 8007a76:	4c70      	ldr	r4, [pc, #448]	; (8007c38 <Send_BLE_Beacons_Commands+0x710>)
 8007a78:	221c      	movs	r2, #28
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	0020      	movs	r0, r4
 8007a7e:	f003 fb24 	bl	800b0ca <memset>
		sprintf(Send_MAC_ADD,"NB,FF,CD000000%s",&MAC_ADD);
 8007a82:	4a6e      	ldr	r2, [pc, #440]	; (8007c3c <Send_BLE_Beacons_Commands+0x714>)
 8007a84:	496e      	ldr	r1, [pc, #440]	; (8007c40 <Send_BLE_Beacons_Commands+0x718>)
 8007a86:	0020      	movs	r0, r4
 8007a88:	f003 fb28 	bl	800b0dc <siprintf>
		Send_MAC_ADD[26]='\r';
 8007a8c:	230d      	movs	r3, #13
 8007a8e:	76a3      	strb	r3, [r4, #26]
		Send_MAC_ADD[27]='\n';
 8007a90:	3b03      	subs	r3, #3
 8007a92:	76e3      	strb	r3, [r4, #27]
		LP_UART1_Transmit(Send_MAC_ADD, sizeof(Send_MAC_ADD));
 8007a94:	211c      	movs	r1, #28
 8007a96:	0020      	movs	r0, r4
 8007a98:	f001 fdc8 	bl	800962c <LP_UART1_Transmit>
			UART1_Transmit(Send_MAC_ADD,sizeof(Send_MAC_ADD));
 8007a9c:	211c      	movs	r1, #28
 8007a9e:	0020      	movs	r0, r4
 8007aa0:	f001 fdb2 	bl	8009608 <UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 8007aa4:	4a62      	ldr	r2, [pc, #392]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 8007aa6:	7813      	ldrb	r3, [r2, #0]
 8007aa8:	2110      	movs	r1, #16
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8007aae:	4b61      	ldr	r3, [pc, #388]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 8007ab4:	4a5c      	ldr	r2, [pc, #368]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007ab6:	7813      	ldrb	r3, [r2, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	7013      	strb	r3, [r2, #0]
		break;
 8007abc:	e559      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		if(flags.Data_Received_Flag == 1)
 8007abe:	4b5c      	ldr	r3, [pc, #368]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	07d9      	lsls	r1, r3, #31
 8007ac4:	d41e      	bmi.n	8007b04 <Send_BLE_Beacons_Commands+0x5dc>
		else if(flags.Command_Response_timeout == 1)
 8007ac6:	065b      	lsls	r3, r3, #25
 8007ac8:	d400      	bmi.n	8007acc <Send_BLE_Beacons_Commands+0x5a4>
 8007aca:	e552      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Command_Response_timeout = 0;
 8007acc:	4958      	ldr	r1, [pc, #352]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 8007ace:	780b      	ldrb	r3, [r1, #0]
 8007ad0:	2040      	movs	r0, #64	; 0x40
 8007ad2:	4383      	bics	r3, r0
 8007ad4:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8007ad6:	4b57      	ldr	r3, [pc, #348]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 8007ad8:	2100      	movs	r1, #0
 8007ada:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8007adc:	3a01      	subs	r2, #1
 8007ade:	4b52      	ldr	r3, [pc, #328]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007ae0:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 8007ae2:	4c52      	ldr	r4, [pc, #328]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	6023      	str	r3, [r4, #0]
			UART1_Transmit(Response_string_2,19);
 8007aea:	484e      	ldr	r0, [pc, #312]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007aec:	3113      	adds	r1, #19
 8007aee:	301c      	adds	r0, #28
 8007af0:	f001 fd8a 	bl	8009608 <UART1_Transmit>
			if(Send_cmd_Error_Cnt > 5)
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	2b05      	cmp	r3, #5
 8007af8:	d800      	bhi.n	8007afc <Send_BLE_Beacons_Commands+0x5d4>
 8007afa:	e53a      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				Send_Command_State = 0;
 8007afc:	4b4a      	ldr	r3, [pc, #296]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	e536      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Data_Received_Flag = 0;
 8007b04:	4c4a      	ldr	r4, [pc, #296]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
			flags.Start_Command_Response_time = 0;
 8007b06:	2201      	movs	r2, #1
 8007b08:	4393      	bics	r3, r2
 8007b0a:	320f      	adds	r2, #15
 8007b0c:	4393      	bics	r3, r2
 8007b0e:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8007b10:	4b48      	ldr	r3, [pc, #288]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_1,9);
 8007b16:	4844      	ldr	r0, [pc, #272]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007b18:	2109      	movs	r1, #9
 8007b1a:	3020      	adds	r0, #32
 8007b1c:	f7fe ff68 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8007b20:	7863      	ldrb	r3, [r4, #1]
 8007b22:	069b      	lsls	r3, r3, #26
 8007b24:	d412      	bmi.n	8007b4c <Send_BLE_Beacons_Commands+0x624>
				Send_Command_State--;
 8007b26:	4a40      	ldr	r2, [pc, #256]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007b28:	7813      	ldrb	r3, [r2, #0]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8007b2e:	4a3f      	ldr	r2, [pc, #252]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 8007b30:	6813      	ldr	r3, [r2, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 5)
 8007b36:	2b05      	cmp	r3, #5
 8007b38:	d902      	bls.n	8007b40 <Send_BLE_Beacons_Commands+0x618>
					Send_Command_State = 0;
 8007b3a:	4b3b      	ldr	r3, [pc, #236]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	701a      	strb	r2, [r3, #0]
				UART1_Transmit(Response_string_2,19);
 8007b40:	4838      	ldr	r0, [pc, #224]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007b42:	2113      	movs	r1, #19
 8007b44:	301c      	adds	r0, #28
 8007b46:	f001 fd5f 	bl	8009608 <UART1_Transmit>
 8007b4a:	e512      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				UART1_Transmit(Response_string_1,13);
 8007b4c:	4835      	ldr	r0, [pc, #212]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007b4e:	210d      	movs	r1, #13
 8007b50:	300c      	adds	r0, #12
 8007b52:	f001 fd59 	bl	8009608 <UART1_Transmit>
				Send_Command_State ++;
 8007b56:	4a34      	ldr	r2, [pc, #208]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007b58:	7813      	ldrb	r3, [r2, #0]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt = 0;
 8007b5e:	4b33      	ldr	r3, [pc, #204]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e505      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		LP_UART1_Transmit(BM71_Command_14,3);
 8007b66:	4c2f      	ldr	r4, [pc, #188]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007b68:	3450      	adds	r4, #80	; 0x50
 8007b6a:	2103      	movs	r1, #3
 8007b6c:	0020      	movs	r0, r4
 8007b6e:	f001 fd5d 	bl	800962c <LP_UART1_Transmit>
		UART1_Transmit(BM71_Command_14,3);
 8007b72:	2103      	movs	r1, #3
 8007b74:	0020      	movs	r0, r4
 8007b76:	f001 fd47 	bl	8009608 <UART1_Transmit>
		flags.Start_Command_Response_time = 1;
 8007b7a:	4a2d      	ldr	r2, [pc, #180]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 8007b7c:	7813      	ldrb	r3, [r2, #0]
 8007b7e:	2110      	movs	r1, #16
 8007b80:	430b      	orrs	r3, r1
 8007b82:	7013      	strb	r3, [r2, #0]
		Counter_Response_Time = 0;
 8007b84:	4b2b      	ldr	r3, [pc, #172]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]
		Send_Command_State++;
 8007b8a:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007b8c:	7813      	ldrb	r3, [r2, #0]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	7013      	strb	r3, [r2, #0]
		break;
 8007b92:	e4ee      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		if(flags.Data_Received_Flag == 1)
 8007b94:	4b26      	ldr	r3, [pc, #152]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	07d9      	lsls	r1, r3, #31
 8007b9a:	d41e      	bmi.n	8007bda <Send_BLE_Beacons_Commands+0x6b2>
		else if(flags.Command_Response_timeout == 1)
 8007b9c:	065b      	lsls	r3, r3, #25
 8007b9e:	d400      	bmi.n	8007ba2 <Send_BLE_Beacons_Commands+0x67a>
 8007ba0:	e4e7      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Command_Response_timeout = 0;
 8007ba2:	4923      	ldr	r1, [pc, #140]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
 8007ba4:	780b      	ldrb	r3, [r1, #0]
 8007ba6:	2040      	movs	r0, #64	; 0x40
 8007ba8:	4383      	bics	r3, r0
 8007baa:	700b      	strb	r3, [r1, #0]
			Counter_Response_Time = 0;
 8007bac:	4b21      	ldr	r3, [pc, #132]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 8007bae:	2100      	movs	r1, #0
 8007bb0:	6019      	str	r1, [r3, #0]
			Send_Command_State--;
 8007bb2:	3a01      	subs	r2, #1
 8007bb4:	4b1c      	ldr	r3, [pc, #112]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007bb6:	701a      	strb	r2, [r3, #0]
			Send_cmd_Error_Cnt++;
 8007bb8:	4c1c      	ldr	r4, [pc, #112]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	6023      	str	r3, [r4, #0]
			UART1_Transmit(Response_string_2,19);
 8007bc0:	4818      	ldr	r0, [pc, #96]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007bc2:	3113      	adds	r1, #19
 8007bc4:	301c      	adds	r0, #28
 8007bc6:	f001 fd1f 	bl	8009608 <UART1_Transmit>
			if(Send_cmd_Error_Cnt > 5)
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	2b05      	cmp	r3, #5
 8007bce:	d800      	bhi.n	8007bd2 <Send_BLE_Beacons_Commands+0x6aa>
 8007bd0:	e4cf      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
				Send_Command_State = 0;
 8007bd2:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	e4cb      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
			flags.Data_Received_Flag = 0;
 8007bda:	4c15      	ldr	r4, [pc, #84]	; (8007c30 <Send_BLE_Beacons_Commands+0x708>)
			flags.Start_Command_Response_time = 0;
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4393      	bics	r3, r2
 8007be0:	320f      	adds	r2, #15
 8007be2:	4393      	bics	r3, r2
 8007be4:	7023      	strb	r3, [r4, #0]
			Counter_Response_Time = 0;
 8007be6:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <Send_BLE_Beacons_Commands+0x70c>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
			Check_Get_Response(BLE_Response_1,9);
 8007bec:	480e      	ldr	r0, [pc, #56]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007bee:	2109      	movs	r1, #9
 8007bf0:	3020      	adds	r0, #32
 8007bf2:	f7fe fefd 	bl	80069f0 <Check_Get_Response>
			if(flags.Response_OK_flag == 1)
 8007bf6:	7863      	ldrb	r3, [r4, #1]
 8007bf8:	069b      	lsls	r3, r3, #26
 8007bfa:	d423      	bmi.n	8007c44 <Send_BLE_Beacons_Commands+0x71c>
				Send_Command_State--;
 8007bfc:	4a0a      	ldr	r2, [pc, #40]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007bfe:	7813      	ldrb	r3, [r2, #0]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	7013      	strb	r3, [r2, #0]
				Send_cmd_Error_Cnt++;
 8007c04:	4a09      	ldr	r2, [pc, #36]	; (8007c2c <Send_BLE_Beacons_Commands+0x704>)
 8007c06:	6813      	ldr	r3, [r2, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	6013      	str	r3, [r2, #0]
				if(Send_cmd_Error_Cnt > 5)
 8007c0c:	2b05      	cmp	r3, #5
 8007c0e:	d902      	bls.n	8007c16 <Send_BLE_Beacons_Commands+0x6ee>
					Send_Command_State = 0;
 8007c10:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <Send_BLE_Beacons_Commands+0x700>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]
				UART1_Transmit(Response_string_2,19);
 8007c16:	4803      	ldr	r0, [pc, #12]	; (8007c24 <Send_BLE_Beacons_Commands+0x6fc>)
 8007c18:	2113      	movs	r1, #19
 8007c1a:	301c      	adds	r0, #28
 8007c1c:	f001 fcf4 	bl	8009608 <UART1_Transmit>
 8007c20:	e4a7      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	2000008c 	.word	0x2000008c
 8007c28:	2000000c 	.word	0x2000000c
 8007c2c:	200002ec 	.word	0x200002ec
 8007c30:	2000032c 	.word	0x2000032c
 8007c34:	20000240 	.word	0x20000240
 8007c38:	200004a8 	.word	0x200004a8
 8007c3c:	20000494 	.word	0x20000494
 8007c40:	08010dac 	.word	0x08010dac
				UART1_Transmit(Response_string_1,13);
 8007c44:	4814      	ldr	r0, [pc, #80]	; (8007c98 <Send_BLE_Beacons_Commands+0x770>)
 8007c46:	210d      	movs	r1, #13
 8007c48:	300c      	adds	r0, #12
 8007c4a:	f001 fcdd 	bl	8009608 <UART1_Transmit>
				Send_cmd_Error_Cnt = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	4a12      	ldr	r2, [pc, #72]	; (8007c9c <Send_BLE_Beacons_Commands+0x774>)
 8007c52:	6013      	str	r3, [r2, #0]
				Ble_Connect_Counter_Response_Time = 0;
 8007c54:	4a12      	ldr	r2, [pc, #72]	; (8007ca0 <Send_BLE_Beacons_Commands+0x778>)
 8007c56:	6013      	str	r3, [r2, #0]
				BLEControl_H;
 8007c58:	20a0      	movs	r0, #160	; 0xa0
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	05c0      	lsls	r0, r0, #23
 8007c60:	f7fb faa7 	bl	80031b2 <HAL_GPIO_WritePin>
				Send_Command_State++;
 8007c64:	4a0f      	ldr	r2, [pc, #60]	; (8007ca4 <Send_BLE_Beacons_Commands+0x77c>)
 8007c66:	7813      	ldrb	r3, [r2, #0]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	7013      	strb	r3, [r2, #0]
 8007c6c:	e481      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
		flags.configure_ble_beacons = 0;
 8007c6e:	4c0e      	ldr	r4, [pc, #56]	; (8007ca8 <Send_BLE_Beacons_Commands+0x780>)
 8007c70:	7923      	ldrb	r3, [r4, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	4393      	bics	r3, r2
 8007c76:	7123      	strb	r3, [r4, #4]
		MX_RTC_Init();
 8007c78:	f002 fc76 	bl	800a568 <MX_RTC_Init>
		flags.F_Run_Stop2_Mode = 1;
 8007c7c:	7863      	ldrb	r3, [r4, #1]
 8007c7e:	2240      	movs	r2, #64	; 0x40
 8007c80:	4313      	orrs	r3, r2
 8007c82:	7063      	strb	r3, [r4, #1]
		Ble_Connect_Counter_Response_Time = 0;
 8007c84:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <Send_BLE_Beacons_Commands+0x778>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	601a      	str	r2, [r3, #0]
		flags.Tag_printing_done_flag=1;
 8007c8a:	79a2      	ldrb	r2, [r4, #6]
 8007c8c:	2380      	movs	r3, #128	; 0x80
 8007c8e:	425b      	negs	r3, r3
 8007c90:	4313      	orrs	r3, r2
 8007c92:	71a3      	strb	r3, [r4, #6]
}
 8007c94:	e46d      	b.n	8007572 <Send_BLE_Beacons_Commands+0x4a>
 8007c96:	46c0      	nop			; (mov r8, r8)
 8007c98:	2000008c 	.word	0x2000008c
 8007c9c:	200002ec 	.word	0x200002ec
 8007ca0:	20000244 	.word	0x20000244
 8007ca4:	2000000c 	.word	0x2000000c
 8007ca8:	2000032c 	.word	0x2000032c

08007cac <Start_PWM_Buzzer>:
  * @brief  Disable buzzer and stop PWM.
  * @param  None
  * @retval None
  */
void Start_PWM_Buzzer(void)
{
 8007cac:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(Buzzer_Enable_GPIO_Port, Buzzer_Enable_Pin, GPIO_PIN_SET);/* Enable Buzzer */
 8007cae:	2201      	movs	r2, #1
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	4804      	ldr	r0, [pc, #16]	; (8007cc4 <Start_PWM_Buzzer+0x18>)
 8007cb4:	f7fb fa7d 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8007cb8:	2108      	movs	r1, #8
 8007cba:	4803      	ldr	r0, [pc, #12]	; (8007cc8 <Start_PWM_Buzzer+0x1c>)
 8007cbc:	f7fc fe2c 	bl	8004918 <HAL_TIM_PWM_Start>
}
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	46c0      	nop			; (mov r8, r8)
 8007cc4:	50001000 	.word	0x50001000
 8007cc8:	20004940 	.word	0x20004940

08007ccc <Stop_Buzzer>:
//{
//	HAL_GPIO_WritePin(Buzzer_Enable_GPIO_Port, Buzzer_Enable_Pin, GPIO_PIN_RESET);/* Disable Buzzer */
//	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
//}
void Stop_Buzzer(void)
{
 8007ccc:	b510      	push	{r4, lr}
//    htim3.Init.Prescaler = TIMER2_PRESCALAR_VAL;
	htim3.Init.Prescaler = 0;
 8007cce:	4c08      	ldr	r4, [pc, #32]	; (8007cf0 <Stop_Buzzer+0x24>)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6063      	str	r3, [r4, #4]
    htim3.Init.Period = 0;//_Period;
 8007cd4:	60e3      	str	r3, [r4, #12]
    HAL_TIM_Base_Init(&htim3);
 8007cd6:	0020      	movs	r0, r4
 8007cd8:	f7fc fd9f 	bl	800481a <HAL_TIM_Base_Init>
    HAL_GPIO_WritePin(Buzzer_Enable_GPIO_Port, Buzzer_Enable_Pin, GPIO_PIN_RESET);/* Disable Buzzer */
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2101      	movs	r1, #1
 8007ce0:	4804      	ldr	r0, [pc, #16]	; (8007cf4 <Stop_Buzzer+0x28>)
 8007ce2:	f7fb fa66 	bl	80031b2 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8007ce6:	2108      	movs	r1, #8
 8007ce8:	0020      	movs	r0, r4
 8007cea:	f7fc fe7d 	bl	80049e8 <HAL_TIM_PWM_Stop>
}
 8007cee:	bd10      	pop	{r4, pc}
 8007cf0:	20004940 	.word	0x20004940
 8007cf4:	50001000 	.word	0x50001000

08007cf8 <Configure_PWM_uS>:
  * @brief  Initiate flags for starting Buzzer_Tune4.
  * @param  None
  * @retval None
  */
void Configure_PWM_uS(unsigned int Period_Val,unsigned int Vol_Val)
{
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	000d      	movs	r5, r1
	htim3.Init.Prescaler = 16;//TIMER2_PRESCALAR_VAL;
 8007cfc:	4c04      	ldr	r4, [pc, #16]	; (8007d10 <Configure_PWM_uS+0x18>)
 8007cfe:	2310      	movs	r3, #16
 8007d00:	6063      	str	r3, [r4, #4]
	htim3.Init.Period = Period_Val;
 8007d02:	60e0      	str	r0, [r4, #12]
	HAL_TIM_Base_Init(&htim3);
 8007d04:	0020      	movs	r0, r4
 8007d06:	f7fc fd88 	bl	800481a <HAL_TIM_Base_Init>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, Vol_Val);
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	63dd      	str	r5, [r3, #60]	; 0x3c
}
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	20004940 	.word	0x20004940

08007d14 <Execute_Buzzer_Tune4>:
  * @brief  Start Buzzer_Tune4.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Tune4(void)
{
 8007d14:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8007d16:	4b34      	ldr	r3, [pc, #208]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d103      	bne.n	8007d26 <Execute_Buzzer_Tune4+0x12>
 8007d1e:	4a32      	ldr	r2, [pc, #200]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007d20:	6852      	ldr	r2, [r2, #4]
 8007d22:	2a00      	cmp	r2, #0
 8007d24:	d010      	beq.n	8007d48 <Execute_Buzzer_Tune4+0x34>
		if(PWM_Time_Counter == 0 && Current_Volume_Val_Buzzer_Tune > 0)
		{
			Start_PWM_Buzzer();
		}
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 10)
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d103      	bne.n	8007d32 <Execute_Buzzer_Tune4+0x1e>
 8007d2a:	4a2f      	ldr	r2, [pc, #188]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007d2c:	6852      	ldr	r2, [r2, #4]
 8007d2e:	2a09      	cmp	r2, #9
 8007d30:	d81b      	bhi.n	8007d6a <Execute_Buzzer_Tune4+0x56>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(336, Current_Volume_Val_Buzzer_Tune);// 156);/* Input period and duty cycle respectively */
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 11)
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d025      	beq.n	8007d82 <Execute_Buzzer_Tune4+0x6e>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360, Current_Volume_Val_Buzzer_Tune);// 168);/* Input period and duty cycle respectively */
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 10)
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d034      	beq.n	8007da4 <Execute_Buzzer_Tune4+0x90>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(336, Current_Volume_Val_Buzzer_Tune);// 156);/* Input period and duty cycle respectively */
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 11)
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d043      	beq.n	8007dc6 <Execute_Buzzer_Tune4+0xb2>
		PWM_Tone_Part = 0;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		F_Buzzer_Tune4 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8007d3e:	4a2a      	ldr	r2, [pc, #168]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007d40:	6853      	ldr	r3, [r2, #4]
 8007d42:	3301      	adds	r3, #1
 8007d44:	6053      	str	r3, [r2, #4]
}
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
		Configure_PWM_uS(360, Current_Volume_Val_Buzzer_Tune);// 168);/* Input period and duty cycle respectively */
 8007d48:	4b28      	ldr	r3, [pc, #160]	; (8007dec <Execute_Buzzer_Tune4+0xd8>)
 8007d4a:	6819      	ldr	r1, [r3, #0]
 8007d4c:	20b4      	movs	r0, #180	; 0xb4
 8007d4e:	0040      	lsls	r0, r0, #1
 8007d50:	f7ff ffd2 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0 && Current_Volume_Val_Buzzer_Tune > 0)
 8007d54:	4b24      	ldr	r3, [pc, #144]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f0      	bne.n	8007d3e <Execute_Buzzer_Tune4+0x2a>
 8007d5c:	4b23      	ldr	r3, [pc, #140]	; (8007dec <Execute_Buzzer_Tune4+0xd8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0ec      	beq.n	8007d3e <Execute_Buzzer_Tune4+0x2a>
			Start_PWM_Buzzer();
 8007d64:	f7ff ffa2 	bl	8007cac <Start_PWM_Buzzer>
 8007d68:	e7e9      	b.n	8007d3e <Execute_Buzzer_Tune4+0x2a>
		PWM_Time_Counter = 0;
 8007d6a:	4c1f      	ldr	r4, [pc, #124]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007d6c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(336, Current_Volume_Val_Buzzer_Tune);// 156);/* Input period and duty cycle respectively */
 8007d6e:	4b1f      	ldr	r3, [pc, #124]	; (8007dec <Execute_Buzzer_Tune4+0xd8>)
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	20a8      	movs	r0, #168	; 0xa8
 8007d74:	0040      	lsls	r0, r0, #1
 8007d76:	f7ff ffbf 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8007d7a:	7823      	ldrb	r3, [r4, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	7023      	strb	r3, [r4, #0]
 8007d80:	e7dd      	b.n	8007d3e <Execute_Buzzer_Tune4+0x2a>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 11)
 8007d82:	4a19      	ldr	r2, [pc, #100]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007d84:	6852      	ldr	r2, [r2, #4]
 8007d86:	2a0a      	cmp	r2, #10
 8007d88:	d9d5      	bls.n	8007d36 <Execute_Buzzer_Tune4+0x22>
		PWM_Time_Counter = 0;
 8007d8a:	4c17      	ldr	r4, [pc, #92]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360, Current_Volume_Val_Buzzer_Tune);// 168);/* Input period and duty cycle respectively */
 8007d90:	4b16      	ldr	r3, [pc, #88]	; (8007dec <Execute_Buzzer_Tune4+0xd8>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	20b4      	movs	r0, #180	; 0xb4
 8007d96:	0040      	lsls	r0, r0, #1
 8007d98:	f7ff ffae 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8007d9c:	7823      	ldrb	r3, [r4, #0]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	7023      	strb	r3, [r4, #0]
 8007da2:	e7cc      	b.n	8007d3e <Execute_Buzzer_Tune4+0x2a>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 10)
 8007da4:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007da6:	6852      	ldr	r2, [r2, #4]
 8007da8:	2a09      	cmp	r2, #9
 8007daa:	d9c6      	bls.n	8007d3a <Execute_Buzzer_Tune4+0x26>
		PWM_Time_Counter = 0;
 8007dac:	4c0e      	ldr	r4, [pc, #56]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007dae:	2300      	movs	r3, #0
 8007db0:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(336, Current_Volume_Val_Buzzer_Tune);// 156);/* Input period and duty cycle respectively */
 8007db2:	4b0e      	ldr	r3, [pc, #56]	; (8007dec <Execute_Buzzer_Tune4+0xd8>)
 8007db4:	6819      	ldr	r1, [r3, #0]
 8007db6:	20a8      	movs	r0, #168	; 0xa8
 8007db8:	0040      	lsls	r0, r0, #1
 8007dba:	f7ff ff9d 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8007dbe:	7823      	ldrb	r3, [r4, #0]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	7023      	strb	r3, [r4, #0]
 8007dc4:	e7bb      	b.n	8007d3e <Execute_Buzzer_Tune4+0x2a>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 11)
 8007dc6:	4b08      	ldr	r3, [pc, #32]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b0a      	cmp	r3, #10
 8007dcc:	d9b7      	bls.n	8007d3e <Execute_Buzzer_Tune4+0x2a>
		PWM_Time_Counter = 0;
 8007dce:	4c06      	ldr	r4, [pc, #24]	; (8007de8 <Execute_Buzzer_Tune4+0xd4>)
 8007dd0:	2500      	movs	r5, #0
 8007dd2:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part = 0;
 8007dd4:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8007dd6:	2108      	movs	r1, #8
 8007dd8:	4805      	ldr	r0, [pc, #20]	; (8007df0 <Execute_Buzzer_Tune4+0xdc>)
 8007dda:	f7fc fe05 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Tune4 = 0;
 8007dde:	7225      	strb	r5, [r4, #8]
		Stop_Buzzer();
 8007de0:	f7ff ff74 	bl	8007ccc <Stop_Buzzer>
 8007de4:	e7ab      	b.n	8007d3e <Execute_Buzzer_Tune4+0x2a>
 8007de6:	46c0      	nop			; (mov r8, r8)
 8007de8:	200001ec 	.word	0x200001ec
 8007dec:	2000012c 	.word	0x2000012c
 8007df0:	20004940 	.word	0x20004940

08007df4 <Initiate_Buzzer_Tune4>:
  * @param  None
  * @retval None
  */
void Initiate_Buzzer_Tune4(void)
{
	PWM_Buzzer_Counter = 0;
 8007df4:	4b06      	ldr	r3, [pc, #24]	; (8007e10 <Initiate_Buzzer_Tune4+0x1c>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	725a      	strb	r2, [r3, #9]
	F_Start_Buzzer_Beep = 0;
 8007dfa:	729a      	strb	r2, [r3, #10]
	Buzzer_Beep_Counter = 0;
 8007dfc:	72da      	strb	r2, [r3, #11]
	F_Start_PWM_Buzzer_For_Key = 0;
 8007dfe:	731a      	strb	r2, [r3, #12]
	F_Start_Buzzer_Beep_For_Key = 0;
 8007e00:	735a      	strb	r2, [r3, #13]
	F_Start_PWM_Buzzer_Long_Beep_For_Key = 0;
 8007e02:	739a      	strb	r2, [r3, #14]
	PWM_Buzzer_Counter = 0;

	F_Buzzer_Tune4 = 1;
 8007e04:	2101      	movs	r1, #1
 8007e06:	7219      	strb	r1, [r3, #8]
	PWM_Tone_Part = 0;
 8007e08:	701a      	strb	r2, [r3, #0]
	PWM_Time_Counter = 0;
 8007e0a:	605a      	str	r2, [r3, #4]
}
 8007e0c:	4770      	bx	lr
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	200001ec 	.word	0x200001ec

08007e14 <Execute_Buzzer_Tune9>:
  * @brief  Start Buzzer_Tune9.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Tune9(void)
{
 8007e14:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8007e16:	4b30      	ldr	r3, [pc, #192]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d103      	bne.n	8007e26 <Execute_Buzzer_Tune9+0x12>
 8007e1e:	4a2e      	ldr	r2, [pc, #184]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007e20:	6852      	ldr	r2, [r2, #4]
 8007e22:	2a00      	cmp	r2, #0
 8007e24:	d010      	beq.n	8007e48 <Execute_Buzzer_Tune9+0x34>
	{
		Configure_PWM_uS(400, 250);/* Input period and duty cycle respectively */
		if(PWM_Time_Counter == 0)
		Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 12)
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d103      	bne.n	8007e32 <Execute_Buzzer_Tune9+0x1e>
 8007e2a:	4a2b      	ldr	r2, [pc, #172]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007e2c:	6852      	ldr	r2, [r2, #4]
 8007e2e:	2a0b      	cmp	r2, #11
 8007e30:	d816      	bhi.n	8007e60 <Execute_Buzzer_Tune9+0x4c>
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360, 250);/* Input period and duty cycle respectively */
		PWM_Tone_Part++;

	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 12)
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d01f      	beq.n	8007e76 <Execute_Buzzer_Tune9+0x62>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(320, 250);/* Input period and duty cycle respectively */
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 12)
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d02d      	beq.n	8007e96 <Execute_Buzzer_Tune9+0x82>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(280, 250);/* Input period and duty cycle respectively */
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 12)
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d03b      	beq.n	8007eb6 <Execute_Buzzer_Tune9+0xa2>
		PWM_Tone_Part = 0;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		F_Buzzer_Tune9 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8007e3e:	4a26      	ldr	r2, [pc, #152]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007e40:	6853      	ldr	r3, [r2, #4]
 8007e42:	3301      	adds	r3, #1
 8007e44:	6053      	str	r3, [r2, #4]
}
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
		Configure_PWM_uS(400, 250);/* Input period and duty cycle respectively */
 8007e48:	20c8      	movs	r0, #200	; 0xc8
 8007e4a:	21fa      	movs	r1, #250	; 0xfa
 8007e4c:	0040      	lsls	r0, r0, #1
 8007e4e:	f7ff ff53 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8007e52:	4b21      	ldr	r3, [pc, #132]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f1      	bne.n	8007e3e <Execute_Buzzer_Tune9+0x2a>
		Start_PWM_Buzzer();
 8007e5a:	f7ff ff27 	bl	8007cac <Start_PWM_Buzzer>
 8007e5e:	e7ee      	b.n	8007e3e <Execute_Buzzer_Tune9+0x2a>
		PWM_Time_Counter = 0;
 8007e60:	4c1d      	ldr	r4, [pc, #116]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007e62:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360, 250);/* Input period and duty cycle respectively */
 8007e64:	20b4      	movs	r0, #180	; 0xb4
 8007e66:	21fa      	movs	r1, #250	; 0xfa
 8007e68:	0040      	lsls	r0, r0, #1
 8007e6a:	f7ff ff45 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8007e6e:	7823      	ldrb	r3, [r4, #0]
 8007e70:	3301      	adds	r3, #1
 8007e72:	7023      	strb	r3, [r4, #0]
 8007e74:	e7e3      	b.n	8007e3e <Execute_Buzzer_Tune9+0x2a>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 12)
 8007e76:	4a18      	ldr	r2, [pc, #96]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007e78:	6852      	ldr	r2, [r2, #4]
 8007e7a:	2a0b      	cmp	r2, #11
 8007e7c:	d9db      	bls.n	8007e36 <Execute_Buzzer_Tune9+0x22>
		PWM_Time_Counter = 0;
 8007e7e:	4c16      	ldr	r4, [pc, #88]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(320, 250);/* Input period and duty cycle respectively */
 8007e84:	20a0      	movs	r0, #160	; 0xa0
 8007e86:	21fa      	movs	r1, #250	; 0xfa
 8007e88:	0040      	lsls	r0, r0, #1
 8007e8a:	f7ff ff35 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8007e8e:	7823      	ldrb	r3, [r4, #0]
 8007e90:	3301      	adds	r3, #1
 8007e92:	7023      	strb	r3, [r4, #0]
 8007e94:	e7d3      	b.n	8007e3e <Execute_Buzzer_Tune9+0x2a>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 12)
 8007e96:	4a10      	ldr	r2, [pc, #64]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007e98:	6852      	ldr	r2, [r2, #4]
 8007e9a:	2a0b      	cmp	r2, #11
 8007e9c:	d9cd      	bls.n	8007e3a <Execute_Buzzer_Tune9+0x26>
		PWM_Time_Counter = 0;
 8007e9e:	4c0e      	ldr	r4, [pc, #56]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(280, 250);/* Input period and duty cycle respectively */
 8007ea4:	208c      	movs	r0, #140	; 0x8c
 8007ea6:	21fa      	movs	r1, #250	; 0xfa
 8007ea8:	0040      	lsls	r0, r0, #1
 8007eaa:	f7ff ff25 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8007eae:	7823      	ldrb	r3, [r4, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	7023      	strb	r3, [r4, #0]
 8007eb4:	e7c3      	b.n	8007e3e <Execute_Buzzer_Tune9+0x2a>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 12)
 8007eb6:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b0b      	cmp	r3, #11
 8007ebc:	d9bf      	bls.n	8007e3e <Execute_Buzzer_Tune9+0x2a>
		PWM_Time_Counter = 0;
 8007ebe:	4c06      	ldr	r4, [pc, #24]	; (8007ed8 <Execute_Buzzer_Tune9+0xc4>)
 8007ec0:	2500      	movs	r5, #0
 8007ec2:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part = 0;
 8007ec4:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8007ec6:	2108      	movs	r1, #8
 8007ec8:	4804      	ldr	r0, [pc, #16]	; (8007edc <Execute_Buzzer_Tune9+0xc8>)
 8007eca:	f7fc fd8d 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Tune9 = 0;
 8007ece:	73e5      	strb	r5, [r4, #15]
		Stop_Buzzer();
 8007ed0:	f7ff fefc 	bl	8007ccc <Stop_Buzzer>
 8007ed4:	e7b3      	b.n	8007e3e <Execute_Buzzer_Tune9+0x2a>
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	200001ec 	.word	0x200001ec
 8007edc:	20004940 	.word	0x20004940

08007ee0 <Initiate_Buzzer_Beep1>:
  * @brief  Initiate flags for Buzzer_Beep1.
  * @param  NoneF_Lock_Alarm
  * @retval None
  */
void Initiate_Buzzer_Beep1(void)
{
 8007ee0:	b510      	push	{r4, lr}
	/* Initialize timer for pwm generation for buzzer */
	MX_TIM3_Init();
 8007ee2:	f002 ff5d 	bl	800ada0 <MX_TIM3_Init>
	PWM_Tone_Part = 0;
 8007ee6:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <Initiate_Buzzer_Beep1+0x14>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
	PWM_Time_Counter = 0;
 8007eec:	605a      	str	r2, [r3, #4]
	F_Buzzer_Beep1 = 1;
 8007eee:	3201      	adds	r2, #1
 8007ef0:	741a      	strb	r2, [r3, #16]
}
 8007ef2:	bd10      	pop	{r4, pc}
 8007ef4:	200001ec 	.word	0x200001ec

08007ef8 <Execute_Buzzer_Beep1>:
  * @brief  Start Buzzer_Beep1.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Beep1(void)
{
 8007ef8:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8007efa:	4b18      	ldr	r3, [pc, #96]	; (8007f5c <Execute_Buzzer_Beep1+0x64>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d103      	bne.n	8007f0a <Execute_Buzzer_Beep1+0x12>
 8007f02:	4a16      	ldr	r2, [pc, #88]	; (8007f5c <Execute_Buzzer_Beep1+0x64>)
 8007f04:	6852      	ldr	r2, [r2, #4]
 8007f06:	2a00      	cmp	r2, #0
 8007f08:	d00a      	beq.n	8007f20 <Execute_Buzzer_Beep1+0x28>
		if(PWM_Time_Counter == 0 && Current_Volume_Val_Key_Beep > 0)
		{
			Start_PWM_Buzzer();
		}
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 25)
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <Execute_Buzzer_Beep1+0x1e>
 8007f0e:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <Execute_Buzzer_Beep1+0x64>)
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b18      	cmp	r3, #24
 8007f14:	d815      	bhi.n	8007f42 <Execute_Buzzer_Beep1+0x4a>
		PWM_Tone_Part = 0;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		F_Buzzer_Beep1 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8007f16:	4a11      	ldr	r2, [pc, #68]	; (8007f5c <Execute_Buzzer_Beep1+0x64>)
 8007f18:	6853      	ldr	r3, [r2, #4]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	6053      	str	r3, [r2, #4]
}
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}
		Configure_PWM_uS(360, Current_Volume_Val_Key_Beep);// 120);/* Input period and duty cycle respectively */
 8007f20:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <Execute_Buzzer_Beep1+0x68>)
 8007f22:	6859      	ldr	r1, [r3, #4]
 8007f24:	20b4      	movs	r0, #180	; 0xb4
 8007f26:	0040      	lsls	r0, r0, #1
 8007f28:	f7ff fee6 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0 && Current_Volume_Val_Key_Beep > 0)
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <Execute_Buzzer_Beep1+0x64>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1f0      	bne.n	8007f16 <Execute_Buzzer_Beep1+0x1e>
 8007f34:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <Execute_Buzzer_Beep1+0x68>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d0ec      	beq.n	8007f16 <Execute_Buzzer_Beep1+0x1e>
			Start_PWM_Buzzer();
 8007f3c:	f7ff feb6 	bl	8007cac <Start_PWM_Buzzer>
 8007f40:	e7e9      	b.n	8007f16 <Execute_Buzzer_Beep1+0x1e>
		PWM_Time_Counter = 0;
 8007f42:	4c06      	ldr	r4, [pc, #24]	; (8007f5c <Execute_Buzzer_Beep1+0x64>)
 8007f44:	2500      	movs	r5, #0
 8007f46:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part = 0;
 8007f48:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8007f4a:	2108      	movs	r1, #8
 8007f4c:	4805      	ldr	r0, [pc, #20]	; (8007f64 <Execute_Buzzer_Beep1+0x6c>)
 8007f4e:	f7fc fd4b 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Beep1 = 0;
 8007f52:	7425      	strb	r5, [r4, #16]
		Stop_Buzzer();
 8007f54:	f7ff feba 	bl	8007ccc <Stop_Buzzer>
 8007f58:	e7dd      	b.n	8007f16 <Execute_Buzzer_Beep1+0x1e>
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	200001ec 	.word	0x200001ec
 8007f60:	2000012c 	.word	0x2000012c
 8007f64:	20004940 	.word	0x20004940

08007f68 <Execute_Buzzer_Tune1>:
  * @brief  Start Buzzer_Tune1.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Tune1(void)
{
 8007f68:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8007f6a:	4b6a      	ldr	r3, [pc, #424]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d103      	bne.n	8007f7a <Execute_Buzzer_Tune1+0x12>
 8007f72:	4a68      	ldr	r2, [pc, #416]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8007f74:	6852      	ldr	r2, [r2, #4]
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	d01e      	beq.n	8007fb8 <Execute_Buzzer_Tune1+0x50>
			{
				Start_PWM_Buzzer();
			}
		}
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 5)//62)
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <Execute_Buzzer_Tune1+0x1e>
 8007f7e:	4a65      	ldr	r2, [pc, #404]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8007f80:	6852      	ldr	r2, [r2, #4]
 8007f82:	2a04      	cmp	r2, #4
 8007f84:	d82d      	bhi.n	8007fe2 <Execute_Buzzer_Tune1+0x7a>
	{
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//200);
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 5)//106)
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d037      	beq.n	8007ffa <Execute_Buzzer_Tune1+0x92>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(410, Current_Volume_Val_Buzzer_Tune);//200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 5)//62)
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d046      	beq.n	800801c <Execute_Buzzer_Tune1+0xb4>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 5)//106)
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d055      	beq.n	800803e <Execute_Buzzer_Tune1+0xd6>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(410, Current_Volume_Val_Buzzer_Tune);//200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 5)//62)
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d064      	beq.n	8008060 <Execute_Buzzer_Tune1+0xf8>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 5)//62)
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d100      	bne.n	8007f9c <Execute_Buzzer_Tune1+0x34>
 8007f9a:	e072      	b.n	8008082 <Execute_Buzzer_Tune1+0x11a>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(410, Current_Volume_Val_Buzzer_Tune);//200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 5)//62)
 8007f9c:	2b06      	cmp	r3, #6
 8007f9e:	d100      	bne.n	8007fa2 <Execute_Buzzer_Tune1+0x3a>
 8007fa0:	e081      	b.n	80080a6 <Execute_Buzzer_Tune1+0x13e>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 7 && PWM_Time_Counter >= 5)//62)
 8007fa2:	2b07      	cmp	r3, #7
 8007fa4:	d100      	bne.n	8007fa8 <Execute_Buzzer_Tune1+0x40>
 8007fa6:	e090      	b.n	80080ca <Execute_Buzzer_Tune1+0x162>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(410, Current_Volume_Val_Buzzer_Tune);//200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 8 && PWM_Time_Counter >= 5)//106)
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d100      	bne.n	8007fae <Execute_Buzzer_Tune1+0x46>
 8007fac:	e09f      	b.n	80080ee <Execute_Buzzer_Tune1+0x186>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		F_Buzzer_Tune1 = 0;
		F_Wait_For_Unlock_Buzzer = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8007fae:	4a59      	ldr	r2, [pc, #356]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8007fb0:	6853      	ldr	r3, [r2, #4]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	6053      	str	r3, [r2, #4]
}
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
		Configure_PWM_uS(410, Current_Volume_Val_Buzzer_Tune);//200);
 8007fb8:	4b57      	ldr	r3, [pc, #348]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 8007fba:	6819      	ldr	r1, [r3, #0]
 8007fbc:	20cd      	movs	r0, #205	; 0xcd
 8007fbe:	0040      	lsls	r0, r0, #1
 8007fc0:	f7ff fe9a 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0 && Current_Volume_Val_Buzzer_Tune > 0)
 8007fc4:	4b53      	ldr	r3, [pc, #332]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f0      	bne.n	8007fae <Execute_Buzzer_Tune1+0x46>
 8007fcc:	4b52      	ldr	r3, [pc, #328]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d0ec      	beq.n	8007fae <Execute_Buzzer_Tune1+0x46>
			if(F_Temporary_Mute == 0)
 8007fd4:	4b4f      	ldr	r3, [pc, #316]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8007fd6:	7c9b      	ldrb	r3, [r3, #18]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e8      	bne.n	8007fae <Execute_Buzzer_Tune1+0x46>
				Start_PWM_Buzzer();
 8007fdc:	f7ff fe66 	bl	8007cac <Start_PWM_Buzzer>
 8007fe0:	e7e5      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
		PWM_Time_Counter = 0;
 8007fe2:	4a4c      	ldr	r2, [pc, #304]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 8007fe8:	3301      	adds	r3, #1
 8007fea:	7013      	strb	r3, [r2, #0]
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//200);
 8007fec:	4b4a      	ldr	r3, [pc, #296]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 8007fee:	6819      	ldr	r1, [r3, #0]
 8007ff0:	20b9      	movs	r0, #185	; 0xb9
 8007ff2:	0040      	lsls	r0, r0, #1
 8007ff4:	f7ff fe80 	bl	8007cf8 <Configure_PWM_uS>
 8007ff8:	e7d9      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 5)//106)
 8007ffa:	4a46      	ldr	r2, [pc, #280]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8007ffc:	6852      	ldr	r2, [r2, #4]
 8007ffe:	2a04      	cmp	r2, #4
 8008000:	d9c3      	bls.n	8007f8a <Execute_Buzzer_Tune1+0x22>
		PWM_Time_Counter = 0;
 8008002:	4c44      	ldr	r4, [pc, #272]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8008004:	2300      	movs	r3, #0
 8008006:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(410, Current_Volume_Val_Buzzer_Tune);//200);
 8008008:	4b43      	ldr	r3, [pc, #268]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 800800a:	6819      	ldr	r1, [r3, #0]
 800800c:	20cd      	movs	r0, #205	; 0xcd
 800800e:	0040      	lsls	r0, r0, #1
 8008010:	f7ff fe72 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008014:	7823      	ldrb	r3, [r4, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	7023      	strb	r3, [r4, #0]
 800801a:	e7c8      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 5)//62)
 800801c:	4a3d      	ldr	r2, [pc, #244]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 800801e:	6852      	ldr	r2, [r2, #4]
 8008020:	2a04      	cmp	r2, #4
 8008022:	d9b4      	bls.n	8007f8e <Execute_Buzzer_Tune1+0x26>
		PWM_Time_Counter = 0;
 8008024:	4c3b      	ldr	r4, [pc, #236]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8008026:	2300      	movs	r3, #0
 8008028:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//200);
 800802a:	4b3b      	ldr	r3, [pc, #236]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 800802c:	6819      	ldr	r1, [r3, #0]
 800802e:	20b9      	movs	r0, #185	; 0xb9
 8008030:	0040      	lsls	r0, r0, #1
 8008032:	f7ff fe61 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008036:	7823      	ldrb	r3, [r4, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	7023      	strb	r3, [r4, #0]
 800803c:	e7b7      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 5)//106)
 800803e:	4a35      	ldr	r2, [pc, #212]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8008040:	6852      	ldr	r2, [r2, #4]
 8008042:	2a04      	cmp	r2, #4
 8008044:	d9a5      	bls.n	8007f92 <Execute_Buzzer_Tune1+0x2a>
		PWM_Time_Counter = 0;
 8008046:	4c33      	ldr	r4, [pc, #204]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8008048:	2300      	movs	r3, #0
 800804a:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(410, Current_Volume_Val_Buzzer_Tune);//200);
 800804c:	4b32      	ldr	r3, [pc, #200]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 800804e:	6819      	ldr	r1, [r3, #0]
 8008050:	20cd      	movs	r0, #205	; 0xcd
 8008052:	0040      	lsls	r0, r0, #1
 8008054:	f7ff fe50 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008058:	7823      	ldrb	r3, [r4, #0]
 800805a:	3301      	adds	r3, #1
 800805c:	7023      	strb	r3, [r4, #0]
 800805e:	e7a6      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 5)//62)
 8008060:	4a2c      	ldr	r2, [pc, #176]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8008062:	6852      	ldr	r2, [r2, #4]
 8008064:	2a04      	cmp	r2, #4
 8008066:	d996      	bls.n	8007f96 <Execute_Buzzer_Tune1+0x2e>
		PWM_Time_Counter = 0;
 8008068:	4c2a      	ldr	r4, [pc, #168]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 800806a:	2300      	movs	r3, #0
 800806c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//200);
 800806e:	4b2a      	ldr	r3, [pc, #168]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 8008070:	6819      	ldr	r1, [r3, #0]
 8008072:	20b9      	movs	r0, #185	; 0xb9
 8008074:	0040      	lsls	r0, r0, #1
 8008076:	f7ff fe3f 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 800807a:	7823      	ldrb	r3, [r4, #0]
 800807c:	3301      	adds	r3, #1
 800807e:	7023      	strb	r3, [r4, #0]
 8008080:	e795      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 5)//62)
 8008082:	4a24      	ldr	r2, [pc, #144]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 8008084:	6852      	ldr	r2, [r2, #4]
 8008086:	2a04      	cmp	r2, #4
 8008088:	d800      	bhi.n	800808c <Execute_Buzzer_Tune1+0x124>
 800808a:	e787      	b.n	8007f9c <Execute_Buzzer_Tune1+0x34>
		PWM_Time_Counter = 0;
 800808c:	4c21      	ldr	r4, [pc, #132]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 800808e:	2300      	movs	r3, #0
 8008090:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(410, Current_Volume_Val_Buzzer_Tune);//200);
 8008092:	4b21      	ldr	r3, [pc, #132]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 8008094:	6819      	ldr	r1, [r3, #0]
 8008096:	20cd      	movs	r0, #205	; 0xcd
 8008098:	0040      	lsls	r0, r0, #1
 800809a:	f7ff fe2d 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 800809e:	7823      	ldrb	r3, [r4, #0]
 80080a0:	3301      	adds	r3, #1
 80080a2:	7023      	strb	r3, [r4, #0]
 80080a4:	e783      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 5)//62)
 80080a6:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 80080a8:	6852      	ldr	r2, [r2, #4]
 80080aa:	2a04      	cmp	r2, #4
 80080ac:	d800      	bhi.n	80080b0 <Execute_Buzzer_Tune1+0x148>
 80080ae:	e778      	b.n	8007fa2 <Execute_Buzzer_Tune1+0x3a>
		PWM_Time_Counter = 0;
 80080b0:	4c18      	ldr	r4, [pc, #96]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 80080b2:	2300      	movs	r3, #0
 80080b4:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//200);
 80080b6:	4b18      	ldr	r3, [pc, #96]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 80080b8:	6819      	ldr	r1, [r3, #0]
 80080ba:	20b9      	movs	r0, #185	; 0xb9
 80080bc:	0040      	lsls	r0, r0, #1
 80080be:	f7ff fe1b 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80080c2:	7823      	ldrb	r3, [r4, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	7023      	strb	r3, [r4, #0]
 80080c8:	e771      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
	else if(PWM_Tone_Part == 7 && PWM_Time_Counter >= 5)//62)
 80080ca:	4a12      	ldr	r2, [pc, #72]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 80080cc:	6852      	ldr	r2, [r2, #4]
 80080ce:	2a04      	cmp	r2, #4
 80080d0:	d800      	bhi.n	80080d4 <Execute_Buzzer_Tune1+0x16c>
 80080d2:	e769      	b.n	8007fa8 <Execute_Buzzer_Tune1+0x40>
		PWM_Time_Counter = 0;
 80080d4:	4c0f      	ldr	r4, [pc, #60]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 80080d6:	2300      	movs	r3, #0
 80080d8:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(410, Current_Volume_Val_Buzzer_Tune);//200);
 80080da:	4b0f      	ldr	r3, [pc, #60]	; (8008118 <Execute_Buzzer_Tune1+0x1b0>)
 80080dc:	6819      	ldr	r1, [r3, #0]
 80080de:	20cd      	movs	r0, #205	; 0xcd
 80080e0:	0040      	lsls	r0, r0, #1
 80080e2:	f7ff fe09 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80080e6:	7823      	ldrb	r3, [r4, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	7023      	strb	r3, [r4, #0]
 80080ec:	e75f      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
	else if(PWM_Tone_Part == 8 && PWM_Time_Counter >= 5)//106)
 80080ee:	4b09      	ldr	r3, [pc, #36]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d800      	bhi.n	80080f8 <Execute_Buzzer_Tune1+0x190>
 80080f6:	e75a      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
		PWM_Time_Counter = 0;
 80080f8:	4c06      	ldr	r4, [pc, #24]	; (8008114 <Execute_Buzzer_Tune1+0x1ac>)
 80080fa:	2500      	movs	r5, #0
 80080fc:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part = 0;
 80080fe:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008100:	2108      	movs	r1, #8
 8008102:	4806      	ldr	r0, [pc, #24]	; (800811c <Execute_Buzzer_Tune1+0x1b4>)
 8008104:	f7fc fc70 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Tune1 = 0;
 8008108:	7465      	strb	r5, [r4, #17]
		F_Wait_For_Unlock_Buzzer = 0;
 800810a:	74e5      	strb	r5, [r4, #19]
		Stop_Buzzer();
 800810c:	f7ff fdde 	bl	8007ccc <Stop_Buzzer>
 8008110:	e74d      	b.n	8007fae <Execute_Buzzer_Tune1+0x46>
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	200001ec 	.word	0x200001ec
 8008118:	2000012c 	.word	0x2000012c
 800811c:	20004940 	.word	0x20004940

08008120 <Initiate_Buzzer_Tune2>:
  */
void Initiate_Buzzer_Tune2(void)
{
	/* Initialize timer for pwm generation for buzzer */
//	MX_TIM1_Init();
	PWM_Tone_Part = 0;
 8008120:	4b03      	ldr	r3, [pc, #12]	; (8008130 <Initiate_Buzzer_Tune2+0x10>)
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
	PWM_Time_Counter = 0;
 8008126:	605a      	str	r2, [r3, #4]
	F_Buzzer_Tune2 = 1;
 8008128:	3201      	adds	r2, #1
 800812a:	751a      	strb	r2, [r3, #20]
}
 800812c:	4770      	bx	lr
 800812e:	46c0      	nop			; (mov r8, r8)
 8008130:	200001ec 	.word	0x200001ec

08008134 <Execute_Buzzer_Tune2>:
  * @brief  Start Buzzer_Tune2.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Tune2(void)
{
 8008134:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8008136:	4b2c      	ldr	r3, [pc, #176]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <Execute_Buzzer_Tune2+0x12>
 800813e:	4a2a      	ldr	r2, [pc, #168]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 8008140:	6852      	ldr	r2, [r2, #4]
 8008142:	2a00      	cmp	r2, #0
 8008144:	d00e      	beq.n	8008164 <Execute_Buzzer_Tune2+0x30>
			{
				Start_PWM_Buzzer();
			}
		}
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 14)//62)
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <Execute_Buzzer_Tune2+0x1e>
 800814a:	4a27      	ldr	r2, [pc, #156]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 800814c:	6852      	ldr	r2, [r2, #4]
 800814e:	2a0d      	cmp	r2, #13
 8008150:	d81d      	bhi.n	800818e <Execute_Buzzer_Tune2+0x5a>
	{
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//150);
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 13)//106)
 8008152:	2b01      	cmp	r3, #1
 8008154:	d027      	beq.n	80081a6 <Execute_Buzzer_Tune2+0x72>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(460, Current_Volume_Val_Buzzer_Tune);//150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 17)//62)
 8008156:	2b02      	cmp	r3, #2
 8008158:	d036      	beq.n	80081c8 <Execute_Buzzer_Tune2+0x94>
		PWM_Tone_Part = 0;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		F_Buzzer_Tune2 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 800815a:	4a23      	ldr	r2, [pc, #140]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 800815c:	6853      	ldr	r3, [r2, #4]
 800815e:	3301      	adds	r3, #1
 8008160:	6053      	str	r3, [r2, #4]
}
 8008162:	bd70      	pop	{r4, r5, r6, pc}
		Configure_PWM_uS(360, Current_Volume_Val_Buzzer_Tune);//150);
 8008164:	4b21      	ldr	r3, [pc, #132]	; (80081ec <Execute_Buzzer_Tune2+0xb8>)
 8008166:	6819      	ldr	r1, [r3, #0]
 8008168:	20b4      	movs	r0, #180	; 0xb4
 800816a:	0040      	lsls	r0, r0, #1
 800816c:	f7ff fdc4 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0 && Current_Volume_Val_Buzzer_Tune > 0)
 8008170:	4b1d      	ldr	r3, [pc, #116]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f0      	bne.n	800815a <Execute_Buzzer_Tune2+0x26>
 8008178:	4b1c      	ldr	r3, [pc, #112]	; (80081ec <Execute_Buzzer_Tune2+0xb8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0ec      	beq.n	800815a <Execute_Buzzer_Tune2+0x26>
			if(F_Temporary_Mute == 0)
 8008180:	4b19      	ldr	r3, [pc, #100]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 8008182:	7c9b      	ldrb	r3, [r3, #18]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e8      	bne.n	800815a <Execute_Buzzer_Tune2+0x26>
				Start_PWM_Buzzer();
 8008188:	f7ff fd90 	bl	8007cac <Start_PWM_Buzzer>
 800818c:	e7e5      	b.n	800815a <Execute_Buzzer_Tune2+0x26>
		PWM_Time_Counter = 0;
 800818e:	4a16      	ldr	r2, [pc, #88]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 8008190:	2100      	movs	r1, #0
 8008192:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 8008194:	3301      	adds	r3, #1
 8008196:	7013      	strb	r3, [r2, #0]
		Configure_PWM_uS(370, Current_Volume_Val_Buzzer_Tune);//150);
 8008198:	4b14      	ldr	r3, [pc, #80]	; (80081ec <Execute_Buzzer_Tune2+0xb8>)
 800819a:	6819      	ldr	r1, [r3, #0]
 800819c:	20b9      	movs	r0, #185	; 0xb9
 800819e:	0040      	lsls	r0, r0, #1
 80081a0:	f7ff fdaa 	bl	8007cf8 <Configure_PWM_uS>
 80081a4:	e7d9      	b.n	800815a <Execute_Buzzer_Tune2+0x26>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 13)//106)
 80081a6:	4a10      	ldr	r2, [pc, #64]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 80081a8:	6852      	ldr	r2, [r2, #4]
 80081aa:	2a0c      	cmp	r2, #12
 80081ac:	d9d3      	bls.n	8008156 <Execute_Buzzer_Tune2+0x22>
		PWM_Time_Counter = 0;
 80081ae:	4c0e      	ldr	r4, [pc, #56]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 80081b0:	2300      	movs	r3, #0
 80081b2:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(460, Current_Volume_Val_Buzzer_Tune);//150);
 80081b4:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <Execute_Buzzer_Tune2+0xb8>)
 80081b6:	6819      	ldr	r1, [r3, #0]
 80081b8:	20e6      	movs	r0, #230	; 0xe6
 80081ba:	0040      	lsls	r0, r0, #1
 80081bc:	f7ff fd9c 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80081c0:	7823      	ldrb	r3, [r4, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	7023      	strb	r3, [r4, #0]
 80081c6:	e7c8      	b.n	800815a <Execute_Buzzer_Tune2+0x26>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 17)//62)
 80081c8:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	d9c4      	bls.n	800815a <Execute_Buzzer_Tune2+0x26>
		PWM_Time_Counter = 0;
 80081d0:	4c05      	ldr	r4, [pc, #20]	; (80081e8 <Execute_Buzzer_Tune2+0xb4>)
 80081d2:	2500      	movs	r5, #0
 80081d4:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part = 0;
 80081d6:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 80081d8:	2108      	movs	r1, #8
 80081da:	4805      	ldr	r0, [pc, #20]	; (80081f0 <Execute_Buzzer_Tune2+0xbc>)
 80081dc:	f7fc fc04 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Tune2 = 0;
 80081e0:	7525      	strb	r5, [r4, #20]
		Stop_Buzzer();
 80081e2:	f7ff fd73 	bl	8007ccc <Stop_Buzzer>
 80081e6:	e7b8      	b.n	800815a <Execute_Buzzer_Tune2+0x26>
 80081e8:	200001ec 	.word	0x200001ec
 80081ec:	2000012c 	.word	0x2000012c
 80081f0:	20004940 	.word	0x20004940

080081f4 <Execute_Buzzer_Melody1>:
  * @brief  Start Buzzer_Melody1.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Melody1(void)
{
 80081f4:	b510      	push	{r4, lr}
	unsigned char F_Repeat_Tune = 0;

	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 80081f6:	4b3e      	ldr	r3, [pc, #248]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d103      	bne.n	8008206 <Execute_Buzzer_Melody1+0x12>
 80081fe:	4a3c      	ldr	r2, [pc, #240]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 8008200:	6852      	ldr	r2, [r2, #4]
 8008202:	2a00      	cmp	r2, #0
 8008204:	d014      	beq.n	8008230 <Execute_Buzzer_Melody1+0x3c>
	{
		Configure_PWM_uS(355,150);
 		if(PWM_Time_Counter == 0)
		Start_PWM_Buzzer();
	}
	else if((PWM_Tone_Part == 0)&& (PWM_Time_Counter > 9))
 8008206:	2b00      	cmp	r3, #0
 8008208:	d103      	bne.n	8008212 <Execute_Buzzer_Melody1+0x1e>
 800820a:	4a39      	ldr	r2, [pc, #228]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 800820c:	6852      	ldr	r2, [r2, #4]
 800820e:	2a09      	cmp	r2, #9
 8008210:	d81a      	bhi.n	8008248 <Execute_Buzzer_Melody1+0x54>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(371,150);
 		PWM_Tone_Part++;
 	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 10)//106) //88)//
 8008212:	2b01      	cmp	r3, #1
 8008214:	d023      	beq.n	800825e <Execute_Buzzer_Melody1+0x6a>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(409,150);
 		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 9)//62) //112)
 8008216:	2b02      	cmp	r3, #2
 8008218:	d031      	beq.n	800827e <Execute_Buzzer_Melody1+0x8a>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(452,150);
 		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 9)//106) //100)//
 800821a:	2b03      	cmp	r3, #3
 800821c:	d03f      	beq.n	800829e <Execute_Buzzer_Melody1+0xaa>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(471,150);
 		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 12)//62) //72)//
 800821e:	2b04      	cmp	r3, #4
 8008220:	d04d      	beq.n	80082be <Execute_Buzzer_Melody1+0xca>
	{
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
	}
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 2)//62) //116)//
 8008222:	2b05      	cmp	r3, #5
 8008224:	d059      	beq.n	80082da <Execute_Buzzer_Melody1+0xe6>
		PWM_Time_Counter = 0;
		Stop_Buzzer();
	}
	else
	{
		PWM_Time_Counter++;
 8008226:	4a32      	ldr	r2, [pc, #200]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 8008228:	6853      	ldr	r3, [r2, #4]
 800822a:	3301      	adds	r3, #1
 800822c:	6053      	str	r3, [r2, #4]
	}

}
 800822e:	bd10      	pop	{r4, pc}
		Configure_PWM_uS(355,150);
 8008230:	2064      	movs	r0, #100	; 0x64
 8008232:	2196      	movs	r1, #150	; 0x96
 8008234:	30ff      	adds	r0, #255	; 0xff
 8008236:	f7ff fd5f 	bl	8007cf8 <Configure_PWM_uS>
 		if(PWM_Time_Counter == 0)
 800823a:	4b2d      	ldr	r3, [pc, #180]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1f1      	bne.n	8008226 <Execute_Buzzer_Melody1+0x32>
		Start_PWM_Buzzer();
 8008242:	f7ff fd33 	bl	8007cac <Start_PWM_Buzzer>
	if(F_Repeat_Tune == 1)
 8008246:	e7ee      	b.n	8008226 <Execute_Buzzer_Melody1+0x32>
		PWM_Time_Counter = 0;
 8008248:	4c29      	ldr	r4, [pc, #164]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 800824a:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(371,150);
 800824c:	2074      	movs	r0, #116	; 0x74
 800824e:	2196      	movs	r1, #150	; 0x96
 8008250:	30ff      	adds	r0, #255	; 0xff
 8008252:	f7ff fd51 	bl	8007cf8 <Configure_PWM_uS>
 		PWM_Tone_Part++;
 8008256:	7823      	ldrb	r3, [r4, #0]
 8008258:	3301      	adds	r3, #1
 800825a:	7023      	strb	r3, [r4, #0]
	if(F_Repeat_Tune == 1)
 800825c:	e7e3      	b.n	8008226 <Execute_Buzzer_Melody1+0x32>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 10)//106) //88)//
 800825e:	4a24      	ldr	r2, [pc, #144]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 8008260:	6852      	ldr	r2, [r2, #4]
 8008262:	2a09      	cmp	r2, #9
 8008264:	d9d7      	bls.n	8008216 <Execute_Buzzer_Melody1+0x22>
		PWM_Time_Counter = 0;
 8008266:	4c22      	ldr	r4, [pc, #136]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 8008268:	2300      	movs	r3, #0
 800826a:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(409,150);
 800826c:	209a      	movs	r0, #154	; 0x9a
 800826e:	2196      	movs	r1, #150	; 0x96
 8008270:	30ff      	adds	r0, #255	; 0xff
 8008272:	f7ff fd41 	bl	8007cf8 <Configure_PWM_uS>
 		PWM_Tone_Part++;
 8008276:	7823      	ldrb	r3, [r4, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	7023      	strb	r3, [r4, #0]
	if(F_Repeat_Tune == 1)
 800827c:	e7d3      	b.n	8008226 <Execute_Buzzer_Melody1+0x32>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 9)//62) //112)
 800827e:	4a1c      	ldr	r2, [pc, #112]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 8008280:	6852      	ldr	r2, [r2, #4]
 8008282:	2a08      	cmp	r2, #8
 8008284:	d9c9      	bls.n	800821a <Execute_Buzzer_Melody1+0x26>
		PWM_Time_Counter = 0;
 8008286:	4c1a      	ldr	r4, [pc, #104]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 8008288:	2300      	movs	r3, #0
 800828a:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(452,150);
 800828c:	20e2      	movs	r0, #226	; 0xe2
 800828e:	2196      	movs	r1, #150	; 0x96
 8008290:	0040      	lsls	r0, r0, #1
 8008292:	f7ff fd31 	bl	8007cf8 <Configure_PWM_uS>
 		PWM_Tone_Part++;
 8008296:	7823      	ldrb	r3, [r4, #0]
 8008298:	3301      	adds	r3, #1
 800829a:	7023      	strb	r3, [r4, #0]
	if(F_Repeat_Tune == 1)
 800829c:	e7c3      	b.n	8008226 <Execute_Buzzer_Melody1+0x32>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 9)//106) //100)//
 800829e:	4a14      	ldr	r2, [pc, #80]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 80082a0:	6852      	ldr	r2, [r2, #4]
 80082a2:	2a08      	cmp	r2, #8
 80082a4:	d9bb      	bls.n	800821e <Execute_Buzzer_Melody1+0x2a>
		PWM_Time_Counter = 0;
 80082a6:	4c12      	ldr	r4, [pc, #72]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 80082a8:	2300      	movs	r3, #0
 80082aa:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(471,150);
 80082ac:	20d8      	movs	r0, #216	; 0xd8
 80082ae:	2196      	movs	r1, #150	; 0x96
 80082b0:	30ff      	adds	r0, #255	; 0xff
 80082b2:	f7ff fd21 	bl	8007cf8 <Configure_PWM_uS>
 		PWM_Tone_Part++;
 80082b6:	7823      	ldrb	r3, [r4, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	7023      	strb	r3, [r4, #0]
	if(F_Repeat_Tune == 1)
 80082bc:	e7b3      	b.n	8008226 <Execute_Buzzer_Melody1+0x32>
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 12)//62) //72)//
 80082be:	4a0c      	ldr	r2, [pc, #48]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 80082c0:	6852      	ldr	r2, [r2, #4]
 80082c2:	2a0b      	cmp	r2, #11
 80082c4:	d9ad      	bls.n	8008222 <Execute_Buzzer_Melody1+0x2e>
		PWM_Time_Counter = 0;
 80082c6:	4a0a      	ldr	r2, [pc, #40]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 80082c8:	2100      	movs	r1, #0
 80082ca:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 80082cc:	3301      	adds	r3, #1
 80082ce:	7013      	strb	r3, [r2, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 80082d0:	3108      	adds	r1, #8
 80082d2:	4808      	ldr	r0, [pc, #32]	; (80082f4 <Execute_Buzzer_Melody1+0x100>)
 80082d4:	f7fc fb88 	bl	80049e8 <HAL_TIM_PWM_Stop>
	if(F_Repeat_Tune == 1)
 80082d8:	e7a5      	b.n	8008226 <Execute_Buzzer_Melody1+0x32>
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 2)//62) //116)//
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d9a1      	bls.n	8008226 <Execute_Buzzer_Melody1+0x32>
		PWM_Time_Counter = 0;
 80082e2:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <Execute_Buzzer_Melody1+0xfc>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	605a      	str	r2, [r3, #4]
		PWM_Tone_Part = 0;
 80082e8:	701a      	strb	r2, [r3, #0]
		Stop_Buzzer();
 80082ea:	f7ff fcef 	bl	8007ccc <Stop_Buzzer>
 80082ee:	e79e      	b.n	800822e <Execute_Buzzer_Melody1+0x3a>
 80082f0:	200001ec 	.word	0x200001ec
 80082f4:	20004940 	.word	0x20004940

080082f8 <Initiate_Buzzer_Beep2>:
  */
void Initiate_Buzzer_Beep2(void)
{
	/* Initialize timer for pwm generation for buzzer */
//	MX_TIM1_Init();
	PWM_Tone_Part = 0;
 80082f8:	4b03      	ldr	r3, [pc, #12]	; (8008308 <Initiate_Buzzer_Beep2+0x10>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
	PWM_Time_Counter = 0;
 80082fe:	605a      	str	r2, [r3, #4]
	F_Buzzer_Beep2 = 1;
 8008300:	3201      	adds	r2, #1
 8008302:	759a      	strb	r2, [r3, #22]
}
 8008304:	4770      	bx	lr
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	200001ec 	.word	0x200001ec

0800830c <Execute_Buzzer_Beep2>:
  * @brief  Start Buzzer_Beep2.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Beep2(void)
{
 800830c:	b510      	push	{r4, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 800830e:	4b27      	ldr	r3, [pc, #156]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <Execute_Buzzer_Beep2+0x12>
 8008316:	4a25      	ldr	r2, [pc, #148]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 8008318:	6852      	ldr	r2, [r2, #4]
 800831a:	2a00      	cmp	r2, #0
 800831c:	d00e      	beq.n	800833c <Execute_Buzzer_Beep2+0x30>
	{
		Configure_PWM_uS(360,120);
		if(PWM_Time_Counter == 0)
			Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 25)
 800831e:	2b00      	cmp	r3, #0
 8008320:	d103      	bne.n	800832a <Execute_Buzzer_Beep2+0x1e>
 8008322:	4a22      	ldr	r2, [pc, #136]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 8008324:	6852      	ldr	r2, [r2, #4]
 8008326:	2a18      	cmp	r2, #24
 8008328:	d814      	bhi.n	8008354 <Execute_Buzzer_Beep2+0x48>
	{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 5)
 800832a:	2b01      	cmp	r3, #1
 800832c:	d01d      	beq.n	800836a <Execute_Buzzer_Beep2+0x5e>
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,120);
		Start_PWM_Buzzer();
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 25)
 800832e:	2b02      	cmp	r3, #2
 8008330:	d02d      	beq.n	800838e <Execute_Buzzer_Beep2+0x82>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Time_Counter = 0;
		F_Buzzer_Beep2 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8008332:	4a1e      	ldr	r2, [pc, #120]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 8008334:	6853      	ldr	r3, [r2, #4]
 8008336:	3301      	adds	r3, #1
 8008338:	6053      	str	r3, [r2, #4]
}
 800833a:	bd10      	pop	{r4, pc}
		Configure_PWM_uS(360,120);
 800833c:	20b4      	movs	r0, #180	; 0xb4
 800833e:	2178      	movs	r1, #120	; 0x78
 8008340:	0040      	lsls	r0, r0, #1
 8008342:	f7ff fcd9 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8008346:	4b19      	ldr	r3, [pc, #100]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1f1      	bne.n	8008332 <Execute_Buzzer_Beep2+0x26>
			Start_PWM_Buzzer();
 800834e:	f7ff fcad 	bl	8007cac <Start_PWM_Buzzer>
 8008352:	e7ee      	b.n	8008332 <Execute_Buzzer_Beep2+0x26>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008354:	2108      	movs	r1, #8
 8008356:	4816      	ldr	r0, [pc, #88]	; (80083b0 <Execute_Buzzer_Beep2+0xa4>)
 8008358:	f7fc fb46 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Time_Counter = 0;
 800835c:	4b13      	ldr	r3, [pc, #76]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 800835e:	2200      	movs	r2, #0
 8008360:	605a      	str	r2, [r3, #4]
		PWM_Tone_Part++;
 8008362:	781a      	ldrb	r2, [r3, #0]
 8008364:	3201      	adds	r2, #1
 8008366:	701a      	strb	r2, [r3, #0]
 8008368:	e7e3      	b.n	8008332 <Execute_Buzzer_Beep2+0x26>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 5)
 800836a:	4a10      	ldr	r2, [pc, #64]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 800836c:	6852      	ldr	r2, [r2, #4]
 800836e:	2a04      	cmp	r2, #4
 8008370:	d9dd      	bls.n	800832e <Execute_Buzzer_Beep2+0x22>
		PWM_Time_Counter = 0;
 8008372:	4c0e      	ldr	r4, [pc, #56]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 8008374:	2300      	movs	r3, #0
 8008376:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,120);
 8008378:	20b4      	movs	r0, #180	; 0xb4
 800837a:	2178      	movs	r1, #120	; 0x78
 800837c:	0040      	lsls	r0, r0, #1
 800837e:	f7ff fcbb 	bl	8007cf8 <Configure_PWM_uS>
		Start_PWM_Buzzer();
 8008382:	f7ff fc93 	bl	8007cac <Start_PWM_Buzzer>
		PWM_Tone_Part++;
 8008386:	7823      	ldrb	r3, [r4, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	7023      	strb	r3, [r4, #0]
 800838c:	e7d1      	b.n	8008332 <Execute_Buzzer_Beep2+0x26>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 25)
 800838e:	4b07      	ldr	r3, [pc, #28]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b18      	cmp	r3, #24
 8008394:	d9cd      	bls.n	8008332 <Execute_Buzzer_Beep2+0x26>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008396:	2108      	movs	r1, #8
 8008398:	4805      	ldr	r0, [pc, #20]	; (80083b0 <Execute_Buzzer_Beep2+0xa4>)
 800839a:	f7fc fb25 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Time_Counter = 0;
 800839e:	4b03      	ldr	r3, [pc, #12]	; (80083ac <Execute_Buzzer_Beep2+0xa0>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	605a      	str	r2, [r3, #4]
		F_Buzzer_Beep2 = 0;
 80083a4:	759a      	strb	r2, [r3, #22]
		Stop_Buzzer();
 80083a6:	f7ff fc91 	bl	8007ccc <Stop_Buzzer>
 80083aa:	e7c2      	b.n	8008332 <Execute_Buzzer_Beep2+0x26>
 80083ac:	200001ec 	.word	0x200001ec
 80083b0:	20004940 	.word	0x20004940

080083b4 <Execute_Buzzer_Melody2>:
  * @brief  Start Buzzer_Melody2.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Melody2(void)
{
 80083b4:	b510      	push	{r4, lr}
	unsigned char F_Repeat_Tune = 0;

	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 80083b6:	4bbd      	ldr	r3, [pc, #756]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d103      	bne.n	80083c6 <Execute_Buzzer_Melody2+0x12>
 80083be:	4abb      	ldr	r2, [pc, #748]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80083c0:	6852      	ldr	r2, [r2, #4]
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	d041      	beq.n	800844a <Execute_Buzzer_Melody2+0x96>
	{
		Configure_PWM_uS(439,300);
		if(PWM_Time_Counter == 0)
		Start_PWM_Buzzer();
	}
	else if((PWM_Tone_Part == 0)&& (PWM_Time_Counter > 2))
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d103      	bne.n	80083d2 <Execute_Buzzer_Melody2+0x1e>
 80083ca:	4ab8      	ldr	r2, [pc, #736]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80083cc:	6852      	ldr	r2, [r2, #4]
 80083ce:	2a02      	cmp	r2, #2
 80083d0:	d848      	bhi.n	8008464 <Execute_Buzzer_Melody2+0xb0>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(415,300);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 2)//106) //88)//
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d05e      	beq.n	8008494 <Execute_Buzzer_Melody2+0xe0>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(404,120);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 4)//62) //112)
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d100      	bne.n	80083dc <Execute_Buzzer_Melody2+0x28>
 80083da:	e06b      	b.n	80084b4 <Execute_Buzzer_Melody2+0x100>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 4)//106) //100)//
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d100      	bne.n	80083e2 <Execute_Buzzer_Melody2+0x2e>
 80083e0:	e079      	b.n	80084d6 <Execute_Buzzer_Melody2+0x122>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(355,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 2)//106) //100)//
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d100      	bne.n	80083e8 <Execute_Buzzer_Melody2+0x34>
 80083e6:	e087      	b.n	80084f8 <Execute_Buzzer_Melody2+0x144>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(366,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 2)//106) //100)//
 80083e8:	2b05      	cmp	r3, #5
 80083ea:	d100      	bne.n	80083ee <Execute_Buzzer_Melody2+0x3a>
 80083ec:	e095      	b.n	800851a <Execute_Buzzer_Melody2+0x166>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(331,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 2)//62) //72)//
 80083ee:	2b06      	cmp	r3, #6
 80083f0:	d100      	bne.n	80083f4 <Execute_Buzzer_Melody2+0x40>
 80083f2:	e0a3      	b.n	800853c <Execute_Buzzer_Melody2+0x188>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(317,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 7 && PWM_Time_Counter >= 2)//106) //100)//
 80083f4:	2b07      	cmp	r3, #7
 80083f6:	d100      	bne.n	80083fa <Execute_Buzzer_Melody2+0x46>
 80083f8:	e0b1      	b.n	800855e <Execute_Buzzer_Melody2+0x1aa>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(304,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 8 && PWM_Time_Counter >= 2)//106) //100)//
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d100      	bne.n	8008400 <Execute_Buzzer_Melody2+0x4c>
 80083fe:	e0bf      	b.n	8008580 <Execute_Buzzer_Melody2+0x1cc>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(304,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 9 && PWM_Time_Counter >= 2)//62) //72)//
 8008400:	2b09      	cmp	r3, #9
 8008402:	d100      	bne.n	8008406 <Execute_Buzzer_Melody2+0x52>
 8008404:	e0cd      	b.n	80085a2 <Execute_Buzzer_Melody2+0x1ee>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(317,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 10 && PWM_Time_Counter >= 2)//106) //100)//
 8008406:	2b0a      	cmp	r3, #10
 8008408:	d100      	bne.n	800840c <Execute_Buzzer_Melody2+0x58>
 800840a:	e0db      	b.n	80085c4 <Execute_Buzzer_Melody2+0x210>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(331,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 11 && PWM_Time_Counter >= 2)//106) //100)//
 800840c:	2b0b      	cmp	r3, #11
 800840e:	d100      	bne.n	8008412 <Execute_Buzzer_Melody2+0x5e>
 8008410:	e0e9      	b.n	80085e6 <Execute_Buzzer_Melody2+0x232>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(366,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 12 && PWM_Time_Counter >= 2)//106) //100)//
 8008412:	2b0c      	cmp	r3, #12
 8008414:	d100      	bne.n	8008418 <Execute_Buzzer_Melody2+0x64>
 8008416:	e0f7      	b.n	8008608 <Execute_Buzzer_Melody2+0x254>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(355,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 13 && PWM_Time_Counter >= 2)//62) //112)
 8008418:	2b0d      	cmp	r3, #13
 800841a:	d100      	bne.n	800841e <Execute_Buzzer_Melody2+0x6a>
 800841c:	e105      	b.n	800862a <Execute_Buzzer_Melody2+0x276>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 14 && PWM_Time_Counter >= 4)//106) //88)//
 800841e:	2b0e      	cmp	r3, #14
 8008420:	d100      	bne.n	8008424 <Execute_Buzzer_Melody2+0x70>
 8008422:	e113      	b.n	800864c <Execute_Buzzer_Melody2+0x298>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(404,120);
		PWM_Tone_Part++;
	}
	else if((PWM_Tone_Part == 15) && (PWM_Time_Counter >= 4))
 8008424:	2b0f      	cmp	r3, #15
 8008426:	d128      	bne.n	800847a <Execute_Buzzer_Melody2+0xc6>
 8008428:	4ba0      	ldr	r3, [pc, #640]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2b03      	cmp	r3, #3
 800842e:	d924      	bls.n	800847a <Execute_Buzzer_Melody2+0xc6>
	{
		PWM_Time_Counter = 0;
 8008430:	4c9e      	ldr	r4, [pc, #632]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008432:	2300      	movs	r3, #0
 8008434:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(415,300);
 8008436:	2196      	movs	r1, #150	; 0x96
 8008438:	20a0      	movs	r0, #160	; 0xa0
 800843a:	0049      	lsls	r1, r1, #1
 800843c:	30ff      	adds	r0, #255	; 0xff
 800843e:	f7ff fc5b 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008442:	7823      	ldrb	r3, [r4, #0]
 8008444:	3301      	adds	r3, #1
 8008446:	7023      	strb	r3, [r4, #0]
 8008448:	e017      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
		Configure_PWM_uS(439,300);
 800844a:	2196      	movs	r1, #150	; 0x96
 800844c:	20b8      	movs	r0, #184	; 0xb8
 800844e:	0049      	lsls	r1, r1, #1
 8008450:	30ff      	adds	r0, #255	; 0xff
 8008452:	f7ff fc51 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8008456:	4b95      	ldr	r3, [pc, #596]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10d      	bne.n	800847a <Execute_Buzzer_Melody2+0xc6>
		Start_PWM_Buzzer();
 800845e:	f7ff fc25 	bl	8007cac <Start_PWM_Buzzer>
 8008462:	e00a      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
		PWM_Time_Counter = 0;
 8008464:	4c91      	ldr	r4, [pc, #580]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008466:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(415,300);
 8008468:	2196      	movs	r1, #150	; 0x96
 800846a:	20a0      	movs	r0, #160	; 0xa0
 800846c:	0049      	lsls	r1, r1, #1
 800846e:	30ff      	adds	r0, #255	; 0xff
 8008470:	f7ff fc42 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008474:	7823      	ldrb	r3, [r4, #0]
 8008476:	3301      	adds	r3, #1
 8008478:	7023      	strb	r3, [r4, #0]
	}
	if(PWM_Tone_Part == 16 && PWM_Time_Counter >= 2)
 800847a:	4b8c      	ldr	r3, [pc, #560]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b10      	cmp	r3, #16
 8008480:	d100      	bne.n	8008484 <Execute_Buzzer_Melody2+0xd0>
 8008482:	e0f4      	b.n	800866e <Execute_Buzzer_Melody2+0x2ba>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(439,300);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 17 && PWM_Time_Counter >= 2)//62) //116)//
 8008484:	2b11      	cmp	r3, #17
 8008486:	d100      	bne.n	800848a <Execute_Buzzer_Melody2+0xd6>
 8008488:	e103      	b.n	8008692 <Execute_Buzzer_Melody2+0x2de>
		F_Repeat_Tune = 0;
		Stop_Buzzer();
	}
	else
	{
		PWM_Time_Counter++;
 800848a:	4a88      	ldr	r2, [pc, #544]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800848c:	6853      	ldr	r3, [r2, #4]
 800848e:	3301      	adds	r3, #1
 8008490:	6053      	str	r3, [r2, #4]
	}
}
 8008492:	bd10      	pop	{r4, pc}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 2)//106) //88)//
 8008494:	4a85      	ldr	r2, [pc, #532]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008496:	6852      	ldr	r2, [r2, #4]
 8008498:	2a01      	cmp	r2, #1
 800849a:	d99c      	bls.n	80083d6 <Execute_Buzzer_Melody2+0x22>
		PWM_Time_Counter = 0;
 800849c:	4c83      	ldr	r4, [pc, #524]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800849e:	2300      	movs	r3, #0
 80084a0:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(404,120);
 80084a2:	20ca      	movs	r0, #202	; 0xca
 80084a4:	2178      	movs	r1, #120	; 0x78
 80084a6:	0040      	lsls	r0, r0, #1
 80084a8:	f7ff fc26 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80084ac:	7823      	ldrb	r3, [r4, #0]
 80084ae:	3301      	adds	r3, #1
 80084b0:	7023      	strb	r3, [r4, #0]
 80084b2:	e7e2      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 4)//62) //112)
 80084b4:	4a7d      	ldr	r2, [pc, #500]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80084b6:	6852      	ldr	r2, [r2, #4]
 80084b8:	2a03      	cmp	r2, #3
 80084ba:	d800      	bhi.n	80084be <Execute_Buzzer_Melody2+0x10a>
 80084bc:	e78e      	b.n	80083dc <Execute_Buzzer_Melody2+0x28>
		PWM_Time_Counter = 0;
 80084be:	4c7b      	ldr	r4, [pc, #492]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80084c0:	2300      	movs	r3, #0
 80084c2:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,150);
 80084c4:	20b4      	movs	r0, #180	; 0xb4
 80084c6:	2196      	movs	r1, #150	; 0x96
 80084c8:	0040      	lsls	r0, r0, #1
 80084ca:	f7ff fc15 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80084ce:	7823      	ldrb	r3, [r4, #0]
 80084d0:	3301      	adds	r3, #1
 80084d2:	7023      	strb	r3, [r4, #0]
 80084d4:	e7d1      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 4)//106) //100)//
 80084d6:	4a75      	ldr	r2, [pc, #468]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80084d8:	6852      	ldr	r2, [r2, #4]
 80084da:	2a03      	cmp	r2, #3
 80084dc:	d800      	bhi.n	80084e0 <Execute_Buzzer_Melody2+0x12c>
 80084de:	e780      	b.n	80083e2 <Execute_Buzzer_Melody2+0x2e>
		PWM_Time_Counter = 0;
 80084e0:	4c72      	ldr	r4, [pc, #456]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80084e2:	2300      	movs	r3, #0
 80084e4:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(355,150);
 80084e6:	2064      	movs	r0, #100	; 0x64
 80084e8:	2196      	movs	r1, #150	; 0x96
 80084ea:	30ff      	adds	r0, #255	; 0xff
 80084ec:	f7ff fc04 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80084f0:	7823      	ldrb	r3, [r4, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	7023      	strb	r3, [r4, #0]
 80084f6:	e7c0      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 2)//106) //100)//
 80084f8:	4a6c      	ldr	r2, [pc, #432]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80084fa:	6852      	ldr	r2, [r2, #4]
 80084fc:	2a01      	cmp	r2, #1
 80084fe:	d800      	bhi.n	8008502 <Execute_Buzzer_Melody2+0x14e>
 8008500:	e772      	b.n	80083e8 <Execute_Buzzer_Melody2+0x34>
		PWM_Time_Counter = 0;
 8008502:	4c6a      	ldr	r4, [pc, #424]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008504:	2300      	movs	r3, #0
 8008506:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(366,150);
 8008508:	20b7      	movs	r0, #183	; 0xb7
 800850a:	2196      	movs	r1, #150	; 0x96
 800850c:	0040      	lsls	r0, r0, #1
 800850e:	f7ff fbf3 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008512:	7823      	ldrb	r3, [r4, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	7023      	strb	r3, [r4, #0]
 8008518:	e7af      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 2)//106) //100)//
 800851a:	4a64      	ldr	r2, [pc, #400]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800851c:	6852      	ldr	r2, [r2, #4]
 800851e:	2a01      	cmp	r2, #1
 8008520:	d800      	bhi.n	8008524 <Execute_Buzzer_Melody2+0x170>
 8008522:	e764      	b.n	80083ee <Execute_Buzzer_Melody2+0x3a>
		PWM_Time_Counter = 0;
 8008524:	4c61      	ldr	r4, [pc, #388]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008526:	2300      	movs	r3, #0
 8008528:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(331,150);
 800852a:	204c      	movs	r0, #76	; 0x4c
 800852c:	2196      	movs	r1, #150	; 0x96
 800852e:	30ff      	adds	r0, #255	; 0xff
 8008530:	f7ff fbe2 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008534:	7823      	ldrb	r3, [r4, #0]
 8008536:	3301      	adds	r3, #1
 8008538:	7023      	strb	r3, [r4, #0]
 800853a:	e79e      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 2)//62) //72)//
 800853c:	4a5b      	ldr	r2, [pc, #364]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800853e:	6852      	ldr	r2, [r2, #4]
 8008540:	2a01      	cmp	r2, #1
 8008542:	d800      	bhi.n	8008546 <Execute_Buzzer_Melody2+0x192>
 8008544:	e756      	b.n	80083f4 <Execute_Buzzer_Melody2+0x40>
		PWM_Time_Counter = 0;
 8008546:	4c59      	ldr	r4, [pc, #356]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008548:	2300      	movs	r3, #0
 800854a:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(317,150);
 800854c:	203e      	movs	r0, #62	; 0x3e
 800854e:	2196      	movs	r1, #150	; 0x96
 8008550:	30ff      	adds	r0, #255	; 0xff
 8008552:	f7ff fbd1 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008556:	7823      	ldrb	r3, [r4, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	7023      	strb	r3, [r4, #0]
 800855c:	e78d      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 7 && PWM_Time_Counter >= 2)//106) //100)//
 800855e:	4a53      	ldr	r2, [pc, #332]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008560:	6852      	ldr	r2, [r2, #4]
 8008562:	2a01      	cmp	r2, #1
 8008564:	d800      	bhi.n	8008568 <Execute_Buzzer_Melody2+0x1b4>
 8008566:	e748      	b.n	80083fa <Execute_Buzzer_Melody2+0x46>
		PWM_Time_Counter = 0;
 8008568:	4c50      	ldr	r4, [pc, #320]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800856a:	2300      	movs	r3, #0
 800856c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(304,150);
 800856e:	2098      	movs	r0, #152	; 0x98
 8008570:	2196      	movs	r1, #150	; 0x96
 8008572:	0040      	lsls	r0, r0, #1
 8008574:	f7ff fbc0 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008578:	7823      	ldrb	r3, [r4, #0]
 800857a:	3301      	adds	r3, #1
 800857c:	7023      	strb	r3, [r4, #0]
 800857e:	e77c      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 8 && PWM_Time_Counter >= 2)//106) //100)//
 8008580:	4a4a      	ldr	r2, [pc, #296]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008582:	6852      	ldr	r2, [r2, #4]
 8008584:	2a01      	cmp	r2, #1
 8008586:	d800      	bhi.n	800858a <Execute_Buzzer_Melody2+0x1d6>
 8008588:	e73a      	b.n	8008400 <Execute_Buzzer_Melody2+0x4c>
		PWM_Time_Counter = 0;
 800858a:	4c48      	ldr	r4, [pc, #288]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800858c:	2300      	movs	r3, #0
 800858e:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(304,150);
 8008590:	2098      	movs	r0, #152	; 0x98
 8008592:	2196      	movs	r1, #150	; 0x96
 8008594:	0040      	lsls	r0, r0, #1
 8008596:	f7ff fbaf 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 800859a:	7823      	ldrb	r3, [r4, #0]
 800859c:	3301      	adds	r3, #1
 800859e:	7023      	strb	r3, [r4, #0]
 80085a0:	e76b      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 9 && PWM_Time_Counter >= 2)//62) //72)//
 80085a2:	4a42      	ldr	r2, [pc, #264]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80085a4:	6852      	ldr	r2, [r2, #4]
 80085a6:	2a01      	cmp	r2, #1
 80085a8:	d800      	bhi.n	80085ac <Execute_Buzzer_Melody2+0x1f8>
 80085aa:	e72c      	b.n	8008406 <Execute_Buzzer_Melody2+0x52>
		PWM_Time_Counter = 0;
 80085ac:	4c3f      	ldr	r4, [pc, #252]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80085ae:	2300      	movs	r3, #0
 80085b0:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(317,150);
 80085b2:	203e      	movs	r0, #62	; 0x3e
 80085b4:	2196      	movs	r1, #150	; 0x96
 80085b6:	30ff      	adds	r0, #255	; 0xff
 80085b8:	f7ff fb9e 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80085bc:	7823      	ldrb	r3, [r4, #0]
 80085be:	3301      	adds	r3, #1
 80085c0:	7023      	strb	r3, [r4, #0]
 80085c2:	e75a      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 10 && PWM_Time_Counter >= 2)//106) //100)//
 80085c4:	4a39      	ldr	r2, [pc, #228]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80085c6:	6852      	ldr	r2, [r2, #4]
 80085c8:	2a01      	cmp	r2, #1
 80085ca:	d800      	bhi.n	80085ce <Execute_Buzzer_Melody2+0x21a>
 80085cc:	e71e      	b.n	800840c <Execute_Buzzer_Melody2+0x58>
		PWM_Time_Counter = 0;
 80085ce:	4c37      	ldr	r4, [pc, #220]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80085d0:	2300      	movs	r3, #0
 80085d2:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(331,150);
 80085d4:	204c      	movs	r0, #76	; 0x4c
 80085d6:	2196      	movs	r1, #150	; 0x96
 80085d8:	30ff      	adds	r0, #255	; 0xff
 80085da:	f7ff fb8d 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80085de:	7823      	ldrb	r3, [r4, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	7023      	strb	r3, [r4, #0]
 80085e4:	e749      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 11 && PWM_Time_Counter >= 2)//106) //100)//
 80085e6:	4a31      	ldr	r2, [pc, #196]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80085e8:	6852      	ldr	r2, [r2, #4]
 80085ea:	2a01      	cmp	r2, #1
 80085ec:	d800      	bhi.n	80085f0 <Execute_Buzzer_Melody2+0x23c>
 80085ee:	e710      	b.n	8008412 <Execute_Buzzer_Melody2+0x5e>
		PWM_Time_Counter = 0;
 80085f0:	4c2e      	ldr	r4, [pc, #184]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 80085f2:	2300      	movs	r3, #0
 80085f4:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(366,150);
 80085f6:	20b7      	movs	r0, #183	; 0xb7
 80085f8:	2196      	movs	r1, #150	; 0x96
 80085fa:	0040      	lsls	r0, r0, #1
 80085fc:	f7ff fb7c 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008600:	7823      	ldrb	r3, [r4, #0]
 8008602:	3301      	adds	r3, #1
 8008604:	7023      	strb	r3, [r4, #0]
 8008606:	e738      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 12 && PWM_Time_Counter >= 2)//106) //100)//
 8008608:	4a28      	ldr	r2, [pc, #160]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800860a:	6852      	ldr	r2, [r2, #4]
 800860c:	2a01      	cmp	r2, #1
 800860e:	d800      	bhi.n	8008612 <Execute_Buzzer_Melody2+0x25e>
 8008610:	e702      	b.n	8008418 <Execute_Buzzer_Melody2+0x64>
		PWM_Time_Counter = 0;
 8008612:	4c26      	ldr	r4, [pc, #152]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008614:	2300      	movs	r3, #0
 8008616:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(355,150);
 8008618:	2064      	movs	r0, #100	; 0x64
 800861a:	2196      	movs	r1, #150	; 0x96
 800861c:	30ff      	adds	r0, #255	; 0xff
 800861e:	f7ff fb6b 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008622:	7823      	ldrb	r3, [r4, #0]
 8008624:	3301      	adds	r3, #1
 8008626:	7023      	strb	r3, [r4, #0]
 8008628:	e727      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 13 && PWM_Time_Counter >= 2)//62) //112)
 800862a:	4a20      	ldr	r2, [pc, #128]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800862c:	6852      	ldr	r2, [r2, #4]
 800862e:	2a01      	cmp	r2, #1
 8008630:	d800      	bhi.n	8008634 <Execute_Buzzer_Melody2+0x280>
 8008632:	e6f4      	b.n	800841e <Execute_Buzzer_Melody2+0x6a>
		PWM_Time_Counter = 0;
 8008634:	4c1d      	ldr	r4, [pc, #116]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008636:	2300      	movs	r3, #0
 8008638:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,150);
 800863a:	20b4      	movs	r0, #180	; 0xb4
 800863c:	2196      	movs	r1, #150	; 0x96
 800863e:	0040      	lsls	r0, r0, #1
 8008640:	f7ff fb5a 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008644:	7823      	ldrb	r3, [r4, #0]
 8008646:	3301      	adds	r3, #1
 8008648:	7023      	strb	r3, [r4, #0]
 800864a:	e716      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	else if(PWM_Tone_Part == 14 && PWM_Time_Counter >= 4)//106) //88)//
 800864c:	4a17      	ldr	r2, [pc, #92]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800864e:	6852      	ldr	r2, [r2, #4]
 8008650:	2a03      	cmp	r2, #3
 8008652:	d800      	bhi.n	8008656 <Execute_Buzzer_Melody2+0x2a2>
 8008654:	e6e6      	b.n	8008424 <Execute_Buzzer_Melody2+0x70>
		PWM_Time_Counter = 0;
 8008656:	4c15      	ldr	r4, [pc, #84]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008658:	2300      	movs	r3, #0
 800865a:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(404,120);
 800865c:	20ca      	movs	r0, #202	; 0xca
 800865e:	2178      	movs	r1, #120	; 0x78
 8008660:	0040      	lsls	r0, r0, #1
 8008662:	f7ff fb49 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008666:	7823      	ldrb	r3, [r4, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	7023      	strb	r3, [r4, #0]
 800866c:	e705      	b.n	800847a <Execute_Buzzer_Melody2+0xc6>
	if(PWM_Tone_Part == 16 && PWM_Time_Counter >= 2)
 800866e:	4a0f      	ldr	r2, [pc, #60]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008670:	6852      	ldr	r2, [r2, #4]
 8008672:	2a01      	cmp	r2, #1
 8008674:	d800      	bhi.n	8008678 <Execute_Buzzer_Melody2+0x2c4>
 8008676:	e705      	b.n	8008484 <Execute_Buzzer_Melody2+0xd0>
		PWM_Time_Counter = 0;
 8008678:	4c0c      	ldr	r4, [pc, #48]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800867a:	2300      	movs	r3, #0
 800867c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(439,300);
 800867e:	2196      	movs	r1, #150	; 0x96
 8008680:	20b8      	movs	r0, #184	; 0xb8
 8008682:	0049      	lsls	r1, r1, #1
 8008684:	30ff      	adds	r0, #255	; 0xff
 8008686:	f7ff fb37 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 800868a:	7823      	ldrb	r3, [r4, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	7023      	strb	r3, [r4, #0]
	if(F_Repeat_Tune == 1)
 8008690:	e6fb      	b.n	800848a <Execute_Buzzer_Melody2+0xd6>
	else if(PWM_Tone_Part == 17 && PWM_Time_Counter >= 2)//62) //116)//
 8008692:	4b06      	ldr	r3, [pc, #24]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d800      	bhi.n	800869c <Execute_Buzzer_Melody2+0x2e8>
 800869a:	e6f6      	b.n	800848a <Execute_Buzzer_Melody2+0xd6>
		PWM_Time_Counter = 0;
 800869c:	4b03      	ldr	r3, [pc, #12]	; (80086ac <Execute_Buzzer_Melody2+0x2f8>)
 800869e:	2200      	movs	r2, #0
 80086a0:	605a      	str	r2, [r3, #4]
		PWM_Tone_Part=0;
 80086a2:	701a      	strb	r2, [r3, #0]
		Stop_Buzzer();
 80086a4:	f7ff fb12 	bl	8007ccc <Stop_Buzzer>
 80086a8:	e6f3      	b.n	8008492 <Execute_Buzzer_Melody2+0xde>
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	200001ec 	.word	0x200001ec

080086b0 <Execute_Buzzer_Tune3>:
  * @brief  Start Buzzer_Tune3.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Tune3(void)
{
 80086b0:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 80086b2:	4b88      	ldr	r3, [pc, #544]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d103      	bne.n	80086c2 <Execute_Buzzer_Tune3+0x12>
 80086ba:	4a86      	ldr	r2, [pc, #536]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80086bc:	6852      	ldr	r2, [r2, #4]
 80086be:	2a00      	cmp	r2, #0
 80086c0:	d035      	beq.n	800872e <Execute_Buzzer_Tune3+0x7e>
	{
		Configure_PWM_uS(583,300);
		if(PWM_Time_Counter == 0)
		Start_PWM_Buzzer();
	}
	else if((PWM_Tone_Part == 0)&& (PWM_Time_Counter > 6))
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <Execute_Buzzer_Tune3+0x1e>
 80086c6:	4a83      	ldr	r2, [pc, #524]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80086c8:	6852      	ldr	r2, [r2, #4]
 80086ca:	2a06      	cmp	r2, #6
 80086cc:	d83b      	bhi.n	8008746 <Execute_Buzzer_Tune3+0x96>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(566,300);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 6)//106) //88)//
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d048      	beq.n	8008764 <Execute_Buzzer_Tune3+0xb4>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(326,120);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 6)//62) //112)
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d056      	beq.n	8008784 <Execute_Buzzer_Tune3+0xd4>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(331,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 6)//106) //100)//
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d064      	beq.n	80087a4 <Execute_Buzzer_Tune3+0xf4>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(355,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 6)//106) //100)//
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d100      	bne.n	80086e0 <Execute_Buzzer_Tune3+0x30>
 80086de:	e071      	b.n	80087c4 <Execute_Buzzer_Tune3+0x114>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 6)//106) //100)//
 80086e0:	2b05      	cmp	r3, #5
 80086e2:	d100      	bne.n	80086e6 <Execute_Buzzer_Tune3+0x36>
 80086e4:	e07f      	b.n	80087e6 <Execute_Buzzer_Tune3+0x136>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(376,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 12)//62) //72)//
 80086e6:	2b06      	cmp	r3, #6
 80086e8:	d100      	bne.n	80086ec <Execute_Buzzer_Tune3+0x3c>
 80086ea:	e08d      	b.n	8008808 <Execute_Buzzer_Tune3+0x158>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 7 && PWM_Time_Counter >= 6)//106) //100)//
 80086ec:	2b07      	cmp	r3, #7
 80086ee:	d100      	bne.n	80086f2 <Execute_Buzzer_Tune3+0x42>
 80086f0:	e09b      	b.n	800882a <Execute_Buzzer_Tune3+0x17a>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(355,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 8 && PWM_Time_Counter >= 6)//62) //112)
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d100      	bne.n	80086f8 <Execute_Buzzer_Tune3+0x48>
 80086f6:	e0a9      	b.n	800884c <Execute_Buzzer_Tune3+0x19c>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(331,150);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 9 && PWM_Time_Counter >= 6)//106) //88)//
 80086f8:	2b09      	cmp	r3, #9
 80086fa:	d100      	bne.n	80086fe <Execute_Buzzer_Tune3+0x4e>
 80086fc:	e0b7      	b.n	800886e <Execute_Buzzer_Tune3+0x1be>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(326,120); //(608,300);
		PWM_Tone_Part++;
	}
	else if((PWM_Tone_Part == 10)&& (PWM_Time_Counter > 6))
 80086fe:	2b0a      	cmp	r3, #10
 8008700:	d100      	bne.n	8008704 <Execute_Buzzer_Tune3+0x54>
 8008702:	e0c5      	b.n	8008890 <Execute_Buzzer_Tune3+0x1e0>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(566,300);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 11 && PWM_Time_Counter > 6)
 8008704:	2b0b      	cmp	r3, #11
 8008706:	d100      	bne.n	800870a <Execute_Buzzer_Tune3+0x5a>
 8008708:	e0d3      	b.n	80088b2 <Execute_Buzzer_Tune3+0x202>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(583,300);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 12 && PWM_Time_Counter >= 7)//62) //116)//
 800870a:	2b0c      	cmp	r3, #12
 800870c:	d125      	bne.n	800875a <Execute_Buzzer_Tune3+0xaa>
 800870e:	4b71      	ldr	r3, [pc, #452]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2b06      	cmp	r3, #6
 8008714:	d921      	bls.n	800875a <Execute_Buzzer_Tune3+0xaa>
	{

		PWM_Time_Counter = 0;
 8008716:	4c6f      	ldr	r4, [pc, #444]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008718:	2500      	movs	r5, #0
 800871a:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part=0;
 800871c:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 800871e:	2108      	movs	r1, #8
 8008720:	486d      	ldr	r0, [pc, #436]	; (80088d8 <Execute_Buzzer_Tune3+0x228>)
 8008722:	f7fc f961 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Tune3 = 0;
 8008726:	7625      	strb	r5, [r4, #24]
		Stop_Buzzer();
 8008728:	f7ff fad0 	bl	8007ccc <Stop_Buzzer>
 800872c:	e015      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
		Configure_PWM_uS(583,300);
 800872e:	2196      	movs	r1, #150	; 0x96
 8008730:	0049      	lsls	r1, r1, #1
 8008732:	486a      	ldr	r0, [pc, #424]	; (80088dc <Execute_Buzzer_Tune3+0x22c>)
 8008734:	f7ff fae0 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8008738:	4b66      	ldr	r3, [pc, #408]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10c      	bne.n	800875a <Execute_Buzzer_Tune3+0xaa>
		Start_PWM_Buzzer();
 8008740:	f7ff fab4 	bl	8007cac <Start_PWM_Buzzer>
 8008744:	e009      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
		PWM_Time_Counter = 0;
 8008746:	4c63      	ldr	r4, [pc, #396]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008748:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(566,300);
 800874a:	2196      	movs	r1, #150	; 0x96
 800874c:	0049      	lsls	r1, r1, #1
 800874e:	4864      	ldr	r0, [pc, #400]	; (80088e0 <Execute_Buzzer_Tune3+0x230>)
 8008750:	f7ff fad2 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008754:	7823      	ldrb	r3, [r4, #0]
 8008756:	3301      	adds	r3, #1
 8008758:	7023      	strb	r3, [r4, #0]
	}
	PWM_Time_Counter++;
 800875a:	4a5e      	ldr	r2, [pc, #376]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 800875c:	6853      	ldr	r3, [r2, #4]
 800875e:	3301      	adds	r3, #1
 8008760:	6053      	str	r3, [r2, #4]
}
 8008762:	bd70      	pop	{r4, r5, r6, pc}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 6)//106) //88)//
 8008764:	4a5b      	ldr	r2, [pc, #364]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008766:	6852      	ldr	r2, [r2, #4]
 8008768:	2a05      	cmp	r2, #5
 800876a:	d9b2      	bls.n	80086d2 <Execute_Buzzer_Tune3+0x22>
		PWM_Time_Counter = 0;
 800876c:	4c59      	ldr	r4, [pc, #356]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 800876e:	2300      	movs	r3, #0
 8008770:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(326,120);
 8008772:	20a3      	movs	r0, #163	; 0xa3
 8008774:	2178      	movs	r1, #120	; 0x78
 8008776:	0040      	lsls	r0, r0, #1
 8008778:	f7ff fabe 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 800877c:	7823      	ldrb	r3, [r4, #0]
 800877e:	3301      	adds	r3, #1
 8008780:	7023      	strb	r3, [r4, #0]
 8008782:	e7ea      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 6)//62) //112)
 8008784:	4a53      	ldr	r2, [pc, #332]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008786:	6852      	ldr	r2, [r2, #4]
 8008788:	2a05      	cmp	r2, #5
 800878a:	d9a4      	bls.n	80086d6 <Execute_Buzzer_Tune3+0x26>
		PWM_Time_Counter = 0;
 800878c:	4c51      	ldr	r4, [pc, #324]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 800878e:	2300      	movs	r3, #0
 8008790:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(331,150);
 8008792:	204c      	movs	r0, #76	; 0x4c
 8008794:	2196      	movs	r1, #150	; 0x96
 8008796:	30ff      	adds	r0, #255	; 0xff
 8008798:	f7ff faae 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 800879c:	7823      	ldrb	r3, [r4, #0]
 800879e:	3301      	adds	r3, #1
 80087a0:	7023      	strb	r3, [r4, #0]
 80087a2:	e7da      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 6)//106) //100)//
 80087a4:	4a4b      	ldr	r2, [pc, #300]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80087a6:	6852      	ldr	r2, [r2, #4]
 80087a8:	2a05      	cmp	r2, #5
 80087aa:	d996      	bls.n	80086da <Execute_Buzzer_Tune3+0x2a>
		PWM_Time_Counter = 0;
 80087ac:	4c49      	ldr	r4, [pc, #292]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80087ae:	2300      	movs	r3, #0
 80087b0:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(355,150);
 80087b2:	2064      	movs	r0, #100	; 0x64
 80087b4:	2196      	movs	r1, #150	; 0x96
 80087b6:	30ff      	adds	r0, #255	; 0xff
 80087b8:	f7ff fa9e 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80087bc:	7823      	ldrb	r3, [r4, #0]
 80087be:	3301      	adds	r3, #1
 80087c0:	7023      	strb	r3, [r4, #0]
 80087c2:	e7ca      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 6)//106) //100)//
 80087c4:	4a43      	ldr	r2, [pc, #268]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80087c6:	6852      	ldr	r2, [r2, #4]
 80087c8:	2a05      	cmp	r2, #5
 80087ca:	d800      	bhi.n	80087ce <Execute_Buzzer_Tune3+0x11e>
 80087cc:	e788      	b.n	80086e0 <Execute_Buzzer_Tune3+0x30>
		PWM_Time_Counter = 0;
 80087ce:	4c41      	ldr	r4, [pc, #260]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80087d0:	2300      	movs	r3, #0
 80087d2:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,150);
 80087d4:	20b4      	movs	r0, #180	; 0xb4
 80087d6:	2196      	movs	r1, #150	; 0x96
 80087d8:	0040      	lsls	r0, r0, #1
 80087da:	f7ff fa8d 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80087de:	7823      	ldrb	r3, [r4, #0]
 80087e0:	3301      	adds	r3, #1
 80087e2:	7023      	strb	r3, [r4, #0]
 80087e4:	e7b9      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 6)//106) //100)//
 80087e6:	4a3b      	ldr	r2, [pc, #236]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80087e8:	6852      	ldr	r2, [r2, #4]
 80087ea:	2a05      	cmp	r2, #5
 80087ec:	d800      	bhi.n	80087f0 <Execute_Buzzer_Tune3+0x140>
 80087ee:	e77a      	b.n	80086e6 <Execute_Buzzer_Tune3+0x36>
		PWM_Time_Counter = 0;
 80087f0:	4c38      	ldr	r4, [pc, #224]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80087f2:	2300      	movs	r3, #0
 80087f4:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(376,150);
 80087f6:	20bc      	movs	r0, #188	; 0xbc
 80087f8:	2196      	movs	r1, #150	; 0x96
 80087fa:	0040      	lsls	r0, r0, #1
 80087fc:	f7ff fa7c 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008800:	7823      	ldrb	r3, [r4, #0]
 8008802:	3301      	adds	r3, #1
 8008804:	7023      	strb	r3, [r4, #0]
 8008806:	e7a8      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 12)//62) //72)//
 8008808:	4a32      	ldr	r2, [pc, #200]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 800880a:	6852      	ldr	r2, [r2, #4]
 800880c:	2a0b      	cmp	r2, #11
 800880e:	d800      	bhi.n	8008812 <Execute_Buzzer_Tune3+0x162>
 8008810:	e76c      	b.n	80086ec <Execute_Buzzer_Tune3+0x3c>
		PWM_Time_Counter = 0;
 8008812:	4c30      	ldr	r4, [pc, #192]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008814:	2300      	movs	r3, #0
 8008816:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,150);
 8008818:	20b4      	movs	r0, #180	; 0xb4
 800881a:	2196      	movs	r1, #150	; 0x96
 800881c:	0040      	lsls	r0, r0, #1
 800881e:	f7ff fa6b 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008822:	7823      	ldrb	r3, [r4, #0]
 8008824:	3301      	adds	r3, #1
 8008826:	7023      	strb	r3, [r4, #0]
 8008828:	e797      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if(PWM_Tone_Part == 7 && PWM_Time_Counter >= 6)//106) //100)//
 800882a:	4a2a      	ldr	r2, [pc, #168]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 800882c:	6852      	ldr	r2, [r2, #4]
 800882e:	2a05      	cmp	r2, #5
 8008830:	d800      	bhi.n	8008834 <Execute_Buzzer_Tune3+0x184>
 8008832:	e75e      	b.n	80086f2 <Execute_Buzzer_Tune3+0x42>
		PWM_Time_Counter = 0;
 8008834:	4c27      	ldr	r4, [pc, #156]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008836:	2300      	movs	r3, #0
 8008838:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(355,150);
 800883a:	2064      	movs	r0, #100	; 0x64
 800883c:	2196      	movs	r1, #150	; 0x96
 800883e:	30ff      	adds	r0, #255	; 0xff
 8008840:	f7ff fa5a 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008844:	7823      	ldrb	r3, [r4, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	7023      	strb	r3, [r4, #0]
 800884a:	e786      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if(PWM_Tone_Part == 8 && PWM_Time_Counter >= 6)//62) //112)
 800884c:	4a21      	ldr	r2, [pc, #132]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 800884e:	6852      	ldr	r2, [r2, #4]
 8008850:	2a05      	cmp	r2, #5
 8008852:	d800      	bhi.n	8008856 <Execute_Buzzer_Tune3+0x1a6>
 8008854:	e750      	b.n	80086f8 <Execute_Buzzer_Tune3+0x48>
		PWM_Time_Counter = 0;
 8008856:	4c1f      	ldr	r4, [pc, #124]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008858:	2300      	movs	r3, #0
 800885a:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(331,150);
 800885c:	204c      	movs	r0, #76	; 0x4c
 800885e:	2196      	movs	r1, #150	; 0x96
 8008860:	30ff      	adds	r0, #255	; 0xff
 8008862:	f7ff fa49 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008866:	7823      	ldrb	r3, [r4, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	7023      	strb	r3, [r4, #0]
 800886c:	e775      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if(PWM_Tone_Part == 9 && PWM_Time_Counter >= 6)//106) //88)//
 800886e:	4a19      	ldr	r2, [pc, #100]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008870:	6852      	ldr	r2, [r2, #4]
 8008872:	2a05      	cmp	r2, #5
 8008874:	d800      	bhi.n	8008878 <Execute_Buzzer_Tune3+0x1c8>
 8008876:	e742      	b.n	80086fe <Execute_Buzzer_Tune3+0x4e>
		PWM_Time_Counter = 0;
 8008878:	4c16      	ldr	r4, [pc, #88]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 800887a:	2300      	movs	r3, #0
 800887c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(326,120); //(608,300);
 800887e:	20a3      	movs	r0, #163	; 0xa3
 8008880:	2178      	movs	r1, #120	; 0x78
 8008882:	0040      	lsls	r0, r0, #1
 8008884:	f7ff fa38 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008888:	7823      	ldrb	r3, [r4, #0]
 800888a:	3301      	adds	r3, #1
 800888c:	7023      	strb	r3, [r4, #0]
 800888e:	e764      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if((PWM_Tone_Part == 10)&& (PWM_Time_Counter > 6))
 8008890:	4a10      	ldr	r2, [pc, #64]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 8008892:	6852      	ldr	r2, [r2, #4]
 8008894:	2a06      	cmp	r2, #6
 8008896:	d800      	bhi.n	800889a <Execute_Buzzer_Tune3+0x1ea>
 8008898:	e734      	b.n	8008704 <Execute_Buzzer_Tune3+0x54>
		PWM_Time_Counter = 0;
 800889a:	4c0e      	ldr	r4, [pc, #56]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 800889c:	2300      	movs	r3, #0
 800889e:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(566,300);
 80088a0:	2196      	movs	r1, #150	; 0x96
 80088a2:	0049      	lsls	r1, r1, #1
 80088a4:	480e      	ldr	r0, [pc, #56]	; (80088e0 <Execute_Buzzer_Tune3+0x230>)
 80088a6:	f7ff fa27 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80088aa:	7823      	ldrb	r3, [r4, #0]
 80088ac:	3301      	adds	r3, #1
 80088ae:	7023      	strb	r3, [r4, #0]
 80088b0:	e753      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
	else if(PWM_Tone_Part == 11 && PWM_Time_Counter > 6)
 80088b2:	4a08      	ldr	r2, [pc, #32]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80088b4:	6852      	ldr	r2, [r2, #4]
 80088b6:	2a06      	cmp	r2, #6
 80088b8:	d800      	bhi.n	80088bc <Execute_Buzzer_Tune3+0x20c>
 80088ba:	e726      	b.n	800870a <Execute_Buzzer_Tune3+0x5a>
		PWM_Time_Counter = 0;
 80088bc:	4c05      	ldr	r4, [pc, #20]	; (80088d4 <Execute_Buzzer_Tune3+0x224>)
 80088be:	2300      	movs	r3, #0
 80088c0:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(583,300);
 80088c2:	2196      	movs	r1, #150	; 0x96
 80088c4:	0049      	lsls	r1, r1, #1
 80088c6:	4805      	ldr	r0, [pc, #20]	; (80088dc <Execute_Buzzer_Tune3+0x22c>)
 80088c8:	f7ff fa16 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80088cc:	7823      	ldrb	r3, [r4, #0]
 80088ce:	3301      	adds	r3, #1
 80088d0:	7023      	strb	r3, [r4, #0]
 80088d2:	e742      	b.n	800875a <Execute_Buzzer_Tune3+0xaa>
 80088d4:	200001ec 	.word	0x200001ec
 80088d8:	20004940 	.word	0x20004940
 80088dc:	00000247 	.word	0x00000247
 80088e0:	00000236 	.word	0x00000236

080088e4 <Execute_Buzzer_Tune5>:
  * @brief  Start Buzzer_Tune5.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Tune5(void)
{
 80088e4:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 80088e6:	4b92      	ldr	r3, [pc, #584]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d103      	bne.n	80088f6 <Execute_Buzzer_Tune5+0x12>
 80088ee:	4a90      	ldr	r2, [pc, #576]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 80088f0:	6852      	ldr	r2, [r2, #4]
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	d038      	beq.n	8008968 <Execute_Buzzer_Tune5+0x84>
	{
		Configure_PWM_uS(260,160);
		if(PWM_Time_Counter == 0)
		Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 7)	//72
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <Execute_Buzzer_Tune5+0x1e>
 80088fa:	4a8d      	ldr	r2, [pc, #564]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 80088fc:	6852      	ldr	r2, [r2, #4]
 80088fe:	2a06      	cmp	r2, #6
 8008900:	d83e      	bhi.n	8008980 <Execute_Buzzer_Tune5+0x9c>
	{
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		Configure_PWM_uS(330,200);
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 12)	//116
 8008902:	2b01      	cmp	r3, #1
 8008904:	d04b      	beq.n	800899e <Execute_Buzzer_Tune5+0xba>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(260,160);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 7)
 8008906:	2b02      	cmp	r3, #2
 8008908:	d059      	beq.n	80089be <Execute_Buzzer_Tune5+0xda>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(330,200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 12)
 800890a:	2b03      	cmp	r3, #3
 800890c:	d067      	beq.n	80089de <Execute_Buzzer_Tune5+0xfa>
	{
		PWM_Time_Counter = 0;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 7)
 800890e:	2b04      	cmp	r3, #4
 8008910:	d100      	bne.n	8008914 <Execute_Buzzer_Tune5+0x30>
 8008912:	e074      	b.n	80089fe <Execute_Buzzer_Tune5+0x11a>
		PWM_Time_Counter = 0;
		Configure_PWM_uS(260,160);
		PWM_Tone_Part++;
		Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 12)
 8008914:	2b05      	cmp	r3, #5
 8008916:	d100      	bne.n	800891a <Execute_Buzzer_Tune5+0x36>
 8008918:	e084      	b.n	8008a24 <Execute_Buzzer_Tune5+0x140>
	{
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		Configure_PWM_uS(330,200);
	}
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 12)
 800891a:	2b06      	cmp	r3, #6
 800891c:	d100      	bne.n	8008920 <Execute_Buzzer_Tune5+0x3c>
 800891e:	e091      	b.n	8008a44 <Execute_Buzzer_Tune5+0x160>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(260,160);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 7 && PWM_Time_Counter >= 7)
 8008920:	2b07      	cmp	r3, #7
 8008922:	d100      	bne.n	8008926 <Execute_Buzzer_Tune5+0x42>
 8008924:	e09f      	b.n	8008a66 <Execute_Buzzer_Tune5+0x182>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(330,200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 8 && PWM_Time_Counter >= 12)
 8008926:	2b08      	cmp	r3, #8
 8008928:	d100      	bne.n	800892c <Execute_Buzzer_Tune5+0x48>
 800892a:	e0ad      	b.n	8008a88 <Execute_Buzzer_Tune5+0x1a4>
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);

	}
	else if(PWM_Tone_Part == 9 && PWM_Time_Counter >= 7)
 800892c:	2b09      	cmp	r3, #9
 800892e:	d100      	bne.n	8008932 <Execute_Buzzer_Tune5+0x4e>
 8008930:	e0b9      	b.n	8008aa6 <Execute_Buzzer_Tune5+0x1c2>
		PWM_Time_Counter = 0;
		Configure_PWM_uS(260,160);
		PWM_Tone_Part++;
		Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 10 && PWM_Time_Counter >= 7)
 8008932:	2b0a      	cmp	r3, #10
 8008934:	d100      	bne.n	8008938 <Execute_Buzzer_Tune5+0x54>
 8008936:	e0c9      	b.n	8008acc <Execute_Buzzer_Tune5+0x1e8>
	{
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		Configure_PWM_uS(330,200);
	}
	else if(PWM_Tone_Part == 11 && PWM_Time_Counter >= 12)
 8008938:	2b0b      	cmp	r3, #11
 800893a:	d100      	bne.n	800893e <Execute_Buzzer_Tune5+0x5a>
 800893c:	e0d6      	b.n	8008aec <Execute_Buzzer_Tune5+0x208>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(260,160);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 12 && PWM_Time_Counter >= 7)
 800893e:	2b0c      	cmp	r3, #12
 8008940:	d100      	bne.n	8008944 <Execute_Buzzer_Tune5+0x60>
 8008942:	e0e4      	b.n	8008b0e <Execute_Buzzer_Tune5+0x22a>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(330,200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 13 && PWM_Time_Counter >= 12)
 8008944:	2b0d      	cmp	r3, #13
 8008946:	d125      	bne.n	8008994 <Execute_Buzzer_Tune5+0xb0>
 8008948:	4b79      	ldr	r3, [pc, #484]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	2b0b      	cmp	r3, #11
 800894e:	d921      	bls.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	{
		PWM_Time_Counter = 0;
 8008950:	4c77      	ldr	r4, [pc, #476]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008952:	2500      	movs	r5, #0
 8008954:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part = 0;
 8008956:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008958:	2108      	movs	r1, #8
 800895a:	4876      	ldr	r0, [pc, #472]	; (8008b34 <Execute_Buzzer_Tune5+0x250>)
 800895c:	f7fc f844 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Tune5 = 0;
 8008960:	7665      	strb	r5, [r4, #25]
		Stop_Buzzer();
 8008962:	f7ff f9b3 	bl	8007ccc <Stop_Buzzer>
 8008966:	e015      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
		Configure_PWM_uS(260,160);
 8008968:	2082      	movs	r0, #130	; 0x82
 800896a:	21a0      	movs	r1, #160	; 0xa0
 800896c:	0040      	lsls	r0, r0, #1
 800896e:	f7ff f9c3 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8008972:	4b6f      	ldr	r3, [pc, #444]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10c      	bne.n	8008994 <Execute_Buzzer_Tune5+0xb0>
		Start_PWM_Buzzer();
 800897a:	f7ff f997 	bl	8007cac <Start_PWM_Buzzer>
 800897e:	e009      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
		PWM_Time_Counter = 0;
 8008980:	4a6b      	ldr	r2, [pc, #428]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008982:	2100      	movs	r1, #0
 8008984:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 8008986:	3301      	adds	r3, #1
 8008988:	7013      	strb	r3, [r2, #0]
		Configure_PWM_uS(330,200);
 800898a:	20a5      	movs	r0, #165	; 0xa5
 800898c:	31c8      	adds	r1, #200	; 0xc8
 800898e:	0040      	lsls	r0, r0, #1
 8008990:	f7ff f9b2 	bl	8007cf8 <Configure_PWM_uS>
	}
	PWM_Time_Counter++;
 8008994:	4a66      	ldr	r2, [pc, #408]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008996:	6853      	ldr	r3, [r2, #4]
 8008998:	3301      	adds	r3, #1
 800899a:	6053      	str	r3, [r2, #4]
}
 800899c:	bd70      	pop	{r4, r5, r6, pc}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 12)	//116
 800899e:	4a64      	ldr	r2, [pc, #400]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 80089a0:	6852      	ldr	r2, [r2, #4]
 80089a2:	2a0b      	cmp	r2, #11
 80089a4:	d9af      	bls.n	8008906 <Execute_Buzzer_Tune5+0x22>
		PWM_Time_Counter = 0;
 80089a6:	4c62      	ldr	r4, [pc, #392]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 80089a8:	2300      	movs	r3, #0
 80089aa:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(260,160);
 80089ac:	2082      	movs	r0, #130	; 0x82
 80089ae:	21a0      	movs	r1, #160	; 0xa0
 80089b0:	0040      	lsls	r0, r0, #1
 80089b2:	f7ff f9a1 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80089b6:	7823      	ldrb	r3, [r4, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	7023      	strb	r3, [r4, #0]
 80089bc:	e7ea      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 7)
 80089be:	4a5c      	ldr	r2, [pc, #368]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 80089c0:	6852      	ldr	r2, [r2, #4]
 80089c2:	2a06      	cmp	r2, #6
 80089c4:	d9a1      	bls.n	800890a <Execute_Buzzer_Tune5+0x26>
		PWM_Time_Counter = 0;
 80089c6:	4c5a      	ldr	r4, [pc, #360]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(330,200);
 80089cc:	20a5      	movs	r0, #165	; 0xa5
 80089ce:	21c8      	movs	r1, #200	; 0xc8
 80089d0:	0040      	lsls	r0, r0, #1
 80089d2:	f7ff f991 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 80089d6:	7823      	ldrb	r3, [r4, #0]
 80089d8:	3301      	adds	r3, #1
 80089da:	7023      	strb	r3, [r4, #0]
 80089dc:	e7da      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 12)
 80089de:	4a54      	ldr	r2, [pc, #336]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 80089e0:	6852      	ldr	r2, [r2, #4]
 80089e2:	2a0b      	cmp	r2, #11
 80089e4:	d800      	bhi.n	80089e8 <Execute_Buzzer_Tune5+0x104>
 80089e6:	e792      	b.n	800890e <Execute_Buzzer_Tune5+0x2a>
		PWM_Time_Counter = 0;
 80089e8:	4c51      	ldr	r4, [pc, #324]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 80089ea:	2300      	movs	r3, #0
 80089ec:	6063      	str	r3, [r4, #4]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 80089ee:	2108      	movs	r1, #8
 80089f0:	4850      	ldr	r0, [pc, #320]	; (8008b34 <Execute_Buzzer_Tune5+0x250>)
 80089f2:	f7fb fff9 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Tone_Part++;
 80089f6:	7823      	ldrb	r3, [r4, #0]
 80089f8:	3301      	adds	r3, #1
 80089fa:	7023      	strb	r3, [r4, #0]
 80089fc:	e7ca      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 7)
 80089fe:	4a4c      	ldr	r2, [pc, #304]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a00:	6852      	ldr	r2, [r2, #4]
 8008a02:	2a06      	cmp	r2, #6
 8008a04:	d800      	bhi.n	8008a08 <Execute_Buzzer_Tune5+0x124>
 8008a06:	e785      	b.n	8008914 <Execute_Buzzer_Tune5+0x30>
		PWM_Time_Counter = 0;
 8008a08:	4c49      	ldr	r4, [pc, #292]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(260,160);
 8008a0e:	2082      	movs	r0, #130	; 0x82
 8008a10:	21a0      	movs	r1, #160	; 0xa0
 8008a12:	0040      	lsls	r0, r0, #1
 8008a14:	f7ff f970 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008a18:	7823      	ldrb	r3, [r4, #0]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	7023      	strb	r3, [r4, #0]
		Start_PWM_Buzzer();
 8008a1e:	f7ff f945 	bl	8007cac <Start_PWM_Buzzer>
 8008a22:	e7b7      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 12)
 8008a24:	4a42      	ldr	r2, [pc, #264]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a26:	6852      	ldr	r2, [r2, #4]
 8008a28:	2a0b      	cmp	r2, #11
 8008a2a:	d800      	bhi.n	8008a2e <Execute_Buzzer_Tune5+0x14a>
 8008a2c:	e775      	b.n	800891a <Execute_Buzzer_Tune5+0x36>
		PWM_Time_Counter = 0;
 8008a2e:	4a40      	ldr	r2, [pc, #256]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a30:	2100      	movs	r1, #0
 8008a32:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 8008a34:	3301      	adds	r3, #1
 8008a36:	7013      	strb	r3, [r2, #0]
		Configure_PWM_uS(330,200);
 8008a38:	20a5      	movs	r0, #165	; 0xa5
 8008a3a:	31c8      	adds	r1, #200	; 0xc8
 8008a3c:	0040      	lsls	r0, r0, #1
 8008a3e:	f7ff f95b 	bl	8007cf8 <Configure_PWM_uS>
 8008a42:	e7a7      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 12)
 8008a44:	4a3a      	ldr	r2, [pc, #232]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a46:	6852      	ldr	r2, [r2, #4]
 8008a48:	2a0b      	cmp	r2, #11
 8008a4a:	d800      	bhi.n	8008a4e <Execute_Buzzer_Tune5+0x16a>
 8008a4c:	e768      	b.n	8008920 <Execute_Buzzer_Tune5+0x3c>
		PWM_Time_Counter = 0;
 8008a4e:	4c38      	ldr	r4, [pc, #224]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(260,160);
 8008a54:	2082      	movs	r0, #130	; 0x82
 8008a56:	21a0      	movs	r1, #160	; 0xa0
 8008a58:	0040      	lsls	r0, r0, #1
 8008a5a:	f7ff f94d 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008a5e:	7823      	ldrb	r3, [r4, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	7023      	strb	r3, [r4, #0]
 8008a64:	e796      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 7 && PWM_Time_Counter >= 7)
 8008a66:	4a32      	ldr	r2, [pc, #200]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a68:	6852      	ldr	r2, [r2, #4]
 8008a6a:	2a06      	cmp	r2, #6
 8008a6c:	d800      	bhi.n	8008a70 <Execute_Buzzer_Tune5+0x18c>
 8008a6e:	e75a      	b.n	8008926 <Execute_Buzzer_Tune5+0x42>
		PWM_Time_Counter = 0;
 8008a70:	4c2f      	ldr	r4, [pc, #188]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a72:	2300      	movs	r3, #0
 8008a74:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(330,200);
 8008a76:	20a5      	movs	r0, #165	; 0xa5
 8008a78:	21c8      	movs	r1, #200	; 0xc8
 8008a7a:	0040      	lsls	r0, r0, #1
 8008a7c:	f7ff f93c 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008a80:	7823      	ldrb	r3, [r4, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	7023      	strb	r3, [r4, #0]
 8008a86:	e785      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 8 && PWM_Time_Counter >= 12)
 8008a88:	4a29      	ldr	r2, [pc, #164]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a8a:	6852      	ldr	r2, [r2, #4]
 8008a8c:	2a0b      	cmp	r2, #11
 8008a8e:	d800      	bhi.n	8008a92 <Execute_Buzzer_Tune5+0x1ae>
 8008a90:	e74c      	b.n	800892c <Execute_Buzzer_Tune5+0x48>
		PWM_Time_Counter = 0;
 8008a92:	4a27      	ldr	r2, [pc, #156]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008a94:	2100      	movs	r1, #0
 8008a96:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 8008a98:	3301      	adds	r3, #1
 8008a9a:	7013      	strb	r3, [r2, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008a9c:	3108      	adds	r1, #8
 8008a9e:	4825      	ldr	r0, [pc, #148]	; (8008b34 <Execute_Buzzer_Tune5+0x250>)
 8008aa0:	f7fb ffa2 	bl	80049e8 <HAL_TIM_PWM_Stop>
 8008aa4:	e776      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 9 && PWM_Time_Counter >= 7)
 8008aa6:	4a22      	ldr	r2, [pc, #136]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008aa8:	6852      	ldr	r2, [r2, #4]
 8008aaa:	2a06      	cmp	r2, #6
 8008aac:	d800      	bhi.n	8008ab0 <Execute_Buzzer_Tune5+0x1cc>
 8008aae:	e740      	b.n	8008932 <Execute_Buzzer_Tune5+0x4e>
		PWM_Time_Counter = 0;
 8008ab0:	4c1f      	ldr	r4, [pc, #124]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(260,160);
 8008ab6:	2082      	movs	r0, #130	; 0x82
 8008ab8:	21a0      	movs	r1, #160	; 0xa0
 8008aba:	0040      	lsls	r0, r0, #1
 8008abc:	f7ff f91c 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008ac0:	7823      	ldrb	r3, [r4, #0]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	7023      	strb	r3, [r4, #0]
		Start_PWM_Buzzer();
 8008ac6:	f7ff f8f1 	bl	8007cac <Start_PWM_Buzzer>
 8008aca:	e763      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 10 && PWM_Time_Counter >= 7)
 8008acc:	4a18      	ldr	r2, [pc, #96]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008ace:	6852      	ldr	r2, [r2, #4]
 8008ad0:	2a06      	cmp	r2, #6
 8008ad2:	d800      	bhi.n	8008ad6 <Execute_Buzzer_Tune5+0x1f2>
 8008ad4:	e730      	b.n	8008938 <Execute_Buzzer_Tune5+0x54>
		PWM_Time_Counter = 0;
 8008ad6:	4a16      	ldr	r2, [pc, #88]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 8008adc:	3301      	adds	r3, #1
 8008ade:	7013      	strb	r3, [r2, #0]
		Configure_PWM_uS(330,200);
 8008ae0:	20a5      	movs	r0, #165	; 0xa5
 8008ae2:	31c8      	adds	r1, #200	; 0xc8
 8008ae4:	0040      	lsls	r0, r0, #1
 8008ae6:	f7ff f907 	bl	8007cf8 <Configure_PWM_uS>
 8008aea:	e753      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 11 && PWM_Time_Counter >= 12)
 8008aec:	4a10      	ldr	r2, [pc, #64]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008aee:	6852      	ldr	r2, [r2, #4]
 8008af0:	2a0b      	cmp	r2, #11
 8008af2:	d800      	bhi.n	8008af6 <Execute_Buzzer_Tune5+0x212>
 8008af4:	e723      	b.n	800893e <Execute_Buzzer_Tune5+0x5a>
		PWM_Time_Counter = 0;
 8008af6:	4c0e      	ldr	r4, [pc, #56]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008af8:	2300      	movs	r3, #0
 8008afa:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(260,160);
 8008afc:	2082      	movs	r0, #130	; 0x82
 8008afe:	21a0      	movs	r1, #160	; 0xa0
 8008b00:	0040      	lsls	r0, r0, #1
 8008b02:	f7ff f8f9 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008b06:	7823      	ldrb	r3, [r4, #0]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	7023      	strb	r3, [r4, #0]
 8008b0c:	e742      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
	else if(PWM_Tone_Part == 12 && PWM_Time_Counter >= 7)
 8008b0e:	4a08      	ldr	r2, [pc, #32]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008b10:	6852      	ldr	r2, [r2, #4]
 8008b12:	2a06      	cmp	r2, #6
 8008b14:	d800      	bhi.n	8008b18 <Execute_Buzzer_Tune5+0x234>
 8008b16:	e715      	b.n	8008944 <Execute_Buzzer_Tune5+0x60>
		PWM_Time_Counter = 0;
 8008b18:	4c05      	ldr	r4, [pc, #20]	; (8008b30 <Execute_Buzzer_Tune5+0x24c>)
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(330,200);
 8008b1e:	20a5      	movs	r0, #165	; 0xa5
 8008b20:	21c8      	movs	r1, #200	; 0xc8
 8008b22:	0040      	lsls	r0, r0, #1
 8008b24:	f7ff f8e8 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008b28:	7823      	ldrb	r3, [r4, #0]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	7023      	strb	r3, [r4, #0]
 8008b2e:	e731      	b.n	8008994 <Execute_Buzzer_Tune5+0xb0>
 8008b30:	200001ec 	.word	0x200001ec
 8008b34:	20004940 	.word	0x20004940

08008b38 <Execute_Buzzer_Tune6>:
  * @brief  Start alarm for Buzzer_Tune6.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Tune6(void)
{
 8008b38:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8008b3a:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <Execute_Buzzer_Tune6+0x7c>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d103      	bne.n	8008b4a <Execute_Buzzer_Tune6+0x12>
 8008b42:	4a1c      	ldr	r2, [pc, #112]	; (8008bb4 <Execute_Buzzer_Tune6+0x7c>)
 8008b44:	6852      	ldr	r2, [r2, #4]
 8008b46:	2a00      	cmp	r2, #0
 8008b48:	d00c      	beq.n	8008b64 <Execute_Buzzer_Tune6+0x2c>
	{
		Configure_PWM_uS(480,300);
		if(PWM_Time_Counter == 0)
		Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 15)//62//152)
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d103      	bne.n	8008b56 <Execute_Buzzer_Tune6+0x1e>
 8008b4e:	4a19      	ldr	r2, [pc, #100]	; (8008bb4 <Execute_Buzzer_Tune6+0x7c>)
 8008b50:	6852      	ldr	r2, [r2, #4]
 8008b52:	2a0e      	cmp	r2, #14
 8008b54:	d813      	bhi.n	8008b7e <Execute_Buzzer_Tune6+0x46>
	{
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		Configure_PWM_uS(320,220);
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 17)//106//168)
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d01c      	beq.n	8008b94 <Execute_Buzzer_Tune6+0x5c>
		PWM_Tone_Part = 0;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		F_Buzzer_Tune6 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8008b5a:	4a16      	ldr	r2, [pc, #88]	; (8008bb4 <Execute_Buzzer_Tune6+0x7c>)
 8008b5c:	6853      	ldr	r3, [r2, #4]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	6053      	str	r3, [r2, #4]
}
 8008b62:	bd70      	pop	{r4, r5, r6, pc}
		Configure_PWM_uS(480,300);
 8008b64:	2196      	movs	r1, #150	; 0x96
 8008b66:	20f0      	movs	r0, #240	; 0xf0
 8008b68:	0049      	lsls	r1, r1, #1
 8008b6a:	0040      	lsls	r0, r0, #1
 8008b6c:	f7ff f8c4 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8008b70:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <Execute_Buzzer_Tune6+0x7c>)
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1f0      	bne.n	8008b5a <Execute_Buzzer_Tune6+0x22>
		Start_PWM_Buzzer();
 8008b78:	f7ff f898 	bl	8007cac <Start_PWM_Buzzer>
 8008b7c:	e7ed      	b.n	8008b5a <Execute_Buzzer_Tune6+0x22>
		PWM_Time_Counter = 0;
 8008b7e:	4a0d      	ldr	r2, [pc, #52]	; (8008bb4 <Execute_Buzzer_Tune6+0x7c>)
 8008b80:	2100      	movs	r1, #0
 8008b82:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 8008b84:	3301      	adds	r3, #1
 8008b86:	7013      	strb	r3, [r2, #0]
		Configure_PWM_uS(320,220);
 8008b88:	20a0      	movs	r0, #160	; 0xa0
 8008b8a:	31dc      	adds	r1, #220	; 0xdc
 8008b8c:	0040      	lsls	r0, r0, #1
 8008b8e:	f7ff f8b3 	bl	8007cf8 <Configure_PWM_uS>
 8008b92:	e7e2      	b.n	8008b5a <Execute_Buzzer_Tune6+0x22>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 17)//106//168)
 8008b94:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <Execute_Buzzer_Tune6+0x7c>)
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	2b10      	cmp	r3, #16
 8008b9a:	d9de      	bls.n	8008b5a <Execute_Buzzer_Tune6+0x22>
		PWM_Time_Counter = 0;
 8008b9c:	4c05      	ldr	r4, [pc, #20]	; (8008bb4 <Execute_Buzzer_Tune6+0x7c>)
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part = 0;
 8008ba2:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008ba4:	2108      	movs	r1, #8
 8008ba6:	4804      	ldr	r0, [pc, #16]	; (8008bb8 <Execute_Buzzer_Tune6+0x80>)
 8008ba8:	f7fb ff1e 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Tune6 = 0;
 8008bac:	76a5      	strb	r5, [r4, #26]
		Stop_Buzzer();
 8008bae:	f7ff f88d 	bl	8007ccc <Stop_Buzzer>
 8008bb2:	e7d2      	b.n	8008b5a <Execute_Buzzer_Tune6+0x22>
 8008bb4:	200001ec 	.word	0x200001ec
 8008bb8:	20004940 	.word	0x20004940

08008bbc <Execute_Buzzer_Tune7>:
  * @brief  Start alarm for Buzzer_Tune7.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Tune7(void)
{
 8008bbc:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8008bbe:	4b30      	ldr	r3, [pc, #192]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <Execute_Buzzer_Tune7+0x12>
 8008bc6:	4a2e      	ldr	r2, [pc, #184]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008bc8:	6852      	ldr	r2, [r2, #4]
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	d010      	beq.n	8008bf0 <Execute_Buzzer_Tune7+0x34>
	{
		Configure_PWM_uS(520,300);
		if(PWM_Time_Counter == 0)
		Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 12)//62//124)
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d103      	bne.n	8008bda <Execute_Buzzer_Tune7+0x1e>
 8008bd2:	4a2b      	ldr	r2, [pc, #172]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008bd4:	6852      	ldr	r2, [r2, #4]
 8008bd6:	2a0b      	cmp	r2, #11
 8008bd8:	d817      	bhi.n	8008c0a <Execute_Buzzer_Tune7+0x4e>
	{
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		Configure_PWM_uS(300,200);
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 16)//106//164)
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d020      	beq.n	8008c20 <Execute_Buzzer_Tune7+0x64>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 14)//62)
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d02e      	beq.n	8008c40 <Execute_Buzzer_Tune7+0x84>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(300,200);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 15)//106//148)
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d03c      	beq.n	8008c60 <Execute_Buzzer_Tune7+0xa4>
		PWM_Tone_Part = 0;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		F_Buzzer_Tune7 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8008be6:	4a26      	ldr	r2, [pc, #152]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008be8:	6853      	ldr	r3, [r2, #4]
 8008bea:	3301      	adds	r3, #1
 8008bec:	6053      	str	r3, [r2, #4]
}
 8008bee:	bd70      	pop	{r4, r5, r6, pc}
		Configure_PWM_uS(520,300);
 8008bf0:	2196      	movs	r1, #150	; 0x96
 8008bf2:	2082      	movs	r0, #130	; 0x82
 8008bf4:	0049      	lsls	r1, r1, #1
 8008bf6:	0080      	lsls	r0, r0, #2
 8008bf8:	f7ff f87e 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8008bfc:	4b20      	ldr	r3, [pc, #128]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1f0      	bne.n	8008be6 <Execute_Buzzer_Tune7+0x2a>
		Start_PWM_Buzzer();
 8008c04:	f7ff f852 	bl	8007cac <Start_PWM_Buzzer>
 8008c08:	e7ed      	b.n	8008be6 <Execute_Buzzer_Tune7+0x2a>
		PWM_Time_Counter = 0;
 8008c0a:	4a1d      	ldr	r2, [pc, #116]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 8008c10:	3301      	adds	r3, #1
 8008c12:	7013      	strb	r3, [r2, #0]
		Configure_PWM_uS(300,200);
 8008c14:	2096      	movs	r0, #150	; 0x96
 8008c16:	31c8      	adds	r1, #200	; 0xc8
 8008c18:	0040      	lsls	r0, r0, #1
 8008c1a:	f7ff f86d 	bl	8007cf8 <Configure_PWM_uS>
 8008c1e:	e7e2      	b.n	8008be6 <Execute_Buzzer_Tune7+0x2a>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 16)//106//164)
 8008c20:	4a17      	ldr	r2, [pc, #92]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008c22:	6852      	ldr	r2, [r2, #4]
 8008c24:	2a0f      	cmp	r2, #15
 8008c26:	d9da      	bls.n	8008bde <Execute_Buzzer_Tune7+0x22>
		PWM_Time_Counter = 0;
 8008c28:	4c15      	ldr	r4, [pc, #84]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,200);
 8008c2e:	20b4      	movs	r0, #180	; 0xb4
 8008c30:	21c8      	movs	r1, #200	; 0xc8
 8008c32:	0040      	lsls	r0, r0, #1
 8008c34:	f7ff f860 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008c38:	7823      	ldrb	r3, [r4, #0]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	7023      	strb	r3, [r4, #0]
 8008c3e:	e7d2      	b.n	8008be6 <Execute_Buzzer_Tune7+0x2a>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 14)//62)
 8008c40:	4a0f      	ldr	r2, [pc, #60]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008c42:	6852      	ldr	r2, [r2, #4]
 8008c44:	2a0d      	cmp	r2, #13
 8008c46:	d9cc      	bls.n	8008be2 <Execute_Buzzer_Tune7+0x26>
		PWM_Time_Counter = 0;
 8008c48:	4c0d      	ldr	r4, [pc, #52]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(300,200);
 8008c4e:	2096      	movs	r0, #150	; 0x96
 8008c50:	21c8      	movs	r1, #200	; 0xc8
 8008c52:	0040      	lsls	r0, r0, #1
 8008c54:	f7ff f850 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008c58:	7823      	ldrb	r3, [r4, #0]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	7023      	strb	r3, [r4, #0]
 8008c5e:	e7c2      	b.n	8008be6 <Execute_Buzzer_Tune7+0x2a>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 15)//106//148)
 8008c60:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b0e      	cmp	r3, #14
 8008c66:	d9be      	bls.n	8008be6 <Execute_Buzzer_Tune7+0x2a>
		PWM_Time_Counter = 0;
 8008c68:	4c05      	ldr	r4, [pc, #20]	; (8008c80 <Execute_Buzzer_Tune7+0xc4>)
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part = 0;
 8008c6e:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008c70:	2108      	movs	r1, #8
 8008c72:	4804      	ldr	r0, [pc, #16]	; (8008c84 <Execute_Buzzer_Tune7+0xc8>)
 8008c74:	f7fb feb8 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Tune7 = 0;
 8008c78:	76e5      	strb	r5, [r4, #27]
		Stop_Buzzer();
 8008c7a:	f7ff f827 	bl	8007ccc <Stop_Buzzer>
 8008c7e:	e7b2      	b.n	8008be6 <Execute_Buzzer_Tune7+0x2a>
 8008c80:	200001ec 	.word	0x200001ec
 8008c84:	20004940 	.word	0x20004940

08008c88 <Execute_Buzzer_Tune8>:
  * @brief  Start Buzzer_Tune8.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Tune8(void)
{
 8008c88:	b570      	push	{r4, r5, r6, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8008c8a:	4b30      	ldr	r3, [pc, #192]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d103      	bne.n	8008c9a <Execute_Buzzer_Tune8+0x12>
 8008c92:	4a2e      	ldr	r2, [pc, #184]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008c94:	6852      	ldr	r2, [r2, #4]
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	d010      	beq.n	8008cbc <Execute_Buzzer_Tune8+0x34>
	{
		Configure_PWM_uS(380,140);
		if(PWM_Time_Counter == 0)
		Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 20)//62//196)
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d103      	bne.n	8008ca6 <Execute_Buzzer_Tune8+0x1e>
 8008c9e:	4a2b      	ldr	r2, [pc, #172]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008ca0:	6852      	ldr	r2, [r2, #4]
 8008ca2:	2a13      	cmp	r2, #19
 8008ca4:	d816      	bhi.n	8008cd4 <Execute_Buzzer_Tune8+0x4c>
	{
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
		Configure_PWM_uS(420,160);
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 19)//106)
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d01f      	beq.n	8008cea <Execute_Buzzer_Tune8+0x62>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(460,250);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 20)//62)
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d02d      	beq.n	8008d0a <Execute_Buzzer_Tune8+0x82>
	{
		PWM_Time_Counter = 0;
		Configure_PWM_uS(500,350);
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 19)//106)
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d03c      	beq.n	8008d2c <Execute_Buzzer_Tune8+0xa4>
		PWM_Tone_Part = 0;
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		F_Buzzer_Tune8 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8008cb2:	4a26      	ldr	r2, [pc, #152]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008cb4:	6853      	ldr	r3, [r2, #4]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	6053      	str	r3, [r2, #4]
}
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
		Configure_PWM_uS(380,140);
 8008cbc:	20be      	movs	r0, #190	; 0xbe
 8008cbe:	218c      	movs	r1, #140	; 0x8c
 8008cc0:	0040      	lsls	r0, r0, #1
 8008cc2:	f7ff f819 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8008cc6:	4b21      	ldr	r3, [pc, #132]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1f1      	bne.n	8008cb2 <Execute_Buzzer_Tune8+0x2a>
		Start_PWM_Buzzer();
 8008cce:	f7fe ffed 	bl	8007cac <Start_PWM_Buzzer>
 8008cd2:	e7ee      	b.n	8008cb2 <Execute_Buzzer_Tune8+0x2a>
		PWM_Time_Counter = 0;
 8008cd4:	4a1d      	ldr	r2, [pc, #116]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	6051      	str	r1, [r2, #4]
		PWM_Tone_Part++;
 8008cda:	3301      	adds	r3, #1
 8008cdc:	7013      	strb	r3, [r2, #0]
		Configure_PWM_uS(420,160);
 8008cde:	20d2      	movs	r0, #210	; 0xd2
 8008ce0:	31a0      	adds	r1, #160	; 0xa0
 8008ce2:	0040      	lsls	r0, r0, #1
 8008ce4:	f7ff f808 	bl	8007cf8 <Configure_PWM_uS>
 8008ce8:	e7e3      	b.n	8008cb2 <Execute_Buzzer_Tune8+0x2a>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 19)//106)
 8008cea:	4a18      	ldr	r2, [pc, #96]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008cec:	6852      	ldr	r2, [r2, #4]
 8008cee:	2a12      	cmp	r2, #18
 8008cf0:	d9db      	bls.n	8008caa <Execute_Buzzer_Tune8+0x22>
		PWM_Time_Counter = 0;
 8008cf2:	4c16      	ldr	r4, [pc, #88]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(460,250);
 8008cf8:	20e6      	movs	r0, #230	; 0xe6
 8008cfa:	21fa      	movs	r1, #250	; 0xfa
 8008cfc:	0040      	lsls	r0, r0, #1
 8008cfe:	f7fe fffb 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008d02:	7823      	ldrb	r3, [r4, #0]
 8008d04:	3301      	adds	r3, #1
 8008d06:	7023      	strb	r3, [r4, #0]
 8008d08:	e7d3      	b.n	8008cb2 <Execute_Buzzer_Tune8+0x2a>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 20)//62)
 8008d0a:	4a10      	ldr	r2, [pc, #64]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008d0c:	6852      	ldr	r2, [r2, #4]
 8008d0e:	2a13      	cmp	r2, #19
 8008d10:	d9cd      	bls.n	8008cae <Execute_Buzzer_Tune8+0x26>
		PWM_Time_Counter = 0;
 8008d12:	4c0e      	ldr	r4, [pc, #56]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(500,350);
 8008d18:	21af      	movs	r1, #175	; 0xaf
 8008d1a:	20fa      	movs	r0, #250	; 0xfa
 8008d1c:	0049      	lsls	r1, r1, #1
 8008d1e:	0040      	lsls	r0, r0, #1
 8008d20:	f7fe ffea 	bl	8007cf8 <Configure_PWM_uS>
		PWM_Tone_Part++;
 8008d24:	7823      	ldrb	r3, [r4, #0]
 8008d26:	3301      	adds	r3, #1
 8008d28:	7023      	strb	r3, [r4, #0]
 8008d2a:	e7c2      	b.n	8008cb2 <Execute_Buzzer_Tune8+0x2a>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 19)//106)
 8008d2c:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2b12      	cmp	r3, #18
 8008d32:	d9be      	bls.n	8008cb2 <Execute_Buzzer_Tune8+0x2a>
		PWM_Time_Counter = 0;
 8008d34:	4c05      	ldr	r4, [pc, #20]	; (8008d4c <Execute_Buzzer_Tune8+0xc4>)
 8008d36:	2500      	movs	r5, #0
 8008d38:	6065      	str	r5, [r4, #4]
		PWM_Tone_Part = 0;
 8008d3a:	7025      	strb	r5, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008d3c:	2108      	movs	r1, #8
 8008d3e:	4804      	ldr	r0, [pc, #16]	; (8008d50 <Execute_Buzzer_Tune8+0xc8>)
 8008d40:	f7fb fe52 	bl	80049e8 <HAL_TIM_PWM_Stop>
		F_Buzzer_Tune8 = 0;
 8008d44:	7725      	strb	r5, [r4, #28]
		Stop_Buzzer();
 8008d46:	f7fe ffc1 	bl	8007ccc <Stop_Buzzer>
 8008d4a:	e7b2      	b.n	8008cb2 <Execute_Buzzer_Tune8+0x2a>
 8008d4c:	200001ec 	.word	0x200001ec
 8008d50:	20004940 	.word	0x20004940

08008d54 <Initiate_Buzzer_Beep3>:
  */
void Initiate_Buzzer_Beep3(void)
{
	/* Initialize timer for pwm generation for buzzer */
//	MX_TIM1_Init();
	F_Temporary_Mute = 0;							/* Disable temporary mute function */
 8008d54:	4b03      	ldr	r3, [pc, #12]	; (8008d64 <Initiate_Buzzer_Beep3+0x10>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	749a      	strb	r2, [r3, #18]
	PWM_Tone_Part = 0;
 8008d5a:	701a      	strb	r2, [r3, #0]
	PWM_Time_Counter = 0;
 8008d5c:	605a      	str	r2, [r3, #4]
	F_Buzzer_Beep3 = 1;
 8008d5e:	3201      	adds	r2, #1
 8008d60:	775a      	strb	r2, [r3, #29]
}
 8008d62:	4770      	bx	lr
 8008d64:	200001ec 	.word	0x200001ec

08008d68 <Execute_Buzzer_Beep3>:
  * @brief  Start Buzzer_Beep3.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Beep3(void)
{
 8008d68:	b510      	push	{r4, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8008d6a:	4b3a      	ldr	r3, [pc, #232]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d103      	bne.n	8008d7a <Execute_Buzzer_Beep3+0x12>
 8008d72:	4a38      	ldr	r2, [pc, #224]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008d74:	6852      	ldr	r2, [r2, #4]
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	d012      	beq.n	8008da0 <Execute_Buzzer_Beep3+0x38>
	{
		Configure_PWM_uS(360,120);
		if(PWM_Time_Counter == 0)
			Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 25)//1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d103      	bne.n	8008d86 <Execute_Buzzer_Beep3+0x1e>
 8008d7e:	4a35      	ldr	r2, [pc, #212]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008d80:	6852      	ldr	r2, [r2, #4]
 8008d82:	2a18      	cmp	r2, #24
 8008d84:	d818      	bhi.n	8008db8 <Execute_Buzzer_Beep3+0x50>
	{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 5)
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d021      	beq.n	8008dce <Execute_Buzzer_Beep3+0x66>
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,120);
		Start_PWM_Buzzer();
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 25)//2
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d031      	beq.n	8008df2 <Execute_Buzzer_Beep3+0x8a>
	{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 5)
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d03e      	beq.n	8008e10 <Execute_Buzzer_Beep3+0xa8>
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,120);
		Start_PWM_Buzzer();
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 25)//3
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d04e      	beq.n	8008e34 <Execute_Buzzer_Beep3+0xcc>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Time_Counter = 0;
		F_Buzzer_Beep3 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8008d96:	4a2f      	ldr	r2, [pc, #188]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008d98:	6853      	ldr	r3, [r2, #4]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	6053      	str	r3, [r2, #4]
}
 8008d9e:	bd10      	pop	{r4, pc}
		Configure_PWM_uS(360,120);
 8008da0:	20b4      	movs	r0, #180	; 0xb4
 8008da2:	2178      	movs	r1, #120	; 0x78
 8008da4:	0040      	lsls	r0, r0, #1
 8008da6:	f7fe ffa7 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8008daa:	4b2a      	ldr	r3, [pc, #168]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f1      	bne.n	8008d96 <Execute_Buzzer_Beep3+0x2e>
			Start_PWM_Buzzer();
 8008db2:	f7fe ff7b 	bl	8007cac <Start_PWM_Buzzer>
 8008db6:	e7ee      	b.n	8008d96 <Execute_Buzzer_Beep3+0x2e>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008db8:	2108      	movs	r1, #8
 8008dba:	4827      	ldr	r0, [pc, #156]	; (8008e58 <Execute_Buzzer_Beep3+0xf0>)
 8008dbc:	f7fb fe14 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Time_Counter = 0;
 8008dc0:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	605a      	str	r2, [r3, #4]
		PWM_Tone_Part++;
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	3201      	adds	r2, #1
 8008dca:	701a      	strb	r2, [r3, #0]
 8008dcc:	e7e3      	b.n	8008d96 <Execute_Buzzer_Beep3+0x2e>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 5)
 8008dce:	4a21      	ldr	r2, [pc, #132]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008dd0:	6852      	ldr	r2, [r2, #4]
 8008dd2:	2a04      	cmp	r2, #4
 8008dd4:	d9d9      	bls.n	8008d8a <Execute_Buzzer_Beep3+0x22>
		PWM_Time_Counter = 0;
 8008dd6:	4c1f      	ldr	r4, [pc, #124]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,120);
 8008ddc:	20b4      	movs	r0, #180	; 0xb4
 8008dde:	2178      	movs	r1, #120	; 0x78
 8008de0:	0040      	lsls	r0, r0, #1
 8008de2:	f7fe ff89 	bl	8007cf8 <Configure_PWM_uS>
		Start_PWM_Buzzer();
 8008de6:	f7fe ff61 	bl	8007cac <Start_PWM_Buzzer>
		PWM_Tone_Part++;
 8008dea:	7823      	ldrb	r3, [r4, #0]
 8008dec:	3301      	adds	r3, #1
 8008dee:	7023      	strb	r3, [r4, #0]
 8008df0:	e7d1      	b.n	8008d96 <Execute_Buzzer_Beep3+0x2e>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 25)//2
 8008df2:	4a18      	ldr	r2, [pc, #96]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008df4:	6852      	ldr	r2, [r2, #4]
 8008df6:	2a18      	cmp	r2, #24
 8008df8:	d9c9      	bls.n	8008d8e <Execute_Buzzer_Beep3+0x26>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008dfa:	2108      	movs	r1, #8
 8008dfc:	4816      	ldr	r0, [pc, #88]	; (8008e58 <Execute_Buzzer_Beep3+0xf0>)
 8008dfe:	f7fb fdf3 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Time_Counter = 0;
 8008e02:	4b14      	ldr	r3, [pc, #80]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	605a      	str	r2, [r3, #4]
		PWM_Tone_Part++;
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	3201      	adds	r2, #1
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	e7c2      	b.n	8008d96 <Execute_Buzzer_Beep3+0x2e>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 5)
 8008e10:	4a10      	ldr	r2, [pc, #64]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008e12:	6852      	ldr	r2, [r2, #4]
 8008e14:	2a04      	cmp	r2, #4
 8008e16:	d9bc      	bls.n	8008d92 <Execute_Buzzer_Beep3+0x2a>
		PWM_Time_Counter = 0;
 8008e18:	4c0e      	ldr	r4, [pc, #56]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,120);
 8008e1e:	20b4      	movs	r0, #180	; 0xb4
 8008e20:	2178      	movs	r1, #120	; 0x78
 8008e22:	0040      	lsls	r0, r0, #1
 8008e24:	f7fe ff68 	bl	8007cf8 <Configure_PWM_uS>
		Start_PWM_Buzzer();
 8008e28:	f7fe ff40 	bl	8007cac <Start_PWM_Buzzer>
		PWM_Tone_Part++;
 8008e2c:	7823      	ldrb	r3, [r4, #0]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	7023      	strb	r3, [r4, #0]
 8008e32:	e7b0      	b.n	8008d96 <Execute_Buzzer_Beep3+0x2e>
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 25)//3
 8008e34:	4b07      	ldr	r3, [pc, #28]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2b18      	cmp	r3, #24
 8008e3a:	d9ac      	bls.n	8008d96 <Execute_Buzzer_Beep3+0x2e>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008e3c:	2108      	movs	r1, #8
 8008e3e:	4806      	ldr	r0, [pc, #24]	; (8008e58 <Execute_Buzzer_Beep3+0xf0>)
 8008e40:	f7fb fdd2 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Time_Counter = 0;
 8008e44:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <Execute_Buzzer_Beep3+0xec>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	605a      	str	r2, [r3, #4]
		F_Buzzer_Beep3 = 0;
 8008e4a:	775a      	strb	r2, [r3, #29]
		Stop_Buzzer();
 8008e4c:	f7fe ff3e 	bl	8007ccc <Stop_Buzzer>
 8008e50:	e7a1      	b.n	8008d96 <Execute_Buzzer_Beep3+0x2e>
 8008e52:	46c0      	nop			; (mov r8, r8)
 8008e54:	200001ec 	.word	0x200001ec
 8008e58:	20004940 	.word	0x20004940

08008e5c <Execute_Buzzer_Beep4>:
  * @brief  Start Buzzer_Beep4.
  * @param  None
  * @retval None
  */
void Execute_Buzzer_Beep4(void)
{
 8008e5c:	b510      	push	{r4, lr}
	if(PWM_Tone_Part == 0 && PWM_Time_Counter == 0)
 8008e5e:	4b4d      	ldr	r3, [pc, #308]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d103      	bne.n	8008e6e <Execute_Buzzer_Beep4+0x12>
 8008e66:	4a4b      	ldr	r2, [pc, #300]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008e68:	6852      	ldr	r2, [r2, #4]
 8008e6a:	2a00      	cmp	r2, #0
 8008e6c:	d017      	beq.n	8008e9e <Execute_Buzzer_Beep4+0x42>
	{
		Configure_PWM_uS(360,120);
		if(PWM_Time_Counter == 0)
		Start_PWM_Buzzer();
	}
	else if(PWM_Tone_Part == 0 && PWM_Time_Counter >= 25)
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d103      	bne.n	8008e7a <Execute_Buzzer_Beep4+0x1e>
 8008e72:	4a48      	ldr	r2, [pc, #288]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008e74:	6852      	ldr	r2, [r2, #4]
 8008e76:	2a18      	cmp	r2, #24
 8008e78:	d81d      	bhi.n	8008eb6 <Execute_Buzzer_Beep4+0x5a>
	{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 5)
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d026      	beq.n	8008ecc <Execute_Buzzer_Beep4+0x70>
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,120);
		Start_PWM_Buzzer();
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 25)
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d036      	beq.n	8008ef0 <Execute_Buzzer_Beep4+0x94>
	{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 5)
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d043      	beq.n	8008f0e <Execute_Buzzer_Beep4+0xb2>
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,120);
		Start_PWM_Buzzer();
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 25)
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d053      	beq.n	8008f32 <Execute_Buzzer_Beep4+0xd6>
	{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Time_Counter = 0;
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 5)
 8008e8a:	2b05      	cmp	r3, #5
 8008e8c:	d060      	beq.n	8008f50 <Execute_Buzzer_Beep4+0xf4>
		PWM_Time_Counter = 0;
		Configure_PWM_uS(360,120);
		Start_PWM_Buzzer();
		PWM_Tone_Part++;
	}
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 25)
 8008e8e:	2b06      	cmp	r3, #6
 8008e90:	d100      	bne.n	8008e94 <Execute_Buzzer_Beep4+0x38>
 8008e92:	e06f      	b.n	8008f74 <Execute_Buzzer_Beep4+0x118>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
		PWM_Time_Counter = 0;
		F_Buzzer_Beep4 = 0;
		Stop_Buzzer();
	}
	PWM_Time_Counter++;
 8008e94:	4a3f      	ldr	r2, [pc, #252]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008e96:	6853      	ldr	r3, [r2, #4]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	6053      	str	r3, [r2, #4]
}
 8008e9c:	bd10      	pop	{r4, pc}
		Configure_PWM_uS(360,120);
 8008e9e:	20b4      	movs	r0, #180	; 0xb4
 8008ea0:	2178      	movs	r1, #120	; 0x78
 8008ea2:	0040      	lsls	r0, r0, #1
 8008ea4:	f7fe ff28 	bl	8007cf8 <Configure_PWM_uS>
		if(PWM_Time_Counter == 0)
 8008ea8:	4b3a      	ldr	r3, [pc, #232]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1f1      	bne.n	8008e94 <Execute_Buzzer_Beep4+0x38>
		Start_PWM_Buzzer();
 8008eb0:	f7fe fefc 	bl	8007cac <Start_PWM_Buzzer>
 8008eb4:	e7ee      	b.n	8008e94 <Execute_Buzzer_Beep4+0x38>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008eb6:	2108      	movs	r1, #8
 8008eb8:	4837      	ldr	r0, [pc, #220]	; (8008f98 <Execute_Buzzer_Beep4+0x13c>)
 8008eba:	f7fb fd95 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Time_Counter = 0;
 8008ebe:	4b35      	ldr	r3, [pc, #212]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	605a      	str	r2, [r3, #4]
		PWM_Tone_Part++;
 8008ec4:	781a      	ldrb	r2, [r3, #0]
 8008ec6:	3201      	adds	r2, #1
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e7e3      	b.n	8008e94 <Execute_Buzzer_Beep4+0x38>
	else if(PWM_Tone_Part == 1 && PWM_Time_Counter >= 5)
 8008ecc:	4a31      	ldr	r2, [pc, #196]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008ece:	6852      	ldr	r2, [r2, #4]
 8008ed0:	2a04      	cmp	r2, #4
 8008ed2:	d9d4      	bls.n	8008e7e <Execute_Buzzer_Beep4+0x22>
		PWM_Time_Counter = 0;
 8008ed4:	4c2f      	ldr	r4, [pc, #188]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,120);
 8008eda:	20b4      	movs	r0, #180	; 0xb4
 8008edc:	2178      	movs	r1, #120	; 0x78
 8008ede:	0040      	lsls	r0, r0, #1
 8008ee0:	f7fe ff0a 	bl	8007cf8 <Configure_PWM_uS>
		Start_PWM_Buzzer();
 8008ee4:	f7fe fee2 	bl	8007cac <Start_PWM_Buzzer>
		PWM_Tone_Part++;
 8008ee8:	7823      	ldrb	r3, [r4, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	7023      	strb	r3, [r4, #0]
 8008eee:	e7d1      	b.n	8008e94 <Execute_Buzzer_Beep4+0x38>
	else if(PWM_Tone_Part == 2 && PWM_Time_Counter >= 25)
 8008ef0:	4a28      	ldr	r2, [pc, #160]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008ef2:	6852      	ldr	r2, [r2, #4]
 8008ef4:	2a18      	cmp	r2, #24
 8008ef6:	d9c4      	bls.n	8008e82 <Execute_Buzzer_Beep4+0x26>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008ef8:	2108      	movs	r1, #8
 8008efa:	4827      	ldr	r0, [pc, #156]	; (8008f98 <Execute_Buzzer_Beep4+0x13c>)
 8008efc:	f7fb fd74 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Time_Counter = 0;
 8008f00:	4b24      	ldr	r3, [pc, #144]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	605a      	str	r2, [r3, #4]
		PWM_Tone_Part++;
 8008f06:	781a      	ldrb	r2, [r3, #0]
 8008f08:	3201      	adds	r2, #1
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	e7c2      	b.n	8008e94 <Execute_Buzzer_Beep4+0x38>
	else if(PWM_Tone_Part == 3 && PWM_Time_Counter >= 5)
 8008f0e:	4a21      	ldr	r2, [pc, #132]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008f10:	6852      	ldr	r2, [r2, #4]
 8008f12:	2a04      	cmp	r2, #4
 8008f14:	d9b7      	bls.n	8008e86 <Execute_Buzzer_Beep4+0x2a>
		PWM_Time_Counter = 0;
 8008f16:	4c1f      	ldr	r4, [pc, #124]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008f18:	2300      	movs	r3, #0
 8008f1a:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,120);
 8008f1c:	20b4      	movs	r0, #180	; 0xb4
 8008f1e:	2178      	movs	r1, #120	; 0x78
 8008f20:	0040      	lsls	r0, r0, #1
 8008f22:	f7fe fee9 	bl	8007cf8 <Configure_PWM_uS>
		Start_PWM_Buzzer();
 8008f26:	f7fe fec1 	bl	8007cac <Start_PWM_Buzzer>
		PWM_Tone_Part++;
 8008f2a:	7823      	ldrb	r3, [r4, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	7023      	strb	r3, [r4, #0]
 8008f30:	e7b0      	b.n	8008e94 <Execute_Buzzer_Beep4+0x38>
	else if(PWM_Tone_Part == 4 && PWM_Time_Counter >= 25)
 8008f32:	4a18      	ldr	r2, [pc, #96]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008f34:	6852      	ldr	r2, [r2, #4]
 8008f36:	2a18      	cmp	r2, #24
 8008f38:	d9a7      	bls.n	8008e8a <Execute_Buzzer_Beep4+0x2e>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008f3a:	2108      	movs	r1, #8
 8008f3c:	4816      	ldr	r0, [pc, #88]	; (8008f98 <Execute_Buzzer_Beep4+0x13c>)
 8008f3e:	f7fb fd53 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Time_Counter = 0;
 8008f42:	4b14      	ldr	r3, [pc, #80]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	605a      	str	r2, [r3, #4]
		PWM_Tone_Part++;
 8008f48:	781a      	ldrb	r2, [r3, #0]
 8008f4a:	3201      	adds	r2, #1
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	e7a1      	b.n	8008e94 <Execute_Buzzer_Beep4+0x38>
	else if(PWM_Tone_Part == 5 && PWM_Time_Counter >= 5)
 8008f50:	4a10      	ldr	r2, [pc, #64]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008f52:	6852      	ldr	r2, [r2, #4]
 8008f54:	2a04      	cmp	r2, #4
 8008f56:	d99a      	bls.n	8008e8e <Execute_Buzzer_Beep4+0x32>
		PWM_Time_Counter = 0;
 8008f58:	4c0e      	ldr	r4, [pc, #56]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6063      	str	r3, [r4, #4]
		Configure_PWM_uS(360,120);
 8008f5e:	20b4      	movs	r0, #180	; 0xb4
 8008f60:	2178      	movs	r1, #120	; 0x78
 8008f62:	0040      	lsls	r0, r0, #1
 8008f64:	f7fe fec8 	bl	8007cf8 <Configure_PWM_uS>
		Start_PWM_Buzzer();
 8008f68:	f7fe fea0 	bl	8007cac <Start_PWM_Buzzer>
		PWM_Tone_Part++;
 8008f6c:	7823      	ldrb	r3, [r4, #0]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	7023      	strb	r3, [r4, #0]
 8008f72:	e78f      	b.n	8008e94 <Execute_Buzzer_Beep4+0x38>
	else if(PWM_Tone_Part == 6 && PWM_Time_Counter >= 25)
 8008f74:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	2b18      	cmp	r3, #24
 8008f7a:	d800      	bhi.n	8008f7e <Execute_Buzzer_Beep4+0x122>
 8008f7c:	e78a      	b.n	8008e94 <Execute_Buzzer_Beep4+0x38>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8008f7e:	2108      	movs	r1, #8
 8008f80:	4805      	ldr	r0, [pc, #20]	; (8008f98 <Execute_Buzzer_Beep4+0x13c>)
 8008f82:	f7fb fd31 	bl	80049e8 <HAL_TIM_PWM_Stop>
		PWM_Time_Counter = 0;
 8008f86:	4b03      	ldr	r3, [pc, #12]	; (8008f94 <Execute_Buzzer_Beep4+0x138>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	605a      	str	r2, [r3, #4]
		F_Buzzer_Beep4 = 0;
 8008f8c:	779a      	strb	r2, [r3, #30]
		Stop_Buzzer();
 8008f8e:	f7fe fe9d 	bl	8007ccc <Stop_Buzzer>
 8008f92:	e77f      	b.n	8008e94 <Execute_Buzzer_Beep4+0x38>
 8008f94:	200001ec 	.word	0x200001ec
 8008f98:	20004940 	.word	0x20004940

08008f9c <Calculate_Byte_CRC16>:

void Calculate_Byte_CRC16(unsigned int Data_Byte)
{
	unsigned char Index;

	CRC_Initial_Value = (CRC_Initial_Value) ^ (Data_Byte);
 8008f9c:	4a0b      	ldr	r2, [pc, #44]	; (8008fcc <Calculate_Byte_CRC16+0x30>)
 8008f9e:	8813      	ldrh	r3, [r2, #0]
 8008fa0:	4043      	eors	r3, r0
 8008fa2:	8013      	strh	r3, [r2, #0]

	for (Index = 8; Index; Index--)
 8008fa4:	2308      	movs	r3, #8
 8008fa6:	e004      	b.n	8008fb2 <Calculate_Byte_CRC16+0x16>
		{
			(CRC_Initial_Value) = ( (CRC_Initial_Value) >> 1) ^ FEEDBACK;
		}
		else
		{
			(CRC_Initial_Value) = ( (CRC_Initial_Value) >> 1);
 8008fa8:	0852      	lsrs	r2, r2, #1
 8008faa:	4908      	ldr	r1, [pc, #32]	; (8008fcc <Calculate_Byte_CRC16+0x30>)
 8008fac:	800a      	strh	r2, [r1, #0]
	for (Index = 8; Index; Index--)
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d009      	beq.n	8008fca <Calculate_Byte_CRC16+0x2e>
		if ( (CRC_Initial_Value) & 0x0001)
 8008fb6:	4a05      	ldr	r2, [pc, #20]	; (8008fcc <Calculate_Byte_CRC16+0x30>)
 8008fb8:	8812      	ldrh	r2, [r2, #0]
 8008fba:	07d1      	lsls	r1, r2, #31
 8008fbc:	d5f4      	bpl.n	8008fa8 <Calculate_Byte_CRC16+0xc>
			(CRC_Initial_Value) = ( (CRC_Initial_Value) >> 1) ^ FEEDBACK;
 8008fbe:	0852      	lsrs	r2, r2, #1
 8008fc0:	4903      	ldr	r1, [pc, #12]	; (8008fd0 <Calculate_Byte_CRC16+0x34>)
 8008fc2:	404a      	eors	r2, r1
 8008fc4:	4901      	ldr	r1, [pc, #4]	; (8008fcc <Calculate_Byte_CRC16+0x30>)
 8008fc6:	800a      	strh	r2, [r1, #0]
 8008fc8:	e7f1      	b.n	8008fae <Calculate_Byte_CRC16+0x12>
		}
	}
}
 8008fca:	4770      	bx	lr
 8008fcc:	200004ee 	.word	0x200004ee
 8008fd0:	ffffa001 	.word	0xffffa001

08008fd4 <Calculate_Block_CRC16>:
* \Description : Calculates 16 bit CRC for a given Data Block.
* \Notes : calls Calculate_Byte_CRC16(char Data_Byte).
**************************************************/

unsigned short int Calculate_Block_CRC16( uint8_t *Data_Block, unsigned int Length)
{
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	0006      	movs	r6, r0
 8008fd8:	000d      	movs	r5, r1
	unsigned int Count;

	CRC_Initial_Value = 0xFFFF;            // initialise CRC for block calculation
 8008fda:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <Calculate_Block_CRC16+0x24>)
 8008fdc:	2201      	movs	r2, #1
 8008fde:	4252      	negs	r2, r2
 8008fe0:	801a      	strh	r2, [r3, #0]

	for (Count = 0; Count < Length; Count++ )
 8008fe2:	2400      	movs	r4, #0
 8008fe4:	42ac      	cmp	r4, r5
 8008fe6:	d204      	bcs.n	8008ff2 <Calculate_Block_CRC16+0x1e>
	{
		Calculate_Byte_CRC16(*(Data_Block + Count));   // update CRC with current data
 8008fe8:	5d30      	ldrb	r0, [r6, r4]
 8008fea:	f7ff ffd7 	bl	8008f9c <Calculate_Byte_CRC16>
	for (Count = 0; Count < Length; Count++ )
 8008fee:	3401      	adds	r4, #1
 8008ff0:	e7f8      	b.n	8008fe4 <Calculate_Block_CRC16+0x10>
	}
	return(CRC_Initial_Value);
 8008ff2:	4b01      	ldr	r3, [pc, #4]	; (8008ff8 <Calculate_Block_CRC16+0x24>)
 8008ff4:	8818      	ldrh	r0, [r3, #0]
}
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
 8008ff8:	200004ee 	.word	0x200004ee

08008ffc <HAL_UART_RxCpltCallback>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	0004      	movs	r4, r0
 8009000:	4bc2      	ldr	r3, [pc, #776]	; (800930c <HAL_UART_RxCpltCallback+0x310>)
 8009002:	6802      	ldr	r2, [r0, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d005      	beq.n	8009014 <HAL_UART_RxCpltCallback+0x18>
 8009008:	6822      	ldr	r2, [r4, #0]
 800900a:	4bc1      	ldr	r3, [pc, #772]	; (8009310 <HAL_UART_RxCpltCallback+0x314>)
 800900c:	429a      	cmp	r2, r3
 800900e:	d100      	bne.n	8009012 <HAL_UART_RxCpltCallback+0x16>
 8009010:	e1a8      	b.n	8009364 <HAL_UART_RxCpltCallback+0x368>
 8009012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009014:	4bbf      	ldr	r3, [pc, #764]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009016:	789b      	ldrb	r3, [r3, #2]
 8009018:	071b      	lsls	r3, r3, #28
 800901a:	d400      	bmi.n	800901e <HAL_UART_RxCpltCallback+0x22>
 800901c:	e0bd      	b.n	800919a <HAL_UART_RxCpltCallback+0x19e>
 800901e:	4bbe      	ldr	r3, [pc, #760]	; (8009318 <HAL_UART_RxCpltCallback+0x31c>)
 8009020:	781d      	ldrb	r5, [r3, #0]
 8009022:	4bbe      	ldr	r3, [pc, #760]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 8009024:	681e      	ldr	r6, [r3, #0]
 8009026:	4bbe      	ldr	r3, [pc, #760]	; (8009320 <HAL_UART_RxCpltCallback+0x324>)
 8009028:	559d      	strb	r5, [r3, r6]
 800902a:	4aba      	ldr	r2, [pc, #744]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 800902c:	78d3      	ldrb	r3, [r2, #3]
 800902e:	2140      	movs	r1, #64	; 0x40
 8009030:	430b      	orrs	r3, r1
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2120      	movs	r1, #32
 8009036:	430b      	orrs	r3, r1
 8009038:	70d3      	strb	r3, [r2, #3]
 800903a:	7853      	ldrb	r3, [r2, #1]
 800903c:	2208      	movs	r2, #8
 800903e:	0011      	movs	r1, r2
 8009040:	4019      	ands	r1, r3
 8009042:	421a      	tst	r2, r3
 8009044:	d018      	beq.n	8009078 <HAL_UART_RxCpltCallback+0x7c>
 8009046:	4bb7      	ldr	r3, [pc, #732]	; (8009324 <HAL_UART_RxCpltCallback+0x328>)
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	4bb3      	ldr	r3, [pc, #716]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	2b8f      	cmp	r3, #143	; 0x8f
 8009052:	dc05      	bgt.n	8009060 <HAL_UART_RxCpltCallback+0x64>
 8009054:	48b1      	ldr	r0, [pc, #708]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 8009056:	6882      	ldr	r2, [r0, #8]
 8009058:	4fb3      	ldr	r7, [pc, #716]	; (8009328 <HAL_UART_RxCpltCallback+0x32c>)
 800905a:	54bd      	strb	r5, [r7, r2]
 800905c:	3201      	adds	r2, #1
 800905e:	6082      	str	r2, [r0, #8]
 8009060:	001a      	movs	r2, r3
 8009062:	3a90      	subs	r2, #144	; 0x90
 8009064:	2a01      	cmp	r2, #1
 8009066:	d92b      	bls.n	80090c0 <HAL_UART_RxCpltCallback+0xc4>
 8009068:	2b91      	cmp	r3, #145	; 0x91
 800906a:	dd05      	ble.n	8009078 <HAL_UART_RxCpltCallback+0x7c>
 800906c:	4aab      	ldr	r2, [pc, #684]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 800906e:	6913      	ldr	r3, [r2, #16]
 8009070:	48ae      	ldr	r0, [pc, #696]	; (800932c <HAL_UART_RxCpltCallback+0x330>)
 8009072:	54c5      	strb	r5, [r0, r3]
 8009074:	3301      	adds	r3, #1
 8009076:	6113      	str	r3, [r2, #16]
 8009078:	4ba9      	ldr	r3, [pc, #676]	; (8009320 <HAL_UART_RxCpltCallback+0x324>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2ba0      	cmp	r3, #160	; 0xa0
 800907e:	d026      	beq.n	80090ce <HAL_UART_RxCpltCallback+0xd2>
 8009080:	4ba6      	ldr	r3, [pc, #664]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	3201      	adds	r2, #1
 8009086:	605a      	str	r2, [r3, #4]
 8009088:	3601      	adds	r6, #1
 800908a:	601e      	str	r6, [r3, #0]
 800908c:	2e01      	cmp	r6, #1
 800908e:	dd01      	ble.n	8009094 <HAL_UART_RxCpltCallback+0x98>
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	4ba5      	ldr	r3, [pc, #660]	; (800932c <HAL_UART_RxCpltCallback+0x330>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b0a      	cmp	r3, #10
 800909a:	d034      	beq.n	8009106 <HAL_UART_RxCpltCallback+0x10a>
 800909c:	2d2a      	cmp	r5, #42	; 0x2a
 800909e:	d056      	beq.n	800914e <HAL_UART_RxCpltCallback+0x152>
 80090a0:	4a9e      	ldr	r2, [pc, #632]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 80090a2:	6993      	ldr	r3, [r2, #24]
 80090a4:	49a2      	ldr	r1, [pc, #648]	; (8009330 <HAL_UART_RxCpltCallback+0x334>)
 80090a6:	54cd      	strb	r5, [r1, r3]
 80090a8:	3301      	adds	r3, #1
 80090aa:	6193      	str	r3, [r2, #24]
 80090ac:	2b06      	cmp	r3, #6
 80090ae:	d05c      	beq.n	800916a <HAL_UART_RxCpltCallback+0x16e>
 80090b0:	2d23      	cmp	r5, #35	; 0x23
 80090b2:	d05e      	beq.n	8009172 <HAL_UART_RxCpltCallback+0x176>
 80090b4:	2201      	movs	r2, #1
 80090b6:	4998      	ldr	r1, [pc, #608]	; (8009318 <HAL_UART_RxCpltCallback+0x31c>)
 80090b8:	489e      	ldr	r0, [pc, #632]	; (8009334 <HAL_UART_RxCpltCallback+0x338>)
 80090ba:	f7fc fc25 	bl	8005908 <HAL_UART_Receive_IT>
 80090be:	e7a3      	b.n	8009008 <HAL_UART_RxCpltCallback+0xc>
 80090c0:	4896      	ldr	r0, [pc, #600]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 80090c2:	68c2      	ldr	r2, [r0, #12]
 80090c4:	4f9c      	ldr	r7, [pc, #624]	; (8009338 <HAL_UART_RxCpltCallback+0x33c>)
 80090c6:	54bd      	strb	r5, [r7, r2]
 80090c8:	3201      	adds	r2, #1
 80090ca:	60c2      	str	r2, [r0, #12]
 80090cc:	e7cc      	b.n	8009068 <HAL_UART_RxCpltCallback+0x6c>
 80090ce:	4b94      	ldr	r3, [pc, #592]	; (8009320 <HAL_UART_RxCpltCallback+0x324>)
 80090d0:	785b      	ldrb	r3, [r3, #1]
 80090d2:	2ba0      	cmp	r3, #160	; 0xa0
 80090d4:	d1d4      	bne.n	8009080 <HAL_UART_RxCpltCallback+0x84>
 80090d6:	2900      	cmp	r1, #0
 80090d8:	d1d2      	bne.n	8009080 <HAL_UART_RxCpltCallback+0x84>
 80090da:	4b90      	ldr	r3, [pc, #576]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 80090dc:	2201      	movs	r2, #1
 80090de:	605a      	str	r2, [r3, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	611a      	str	r2, [r3, #16]
 80090e4:	60da      	str	r2, [r3, #12]
 80090e6:	498b      	ldr	r1, [pc, #556]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 80090e8:	784a      	ldrb	r2, [r1, #1]
 80090ea:	2008      	movs	r0, #8
 80090ec:	4302      	orrs	r2, r0
 80090ee:	704a      	strb	r2, [r1, #1]
 80090f0:	4a8d      	ldr	r2, [pc, #564]	; (8009328 <HAL_UART_RxCpltCallback+0x32c>)
 80090f2:	21a0      	movs	r1, #160	; 0xa0
 80090f4:	7011      	strb	r1, [r2, #0]
 80090f6:	7051      	strb	r1, [r2, #1]
 80090f8:	2202      	movs	r2, #2
 80090fa:	609a      	str	r2, [r3, #8]
 80090fc:	2100      	movs	r1, #0
 80090fe:	4888      	ldr	r0, [pc, #544]	; (8009320 <HAL_UART_RxCpltCallback+0x324>)
 8009100:	f001 ffe3 	bl	800b0ca <memset>
 8009104:	e7bc      	b.n	8009080 <HAL_UART_RxCpltCallback+0x84>
 8009106:	4b89      	ldr	r3, [pc, #548]	; (800932c <HAL_UART_RxCpltCallback+0x330>)
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	2b0a      	cmp	r3, #10
 800910c:	d1c6      	bne.n	800909c <HAL_UART_RxCpltCallback+0xa0>
 800910e:	4b83      	ldr	r3, [pc, #524]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 8009110:	2200      	movs	r2, #0
 8009112:	605a      	str	r2, [r3, #4]
 8009114:	609a      	str	r2, [r3, #8]
 8009116:	611a      	str	r2, [r3, #16]
 8009118:	60da      	str	r2, [r3, #12]
 800911a:	497e      	ldr	r1, [pc, #504]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 800911c:	784a      	ldrb	r2, [r1, #1]
 800911e:	2008      	movs	r0, #8
 8009120:	4382      	bics	r2, r0
 8009122:	704a      	strb	r2, [r1, #1]
 8009124:	4a80      	ldr	r2, [pc, #512]	; (8009328 <HAL_UART_RxCpltCallback+0x32c>)
 8009126:	78d2      	ldrb	r2, [r2, #3]
 8009128:	615a      	str	r2, [r3, #20]
 800912a:	238c      	movs	r3, #140	; 0x8c
 800912c:	4353      	muls	r3, r2
 800912e:	4983      	ldr	r1, [pc, #524]	; (800933c <HAL_UART_RxCpltCallback+0x340>)
 8009130:	600b      	str	r3, [r1, #0]
 8009132:	2a77      	cmp	r2, #119	; 0x77
 8009134:	d005      	beq.n	8009142 <HAL_UART_RxCpltCallback+0x146>
 8009136:	4a77      	ldr	r2, [pc, #476]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009138:	7893      	ldrb	r3, [r2, #2]
 800913a:	2120      	movs	r1, #32
 800913c:	430b      	orrs	r3, r1
 800913e:	7093      	strb	r3, [r2, #2]
 8009140:	e7ac      	b.n	800909c <HAL_UART_RxCpltCallback+0xa0>
 8009142:	4a74      	ldr	r2, [pc, #464]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009144:	78d3      	ldrb	r3, [r2, #3]
 8009146:	2101      	movs	r1, #1
 8009148:	430b      	orrs	r3, r1
 800914a:	70d3      	strb	r3, [r2, #3]
 800914c:	e7f3      	b.n	8009136 <HAL_UART_RxCpltCallback+0x13a>
 800914e:	2206      	movs	r2, #6
 8009150:	2100      	movs	r1, #0
 8009152:	4877      	ldr	r0, [pc, #476]	; (8009330 <HAL_UART_RxCpltCallback+0x334>)
 8009154:	f001 ffb9 	bl	800b0ca <memset>
 8009158:	4b70      	ldr	r3, [pc, #448]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 800915a:	2200      	movs	r2, #0
 800915c:	619a      	str	r2, [r3, #24]
 800915e:	4a6d      	ldr	r2, [pc, #436]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009160:	7853      	ldrb	r3, [r2, #1]
 8009162:	2110      	movs	r1, #16
 8009164:	430b      	orrs	r3, r1
 8009166:	7053      	strb	r3, [r2, #1]
 8009168:	e79a      	b.n	80090a0 <HAL_UART_RxCpltCallback+0xa4>
 800916a:	0013      	movs	r3, r2
 800916c:	2200      	movs	r2, #0
 800916e:	619a      	str	r2, [r3, #24]
 8009170:	e79e      	b.n	80090b0 <HAL_UART_RxCpltCallback+0xb4>
 8009172:	4b68      	ldr	r3, [pc, #416]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009174:	785a      	ldrb	r2, [r3, #1]
 8009176:	2318      	movs	r3, #24
 8009178:	4013      	ands	r3, r2
 800917a:	2b10      	cmp	r3, #16
 800917c:	d19a      	bne.n	80090b4 <HAL_UART_RxCpltCallback+0xb8>
 800917e:	4b65      	ldr	r3, [pc, #404]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009180:	789a      	ldrb	r2, [r3, #2]
 8009182:	2140      	movs	r1, #64	; 0x40
 8009184:	430a      	orrs	r2, r1
 8009186:	709a      	strb	r2, [r3, #2]
 8009188:	785a      	ldrb	r2, [r3, #1]
 800918a:	2110      	movs	r1, #16
 800918c:	438a      	bics	r2, r1
 800918e:	705a      	strb	r2, [r3, #1]
 8009190:	79da      	ldrb	r2, [r3, #7]
 8009192:	2101      	movs	r1, #1
 8009194:	430a      	orrs	r2, r1
 8009196:	71da      	strb	r2, [r3, #7]
 8009198:	e78c      	b.n	80090b4 <HAL_UART_RxCpltCallback+0xb8>
 800919a:	4b5f      	ldr	r3, [pc, #380]	; (8009318 <HAL_UART_RxCpltCallback+0x31c>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	4a68      	ldr	r2, [pc, #416]	; (8009340 <HAL_UART_RxCpltCallback+0x344>)
 80091a0:	7812      	ldrb	r2, [r2, #0]
 80091a2:	2a03      	cmp	r2, #3
 80091a4:	d051      	beq.n	800924a <HAL_UART_RxCpltCallback+0x24e>
 80091a6:	495b      	ldr	r1, [pc, #364]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 80091a8:	7909      	ldrb	r1, [r1, #4]
 80091aa:	06c9      	lsls	r1, r1, #27
 80091ac:	d507      	bpl.n	80091be <HAL_UART_RxCpltCallback+0x1c2>
 80091ae:	485b      	ldr	r0, [pc, #364]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 80091b0:	69c1      	ldr	r1, [r0, #28]
 80091b2:	4d64      	ldr	r5, [pc, #400]	; (8009344 <HAL_UART_RxCpltCallback+0x348>)
 80091b4:	546b      	strb	r3, [r5, r1]
 80091b6:	3101      	adds	r1, #1
 80091b8:	61c1      	str	r1, [r0, #28]
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	d050      	beq.n	8009260 <HAL_UART_RxCpltCallback+0x264>
 80091be:	2a02      	cmp	r2, #2
 80091c0:	d05b      	beq.n	800927a <HAL_UART_RxCpltCallback+0x27e>
 80091c2:	4954      	ldr	r1, [pc, #336]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 80091c4:	7909      	ldrb	r1, [r1, #4]
 80091c6:	0749      	lsls	r1, r1, #29
 80091c8:	d507      	bpl.n	80091da <HAL_UART_RxCpltCallback+0x1de>
 80091ca:	4854      	ldr	r0, [pc, #336]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 80091cc:	69c1      	ldr	r1, [r0, #28]
 80091ce:	4d5d      	ldr	r5, [pc, #372]	; (8009344 <HAL_UART_RxCpltCallback+0x348>)
 80091d0:	546b      	strb	r3, [r5, r1]
 80091d2:	3101      	adds	r1, #1
 80091d4:	61c1      	str	r1, [r0, #28]
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	d05a      	beq.n	8009290 <HAL_UART_RxCpltCallback+0x294>
 80091da:	2a01      	cmp	r2, #1
 80091dc:	d065      	beq.n	80092aa <HAL_UART_RxCpltCallback+0x2ae>
 80091de:	494d      	ldr	r1, [pc, #308]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 80091e0:	7909      	ldrb	r1, [r1, #4]
 80091e2:	0709      	lsls	r1, r1, #28
 80091e4:	d509      	bpl.n	80091fa <HAL_UART_RxCpltCallback+0x1fe>
 80091e6:	494d      	ldr	r1, [pc, #308]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 80091e8:	2000      	movs	r0, #0
 80091ea:	6208      	str	r0, [r1, #32]
 80091ec:	4855      	ldr	r0, [pc, #340]	; (8009344 <HAL_UART_RxCpltCallback+0x348>)
 80091ee:	7003      	strb	r3, [r0, #0]
 80091f0:	69c8      	ldr	r0, [r1, #28]
 80091f2:	3001      	adds	r0, #1
 80091f4:	61c8      	str	r0, [r1, #28]
 80091f6:	2b25      	cmp	r3, #37	; 0x25
 80091f8:	d062      	beq.n	80092c0 <HAL_UART_RxCpltCallback+0x2c4>
 80091fa:	2a04      	cmp	r2, #4
 80091fc:	d06d      	beq.n	80092da <HAL_UART_RxCpltCallback+0x2de>
 80091fe:	2a05      	cmp	r2, #5
 8009200:	d000      	beq.n	8009204 <HAL_UART_RxCpltCallback+0x208>
 8009202:	e757      	b.n	80090b4 <HAL_UART_RxCpltCallback+0xb8>
 8009204:	2b42      	cmp	r3, #66	; 0x42
 8009206:	d078      	beq.n	80092fa <HAL_UART_RxCpltCallback+0x2fe>
 8009208:	4844      	ldr	r0, [pc, #272]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 800920a:	69c2      	ldr	r2, [r0, #28]
 800920c:	494d      	ldr	r1, [pc, #308]	; (8009344 <HAL_UART_RxCpltCallback+0x348>)
 800920e:	548b      	strb	r3, [r1, r2]
 8009210:	3201      	adds	r2, #1
 8009212:	61c2      	str	r2, [r0, #28]
 8009214:	780a      	ldrb	r2, [r1, #0]
 8009216:	2a42      	cmp	r2, #66	; 0x42
 8009218:	d100      	bne.n	800921c <HAL_UART_RxCpltCallback+0x220>
 800921a:	e095      	b.n	8009348 <HAL_UART_RxCpltCallback+0x34c>
 800921c:	2b0d      	cmp	r3, #13
 800921e:	d000      	beq.n	8009222 <HAL_UART_RxCpltCallback+0x226>
 8009220:	e748      	b.n	80090b4 <HAL_UART_RxCpltCallback+0xb8>
 8009222:	4b3c      	ldr	r3, [pc, #240]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009224:	791b      	ldrb	r3, [r3, #4]
 8009226:	065b      	lsls	r3, r3, #25
 8009228:	d400      	bmi.n	800922c <HAL_UART_RxCpltCallback+0x230>
 800922a:	e743      	b.n	80090b4 <HAL_UART_RxCpltCallback+0xb8>
 800922c:	4b39      	ldr	r3, [pc, #228]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	2101      	movs	r1, #1
 8009232:	430a      	orrs	r2, r1
 8009234:	701a      	strb	r2, [r3, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	4938      	ldr	r1, [pc, #224]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 800923a:	61ca      	str	r2, [r1, #28]
 800923c:	4940      	ldr	r1, [pc, #256]	; (8009340 <HAL_UART_RxCpltCallback+0x344>)
 800923e:	700a      	strb	r2, [r1, #0]
 8009240:	791a      	ldrb	r2, [r3, #4]
 8009242:	2140      	movs	r1, #64	; 0x40
 8009244:	438a      	bics	r2, r1
 8009246:	711a      	strb	r2, [r3, #4]
 8009248:	e734      	b.n	80090b4 <HAL_UART_RxCpltCallback+0xb8>
 800924a:	2b41      	cmp	r3, #65	; 0x41
 800924c:	d1ab      	bne.n	80091a6 <HAL_UART_RxCpltCallback+0x1aa>
 800924e:	4933      	ldr	r1, [pc, #204]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 8009250:	2000      	movs	r0, #0
 8009252:	61c8      	str	r0, [r1, #28]
 8009254:	482f      	ldr	r0, [pc, #188]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009256:	7901      	ldrb	r1, [r0, #4]
 8009258:	2510      	movs	r5, #16
 800925a:	4329      	orrs	r1, r5
 800925c:	7101      	strb	r1, [r0, #4]
 800925e:	e7a2      	b.n	80091a6 <HAL_UART_RxCpltCallback+0x1aa>
 8009260:	0001      	movs	r1, r0
 8009262:	2000      	movs	r0, #0
 8009264:	61c8      	str	r0, [r1, #28]
 8009266:	492b      	ldr	r1, [pc, #172]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009268:	7808      	ldrb	r0, [r1, #0]
 800926a:	2501      	movs	r5, #1
 800926c:	4328      	orrs	r0, r5
 800926e:	7008      	strb	r0, [r1, #0]
 8009270:	7908      	ldrb	r0, [r1, #4]
 8009272:	2510      	movs	r5, #16
 8009274:	43a8      	bics	r0, r5
 8009276:	7108      	strb	r0, [r1, #4]
 8009278:	e7a1      	b.n	80091be <HAL_UART_RxCpltCallback+0x1c2>
 800927a:	2b43      	cmp	r3, #67	; 0x43
 800927c:	d1a1      	bne.n	80091c2 <HAL_UART_RxCpltCallback+0x1c6>
 800927e:	4927      	ldr	r1, [pc, #156]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 8009280:	2000      	movs	r0, #0
 8009282:	61c8      	str	r0, [r1, #28]
 8009284:	4823      	ldr	r0, [pc, #140]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009286:	7901      	ldrb	r1, [r0, #4]
 8009288:	2504      	movs	r5, #4
 800928a:	4329      	orrs	r1, r5
 800928c:	7101      	strb	r1, [r0, #4]
 800928e:	e798      	b.n	80091c2 <HAL_UART_RxCpltCallback+0x1c6>
 8009290:	0001      	movs	r1, r0
 8009292:	2000      	movs	r0, #0
 8009294:	61c8      	str	r0, [r1, #28]
 8009296:	491f      	ldr	r1, [pc, #124]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 8009298:	7808      	ldrb	r0, [r1, #0]
 800929a:	2501      	movs	r5, #1
 800929c:	4328      	orrs	r0, r5
 800929e:	7008      	strb	r0, [r1, #0]
 80092a0:	7908      	ldrb	r0, [r1, #4]
 80092a2:	2504      	movs	r5, #4
 80092a4:	43a8      	bics	r0, r5
 80092a6:	7108      	strb	r0, [r1, #4]
 80092a8:	e797      	b.n	80091da <HAL_UART_RxCpltCallback+0x1de>
 80092aa:	2b25      	cmp	r3, #37	; 0x25
 80092ac:	d197      	bne.n	80091de <HAL_UART_RxCpltCallback+0x1e2>
 80092ae:	491b      	ldr	r1, [pc, #108]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 80092b0:	2000      	movs	r0, #0
 80092b2:	61c8      	str	r0, [r1, #28]
 80092b4:	4817      	ldr	r0, [pc, #92]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 80092b6:	7901      	ldrb	r1, [r0, #4]
 80092b8:	2508      	movs	r5, #8
 80092ba:	4329      	orrs	r1, r5
 80092bc:	7101      	strb	r1, [r0, #4]
 80092be:	e78e      	b.n	80091de <HAL_UART_RxCpltCallback+0x1e2>
 80092c0:	4914      	ldr	r1, [pc, #80]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 80092c2:	7808      	ldrb	r0, [r1, #0]
 80092c4:	2501      	movs	r5, #1
 80092c6:	4328      	orrs	r0, r5
 80092c8:	7008      	strb	r0, [r1, #0]
 80092ca:	4814      	ldr	r0, [pc, #80]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 80092cc:	2500      	movs	r5, #0
 80092ce:	61c5      	str	r5, [r0, #28]
 80092d0:	7908      	ldrb	r0, [r1, #4]
 80092d2:	3508      	adds	r5, #8
 80092d4:	43a8      	bics	r0, r5
 80092d6:	7108      	strb	r0, [r1, #4]
 80092d8:	e78f      	b.n	80091fa <HAL_UART_RxCpltCallback+0x1fe>
 80092da:	4810      	ldr	r0, [pc, #64]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 80092dc:	69c1      	ldr	r1, [r0, #28]
 80092de:	4d19      	ldr	r5, [pc, #100]	; (8009344 <HAL_UART_RxCpltCallback+0x348>)
 80092e0:	546b      	strb	r3, [r5, r1]
 80092e2:	3101      	adds	r1, #1
 80092e4:	61c1      	str	r1, [r0, #28]
 80092e6:	2b25      	cmp	r3, #37	; 0x25
 80092e8:	d189      	bne.n	80091fe <HAL_UART_RxCpltCallback+0x202>
 80092ea:	2911      	cmp	r1, #17
 80092ec:	dd87      	ble.n	80091fe <HAL_UART_RxCpltCallback+0x202>
 80092ee:	4809      	ldr	r0, [pc, #36]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 80092f0:	7801      	ldrb	r1, [r0, #0]
 80092f2:	2504      	movs	r5, #4
 80092f4:	4329      	orrs	r1, r5
 80092f6:	7001      	strb	r1, [r0, #0]
 80092f8:	e781      	b.n	80091fe <HAL_UART_RxCpltCallback+0x202>
 80092fa:	4a06      	ldr	r2, [pc, #24]	; (8009314 <HAL_UART_RxCpltCallback+0x318>)
 80092fc:	7912      	ldrb	r2, [r2, #4]
 80092fe:	0652      	lsls	r2, r2, #25
 8009300:	d482      	bmi.n	8009208 <HAL_UART_RxCpltCallback+0x20c>
 8009302:	4a06      	ldr	r2, [pc, #24]	; (800931c <HAL_UART_RxCpltCallback+0x320>)
 8009304:	2100      	movs	r1, #0
 8009306:	61d1      	str	r1, [r2, #28]
 8009308:	e77e      	b.n	8009208 <HAL_UART_RxCpltCallback+0x20c>
 800930a:	46c0      	nop			; (mov r8, r8)
 800930c:	40004800 	.word	0x40004800
 8009310:	40013800 	.word	0x40013800
 8009314:	2000032c 	.word	0x2000032c
 8009318:	200047d8 	.word	0x200047d8
 800931c:	2000020c 	.word	0x2000020c
 8009320:	200004fc 	.word	0x200004fc
 8009324:	20000248 	.word	0x20000248
 8009328:	20004740 	.word	0x20004740
 800932c:	200047dc 	.word	0x200047dc
 8009330:	2000472c 	.word	0x2000472c
 8009334:	200046a4 	.word	0x200046a4
 8009338:	20004738 	.word	0x20004738
 800933c:	20004728 	.word	0x20004728
 8009340:	200047de 	.word	0x200047de
 8009344:	20000260 	.word	0x20000260
 8009348:	784a      	ldrb	r2, [r1, #1]
 800934a:	2a54      	cmp	r2, #84	; 0x54
 800934c:	d000      	beq.n	8009350 <HAL_UART_RxCpltCallback+0x354>
 800934e:	e765      	b.n	800921c <HAL_UART_RxCpltCallback+0x220>
 8009350:	788a      	ldrb	r2, [r1, #2]
 8009352:	2a41      	cmp	r2, #65	; 0x41
 8009354:	d000      	beq.n	8009358 <HAL_UART_RxCpltCallback+0x35c>
 8009356:	e761      	b.n	800921c <HAL_UART_RxCpltCallback+0x220>
 8009358:	4957      	ldr	r1, [pc, #348]	; (80094b8 <HAL_UART_RxCpltCallback+0x4bc>)
 800935a:	790a      	ldrb	r2, [r1, #4]
 800935c:	2040      	movs	r0, #64	; 0x40
 800935e:	4302      	orrs	r2, r0
 8009360:	710a      	strb	r2, [r1, #4]
 8009362:	e75b      	b.n	800921c <HAL_UART_RxCpltCallback+0x220>
 8009364:	4b55      	ldr	r3, [pc, #340]	; (80094bc <HAL_UART_RxCpltCallback+0x4c0>)
 8009366:	781d      	ldrb	r5, [r3, #0]
 8009368:	4b55      	ldr	r3, [pc, #340]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 800936a:	681c      	ldr	r4, [r3, #0]
 800936c:	4b55      	ldr	r3, [pc, #340]	; (80094c4 <HAL_UART_RxCpltCallback+0x4c8>)
 800936e:	551d      	strb	r5, [r3, r4]
 8009370:	4b51      	ldr	r3, [pc, #324]	; (80094b8 <HAL_UART_RxCpltCallback+0x4bc>)
 8009372:	789b      	ldrb	r3, [r3, #2]
 8009374:	071b      	lsls	r3, r3, #28
 8009376:	d43c      	bmi.n	80093f2 <HAL_UART_RxCpltCallback+0x3f6>
 8009378:	4b4f      	ldr	r3, [pc, #316]	; (80094b8 <HAL_UART_RxCpltCallback+0x4bc>)
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	2208      	movs	r2, #8
 800937e:	0011      	movs	r1, r2
 8009380:	4019      	ands	r1, r3
 8009382:	421a      	tst	r2, r3
 8009384:	d017      	beq.n	80093b6 <HAL_UART_RxCpltCallback+0x3ba>
 8009386:	4b4e      	ldr	r3, [pc, #312]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	4a4f      	ldr	r2, [pc, #316]	; (80094c8 <HAL_UART_RxCpltCallback+0x4cc>)
 800938c:	4293      	cmp	r3, r2
 800938e:	dc05      	bgt.n	800939c <HAL_UART_RxCpltCallback+0x3a0>
 8009390:	484b      	ldr	r0, [pc, #300]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 8009392:	6882      	ldr	r2, [r0, #8]
 8009394:	4e4d      	ldr	r6, [pc, #308]	; (80094cc <HAL_UART_RxCpltCallback+0x4d0>)
 8009396:	54b5      	strb	r5, [r6, r2]
 8009398:	3201      	adds	r2, #1
 800939a:	6082      	str	r2, [r0, #8]
 800939c:	4a4c      	ldr	r2, [pc, #304]	; (80094d0 <HAL_UART_RxCpltCallback+0x4d4>)
 800939e:	189a      	adds	r2, r3, r2
 80093a0:	2a01      	cmp	r2, #1
 80093a2:	d92c      	bls.n	80093fe <HAL_UART_RxCpltCallback+0x402>
 80093a4:	4a4b      	ldr	r2, [pc, #300]	; (80094d4 <HAL_UART_RxCpltCallback+0x4d8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	dd05      	ble.n	80093b6 <HAL_UART_RxCpltCallback+0x3ba>
 80093aa:	4a45      	ldr	r2, [pc, #276]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 80093ac:	6913      	ldr	r3, [r2, #16]
 80093ae:	484a      	ldr	r0, [pc, #296]	; (80094d8 <HAL_UART_RxCpltCallback+0x4dc>)
 80093b0:	54c5      	strb	r5, [r0, r3]
 80093b2:	3301      	adds	r3, #1
 80093b4:	6113      	str	r3, [r2, #16]
 80093b6:	4b43      	ldr	r3, [pc, #268]	; (80094c4 <HAL_UART_RxCpltCallback+0x4c8>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2ba0      	cmp	r3, #160	; 0xa0
 80093bc:	d026      	beq.n	800940c <HAL_UART_RxCpltCallback+0x410>
 80093be:	4b40      	ldr	r3, [pc, #256]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 80093c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093c2:	3201      	adds	r2, #1
 80093c4:	625a      	str	r2, [r3, #36]	; 0x24
 80093c6:	3401      	adds	r4, #1
 80093c8:	601c      	str	r4, [r3, #0]
 80093ca:	2c01      	cmp	r4, #1
 80093cc:	dd01      	ble.n	80093d2 <HAL_UART_RxCpltCallback+0x3d6>
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	4b41      	ldr	r3, [pc, #260]	; (80094d8 <HAL_UART_RxCpltCallback+0x4dc>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b0a      	cmp	r3, #10
 80093d8:	d034      	beq.n	8009444 <HAL_UART_RxCpltCallback+0x448>
 80093da:	2d2a      	cmp	r5, #42	; 0x2a
 80093dc:	d046      	beq.n	800946c <HAL_UART_RxCpltCallback+0x470>
 80093de:	4a38      	ldr	r2, [pc, #224]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 80093e0:	6993      	ldr	r3, [r2, #24]
 80093e2:	493e      	ldr	r1, [pc, #248]	; (80094dc <HAL_UART_RxCpltCallback+0x4e0>)
 80093e4:	54cd      	strb	r5, [r1, r3]
 80093e6:	3301      	adds	r3, #1
 80093e8:	6193      	str	r3, [r2, #24]
 80093ea:	2b06      	cmp	r3, #6
 80093ec:	d04c      	beq.n	8009488 <HAL_UART_RxCpltCallback+0x48c>
 80093ee:	2d23      	cmp	r5, #35	; 0x23
 80093f0:	d04e      	beq.n	8009490 <HAL_UART_RxCpltCallback+0x494>
 80093f2:	2201      	movs	r2, #1
 80093f4:	4931      	ldr	r1, [pc, #196]	; (80094bc <HAL_UART_RxCpltCallback+0x4c0>)
 80093f6:	483a      	ldr	r0, [pc, #232]	; (80094e0 <HAL_UART_RxCpltCallback+0x4e4>)
 80093f8:	f7fc fa86 	bl	8005908 <HAL_UART_Receive_IT>
 80093fc:	e609      	b.n	8009012 <HAL_UART_RxCpltCallback+0x16>
 80093fe:	4830      	ldr	r0, [pc, #192]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 8009400:	68c2      	ldr	r2, [r0, #12]
 8009402:	4e38      	ldr	r6, [pc, #224]	; (80094e4 <HAL_UART_RxCpltCallback+0x4e8>)
 8009404:	54b5      	strb	r5, [r6, r2]
 8009406:	3201      	adds	r2, #1
 8009408:	60c2      	str	r2, [r0, #12]
 800940a:	e7cb      	b.n	80093a4 <HAL_UART_RxCpltCallback+0x3a8>
 800940c:	4b2d      	ldr	r3, [pc, #180]	; (80094c4 <HAL_UART_RxCpltCallback+0x4c8>)
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2ba0      	cmp	r3, #160	; 0xa0
 8009412:	d1d4      	bne.n	80093be <HAL_UART_RxCpltCallback+0x3c2>
 8009414:	2900      	cmp	r1, #0
 8009416:	d1d2      	bne.n	80093be <HAL_UART_RxCpltCallback+0x3c2>
 8009418:	4b29      	ldr	r3, [pc, #164]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 800941a:	2201      	movs	r2, #1
 800941c:	625a      	str	r2, [r3, #36]	; 0x24
 800941e:	2200      	movs	r2, #0
 8009420:	611a      	str	r2, [r3, #16]
 8009422:	60da      	str	r2, [r3, #12]
 8009424:	4924      	ldr	r1, [pc, #144]	; (80094b8 <HAL_UART_RxCpltCallback+0x4bc>)
 8009426:	784a      	ldrb	r2, [r1, #1]
 8009428:	2008      	movs	r0, #8
 800942a:	4302      	orrs	r2, r0
 800942c:	704a      	strb	r2, [r1, #1]
 800942e:	4a27      	ldr	r2, [pc, #156]	; (80094cc <HAL_UART_RxCpltCallback+0x4d0>)
 8009430:	21a0      	movs	r1, #160	; 0xa0
 8009432:	7011      	strb	r1, [r2, #0]
 8009434:	7051      	strb	r1, [r2, #1]
 8009436:	2202      	movs	r2, #2
 8009438:	609a      	str	r2, [r3, #8]
 800943a:	2100      	movs	r1, #0
 800943c:	4821      	ldr	r0, [pc, #132]	; (80094c4 <HAL_UART_RxCpltCallback+0x4c8>)
 800943e:	f001 fe44 	bl	800b0ca <memset>
 8009442:	e7bc      	b.n	80093be <HAL_UART_RxCpltCallback+0x3c2>
 8009444:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <HAL_UART_RxCpltCallback+0x4dc>)
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	2b0a      	cmp	r3, #10
 800944a:	d1c6      	bne.n	80093da <HAL_UART_RxCpltCallback+0x3de>
 800944c:	4b1c      	ldr	r3, [pc, #112]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 800944e:	2200      	movs	r2, #0
 8009450:	625a      	str	r2, [r3, #36]	; 0x24
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	611a      	str	r2, [r3, #16]
 8009456:	60da      	str	r2, [r3, #12]
 8009458:	4b17      	ldr	r3, [pc, #92]	; (80094b8 <HAL_UART_RxCpltCallback+0x4bc>)
 800945a:	781a      	ldrb	r2, [r3, #0]
 800945c:	2102      	movs	r1, #2
 800945e:	430a      	orrs	r2, r1
 8009460:	701a      	strb	r2, [r3, #0]
 8009462:	785a      	ldrb	r2, [r3, #1]
 8009464:	2108      	movs	r1, #8
 8009466:	438a      	bics	r2, r1
 8009468:	705a      	strb	r2, [r3, #1]
 800946a:	e7b6      	b.n	80093da <HAL_UART_RxCpltCallback+0x3de>
 800946c:	2206      	movs	r2, #6
 800946e:	2100      	movs	r1, #0
 8009470:	481a      	ldr	r0, [pc, #104]	; (80094dc <HAL_UART_RxCpltCallback+0x4e0>)
 8009472:	f001 fe2a 	bl	800b0ca <memset>
 8009476:	4b12      	ldr	r3, [pc, #72]	; (80094c0 <HAL_UART_RxCpltCallback+0x4c4>)
 8009478:	2200      	movs	r2, #0
 800947a:	619a      	str	r2, [r3, #24]
 800947c:	4a0e      	ldr	r2, [pc, #56]	; (80094b8 <HAL_UART_RxCpltCallback+0x4bc>)
 800947e:	7853      	ldrb	r3, [r2, #1]
 8009480:	2110      	movs	r1, #16
 8009482:	430b      	orrs	r3, r1
 8009484:	7053      	strb	r3, [r2, #1]
 8009486:	e7aa      	b.n	80093de <HAL_UART_RxCpltCallback+0x3e2>
 8009488:	0013      	movs	r3, r2
 800948a:	2200      	movs	r2, #0
 800948c:	619a      	str	r2, [r3, #24]
 800948e:	e7ae      	b.n	80093ee <HAL_UART_RxCpltCallback+0x3f2>
 8009490:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <HAL_UART_RxCpltCallback+0x4bc>)
 8009492:	785a      	ldrb	r2, [r3, #1]
 8009494:	2318      	movs	r3, #24
 8009496:	4013      	ands	r3, r2
 8009498:	2b10      	cmp	r3, #16
 800949a:	d1aa      	bne.n	80093f2 <HAL_UART_RxCpltCallback+0x3f6>
 800949c:	4b06      	ldr	r3, [pc, #24]	; (80094b8 <HAL_UART_RxCpltCallback+0x4bc>)
 800949e:	789a      	ldrb	r2, [r3, #2]
 80094a0:	2140      	movs	r1, #64	; 0x40
 80094a2:	430a      	orrs	r2, r1
 80094a4:	709a      	strb	r2, [r3, #2]
 80094a6:	79da      	ldrb	r2, [r3, #7]
 80094a8:	2102      	movs	r1, #2
 80094aa:	430a      	orrs	r2, r1
 80094ac:	71da      	strb	r2, [r3, #7]
 80094ae:	785a      	ldrb	r2, [r3, #1]
 80094b0:	2110      	movs	r1, #16
 80094b2:	438a      	bics	r2, r1
 80094b4:	705a      	strb	r2, [r3, #1]
 80094b6:	e79c      	b.n	80093f2 <HAL_UART_RxCpltCallback+0x3f6>
 80094b8:	2000032c 	.word	0x2000032c
 80094bc:	200047d0 	.word	0x200047d0
 80094c0:	2000020c 	.word	0x2000020c
 80094c4:	2000473c 	.word	0x2000473c
 80094c8:	000041a2 	.word	0x000041a2
 80094cc:	20000500 	.word	0x20000500
 80094d0:	ffffbe5d 	.word	0xffffbe5d
 80094d4:	000041a4 	.word	0x000041a4
 80094d8:	20004734 	.word	0x20004734
 80094dc:	2000472c 	.word	0x2000472c
 80094e0:	200003c4 	.word	0x200003c4
 80094e4:	200047d4 	.word	0x200047d4

080094e8 <HAL_TIM_PeriodElapsedCallback>:
 80094e8:	b510      	push	{r4, lr}
 80094ea:	6802      	ldr	r2, [r0, #0]
 80094ec:	4b36      	ldr	r3, [pc, #216]	; (80095c8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d000      	beq.n	80094f4 <HAL_TIM_PeriodElapsedCallback+0xc>
 80094f2:	bd10      	pop	{r4, pc}
 80094f4:	4b35      	ldr	r3, [pc, #212]	; (80095cc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d03a      	beq.n	8009572 <HAL_TIM_PeriodElapsedCallback+0x8a>
 80094fc:	4b34      	ldr	r3, [pc, #208]	; (80095d0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d039      	beq.n	8009578 <HAL_TIM_PeriodElapsedCallback+0x90>
 8009504:	4b33      	ldr	r3, [pc, #204]	; (80095d4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d038      	beq.n	800957e <HAL_TIM_PeriodElapsedCallback+0x96>
 800950c:	4b32      	ldr	r3, [pc, #200]	; (80095d8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d037      	beq.n	8009584 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8009514:	4b31      	ldr	r3, [pc, #196]	; (80095dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d036      	beq.n	800958a <HAL_TIM_PeriodElapsedCallback+0xa2>
 800951c:	4b30      	ldr	r3, [pc, #192]	; (80095e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d035      	beq.n	8009590 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8009524:	4b2f      	ldr	r3, [pc, #188]	; (80095e4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d034      	beq.n	8009596 <HAL_TIM_PeriodElapsedCallback+0xae>
 800952c:	4b2e      	ldr	r3, [pc, #184]	; (80095e8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d033      	beq.n	800959c <HAL_TIM_PeriodElapsedCallback+0xb4>
 8009534:	4b2d      	ldr	r3, [pc, #180]	; (80095ec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d032      	beq.n	80095a2 <HAL_TIM_PeriodElapsedCallback+0xba>
 800953c:	4b2c      	ldr	r3, [pc, #176]	; (80095f0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d031      	beq.n	80095a8 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8009544:	4b2b      	ldr	r3, [pc, #172]	; (80095f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d030      	beq.n	80095ae <HAL_TIM_PeriodElapsedCallback+0xc6>
 800954c:	4b2a      	ldr	r3, [pc, #168]	; (80095f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d02f      	beq.n	80095b4 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8009554:	4b29      	ldr	r3, [pc, #164]	; (80095fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d02e      	beq.n	80095ba <HAL_TIM_PeriodElapsedCallback+0xd2>
 800955c:	4b28      	ldr	r3, [pc, #160]	; (8009600 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d02d      	beq.n	80095c0 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8009564:	4b27      	ldr	r3, [pc, #156]	; (8009604 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d1c2      	bne.n	80094f2 <HAL_TIM_PeriodElapsedCallback+0xa>
 800956c:	f7fe ff22 	bl	80083b4 <Execute_Buzzer_Melody2>
 8009570:	e7bf      	b.n	80094f2 <HAL_TIM_PeriodElapsedCallback+0xa>
 8009572:	f7fe fcc1 	bl	8007ef8 <Execute_Buzzer_Beep1>
 8009576:	e7c1      	b.n	80094fc <HAL_TIM_PeriodElapsedCallback+0x14>
 8009578:	f7fe fec8 	bl	800830c <Execute_Buzzer_Beep2>
 800957c:	e7c2      	b.n	8009504 <HAL_TIM_PeriodElapsedCallback+0x1c>
 800957e:	f7ff fbf3 	bl	8008d68 <Execute_Buzzer_Beep3>
 8009582:	e7c3      	b.n	800950c <HAL_TIM_PeriodElapsedCallback+0x24>
 8009584:	f7ff fc6a 	bl	8008e5c <Execute_Buzzer_Beep4>
 8009588:	e7c4      	b.n	8009514 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800958a:	f7fe fced 	bl	8007f68 <Execute_Buzzer_Tune1>
 800958e:	e7c5      	b.n	800951c <HAL_TIM_PeriodElapsedCallback+0x34>
 8009590:	f7fe fdd0 	bl	8008134 <Execute_Buzzer_Tune2>
 8009594:	e7c6      	b.n	8009524 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8009596:	f7ff f88b 	bl	80086b0 <Execute_Buzzer_Tune3>
 800959a:	e7c7      	b.n	800952c <HAL_TIM_PeriodElapsedCallback+0x44>
 800959c:	f7fe fbba 	bl	8007d14 <Execute_Buzzer_Tune4>
 80095a0:	e7c8      	b.n	8009534 <HAL_TIM_PeriodElapsedCallback+0x4c>
 80095a2:	f7ff f99f 	bl	80088e4 <Execute_Buzzer_Tune5>
 80095a6:	e7c9      	b.n	800953c <HAL_TIM_PeriodElapsedCallback+0x54>
 80095a8:	f7ff fac6 	bl	8008b38 <Execute_Buzzer_Tune6>
 80095ac:	e7ca      	b.n	8009544 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80095ae:	f7ff fb05 	bl	8008bbc <Execute_Buzzer_Tune7>
 80095b2:	e7cb      	b.n	800954c <HAL_TIM_PeriodElapsedCallback+0x64>
 80095b4:	f7ff fb68 	bl	8008c88 <Execute_Buzzer_Tune8>
 80095b8:	e7cc      	b.n	8009554 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80095ba:	f7fe fc2b 	bl	8007e14 <Execute_Buzzer_Tune9>
 80095be:	e7cd      	b.n	800955c <HAL_TIM_PeriodElapsedCallback+0x74>
 80095c0:	f7fe fe18 	bl	80081f4 <Execute_Buzzer_Melody1>
 80095c4:	e7ce      	b.n	8009564 <HAL_TIM_PeriodElapsedCallback+0x7c>
 80095c6:	46c0      	nop			; (mov r8, r8)
 80095c8:	40001000 	.word	0x40001000
 80095cc:	200001fc 	.word	0x200001fc
 80095d0:	20000202 	.word	0x20000202
 80095d4:	20000209 	.word	0x20000209
 80095d8:	2000020a 	.word	0x2000020a
 80095dc:	200001fd 	.word	0x200001fd
 80095e0:	20000200 	.word	0x20000200
 80095e4:	20000204 	.word	0x20000204
 80095e8:	200001f4 	.word	0x200001f4
 80095ec:	20000205 	.word	0x20000205
 80095f0:	20000206 	.word	0x20000206
 80095f4:	20000207 	.word	0x20000207
 80095f8:	20000208 	.word	0x20000208
 80095fc:	200001fb 	.word	0x200001fb
 8009600:	20000201 	.word	0x20000201
 8009604:	20000203 	.word	0x20000203

08009608 <UART1_Transmit>:
 8009608:	b510      	push	{r4, lr}
 800960a:	b28a      	uxth	r2, r1
 800960c:	4c05      	ldr	r4, [pc, #20]	; (8009624 <UART1_Transmit+0x1c>)
 800960e:	23ff      	movs	r3, #255	; 0xff
 8009610:	0001      	movs	r1, r0
 8009612:	0020      	movs	r0, r4
 8009614:	f7fc f81c 	bl	8005650 <HAL_UART_Transmit>
 8009618:	2201      	movs	r2, #1
 800961a:	4903      	ldr	r1, [pc, #12]	; (8009628 <UART1_Transmit+0x20>)
 800961c:	0020      	movs	r0, r4
 800961e:	f7fc f973 	bl	8005908 <HAL_UART_Receive_IT>
 8009622:	bd10      	pop	{r4, pc}
 8009624:	200003c4 	.word	0x200003c4
 8009628:	200047d0 	.word	0x200047d0

0800962c <LP_UART1_Transmit>:
 800962c:	b510      	push	{r4, lr}
 800962e:	b28a      	uxth	r2, r1
 8009630:	4c05      	ldr	r4, [pc, #20]	; (8009648 <LP_UART1_Transmit+0x1c>)
 8009632:	23ff      	movs	r3, #255	; 0xff
 8009634:	0001      	movs	r1, r0
 8009636:	0020      	movs	r0, r4
 8009638:	f7fc f80a 	bl	8005650 <HAL_UART_Transmit>
 800963c:	2201      	movs	r2, #1
 800963e:	4903      	ldr	r1, [pc, #12]	; (800964c <LP_UART1_Transmit+0x20>)
 8009640:	0020      	movs	r0, r4
 8009642:	f7fc f961 	bl	8005908 <HAL_UART_Receive_IT>
 8009646:	bd10      	pop	{r4, pc}
 8009648:	200046a4 	.word	0x200046a4
 800964c:	200047d0 	.word	0x200047d0

08009650 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8009650:	b500      	push	{lr}
 8009652:	b083      	sub	sp, #12

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009654:	2208      	movs	r2, #8
 8009656:	2100      	movs	r1, #0
 8009658:	4668      	mov	r0, sp
 800965a:	f001 fd36 	bl	800b0ca <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800965e:	481b      	ldr	r0, [pc, #108]	; (80096cc <MX_ADC_Init+0x7c>)
 8009660:	4b1b      	ldr	r3, [pc, #108]	; (80096d0 <MX_ADC_Init+0x80>)
 8009662:	6003      	str	r3, [r0, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8009664:	2300      	movs	r3, #0
 8009666:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8009668:	2280      	movs	r2, #128	; 0x80
 800966a:	02d2      	lsls	r2, r2, #11
 800966c:	6042      	str	r2, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800966e:	6083      	str	r3, [r0, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8009670:	2207      	movs	r2, #7
 8009672:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8009674:	3a06      	subs	r2, #6
 8009676:	6102      	str	r2, [r0, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009678:	60c3      	str	r3, [r0, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800967a:	2120      	movs	r1, #32
 800967c:	5442      	strb	r2, [r0, r1]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800967e:	3101      	adds	r1, #1
 8009680:	5443      	strb	r3, [r0, r1]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009682:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009684:	21c2      	movs	r1, #194	; 0xc2
 8009686:	31ff      	adds	r1, #255	; 0xff
 8009688:	6241      	str	r1, [r0, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800968a:	3996      	subs	r1, #150	; 0x96
 800968c:	39ff      	subs	r1, #255	; 0xff
 800968e:	5442      	strb	r2, [r0, r1]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009690:	3203      	adds	r2, #3
 8009692:	6142      	str	r2, [r0, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009694:	6303      	str	r3, [r0, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8009696:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8009698:	6343      	str	r3, [r0, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800969a:	61c3      	str	r3, [r0, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800969c:	f7f8 ff2c 	bl	80024f8 <HAL_ADC_Init>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d10c      	bne.n	80096be <MX_ADC_Init+0x6e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80096a4:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <MX_ADC_Init+0x84>)
 80096a6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80096a8:	2380      	movs	r3, #128	; 0x80
 80096aa:	015b      	lsls	r3, r3, #5
 80096ac:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80096ae:	4669      	mov	r1, sp
 80096b0:	4806      	ldr	r0, [pc, #24]	; (80096cc <MX_ADC_Init+0x7c>)
 80096b2:	f7f9 f971 	bl	8002998 <HAL_ADC_ConfigChannel>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d104      	bne.n	80096c4 <MX_ADC_Init+0x74>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80096ba:	b003      	add	sp, #12
 80096bc:	bd00      	pop	{pc}
    Error_Handler();
 80096be:	f000 ff51 	bl	800a564 <Error_Handler>
 80096c2:	e7ef      	b.n	80096a4 <MX_ADC_Init+0x54>
    Error_Handler();
 80096c4:	f000 ff4e 	bl	800a564 <Error_Handler>
}
 80096c8:	e7f7      	b.n	80096ba <MX_ADC_Init+0x6a>
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	20004828 	.word	0x20004828
 80096d0:	40012400 	.word	0x40012400
 80096d4:	10000010 	.word	0x10000010

080096d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096de:	2214      	movs	r2, #20
 80096e0:	2100      	movs	r1, #0
 80096e2:	a801      	add	r0, sp, #4
 80096e4:	f001 fcf1 	bl	800b0ca <memset>
  if(adcHandle->Instance==ADC1)
 80096e8:	4b20      	ldr	r3, [pc, #128]	; (800976c <HAL_ADC_MspInit+0x94>)
 80096ea:	6822      	ldr	r2, [r4, #0]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d001      	beq.n	80096f4 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80096f0:	b006      	add	sp, #24
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80096f4:	4b1e      	ldr	r3, [pc, #120]	; (8009770 <HAL_ADC_MspInit+0x98>)
 80096f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096f8:	2680      	movs	r6, #128	; 0x80
 80096fa:	00b6      	lsls	r6, r6, #2
 80096fc:	4332      	orrs	r2, r6
 80096fe:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009702:	2201      	movs	r2, #1
 8009704:	4311      	orrs	r1, r2
 8009706:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	401a      	ands	r2, r3
 800970c:	9200      	str	r2, [sp, #0]
 800970e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = Battery_Status_Pin;
 8009710:	2310      	movs	r3, #16
 8009712:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009714:	3b0d      	subs	r3, #13
 8009716:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009718:	2500      	movs	r5, #0
 800971a:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(Battery_Status_GPIO_Port, &GPIO_InitStruct);
 800971c:	20a0      	movs	r0, #160	; 0xa0
 800971e:	a901      	add	r1, sp, #4
 8009720:	05c0      	lsls	r0, r0, #23
 8009722:	f7f9 fbe7 	bl	8002ef4 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8009726:	4813      	ldr	r0, [pc, #76]	; (8009774 <HAL_ADC_MspInit+0x9c>)
 8009728:	4b13      	ldr	r3, [pc, #76]	; (8009778 <HAL_ADC_MspInit+0xa0>)
 800972a:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800972c:	6045      	str	r5, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800972e:	6085      	str	r5, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8009730:	60c5      	str	r5, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8009732:	2380      	movs	r3, #128	; 0x80
 8009734:	6103      	str	r3, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009736:	6146      	str	r6, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009738:	2380      	movs	r3, #128	; 0x80
 800973a:	011b      	lsls	r3, r3, #4
 800973c:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800973e:	2320      	movs	r3, #32
 8009740:	61c3      	str	r3, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8009742:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8009744:	f7f9 fa70 	bl	8002c28 <HAL_DMA_Init>
 8009748:	2800      	cmp	r0, #0
 800974a:	d10b      	bne.n	8009764 <HAL_ADC_MspInit+0x8c>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <HAL_ADC_MspInit+0x9c>)
 800974e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009750:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8009752:	2200      	movs	r2, #0
 8009754:	2100      	movs	r1, #0
 8009756:	200c      	movs	r0, #12
 8009758:	f7f9 f9e6 	bl	8002b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800975c:	200c      	movs	r0, #12
 800975e:	f7f9 fa13 	bl	8002b88 <HAL_NVIC_EnableIRQ>
}
 8009762:	e7c5      	b.n	80096f0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8009764:	f000 fefe 	bl	800a564 <Error_Handler>
 8009768:	e7f0      	b.n	800974c <HAL_ADC_MspInit+0x74>
 800976a:	46c0      	nop			; (mov r8, r8)
 800976c:	40012400 	.word	0x40012400
 8009770:	40021000 	.word	0x40021000
 8009774:	200047e0 	.word	0x200047e0
 8009778:	40020008 	.word	0x40020008

0800977c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800977c:	b510      	push	{r4, lr}
 800977e:	0004      	movs	r4, r0

  if(adcHandle->Instance==ADC1)
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <HAL_ADC_MspDeInit+0x30>)
 8009782:	6802      	ldr	r2, [r0, #0]
 8009784:	429a      	cmp	r2, r3
 8009786:	d000      	beq.n	800978a <HAL_ADC_MspDeInit+0xe>
    HAL_NVIC_DisableIRQ(ADC1_COMP_IRQn);
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8009788:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_DISABLE();
 800978a:	4a09      	ldr	r2, [pc, #36]	; (80097b0 <HAL_ADC_MspDeInit+0x34>)
 800978c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800978e:	4909      	ldr	r1, [pc, #36]	; (80097b4 <HAL_ADC_MspDeInit+0x38>)
 8009790:	400b      	ands	r3, r1
 8009792:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(Battery_Status_GPIO_Port, Battery_Status_Pin);
 8009794:	20a0      	movs	r0, #160	; 0xa0
 8009796:	2110      	movs	r1, #16
 8009798:	05c0      	lsls	r0, r0, #23
 800979a:	f7f9 fc79 	bl	8003090 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800979e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80097a0:	f7f9 fa8e 	bl	8002cc0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(ADC1_COMP_IRQn);
 80097a4:	200c      	movs	r0, #12
 80097a6:	f7f9 f9fb 	bl	8002ba0 <HAL_NVIC_DisableIRQ>
}
 80097aa:	e7ed      	b.n	8009788 <HAL_ADC_MspDeInit+0xc>
 80097ac:	40012400 	.word	0x40012400
 80097b0:	40021000 	.word	0x40021000
 80097b4:	fffffdff 	.word	0xfffffdff

080097b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80097b8:	b500      	push	{lr}
 80097ba:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80097bc:	4a09      	ldr	r2, [pc, #36]	; (80097e4 <MX_DMA_Init+0x2c>)
 80097be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80097c0:	2301      	movs	r3, #1
 80097c2:	4319      	orrs	r1, r3
 80097c4:	6311      	str	r1, [r2, #48]	; 0x30
 80097c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80097c8:	4013      	ands	r3, r2
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80097ce:	2200      	movs	r2, #0
 80097d0:	2100      	movs	r1, #0
 80097d2:	2009      	movs	r0, #9
 80097d4:	f7f9 f9a8 	bl	8002b28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80097d8:	2009      	movs	r0, #9
 80097da:	f7f9 f9d5 	bl	8002b88 <HAL_NVIC_EnableIRQ>

}
 80097de:	b003      	add	sp, #12
 80097e0:	bd00      	pop	{pc}
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	40021000 	.word	0x40021000

080097e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80097e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ea:	46ce      	mov	lr, r9
 80097ec:	4647      	mov	r7, r8
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097f2:	2214      	movs	r2, #20
 80097f4:	2100      	movs	r1, #0
 80097f6:	a805      	add	r0, sp, #20
 80097f8:	f001 fc67 	bl	800b0ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80097fc:	4b4d      	ldr	r3, [pc, #308]	; (8009934 <MX_GPIO_Init+0x14c>)
 80097fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009800:	2204      	movs	r2, #4
 8009802:	4311      	orrs	r1, r2
 8009804:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009806:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009808:	400a      	ands	r2, r1
 800980a:	9201      	str	r2, [sp, #4]
 800980c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800980e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009810:	2280      	movs	r2, #128	; 0x80
 8009812:	4311      	orrs	r1, r2
 8009814:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009818:	400a      	ands	r2, r1
 800981a:	9202      	str	r2, [sp, #8]
 800981c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009820:	2601      	movs	r6, #1
 8009822:	4332      	orrs	r2, r6
 8009824:	62da      	str	r2, [r3, #44]	; 0x2c
 8009826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009828:	4032      	ands	r2, r6
 800982a:	9203      	str	r2, [sp, #12]
 800982c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800982e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009830:	2202      	movs	r2, #2
 8009832:	4311      	orrs	r1, r2
 8009834:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	401a      	ands	r2, r3
 800983a:	9204      	str	r2, [sp, #16]
 800983c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
 // HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOA, Ble_Mosfet_Pin, GPIO_PIN_SET);
 800983e:	27a0      	movs	r7, #160	; 0xa0
 8009840:	05ff      	lsls	r7, r7, #23
 8009842:	2201      	movs	r2, #1
 8009844:	2180      	movs	r1, #128	; 0x80
 8009846:	0038      	movs	r0, r7
 8009848:	f7f9 fcb3 	bl	80031b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MCU_Mosfet_Pin , GPIO_PIN_SET);
 800984c:	2480      	movs	r4, #128	; 0x80
 800984e:	01a4      	lsls	r4, r4, #6
 8009850:	4d39      	ldr	r5, [pc, #228]	; (8009938 <MX_GPIO_Init+0x150>)
 8009852:	2201      	movs	r2, #1
 8009854:	0021      	movs	r1, r4
 8009856:	0028      	movs	r0, r5
 8009858:	f7f9 fcab 	bl	80031b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Battery_Indication_LED_Pin, GPIO_PIN_RESET);
 800985c:	2380      	movs	r3, #128	; 0x80
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	4699      	mov	r9, r3
 8009862:	2200      	movs	r2, #0
 8009864:	0019      	movs	r1, r3
 8009866:	0028      	movs	r0, r5
 8009868:	f7f9 fca3 	bl	80031b2 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_Mosfet_Pin|Ble_Mosfet_Pin|RFID_Mosfet_Control_Pin
 800986c:	2200      	movs	r2, #0
 800986e:	4933      	ldr	r1, [pc, #204]	; (800993c <MX_GPIO_Init+0x154>)
 8009870:	0038      	movs	r0, r7
 8009872:	f7f9 fc9e 	bl	80031b2 <HAL_GPIO_WritePin>
                          |ePD1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_EN_Pin|ePD1_RESET_Pin|ePD1_D_C_Pin
 8009876:	2200      	movs	r2, #0
 8009878:	4931      	ldr	r1, [pc, #196]	; (8009940 <MX_GPIO_Init+0x158>)
 800987a:	0028      	movs	r0, r5
 800987c:	f7f9 fc99 	bl	80031b2 <HAL_GPIO_WritePin>
                          |Vibrator_motor_Pin|RFID_S_S_Pin|ePD1_SCK_Pin|ePD1_MOSI_Pin
                          , GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8009880:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009882:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009884:	2400      	movs	r4, #0
 8009886:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009888:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800988a:	a905      	add	r1, sp, #20
 800988c:	482d      	ldr	r0, [pc, #180]	; (8009944 <MX_GPIO_Init+0x15c>)
 800988e:	f7f9 fb31 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009892:	2303      	movs	r3, #3
 8009894:	4698      	mov	r8, r3
 8009896:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009898:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800989a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800989c:	a905      	add	r1, sp, #20
 800989e:	482a      	ldr	r0, [pc, #168]	; (8009948 <MX_GPIO_Init+0x160>)
 80098a0:	f7f9 fb28 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Ble_control_Pin|LCD_Mosfet_Pin|Ble_Mosfet_Pin|RFID_Mosfet_Control_Pin
 80098a4:	4b29      	ldr	r3, [pc, #164]	; (800994c <MX_GPIO_Init+0x164>)
 80098a6:	9305      	str	r3, [sp, #20]
                          |ePD1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098a8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098aa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098ac:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098ae:	a905      	add	r1, sp, #20
 80098b0:	0038      	movs	r0, r7
 80098b2:	f7f9 fb1f 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Buzzer_EN_Pin|ePD1_RESET_Pin|ePD1_D_C_Pin|MCU_Mosfet_Pin
 80098b6:	4b26      	ldr	r3, [pc, #152]	; (8009950 <MX_GPIO_Init+0x168>)
 80098b8:	9305      	str	r3, [sp, #20]
                          |Vibrator_motor_Pin|RFID_S_S_Pin|ePD1_SCK_Pin|ePD1_MOSI_Pin
                          |Battery_Indication_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098ba:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098bc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098be:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098c0:	a905      	add	r1, sp, #20
 80098c2:	0028      	movs	r0, r5
 80098c4:	f7f9 fb16 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 80098c8:	2380      	movs	r3, #128	; 0x80
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80098ce:	2388      	movs	r3, #136	; 0x88
 80098d0:	035b      	lsls	r3, r3, #13
 80098d2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098d4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 80098d6:	a905      	add	r1, sp, #20
 80098d8:	0028      	movs	r0, r5
 80098da:	f7f9 fb0b 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Status_Pin;
 80098de:	2380      	movs	r3, #128	; 0x80
 80098e0:	015b      	lsls	r3, r3, #5
 80098e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80098e4:	2384      	movs	r3, #132	; 0x84
 80098e6:	039b      	lsls	r3, r3, #14
 80098e8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ea:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(Button_Status_GPIO_Port, &GPIO_InitStruct);
 80098ec:	a905      	add	r1, sp, #20
 80098ee:	0028      	movs	r0, r5
 80098f0:	f7f9 fb00 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ePD1_BUSY_Pin;
 80098f4:	464b      	mov	r3, r9
 80098f6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098f8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098fa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ePD1_BUSY_GPIO_Port, &GPIO_InitStruct);
 80098fc:	a905      	add	r1, sp, #20
 80098fe:	0038      	movs	r0, r7
 8009900:	f7f9 faf8 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8009904:	23b4      	movs	r3, #180	; 0xb4
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800990a:	4643      	mov	r3, r8
 800990c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800990e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009910:	a905      	add	r1, sp, #20
 8009912:	0028      	movs	r0, r5
 8009914:	f7f9 faee 	bl	8002ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009918:	2200      	movs	r2, #0
 800991a:	2100      	movs	r1, #0
 800991c:	2007      	movs	r0, #7
 800991e:	f7f9 f903 	bl	8002b28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009922:	2007      	movs	r0, #7
 8009924:	f7f9 f930 	bl	8002b88 <HAL_NVIC_EnableIRQ>

}
 8009928:	b00b      	add	sp, #44	; 0x2c
 800992a:	bcc0      	pop	{r6, r7}
 800992c:	46b9      	mov	r9, r7
 800992e:	46b0      	mov	r8, r6
 8009930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	40021000 	.word	0x40021000
 8009938:	50000400 	.word	0x50000400
 800993c:	00008882 	.word	0x00008882
 8009940:	0000c82e 	.word	0x0000c82e
 8009944:	50000800 	.word	0x50000800
 8009948:	50001c00 	.word	0x50001c00
 800994c:	00008883 	.word	0x00008883
 8009950:	0000e92e 	.word	0x0000e92e

08009954 <MX_GPIO_Init1>:

/* USER CODE BEGIN 2 */
void MX_GPIO_Init1(void)
{
 8009954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009956:	46ce      	mov	lr, r9
 8009958:	4647      	mov	r7, r8
 800995a:	b580      	push	{r7, lr}
 800995c:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800995e:	2214      	movs	r2, #20
 8009960:	2100      	movs	r1, #0
 8009962:	a805      	add	r0, sp, #20
 8009964:	f001 fbb1 	bl	800b0ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009968:	4b4d      	ldr	r3, [pc, #308]	; (8009aa0 <MX_GPIO_Init1+0x14c>)
 800996a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800996c:	2204      	movs	r2, #4
 800996e:	4311      	orrs	r1, r2
 8009970:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009972:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009974:	400a      	ands	r2, r1
 8009976:	9201      	str	r2, [sp, #4]
 8009978:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800997a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800997c:	2280      	movs	r2, #128	; 0x80
 800997e:	4311      	orrs	r1, r2
 8009980:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009982:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009984:	400a      	ands	r2, r1
 8009986:	9202      	str	r2, [sp, #8]
 8009988:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800998a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998c:	2601      	movs	r6, #1
 800998e:	4332      	orrs	r2, r6
 8009990:	62da      	str	r2, [r3, #44]	; 0x2c
 8009992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009994:	4032      	ands	r2, r6
 8009996:	9203      	str	r2, [sp, #12]
 8009998:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800999a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800999c:	2202      	movs	r2, #2
 800999e:	4311      	orrs	r1, r2
 80099a0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	401a      	ands	r2, r3
 80099a6:	9204      	str	r2, [sp, #16]
 80099a8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
 // HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOA, Ble_Mosfet_Pin, GPIO_PIN_RESET);
 80099aa:	27a0      	movs	r7, #160	; 0xa0
 80099ac:	05ff      	lsls	r7, r7, #23
 80099ae:	2200      	movs	r2, #0
 80099b0:	2180      	movs	r1, #128	; 0x80
 80099b2:	0038      	movs	r0, r7
 80099b4:	f7f9 fbfd 	bl	80031b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MCU_Mosfet_Pin , GPIO_PIN_RESET);
 80099b8:	2480      	movs	r4, #128	; 0x80
 80099ba:	01a4      	lsls	r4, r4, #6
 80099bc:	4d39      	ldr	r5, [pc, #228]	; (8009aa4 <MX_GPIO_Init1+0x150>)
 80099be:	2200      	movs	r2, #0
 80099c0:	0021      	movs	r1, r4
 80099c2:	0028      	movs	r0, r5
 80099c4:	f7f9 fbf5 	bl	80031b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Battery_Indication_LED_Pin, GPIO_PIN_SET);
 80099c8:	2380      	movs	r3, #128	; 0x80
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	4699      	mov	r9, r3
 80099ce:	2201      	movs	r2, #1
 80099d0:	0019      	movs	r1, r3
 80099d2:	0028      	movs	r0, r5
 80099d4:	f7f9 fbed 	bl	80031b2 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_Mosfet_Pin|Ble_Mosfet_Pin|RFID_Mosfet_Control_Pin
 80099d8:	2200      	movs	r2, #0
 80099da:	4933      	ldr	r1, [pc, #204]	; (8009aa8 <MX_GPIO_Init1+0x154>)
 80099dc:	0038      	movs	r0, r7
 80099de:	f7f9 fbe8 	bl	80031b2 <HAL_GPIO_WritePin>
                          |ePD1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_EN_Pin|ePD1_RESET_Pin|ePD1_D_C_Pin
 80099e2:	2200      	movs	r2, #0
 80099e4:	4931      	ldr	r1, [pc, #196]	; (8009aac <MX_GPIO_Init1+0x158>)
 80099e6:	0028      	movs	r0, r5
 80099e8:	f7f9 fbe3 	bl	80031b2 <HAL_GPIO_WritePin>
                          |Vibrator_motor_Pin|RFID_S_S_Pin|ePD1_SCK_Pin|ePD1_MOSI_Pin
                          , GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80099ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099ee:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f0:	2400      	movs	r4, #0
 80099f2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099f4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80099f6:	a905      	add	r1, sp, #20
 80099f8:	482d      	ldr	r0, [pc, #180]	; (8009ab0 <MX_GPIO_Init1+0x15c>)
 80099fa:	f7f9 fa7b 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80099fe:	2303      	movs	r3, #3
 8009a00:	4698      	mov	r8, r3
 8009a02:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009a04:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a06:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009a08:	a905      	add	r1, sp, #20
 8009a0a:	482a      	ldr	r0, [pc, #168]	; (8009ab4 <MX_GPIO_Init1+0x160>)
 8009a0c:	f7f9 fa72 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Ble_control_Pin|LCD_Mosfet_Pin|Ble_Mosfet_Pin|RFID_Mosfet_Control_Pin
 8009a10:	4b29      	ldr	r3, [pc, #164]	; (8009ab8 <MX_GPIO_Init1+0x164>)
 8009a12:	9305      	str	r3, [sp, #20]
                          |ePD1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a14:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a16:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a18:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a1a:	a905      	add	r1, sp, #20
 8009a1c:	0038      	movs	r0, r7
 8009a1e:	f7f9 fa69 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Buzzer_EN_Pin|ePD1_RESET_Pin|ePD1_D_C_Pin|MCU_Mosfet_Pin
 8009a22:	4b26      	ldr	r3, [pc, #152]	; (8009abc <MX_GPIO_Init1+0x168>)
 8009a24:	9305      	str	r3, [sp, #20]
                          |Vibrator_motor_Pin|RFID_S_S_Pin|ePD1_SCK_Pin|ePD1_MOSI_Pin
                          |Battery_Indication_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a26:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a28:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a2a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a2c:	a905      	add	r1, sp, #20
 8009a2e:	0028      	movs	r0, r5
 8009a30:	f7f9 fa60 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 8009a34:	2380      	movs	r3, #128	; 0x80
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009a3a:	2388      	movs	r3, #136	; 0x88
 8009a3c:	035b      	lsls	r3, r3, #13
 8009a3e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a40:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009a42:	a905      	add	r1, sp, #20
 8009a44:	0028      	movs	r0, r5
 8009a46:	f7f9 fa55 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Status_Pin;
 8009a4a:	2380      	movs	r3, #128	; 0x80
 8009a4c:	015b      	lsls	r3, r3, #5
 8009a4e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009a50:	2384      	movs	r3, #132	; 0x84
 8009a52:	039b      	lsls	r3, r3, #14
 8009a54:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a56:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(Button_Status_GPIO_Port, &GPIO_InitStruct);
 8009a58:	a905      	add	r1, sp, #20
 8009a5a:	0028      	movs	r0, r5
 8009a5c:	f7f9 fa4a 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ePD1_BUSY_Pin;
 8009a60:	464b      	mov	r3, r9
 8009a62:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a64:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a66:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ePD1_BUSY_GPIO_Port, &GPIO_InitStruct);
 8009a68:	a905      	add	r1, sp, #20
 8009a6a:	0038      	movs	r0, r7
 8009a6c:	f7f9 fa42 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8009a70:	23b4      	movs	r3, #180	; 0xb4
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009a76:	4643      	mov	r3, r8
 8009a78:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a7c:	a905      	add	r1, sp, #20
 8009a7e:	0028      	movs	r0, r5
 8009a80:	f7f9 fa38 	bl	8002ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	2007      	movs	r0, #7
 8009a8a:	f7f9 f84d 	bl	8002b28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009a8e:	2007      	movs	r0, #7
 8009a90:	f7f9 f87a 	bl	8002b88 <HAL_NVIC_EnableIRQ>

}
 8009a94:	b00b      	add	sp, #44	; 0x2c
 8009a96:	bcc0      	pop	{r6, r7}
 8009a98:	46b9      	mov	r9, r7
 8009a9a:	46b0      	mov	r8, r6
 8009a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a9e:	46c0      	nop			; (mov r8, r8)
 8009aa0:	40021000 	.word	0x40021000
 8009aa4:	50000400 	.word	0x50000400
 8009aa8:	00008882 	.word	0x00008882
 8009aac:	0000c82e 	.word	0x0000c82e
 8009ab0:	50000800 	.word	0x50000800
 8009ab4:	50001c00 	.word	0x50001c00
 8009ab8:	00008883 	.word	0x00008883
 8009abc:	0000e92e 	.word	0x0000e92e

08009ac0 <MX_GPIO_DeInit>:

void MX_GPIO_DeInit(void)
{
 8009ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ac2:	46d6      	mov	lr, sl
 8009ac4:	464f      	mov	r7, r9
 8009ac6:	4646      	mov	r6, r8
 8009ac8:	b5c0      	push	{r6, r7, lr}
 8009aca:	b08a      	sub	sp, #40	; 0x28

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009acc:	2214      	movs	r2, #20
 8009ace:	2100      	movs	r1, #0
 8009ad0:	a805      	add	r0, sp, #20
 8009ad2:	f001 fafa 	bl	800b0ca <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ad6:	4b4f      	ldr	r3, [pc, #316]	; (8009c14 <MX_GPIO_DeInit+0x154>)
 8009ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ada:	2204      	movs	r2, #4
 8009adc:	4311      	orrs	r1, r2
 8009ade:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ae2:	400a      	ands	r2, r1
 8009ae4:	9201      	str	r2, [sp, #4]
 8009ae6:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009aea:	2280      	movs	r2, #128	; 0x80
 8009aec:	4311      	orrs	r1, r2
 8009aee:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009af2:	400a      	ands	r2, r1
 8009af4:	9202      	str	r2, [sp, #8]
 8009af6:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afa:	2601      	movs	r6, #1
 8009afc:	4332      	orrs	r2, r6
 8009afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b02:	4032      	ands	r2, r6
 8009b04:	9203      	str	r2, [sp, #12]
 8009b06:	9a03      	ldr	r2, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	4311      	orrs	r1, r2
 8009b0e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	401a      	ands	r2, r3
 8009b14:	9204      	str	r2, [sp, #16]
 8009b16:	9b04      	ldr	r3, [sp, #16]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8009b18:	2480      	movs	r4, #128	; 0x80
 8009b1a:	01a4      	lsls	r4, r4, #6
 8009b1c:	4b3e      	ldr	r3, [pc, #248]	; (8009c18 <MX_GPIO_DeInit+0x158>)
 8009b1e:	4698      	mov	r8, r3
 8009b20:	2200      	movs	r2, #0
 8009b22:	0021      	movs	r1, r4
 8009b24:	0018      	movs	r0, r3
 8009b26:	f7f9 fb44 	bl	80031b2 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, Ble_control_Pin|LCD_Mosfet_Pin|Ble_Mosfet_Pin|RFID_Mosfet_Control_Pin
 8009b2a:	4b3c      	ldr	r3, [pc, #240]	; (8009c1c <MX_GPIO_DeInit+0x15c>)
 8009b2c:	469a      	mov	sl, r3
 8009b2e:	27a0      	movs	r7, #160	; 0xa0
 8009b30:	05ff      	lsls	r7, r7, #23
 8009b32:	2200      	movs	r2, #0
 8009b34:	0019      	movs	r1, r3
 8009b36:	0038      	movs	r0, r7
 8009b38:	f7f9 fb3b 	bl	80031b2 <HAL_GPIO_WritePin>
	                          |ePD1_CS_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, Buzzer_EN_Pin|ePD1_RESET_Pin|ePD1_D_C_Pin|MCU_Mosfet_Pin
 8009b3c:	4b38      	ldr	r3, [pc, #224]	; (8009c20 <MX_GPIO_DeInit+0x160>)
 8009b3e:	4699      	mov	r9, r3
 8009b40:	4d38      	ldr	r5, [pc, #224]	; (8009c24 <MX_GPIO_DeInit+0x164>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	0019      	movs	r1, r3
 8009b46:	0028      	movs	r0, r5
 8009b48:	f7f9 fb33 	bl	80031b2 <HAL_GPIO_WritePin>
	                          |Vibrator_motor_Pin|RFID_S_S_Pin|ePD1_SCK_Pin|ePD1_MOSI_Pin
	                          |Battery_Indication_LED_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = LED1_Pin;
 8009b4c:	9405      	str	r4, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b4e:	9606      	str	r6, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b50:	2400      	movs	r4, #0
 8009b52:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b54:	9408      	str	r4, [sp, #32]
	  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8009b56:	a905      	add	r1, sp, #20
 8009b58:	4640      	mov	r0, r8
 8009b5a:	f7f9 f9cb 	bl	8002ef4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PH0 PH1 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	4698      	mov	r8, r3
 8009b62:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009b64:	9306      	str	r3, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b66:	9407      	str	r4, [sp, #28]
	  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009b68:	a905      	add	r1, sp, #20
 8009b6a:	482f      	ldr	r0, [pc, #188]	; (8009c28 <MX_GPIO_DeInit+0x168>)
 8009b6c:	f7f9 f9c2 	bl	8002ef4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
	                           PAPin */
	  GPIO_InitStruct.Pin = Ble_control_Pin|LCD_Mosfet_Pin|Ble_Mosfet_Pin|RFID_Mosfet_Control_Pin
 8009b70:	4653      	mov	r3, sl
 8009b72:	9305      	str	r3, [sp, #20]
	                          |ePD1_CS_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b74:	9606      	str	r6, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b76:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b78:	9408      	str	r4, [sp, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b7a:	a905      	add	r1, sp, #20
 8009b7c:	0038      	movs	r0, r7
 8009b7e:	f7f9 f9b9 	bl	8002ef4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
	                           PBPin PBPin PBPin PBPin
	                           PBPin */
	  GPIO_InitStruct.Pin = Buzzer_EN_Pin|ePD1_RESET_Pin|ePD1_D_C_Pin|MCU_Mosfet_Pin
 8009b82:	464b      	mov	r3, r9
 8009b84:	9305      	str	r3, [sp, #20]
	                          |Vibrator_motor_Pin|RFID_S_S_Pin|ePD1_SCK_Pin|ePD1_MOSI_Pin
	                          |Battery_Indication_LED_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b86:	9606      	str	r6, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b88:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b8a:	9408      	str	r4, [sp, #32]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b8c:	a905      	add	r1, sp, #20
 8009b8e:	0028      	movs	r0, r5
 8009b90:	f7f9 f9b0 	bl	8002ef4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 8009b94:	2380      	movs	r3, #128	; 0x80
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009b9a:	2388      	movs	r3, #136	; 0x88
 8009b9c:	035b      	lsls	r3, r3, #13
 8009b9e:	9306      	str	r3, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba0:	9407      	str	r4, [sp, #28]
	  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009ba2:	a905      	add	r1, sp, #20
 8009ba4:	0028      	movs	r0, r5
 8009ba6:	f7f9 f9a5 	bl	8002ef4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = Button_Status_Pin;
 8009baa:	2380      	movs	r3, #128	; 0x80
 8009bac:	015b      	lsls	r3, r3, #5
 8009bae:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009bb0:	2384      	movs	r3, #132	; 0x84
 8009bb2:	039b      	lsls	r3, r3, #14
 8009bb4:	9306      	str	r3, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bb6:	9407      	str	r4, [sp, #28]
	  HAL_GPIO_Init(Button_Status_GPIO_Port, &GPIO_InitStruct);
 8009bb8:	a905      	add	r1, sp, #20
 8009bba:	0028      	movs	r0, r5
 8009bbc:	f7f9 f99a 	bl	8002ef4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = ePD1_BUSY_Pin;
 8009bc0:	2380      	movs	r3, #128	; 0x80
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bc6:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc8:	9407      	str	r4, [sp, #28]
	  HAL_GPIO_Init(ePD1_BUSY_GPIO_Port, &GPIO_InitStruct);
 8009bca:	a905      	add	r1, sp, #20
 8009bcc:	0038      	movs	r0, r7
 8009bce:	f7f9 f991 	bl	8002ef4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB4 PB6 PB7 PB9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8009bd2:	23b4      	movs	r3, #180	; 0xb4
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009bd8:	4643      	mov	r3, r8
 8009bda:	9306      	str	r3, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bdc:	9407      	str	r4, [sp, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bde:	a905      	add	r1, sp, #20
 8009be0:	0028      	movs	r0, r5
 8009be2:	f7f9 f987 	bl	8002ef4 <HAL_GPIO_Init>
	  /*Configure GPIO pins : PB4 PB6 PB7 PB9 */
	  GPIO_InitStruct.Pin =  Ble_control_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8009be6:	230d      	movs	r3, #13
 8009be8:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009bea:	4643      	mov	r3, r8
 8009bec:	9306      	str	r3, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bee:	9407      	str	r4, [sp, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bf0:	a905      	add	r1, sp, #20
 8009bf2:	0038      	movs	r0, r7
 8009bf4:	f7f9 f97e 	bl	8002ef4 <HAL_GPIO_Init>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	2007      	movs	r0, #7
 8009bfe:	f7f8 ff93 	bl	8002b28 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009c02:	2007      	movs	r0, #7
 8009c04:	f7f8 ffc0 	bl	8002b88 <HAL_NVIC_EnableIRQ>
}
 8009c08:	b00a      	add	sp, #40	; 0x28
 8009c0a:	bce0      	pop	{r5, r6, r7}
 8009c0c:	46ba      	mov	sl, r7
 8009c0e:	46b1      	mov	r9, r6
 8009c10:	46a8      	mov	r8, r5
 8009c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c14:	40021000 	.word	0x40021000
 8009c18:	50000800 	.word	0x50000800
 8009c1c:	00008883 	.word	0x00008883
 8009c20:	0000e92e 	.word	0x0000e92e
 8009c24:	50000400 	.word	0x50000400
 8009c28:	50001c00 	.word	0x50001c00

08009c2c <Disable_Peripheral_Clocks>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if(Test_Run_Stop2_Mode == 1)
void Disable_Peripheral_Clocks(void)
{
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8009c2c:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <Disable_Peripheral_Clocks+0x34>)
 8009c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c30:	2101      	movs	r1, #1
 8009c32:	438a      	bics	r2, r1
 8009c34:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8009c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c38:	3101      	adds	r1, #1
 8009c3a:	438a      	bics	r2, r1
 8009c3c:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8009c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c40:	3102      	adds	r1, #2
 8009c42:	438a      	bics	r2, r1
 8009c44:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8009c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c48:	317c      	adds	r1, #124	; 0x7c
 8009c4a:	438a      	bics	r2, r1
 8009c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOE_CLK_DISABLE();
 8009c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c50:	3970      	subs	r1, #112	; 0x70
 8009c52:	438a      	bics	r2, r1
 8009c54:	62da      	str	r2, [r3, #44]	; 0x2c

	__HAL_RCC_USART1_CLK_DISABLE();
 8009c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c58:	4902      	ldr	r1, [pc, #8]	; (8009c64 <Disable_Peripheral_Clocks+0x38>)
 8009c5a:	400a      	ands	r2, r1
 8009c5c:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_RCC_LPUART1_CLK_DISABLE();
}
 8009c5e:	4770      	bx	lr
 8009c60:	40021000 	.word	0x40021000
 8009c64:	ffffbfff 	.word	0xffffbfff

08009c68 <Enable_Peripheral_Clocks>:
 * @brief  Enable System peripheral clocks.
 * @param  None
 * @retval None
 */
void Enable_Peripheral_Clocks(void)
{
 8009c68:	b084      	sub	sp, #16
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009c6a:	4b16      	ldr	r3, [pc, #88]	; (8009cc4 <Enable_Peripheral_Clocks+0x5c>)
 8009c6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c6e:	2201      	movs	r2, #1
 8009c70:	4311      	orrs	r1, r2
 8009c72:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c76:	400a      	ands	r2, r1
 8009c78:	9200      	str	r2, [sp, #0]
 8009c7a:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009c7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c7e:	2202      	movs	r2, #2
 8009c80:	4311      	orrs	r1, r2
 8009c82:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009c84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c86:	400a      	ands	r2, r1
 8009c88:	9201      	str	r2, [sp, #4]
 8009c8a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009c8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c8e:	2204      	movs	r2, #4
 8009c90:	4311      	orrs	r1, r2
 8009c92:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c96:	400a      	ands	r2, r1
 8009c98:	9202      	str	r2, [sp, #8]
 8009c9a:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8009c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c9e:	2280      	movs	r2, #128	; 0x80
 8009ca0:	4311      	orrs	r1, r2
 8009ca2:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ca6:	400a      	ands	r2, r1
 8009ca8:	9203      	str	r2, [sp, #12]
 8009caa:	9a03      	ldr	r2, [sp, #12]

	__HAL_RCC_USART1_CLK_ENABLE();
 8009cac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009cae:	2280      	movs	r2, #128	; 0x80
 8009cb0:	01d2      	lsls	r2, r2, #7
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_LPUART1_CLK_ENABLE();
 8009cb6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009cb8:	2280      	movs	r2, #128	; 0x80
 8009cba:	02d2      	lsls	r2, r2, #11
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009cc0:	b004      	add	sp, #16
 8009cc2:	4770      	bx	lr
 8009cc4:	40021000 	.word	0x40021000

08009cc8 <Prepare_To_Enter_Stop2_Mode>:
 * @param  None
 * @retval None
 */

void Prepare_To_Enter_Stop2_Mode(void)
{
 8009cc8:	b510      	push	{r4, lr}
	flags.configure_ble_beacons = 0;
 8009cca:	4a0e      	ldr	r2, [pc, #56]	; (8009d04 <Prepare_To_Enter_Stop2_Mode+0x3c>)
 8009ccc:	7913      	ldrb	r3, [r2, #4]
 8009cce:	2101      	movs	r1, #1
 8009cd0:	438b      	bics	r3, r1
 8009cd2:	7113      	strb	r3, [r2, #4]
	HAL_UART_DeInit(&hlpuart1);
 8009cd4:	480c      	ldr	r0, [pc, #48]	; (8009d08 <Prepare_To_Enter_Stop2_Mode+0x40>)
 8009cd6:	f7fb f823 	bl	8004d20 <HAL_UART_DeInit>
	MX_GPIO_DeInit();
 8009cda:	f7ff fef1 	bl	8009ac0 <MX_GPIO_DeInit>
	Ble_Mosfet_H;
 8009cde:	20a0      	movs	r0, #160	; 0xa0
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	2180      	movs	r1, #128	; 0x80
 8009ce4:	05c0      	lsls	r0, r0, #23
 8009ce6:	f7f9 fa64 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_UART_DeInit(&huart1);
 8009cea:	4808      	ldr	r0, [pc, #32]	; (8009d0c <Prepare_To_Enter_Stop2_Mode+0x44>)
 8009cec:	f7fb f818 	bl	8004d20 <HAL_UART_DeInit>
	HAL_ADC_MspDeInit(&hadc);
 8009cf0:	4807      	ldr	r0, [pc, #28]	; (8009d10 <Prepare_To_Enter_Stop2_Mode+0x48>)
 8009cf2:	f7ff fd43 	bl	800977c <HAL_ADC_MspDeInit>
	HAL_TIM_PWM_MspDeInit(&htim3);
 8009cf6:	4807      	ldr	r0, [pc, #28]	; (8009d14 <Prepare_To_Enter_Stop2_Mode+0x4c>)
 8009cf8:	f001 f894 	bl	800ae24 <HAL_TIM_PWM_MspDeInit>
	HAL_TIM_Base_MspDeInit(&htim6);
 8009cfc:	4806      	ldr	r0, [pc, #24]	; (8009d18 <Prepare_To_Enter_Stop2_Mode+0x50>)
 8009cfe:	f001 f8a5 	bl	800ae4c <HAL_TIM_Base_MspDeInit>
}
 8009d02:	bd10      	pop	{r4, pc}
 8009d04:	2000032c 	.word	0x2000032c
 8009d08:	200046a4 	.word	0x200046a4
 8009d0c:	200003c4 	.word	0x200003c4
 8009d10:	20004828 	.word	0x20004828
 8009d14:	20004940 	.word	0x20004940
 8009d18:	20004980 	.word	0x20004980

08009d1c <fast_blink>:
#endif

}
#endif
void fast_blink(void)
{
 8009d1c:	b570      	push	{r4, r5, r6, lr}
	LED1_L;
 8009d1e:	2580      	movs	r5, #128	; 0x80
 8009d20:	006d      	lsls	r5, r5, #1
 8009d22:	4c09      	ldr	r4, [pc, #36]	; (8009d48 <fast_blink+0x2c>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	0029      	movs	r1, r5
 8009d28:	0020      	movs	r0, r4
 8009d2a:	f7f9 fa42 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009d2e:	2064      	movs	r0, #100	; 0x64
 8009d30:	f7f8 fb68 	bl	8002404 <HAL_Delay>
	LED1_H;
 8009d34:	2201      	movs	r2, #1
 8009d36:	0029      	movs	r1, r5
 8009d38:	0020      	movs	r0, r4
 8009d3a:	f7f9 fa3a 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009d3e:	2064      	movs	r0, #100	; 0x64
 8009d40:	f7f8 fb60 	bl	8002404 <HAL_Delay>
}
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	46c0      	nop			; (mov r8, r8)
 8009d48:	50000400 	.word	0x50000400

08009d4c <Slow_blink>:
void Slow_blink(void)
{
 8009d4c:	b570      	push	{r4, r5, r6, lr}
	LED1_L;
 8009d4e:	2580      	movs	r5, #128	; 0x80
 8009d50:	006d      	lsls	r5, r5, #1
 8009d52:	4c09      	ldr	r4, [pc, #36]	; (8009d78 <Slow_blink+0x2c>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	0029      	movs	r1, r5
 8009d58:	0020      	movs	r0, r4
 8009d5a:	f7f9 fa2a 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009d5e:	2064      	movs	r0, #100	; 0x64
 8009d60:	f7f8 fb50 	bl	8002404 <HAL_Delay>
	LED1_H;
 8009d64:	2201      	movs	r2, #1
 8009d66:	0029      	movs	r1, r5
 8009d68:	0020      	movs	r0, r4
 8009d6a:	f7f9 fa22 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8009d6e:	20fa      	movs	r0, #250	; 0xfa
 8009d70:	0040      	lsls	r0, r0, #1
 8009d72:	f7f8 fb47 	bl	8002404 <HAL_Delay>
}
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
 8009d78:	50000400 	.word	0x50000400

08009d7c <hex_to_dec>:
 * @brief convert hex value to decimal
 * @param  None
 * @retval None
 */
int hex_to_dec(unsigned int hexadecimal_number)
{
 8009d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7e:	46ce      	mov	lr, r9
 8009d80:	4647      	mov	r7, r8
 8009d82:	b580      	push	{r7, lr}
 8009d84:	0006      	movs	r6, r0

	int count;
	int decimal_number = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	4699      	mov	r9, r3
	//		      printf("Enter a Hexadecimal Number:\t");
	//		      scanf("%d", &hexadecimal_number);
	for(count = 0; hexadecimal_number > 0; count++)
 8009d8a:	2700      	movs	r7, #0
 8009d8c:	2e00      	cmp	r6, #0
 8009d8e:	d029      	beq.n	8009de4 <hex_to_dec+0x68>
	{
		int remainder1;
		remainder1 = hexadecimal_number % 10;
 8009d90:	210a      	movs	r1, #10
 8009d92:	0030      	movs	r0, r6
 8009d94:	f7f6 fa48 	bl	8000228 <__aeabi_uidivmod>
 8009d98:	4688      	mov	r8, r1
		decimal_number = decimal_number + remainder1 * pow(16, count);
 8009d9a:	0038      	movs	r0, r7
 8009d9c:	f7f8 fa66 	bl	800226c <__aeabi_i2d>
 8009da0:	0002      	movs	r2, r0
 8009da2:	000b      	movs	r3, r1
 8009da4:	2000      	movs	r0, #0
 8009da6:	4912      	ldr	r1, [pc, #72]	; (8009df0 <hex_to_dec+0x74>)
 8009da8:	f001 fde0 	bl	800b96c <pow>
 8009dac:	0004      	movs	r4, r0
 8009dae:	000d      	movs	r5, r1
 8009db0:	4640      	mov	r0, r8
 8009db2:	f7f8 fa5b 	bl	800226c <__aeabi_i2d>
 8009db6:	0022      	movs	r2, r4
 8009db8:	002b      	movs	r3, r5
 8009dba:	f7f7 fc05 	bl	80015c8 <__aeabi_dmul>
 8009dbe:	0004      	movs	r4, r0
 8009dc0:	000d      	movs	r5, r1
 8009dc2:	4648      	mov	r0, r9
 8009dc4:	f7f8 fa52 	bl	800226c <__aeabi_i2d>
 8009dc8:	0022      	movs	r2, r4
 8009dca:	002b      	movs	r3, r5
 8009dcc:	f7f6 fc8c 	bl	80006e8 <__aeabi_dadd>
 8009dd0:	f7f8 fa16 	bl	8002200 <__aeabi_d2iz>
 8009dd4:	4681      	mov	r9, r0
		hexadecimal_number = hexadecimal_number / 10;
 8009dd6:	210a      	movs	r1, #10
 8009dd8:	0030      	movs	r0, r6
 8009dda:	f7f6 f99f 	bl	800011c <__udivsi3>
 8009dde:	0006      	movs	r6, r0
	for(count = 0; hexadecimal_number > 0; count++)
 8009de0:	3701      	adds	r7, #1
 8009de2:	e7d3      	b.n	8009d8c <hex_to_dec+0x10>
	}

	return decimal_number;
}
 8009de4:	4648      	mov	r0, r9
 8009de6:	bcc0      	pop	{r6, r7}
 8009de8:	46b9      	mov	r9, r7
 8009dea:	46b0      	mov	r8, r6
 8009dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dee:	46c0      	nop			; (mov r8, r8)
 8009df0:	40300000 	.word	0x40300000

08009df4 <HAL_RTC_AlarmAEventCallback>:
	Init_ADC();
	HAL_GPIO_WritePin(LCD_Mosfet_GPIO_Port,LCD_Mosfet_Pin,0);
	flags.Check_reapet_battery_voltage_flag = 1;
}
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009df4:	b500      	push	{lr}
 8009df6:	b083      	sub	sp, #12
 8009df8:	9001      	str	r0, [sp, #4]
	/* Turn LED1 on: Alarm generation */
	flags.RTC_Alarm_A_wakeup_flag = 1;
 8009dfa:	4a07      	ldr	r2, [pc, #28]	; (8009e18 <HAL_RTC_AlarmAEventCallback+0x24>)
 8009dfc:	7893      	ldrb	r3, [r2, #2]
 8009dfe:	2101      	movs	r1, #1
 8009e00:	430b      	orrs	r3, r1
 8009e02:	7093      	strb	r3, [r2, #2]
	HAL_RTC_DeactivateAlarm(&hrtc,RTC_ALARM_B);
 8009e04:	2180      	movs	r1, #128	; 0x80
 8009e06:	0089      	lsls	r1, r1, #2
 8009e08:	a801      	add	r0, sp, #4
 8009e0a:	f7f9 ff7b 	bl	8003d04 <HAL_RTC_DeactivateAlarm>
	HAL_RTC_MspDeInit(&hrtc);
 8009e0e:	a801      	add	r0, sp, #4
 8009e10:	f000 fc58 	bl	800a6c4 <HAL_RTC_MspDeInit>
}
 8009e14:	b003      	add	sp, #12
 8009e16:	bd00      	pop	{pc}
 8009e18:	2000032c 	.word	0x2000032c

08009e1c <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
if(flags.RTC_Alarm_A_wakeup_flag == 1)
 8009e1c:	4b07      	ldr	r3, [pc, #28]	; (8009e3c <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8009e1e:	789b      	ldrb	r3, [r3, #2]
 8009e20:	07db      	lsls	r3, r3, #31
 8009e22:	d505      	bpl.n	8009e30 <HAL_RTCEx_AlarmBEventCallback+0x14>
	flags.RTC_Alarm_B_wakeup_flag = 0;
 8009e24:	4a05      	ldr	r2, [pc, #20]	; (8009e3c <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8009e26:	7893      	ldrb	r3, [r2, #2]
 8009e28:	2102      	movs	r1, #2
 8009e2a:	438b      	bics	r3, r1
 8009e2c:	7093      	strb	r3, [r2, #2]
else
	flags.RTC_Alarm_B_wakeup_flag = 1;

}
 8009e2e:	4770      	bx	lr
	flags.RTC_Alarm_B_wakeup_flag = 1;
 8009e30:	4a02      	ldr	r2, [pc, #8]	; (8009e3c <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8009e32:	7893      	ldrb	r3, [r2, #2]
 8009e34:	2102      	movs	r1, #2
 8009e36:	430b      	orrs	r3, r1
 8009e38:	7093      	strb	r3, [r2, #2]
}
 8009e3a:	e7f8      	b.n	8009e2e <HAL_RTCEx_AlarmBEventCallback+0x12>
 8009e3c:	2000032c 	.word	0x2000032c

08009e40 <passkey_Sum>:
#endif



int passkey_Sum(int n)
{
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	0004      	movs	r4, r0
	int sum = 0;
 8009e44:	2500      	movs	r5, #0

	// Loop to do sum while
	// sum is not less than
	// or equal to 9
	while(n > 0 || sum > 9)
 8009e46:	e00a      	b.n	8009e5e <passkey_Sum+0x1e>
	{
		if(n == 0)
		{
			n = sum;
 8009e48:	002e      	movs	r6, r5
			sum = 0;
		}
		sum += n % 10;
 8009e4a:	210a      	movs	r1, #10
 8009e4c:	0030      	movs	r0, r6
 8009e4e:	f7f6 fad5 	bl	80003fc <__aeabi_idivmod>
 8009e52:	190d      	adds	r5, r1, r4
		n /= 10;
 8009e54:	210a      	movs	r1, #10
 8009e56:	0030      	movs	r0, r6
 8009e58:	f7f6 f9ea 	bl	8000230 <__divsi3>
 8009e5c:	0004      	movs	r4, r0
	while(n > 0 || sum > 9)
 8009e5e:	2c00      	cmp	r4, #0
 8009e60:	dd04      	ble.n	8009e6c <passkey_Sum+0x2c>
		if(n == 0)
 8009e62:	2c00      	cmp	r4, #0
 8009e64:	d0f0      	beq.n	8009e48 <passkey_Sum+0x8>
 8009e66:	0026      	movs	r6, r4
 8009e68:	002c      	movs	r4, r5
 8009e6a:	e7ee      	b.n	8009e4a <passkey_Sum+0xa>
	while(n > 0 || sum > 9)
 8009e6c:	2d09      	cmp	r5, #9
 8009e6e:	dcf8      	bgt.n	8009e62 <passkey_Sum+0x22>
	}
	return sum;
}
 8009e70:	0028      	movs	r0, r5
 8009e72:	bd70      	pop	{r4, r5, r6, pc}

08009e74 <Init_ADC>:



void Init_ADC(void)
{
 8009e74:	b510      	push	{r4, lr}
	MX_DMA_Init();
 8009e76:	f7ff fc9f 	bl	80097b8 <MX_DMA_Init>
	MX_ADC_Init();
 8009e7a:	f7ff fbe9 	bl	8009650 <MX_ADC_Init>
	HAL_ADCEx_Calibration_Start(&hadc,ADC_SINGLE_ENDED);
 8009e7e:	4c08      	ldr	r4, [pc, #32]	; (8009ea0 <Init_ADC+0x2c>)
 8009e80:	2100      	movs	r1, #0
 8009e82:	0020      	movs	r0, r4
 8009e84:	f7f8 fdf8 	bl	8002a78 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc,ADC_Count,1);
 8009e88:	2201      	movs	r2, #1
 8009e8a:	4906      	ldr	r1, [pc, #24]	; (8009ea4 <Init_ADC+0x30>)
 8009e8c:	0020      	movs	r0, r4
 8009e8e:	f7f8 fc6d 	bl	800276c <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 8009e92:	2064      	movs	r0, #100	; 0x64
 8009e94:	f7f8 fab6 	bl	8002404 <HAL_Delay>
	HAL_ADC_Start_IT(&hadc);
 8009e98:	0020      	movs	r0, r4
 8009e9a:	f7f8 fc23 	bl	80026e4 <HAL_ADC_Start_IT>
}
 8009e9e:	bd10      	pop	{r4, pc}
 8009ea0:	20004828 	.word	0x20004828
 8009ea4:	200003b0 	.word	0x200003b0

08009ea8 <DeInit_ADC>:
void DeInit_ADC(void)
{
 8009ea8:	b510      	push	{r4, lr}
	HAL_ADC_MspDeInit(&hadc);
 8009eaa:	4802      	ldr	r0, [pc, #8]	; (8009eb4 <DeInit_ADC+0xc>)
 8009eac:	f7ff fc66 	bl	800977c <HAL_ADC_MspDeInit>
	//	HAL_ADCEx_Calibration_Start(&hadc,ADC_SINGLE_ENDED);
}
 8009eb0:	bd10      	pop	{r4, pc}
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	20004828 	.word	0x20004828

08009eb8 <HAL_RTCEx_WakeUpTimerEventCallback>:
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8009eb8:	4a07      	ldr	r2, [pc, #28]	; (8009ed8 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8009eba:	6813      	ldr	r3, [r2, #0]
 8009ebc:	2104      	movs	r1, #4
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	6013      	str	r3, [r2, #0]
	flags.Exit_Stop2_Mode_flag = 1;
 8009ec2:	4a06      	ldr	r2, [pc, #24]	; (8009edc <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8009ec4:	7851      	ldrb	r1, [r2, #1]
 8009ec6:	2380      	movs	r3, #128	; 0x80
 8009ec8:	425b      	negs	r3, r3
 8009eca:	430b      	orrs	r3, r1
	flags.F_Run_Stop2_Mode = 0;
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2140      	movs	r1, #64	; 0x40
 8009ed0:	438b      	bics	r3, r1
 8009ed2:	7053      	strb	r3, [r2, #1]

}
 8009ed4:	4770      	bx	lr
 8009ed6:	46c0      	nop			; (mov r8, r8)
 8009ed8:	40007000 	.word	0x40007000
 8009edc:	2000032c 	.word	0x2000032c

08009ee0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	b09e      	sub	sp, #120	; 0x78
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009ee4:	2238      	movs	r2, #56	; 0x38
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	a810      	add	r0, sp, #64	; 0x40
 8009eea:	f001 f8ee 	bl	800b0ca <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009eee:	2214      	movs	r2, #20
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	a80b      	add	r0, sp, #44	; 0x2c
 8009ef4:	f001 f8e9 	bl	800b0ca <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009ef8:	2228      	movs	r2, #40	; 0x28
 8009efa:	2100      	movs	r1, #0
 8009efc:	a801      	add	r0, sp, #4
 8009efe:	f001 f8e4 	bl	800b0ca <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f02:	4a18      	ldr	r2, [pc, #96]	; (8009f64 <SystemClock_Config+0x84>)
 8009f04:	6813      	ldr	r3, [r2, #0]
 8009f06:	4c18      	ldr	r4, [pc, #96]	; (8009f68 <SystemClock_Config+0x88>)
 8009f08:	4023      	ands	r3, r4
 8009f0a:	2680      	movs	r6, #128	; 0x80
 8009f0c:	0136      	lsls	r6, r6, #4
 8009f0e:	4333      	orrs	r3, r6
 8009f10:	6013      	str	r3, [r2, #0]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8009f12:	f7f9 f963 	bl	80031dc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009f16:	4a15      	ldr	r2, [pc, #84]	; (8009f6c <SystemClock_Config+0x8c>)
 8009f18:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f1a:	4023      	ands	r3, r4
 8009f1c:	6513      	str	r3, [r2, #80]	; 0x50

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8009f1e:	2306      	movs	r3, #6
 8009f20:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009f22:	33fa      	adds	r3, #250	; 0xfa
 8009f24:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009f26:	2501      	movs	r5, #1
 8009f28:	9513      	str	r5, [sp, #76]	; 0x4c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009f2a:	3bf0      	subs	r3, #240	; 0xf0
 8009f2c:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009f2e:	2400      	movs	r4, #0
 8009f30:	941a      	str	r4, [sp, #104]	; 0x68
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f32:	a810      	add	r0, sp, #64	; 0x40
 8009f34:	f7f9 f9fe 	bl	8003334 <HAL_RCC_OscConfig>
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009f38:	230f      	movs	r3, #15
 8009f3a:	930b      	str	r3, [sp, #44]	; 0x2c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8009f3c:	950c      	str	r5, [sp, #48]	; 0x30
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f3e:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009f40:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009f42:	940f      	str	r4, [sp, #60]	; 0x3c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009f44:	2100      	movs	r1, #0
 8009f46:	a80b      	add	r0, sp, #44	; 0x2c
 8009f48:	f7f9 fcc0 	bl	80038cc <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8009f4c:	2325      	movs	r3, #37	; 0x25
 8009f4e:	9301      	str	r3, [sp, #4]
			|RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8009f50:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8009f52:	9606      	str	r6, [sp, #24]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009f54:	2380      	movs	r3, #128	; 0x80
 8009f56:	025b      	lsls	r3, r3, #9
 8009f58:	9302      	str	r3, [sp, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f5a:	a801      	add	r0, sp, #4
 8009f5c:	f7f9 fdc8 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
	{
		Error_Handler();
	}
}
 8009f60:	b01e      	add	sp, #120	; 0x78
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	40007000 	.word	0x40007000
 8009f68:	ffffe7ff 	.word	0xffffe7ff
 8009f6c:	40021000 	.word	0x40021000

08009f70 <Exit_Stop2_Mode>:
{
 8009f70:	b570      	push	{r4, r5, r6, lr}
	Enable_Peripheral_Clocks();
 8009f72:	f7ff fe79 	bl	8009c68 <Enable_Peripheral_Clocks>
	__HAL_RCC_PWR_CLK_DISABLE();
 8009f76:	4a1e      	ldr	r2, [pc, #120]	; (8009ff0 <Exit_Stop2_Mode+0x80>)
 8009f78:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009f7a:	491e      	ldr	r1, [pc, #120]	; (8009ff4 <Exit_Stop2_Mode+0x84>)
 8009f7c:	400b      	ands	r3, r1
 8009f7e:	6393      	str	r3, [r2, #56]	; 0x38
	SystemClock_Config();
 8009f80:	f7ff ffae 	bl	8009ee0 <SystemClock_Config>
	MX_GPIO_Init1();
 8009f84:	f7ff fce6 	bl	8009954 <MX_GPIO_Init1>
	flags.Ble_connected_flag = 0;
 8009f88:	4c1b      	ldr	r4, [pc, #108]	; (8009ff8 <Exit_Stop2_Mode+0x88>)
 8009f8a:	78a3      	ldrb	r3, [r4, #2]
 8009f8c:	2208      	movs	r2, #8
 8009f8e:	4393      	bics	r3, r2
 8009f90:	70a3      	strb	r3, [r4, #2]
	BLEControl_L;
 8009f92:	25a0      	movs	r5, #160	; 0xa0
 8009f94:	05ed      	lsls	r5, r5, #23
 8009f96:	2200      	movs	r2, #0
 8009f98:	2101      	movs	r1, #1
 8009f9a:	0028      	movs	r0, r5
 8009f9c:	f7f9 f909 	bl	80031b2 <HAL_GPIO_WritePin>
	Ble_Mosfet_L;
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2180      	movs	r1, #128	; 0x80
 8009fa4:	0028      	movs	r0, r5
 8009fa6:	f7f9 f904 	bl	80031b2 <HAL_GPIO_WritePin>
	MX_USART1_UART_Init();
 8009faa:	f000 ff7f 	bl	800aeac <MX_USART1_UART_Init>
	MX_LPUART1_UART_Init();
 8009fae:	f000 ff61 	bl	800ae74 <MX_LPUART1_UART_Init>
	HAL_UART_Receive_IT(&hlpuart1,lpuart_1_Rx_Data,1);
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	4911      	ldr	r1, [pc, #68]	; (8009ffc <Exit_Stop2_Mode+0x8c>)
 8009fb6:	4812      	ldr	r0, [pc, #72]	; (800a000 <Exit_Stop2_Mode+0x90>)
 8009fb8:	f7fb fca6 	bl	8005908 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1,"Wake up from stop mode\r\n",24,255);
 8009fbc:	23ff      	movs	r3, #255	; 0xff
 8009fbe:	2218      	movs	r2, #24
 8009fc0:	4910      	ldr	r1, [pc, #64]	; (800a004 <Exit_Stop2_Mode+0x94>)
 8009fc2:	4811      	ldr	r0, [pc, #68]	; (800a008 <Exit_Stop2_Mode+0x98>)
 8009fc4:	f7fb fb44 	bl	8005650 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(ePD1_CS_GPIO_Port,ePD1_CS_Pin,1);//init display1 with CS high
 8009fc8:	2180      	movs	r1, #128	; 0x80
 8009fca:	2201      	movs	r2, #1
 8009fcc:	0209      	lsls	r1, r1, #8
 8009fce:	0028      	movs	r0, r5
 8009fd0:	f7f9 f8ef 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8009fd4:	480d      	ldr	r0, [pc, #52]	; (800a00c <Exit_Stop2_Mode+0x9c>)
 8009fd6:	f7f8 fa15 	bl	8002404 <HAL_Delay>
	Ble_Mosfet_H;	 /* BM71 Mosfet control pin */
 8009fda:	2201      	movs	r2, #1
 8009fdc:	2180      	movs	r1, #128	; 0x80
 8009fde:	0028      	movs	r0, r5
 8009fe0:	f7f9 f8e7 	bl	80031b2 <HAL_GPIO_WritePin>
	flags.F_Run_Stop2_Mode = 1;
 8009fe4:	7863      	ldrb	r3, [r4, #1]
 8009fe6:	2240      	movs	r2, #64	; 0x40
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	7063      	strb	r3, [r4, #1]
}
 8009fec:	bd70      	pop	{r4, r5, r6, pc}
 8009fee:	46c0      	nop			; (mov r8, r8)
 8009ff0:	40021000 	.word	0x40021000
 8009ff4:	efffffff 	.word	0xefffffff
 8009ff8:	2000032c 	.word	0x2000032c
 8009ffc:	200047d8 	.word	0x200047d8
 800a000:	200046a4 	.word	0x200046a4
 800a004:	08010dc0 	.word	0x08010dc0
 800a008:	200003c4 	.word	0x200003c4
 800a00c:	00000bb8 	.word	0x00000bb8

0800a010 <RTC_Alarm_A_Wakeup>:
{
 800a010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a012:	b08b      	sub	sp, #44	; 0x2c
	flags.F_Run_Stop2_Mode = 0;
 800a014:	4e4f      	ldr	r6, [pc, #316]	; (800a154 <RTC_Alarm_A_Wakeup+0x144>)
 800a016:	7873      	ldrb	r3, [r6, #1]
 800a018:	2240      	movs	r2, #64	; 0x40
 800a01a:	4393      	bics	r3, r2
 800a01c:	7073      	strb	r3, [r6, #1]
	Enable_Peripheral_Clocks();
 800a01e:	f7ff fe23 	bl	8009c68 <Enable_Peripheral_Clocks>
	HAL_ResumeTick();
 800a022:	f7f8 fa09 	bl	8002438 <HAL_ResumeTick>
	__HAL_RCC_PWR_CLK_DISABLE();
 800a026:	4a4c      	ldr	r2, [pc, #304]	; (800a158 <RTC_Alarm_A_Wakeup+0x148>)
 800a028:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a02a:	494c      	ldr	r1, [pc, #304]	; (800a15c <RTC_Alarm_A_Wakeup+0x14c>)
 800a02c:	400b      	ands	r3, r1
 800a02e:	6393      	str	r3, [r2, #56]	; 0x38
	SystemClock_Config();
 800a030:	f7ff ff56 	bl	8009ee0 <SystemClock_Config>
	MX_GPIO_Init1();
 800a034:	f7ff fc8e 	bl	8009954 <MX_GPIO_Init1>
	LED1_H;
 800a038:	2580      	movs	r5, #128	; 0x80
 800a03a:	006d      	lsls	r5, r5, #1
 800a03c:	4c48      	ldr	r4, [pc, #288]	; (800a160 <RTC_Alarm_A_Wakeup+0x150>)
 800a03e:	2201      	movs	r2, #1
 800a040:	0029      	movs	r1, r5
 800a042:	0020      	movs	r0, r4
 800a044:	f7f9 f8b5 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_TIM_Base_MspInit(&htim6);
 800a048:	4f46      	ldr	r7, [pc, #280]	; (800a164 <RTC_Alarm_A_Wakeup+0x154>)
 800a04a:	0038      	movs	r0, r7
 800a04c:	f000 fe66 	bl	800ad1c <HAL_TIM_Base_MspInit>
	HAL_TIM_PWM_MspInit(&htim3);
 800a050:	4845      	ldr	r0, [pc, #276]	; (800a168 <RTC_Alarm_A_Wakeup+0x158>)
 800a052:	f000 fe4b 	bl	800acec <HAL_TIM_PWM_MspInit>
	HAL_TIM_Base_Start_IT(&htim6);
 800a056:	0038      	movs	r0, r7
 800a058:	f7fa fc04 	bl	8004864 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(Buzzer_EN_GPIO_Port, Buzzer_EN_Pin, GPIO_PIN_SET);/* Enable Buzzer */
 800a05c:	2201      	movs	r2, #1
 800a05e:	2102      	movs	r1, #2
 800a060:	0020      	movs	r0, r4
 800a062:	f7f9 f8a6 	bl	80031b2 <HAL_GPIO_WritePin>
	Initiate_Buzzer_Tune2();
 800a066:	f7fe f85b 	bl	8008120 <Initiate_Buzzer_Tune2>
	Execute_Buzzer_Tune2();
 800a06a:	f7fe f863 	bl	8008134 <Execute_Buzzer_Tune2>
	Vibrator_Motor_H;
 800a06e:	2180      	movs	r1, #128	; 0x80
 800a070:	2201      	movs	r2, #1
 800a072:	01c9      	lsls	r1, r1, #7
 800a074:	0020      	movs	r0, r4
 800a076:	f7f9 f89c 	bl	80031b2 <HAL_GPIO_WritePin>
	flags.Start_vibrator_motor_flag = 1;
 800a07a:	7932      	ldrb	r2, [r6, #4]
 800a07c:	2380      	movs	r3, #128	; 0x80
 800a07e:	425b      	negs	r3, r3
 800a080:	4313      	orrs	r3, r2
	flags.Start_Ble_beacons = 0;
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2202      	movs	r2, #2
 800a086:	4393      	bics	r3, r2
 800a088:	7133      	strb	r3, [r6, #4]
	uint8_t test_string[34] = "RTC ALARM A Wake up from stop mode\r\n";
 800a08a:	a801      	add	r0, sp, #4
 800a08c:	4b37      	ldr	r3, [pc, #220]	; (800a16c <RTC_Alarm_A_Wakeup+0x15c>)
 800a08e:	0002      	movs	r2, r0
 800a090:	cbc2      	ldmia	r3!, {r1, r6, r7}
 800a092:	c2c2      	stmia	r2!, {r1, r6, r7}
 800a094:	cbc2      	ldmia	r3!, {r1, r6, r7}
 800a096:	c2c2      	stmia	r2!, {r1, r6, r7}
 800a098:	cb42      	ldmia	r3!, {r1, r6}
 800a09a:	c242      	stmia	r2!, {r1, r6}
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	8013      	strh	r3, [r2, #0]
	UART1_Transmit(test_string,34);
 800a0a0:	2122      	movs	r1, #34	; 0x22
 800a0a2:	f7ff fab1 	bl	8009608 <UART1_Transmit>
	HAL_UART_Receive_IT(&hlpuart1,lpuart_1_Rx_Data,1); 		/* UART1 Interrupt call */
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4931      	ldr	r1, [pc, #196]	; (800a170 <RTC_Alarm_A_Wakeup+0x160>)
 800a0aa:	4832      	ldr	r0, [pc, #200]	; (800a174 <RTC_Alarm_A_Wakeup+0x164>)
 800a0ac:	f7fb fc2c 	bl	8005908 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ePD1_CS_GPIO_Port,ePD1_CS_Pin,1);//init display1 with CS high
 800a0b0:	2180      	movs	r1, #128	; 0x80
 800a0b2:	26a0      	movs	r6, #160	; 0xa0
 800a0b4:	05f6      	lsls	r6, r6, #23
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	0209      	lsls	r1, r1, #8
 800a0ba:	0030      	movs	r0, r6
 800a0bc:	f7f9 f879 	bl	80031b2 <HAL_GPIO_WritePin>
	MCU_Mosfet_L;	 /* MCU Mosfet control pin */
 800a0c0:	2180      	movs	r1, #128	; 0x80
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	0189      	lsls	r1, r1, #6
 800a0c6:	0020      	movs	r0, r4
 800a0c8:	f7f9 f873 	bl	80031b2 <HAL_GPIO_WritePin>
	LED1_H;
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	0029      	movs	r1, r5
 800a0d0:	0020      	movs	r0, r4
 800a0d2:	f7f9 f86e 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Mosfet_GPIO_Port,LCD_Mosfet_Pin,0);
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2102      	movs	r1, #2
 800a0da:	0030      	movs	r0, r6
 800a0dc:	f7f9 f869 	bl	80031b2 <HAL_GPIO_WritePin>
	j=3;
 800a0e0:	4b25      	ldr	r3, [pc, #148]	; (800a178 <RTC_Alarm_A_Wakeup+0x168>)
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	601a      	str	r2, [r3, #0]
	for(i=0;i<16800;i++)
 800a0e6:	4b25      	ldr	r3, [pc, #148]	; (800a17c <RTC_Alarm_A_Wakeup+0x16c>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	e004      	b.n	800a0f8 <RTC_Alarm_A_Wakeup+0xe8>
			LPUART1_Image_Data_Buffer[i]=tag_exipre[i];
 800a0ee:	4924      	ldr	r1, [pc, #144]	; (800a180 <RTC_Alarm_A_Wakeup+0x170>)
 800a0f0:	54ca      	strb	r2, [r1, r3]
	for(i=0;i<16800;i++)
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	4a21      	ldr	r2, [pc, #132]	; (800a17c <RTC_Alarm_A_Wakeup+0x16c>)
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	4b20      	ldr	r3, [pc, #128]	; (800a17c <RTC_Alarm_A_Wakeup+0x16c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a21      	ldr	r2, [pc, #132]	; (800a184 <RTC_Alarm_A_Wakeup+0x174>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d808      	bhi.n	800a114 <RTC_Alarm_A_Wakeup+0x104>
		if(tag_exipre[i] == 0xff)
 800a102:	4a21      	ldr	r2, [pc, #132]	; (800a188 <RTC_Alarm_A_Wakeup+0x178>)
 800a104:	5cd2      	ldrb	r2, [r2, r3]
 800a106:	2aff      	cmp	r2, #255	; 0xff
 800a108:	d1f1      	bne.n	800a0ee <RTC_Alarm_A_Wakeup+0xde>
			Test_byte1 = LPUART1_Image_Data_Buffer[i];
 800a10a:	4a1d      	ldr	r2, [pc, #116]	; (800a180 <RTC_Alarm_A_Wakeup+0x170>)
 800a10c:	5cd1      	ldrb	r1, [r2, r3]
 800a10e:	4a1f      	ldr	r2, [pc, #124]	; (800a18c <RTC_Alarm_A_Wakeup+0x17c>)
 800a110:	7011      	strb	r1, [r2, #0]
			LPUART1_Image_Data_Buffer[i] = Test_byte1;
 800a112:	e7ee      	b.n	800a0f2 <RTC_Alarm_A_Wakeup+0xe2>
	EPD_Init();          							    /* Initialize display */
 800a114:	f7fb fd0e 	bl	8005b34 <EPD_Init>
	HAL_Delay(100);
 800a118:	2064      	movs	r0, #100	; 0x64
 800a11a:	f7f8 f973 	bl	8002404 <HAL_Delay>
	EPD_Display_KW(LPUART1_Image_Data_Buffer,16800);
 800a11e:	491c      	ldr	r1, [pc, #112]	; (800a190 <RTC_Alarm_A_Wakeup+0x180>)
 800a120:	4817      	ldr	r0, [pc, #92]	; (800a180 <RTC_Alarm_A_Wakeup+0x170>)
 800a122:	f7fb fe75 	bl	8005e10 <EPD_Display_KW>
	HAL_Delay(3000);
 800a126:	481b      	ldr	r0, [pc, #108]	; (800a194 <RTC_Alarm_A_Wakeup+0x184>)
 800a128:	f7f8 f96c 	bl	8002404 <HAL_Delay>
	HAL_UART_DeInit(&hlpuart1);
 800a12c:	4811      	ldr	r0, [pc, #68]	; (800a174 <RTC_Alarm_A_Wakeup+0x164>)
 800a12e:	f7fa fdf7 	bl	8004d20 <HAL_UART_DeInit>
	MX_GPIO_DeInit();
 800a132:	f7ff fcc5 	bl	8009ac0 <MX_GPIO_DeInit>
	Ble_Mosfet_H;
 800a136:	20a0      	movs	r0, #160	; 0xa0
 800a138:	2201      	movs	r2, #1
 800a13a:	2180      	movs	r1, #128	; 0x80
 800a13c:	05c0      	lsls	r0, r0, #23
 800a13e:	f7f9 f838 	bl	80031b2 <HAL_GPIO_WritePin>
	MCU_Mosfet_H;
 800a142:	2180      	movs	r1, #128	; 0x80
 800a144:	2201      	movs	r2, #1
 800a146:	0189      	lsls	r1, r1, #6
 800a148:	4805      	ldr	r0, [pc, #20]	; (800a160 <RTC_Alarm_A_Wakeup+0x150>)
 800a14a:	f7f9 f832 	bl	80031b2 <HAL_GPIO_WritePin>
}
 800a14e:	b00b      	add	sp, #44	; 0x2c
 800a150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a152:	46c0      	nop			; (mov r8, r8)
 800a154:	2000032c 	.word	0x2000032c
 800a158:	40021000 	.word	0x40021000
 800a15c:	efffffff 	.word	0xefffffff
 800a160:	50000400 	.word	0x50000400
 800a164:	20004980 	.word	0x20004980
 800a168:	20004940 	.word	0x20004940
 800a16c:	08010ddc 	.word	0x08010ddc
 800a170:	200047d8 	.word	0x200047d8
 800a174:	200046a4 	.word	0x200046a4
 800a178:	200003b4 	.word	0x200003b4
 800a17c:	200003c0 	.word	0x200003c0
 800a180:	20000500 	.word	0x20000500
 800a184:	0000419f 	.word	0x0000419f
 800a188:	0800cb24 	.word	0x0800cb24
 800a18c:	20004884 	.word	0x20004884
 800a190:	000041a0 	.word	0x000041a0
 800a194:	00000bb8 	.word	0x00000bb8

0800a198 <RTC_Alarm_B_Wakeup>:
{
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	b08a      	sub	sp, #40	; 0x28
	flags.F_Run_Stop2_Mode = 0;
 800a19c:	4c20      	ldr	r4, [pc, #128]	; (800a220 <RTC_Alarm_B_Wakeup+0x88>)
 800a19e:	7863      	ldrb	r3, [r4, #1]
 800a1a0:	2240      	movs	r2, #64	; 0x40
 800a1a2:	4393      	bics	r3, r2
 800a1a4:	7063      	strb	r3, [r4, #1]
	Enable_Peripheral_Clocks();
 800a1a6:	f7ff fd5f 	bl	8009c68 <Enable_Peripheral_Clocks>
	__HAL_RCC_PWR_CLK_DISABLE();
 800a1aa:	4a1e      	ldr	r2, [pc, #120]	; (800a224 <RTC_Alarm_B_Wakeup+0x8c>)
 800a1ac:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a1ae:	491e      	ldr	r1, [pc, #120]	; (800a228 <RTC_Alarm_B_Wakeup+0x90>)
 800a1b0:	400b      	ands	r3, r1
 800a1b2:	6393      	str	r3, [r2, #56]	; 0x38
	SystemClock_Config();
 800a1b4:	f7ff fe94 	bl	8009ee0 <SystemClock_Config>
	MX_GPIO_Init1();
 800a1b8:	f7ff fbcc 	bl	8009954 <MX_GPIO_Init1>
	MX_TIM3_Init();
 800a1bc:	f000 fdf0 	bl	800ada0 <MX_TIM3_Init>
	MX_TIM6_Init();
 800a1c0:	f000 fd68 	bl	800ac94 <MX_TIM6_Init>
	HAL_TIM_Base_Start_IT(&htim6);
 800a1c4:	4819      	ldr	r0, [pc, #100]	; (800a22c <RTC_Alarm_B_Wakeup+0x94>)
 800a1c6:	f7fa fb4d 	bl	8004864 <HAL_TIM_Base_Start_IT>
	LED1_H;
 800a1ca:	2180      	movs	r1, #128	; 0x80
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	0049      	lsls	r1, r1, #1
 800a1d0:	4817      	ldr	r0, [pc, #92]	; (800a230 <RTC_Alarm_B_Wakeup+0x98>)
 800a1d2:	f7f8 ffee 	bl	80031b2 <HAL_GPIO_WritePin>
	MX_USART1_UART_Init();
 800a1d6:	f000 fe69 	bl	800aeac <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1,usart_1_Rx_Data,1); 		/* UART1 Interrupt call */
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4915      	ldr	r1, [pc, #84]	; (800a234 <RTC_Alarm_B_Wakeup+0x9c>)
 800a1de:	4816      	ldr	r0, [pc, #88]	; (800a238 <RTC_Alarm_B_Wakeup+0xa0>)
 800a1e0:	f7fb fb92 	bl	8005908 <HAL_UART_Receive_IT>
	uint8_t test_string[34] = "RTC ALARM B Wake up from stop mode\r\n";
 800a1e4:	a801      	add	r0, sp, #4
 800a1e6:	4915      	ldr	r1, [pc, #84]	; (800a23c <RTC_Alarm_B_Wakeup+0xa4>)
 800a1e8:	0003      	movs	r3, r0
 800a1ea:	000a      	movs	r2, r1
 800a1ec:	ca62      	ldmia	r2!, {r1, r5, r6}
 800a1ee:	c362      	stmia	r3!, {r1, r5, r6}
 800a1f0:	ca62      	ldmia	r2!, {r1, r5, r6}
 800a1f2:	c362      	stmia	r3!, {r1, r5, r6}
 800a1f4:	ca22      	ldmia	r2!, {r1, r5}
 800a1f6:	c322      	stmia	r3!, {r1, r5}
 800a1f8:	8812      	ldrh	r2, [r2, #0]
 800a1fa:	801a      	strh	r2, [r3, #0]
	UART1_Transmit(test_string,34);
 800a1fc:	2122      	movs	r1, #34	; 0x22
 800a1fe:	f7ff fa03 	bl	8009608 <UART1_Transmit>
	Init_ADC();
 800a202:	f7ff fe37 	bl	8009e74 <Init_ADC>
	HAL_GPIO_WritePin(LCD_Mosfet_GPIO_Port,LCD_Mosfet_Pin,0);
 800a206:	20a0      	movs	r0, #160	; 0xa0
 800a208:	2200      	movs	r2, #0
 800a20a:	2102      	movs	r1, #2
 800a20c:	05c0      	lsls	r0, r0, #23
 800a20e:	f7f8 ffd0 	bl	80031b2 <HAL_GPIO_WritePin>
	flags.Check_reapet_battery_voltage_flag = 1;
 800a212:	7963      	ldrb	r3, [r4, #5]
 800a214:	2202      	movs	r2, #2
 800a216:	4313      	orrs	r3, r2
 800a218:	7163      	strb	r3, [r4, #5]
}
 800a21a:	b00a      	add	sp, #40	; 0x28
 800a21c:	bd70      	pop	{r4, r5, r6, pc}
 800a21e:	46c0      	nop			; (mov r8, r8)
 800a220:	2000032c 	.word	0x2000032c
 800a224:	40021000 	.word	0x40021000
 800a228:	efffffff 	.word	0xefffffff
 800a22c:	20004980 	.word	0x20004980
 800a230:	50000400 	.word	0x50000400
 800a234:	200047d0 	.word	0x200047d0
 800a238:	200003c4 	.word	0x200003c4
 800a23c:	08010e00 	.word	0x08010e00

0800a240 <main>:
{
 800a240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a242:	b087      	sub	sp, #28
	HAL_Init();
 800a244:	f7f8 f8b8 	bl	80023b8 <HAL_Init>
	SystemClock_Config();
 800a248:	f7ff fe4a 	bl	8009ee0 <SystemClock_Config>
	HAL_Delay(2000);
 800a24c:	27fa      	movs	r7, #250	; 0xfa
 800a24e:	00ff      	lsls	r7, r7, #3
 800a250:	0038      	movs	r0, r7
 800a252:	f7f8 f8d7 	bl	8002404 <HAL_Delay>
	MX_GPIO_Init();
 800a256:	f7ff fac7 	bl	80097e8 <MX_GPIO_Init>
	MCU_Mosfet_L;	 /* MCU Mosfet control pin */
 800a25a:	2180      	movs	r1, #128	; 0x80
 800a25c:	4db6      	ldr	r5, [pc, #728]	; (800a538 <main+0x2f8>)
 800a25e:	2200      	movs	r2, #0
 800a260:	0189      	lsls	r1, r1, #6
 800a262:	0028      	movs	r0, r5
 800a264:	f7f8 ffa5 	bl	80031b2 <HAL_GPIO_WritePin>
	Ble_Mosfet_L;	 /* BM71 Mosfet control pin */
 800a268:	26a0      	movs	r6, #160	; 0xa0
 800a26a:	05f6      	lsls	r6, r6, #23
 800a26c:	2200      	movs	r2, #0
 800a26e:	2180      	movs	r1, #128	; 0x80
 800a270:	0030      	movs	r0, r6
 800a272:	f7f8 ff9e 	bl	80031b2 <HAL_GPIO_WritePin>
	LED1_H;
 800a276:	2180      	movs	r1, #128	; 0x80
 800a278:	2201      	movs	r2, #1
 800a27a:	0049      	lsls	r1, r1, #1
 800a27c:	0028      	movs	r0, r5
 800a27e:	f7f8 ff98 	bl	80031b2 <HAL_GPIO_WritePin>
	MX_USART1_UART_Init();
 800a282:	f000 fe13 	bl	800aeac <MX_USART1_UART_Init>
	MX_LPUART1_UART_Init();
 800a286:	f000 fdf5 	bl	800ae74 <MX_LPUART1_UART_Init>
	MX_SPI1_Init();
 800a28a:	f000 fac7 	bl	800a81c <MX_SPI1_Init>
	MX_TIM3_Init();
 800a28e:	f000 fd87 	bl	800ada0 <MX_TIM3_Init>
	MX_TIM6_Init();
 800a292:	f000 fcff 	bl	800ac94 <MX_TIM6_Init>
	Init_ADC();
 800a296:	f7ff fded 	bl	8009e74 <Init_ADC>
	HAL_TIM_Base_Start_IT(&htim6);
 800a29a:	48a8      	ldr	r0, [pc, #672]	; (800a53c <main+0x2fc>)
 800a29c:	f7fa fae2 	bl	8004864 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1,usart_1_Rx_Data,1); 		/* UART1 Interrupt call */
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	49a7      	ldr	r1, [pc, #668]	; (800a540 <main+0x300>)
 800a2a4:	48a7      	ldr	r0, [pc, #668]	; (800a544 <main+0x304>)
 800a2a6:	f7fb fb2f 	bl	8005908 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&hlpuart1,lpuart_1_Rx_Data,1); 		/* LPUART1 Interrupt call */
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	49a6      	ldr	r1, [pc, #664]	; (800a548 <main+0x308>)
 800a2ae:	48a7      	ldr	r0, [pc, #668]	; (800a54c <main+0x30c>)
 800a2b0:	f7fb fb2a 	bl	8005908 <HAL_UART_Receive_IT>
	flags.Ble_connected_flag = 0;
 800a2b4:	4ca6      	ldr	r4, [pc, #664]	; (800a550 <main+0x310>)
 800a2b6:	78a3      	ldrb	r3, [r4, #2]
 800a2b8:	2208      	movs	r2, #8
 800a2ba:	4393      	bics	r3, r2
 800a2bc:	70a3      	strb	r3, [r4, #2]
	flags.Check_battery_voltage_flag = 1;
 800a2be:	7963      	ldrb	r3, [r4, #5]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	7163      	strb	r3, [r4, #5]
	HAL_GPIO_WritePin(RFID_Mosfet_Control_GPIO_Port, RFID_Mosfet_Control_Pin, GPIO_PIN_RESET);
 800a2c6:	2180      	movs	r1, #128	; 0x80
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	0109      	lsls	r1, r1, #4
 800a2cc:	0030      	movs	r0, r6
 800a2ce:	f7f8 ff70 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Buzzer_EN_GPIO_Port, Buzzer_EN_Pin, GPIO_PIN_SET);/* Enable Buzzer */
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	2102      	movs	r1, #2
 800a2d6:	0028      	movs	r0, r5
 800a2d8:	f7f8 ff6b 	bl	80031b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Mosfet_GPIO_Port,LCD_Mosfet_Pin,0);
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2102      	movs	r1, #2
 800a2e0:	0030      	movs	r0, r6
 800a2e2:	f7f8 ff66 	bl	80031b2 <HAL_GPIO_WritePin>
	Initiate_Buzzer_Tune4();					//tune - low, high, low, high - 2
 800a2e6:	f7fd fd85 	bl	8007df4 <Initiate_Buzzer_Tune4>
	Execute_Buzzer_Tune4();
 800a2ea:	f7fd fd13 	bl	8007d14 <Execute_Buzzer_Tune4>
	UART1_Transmit(FW_Version,20);
 800a2ee:	2114      	movs	r1, #20
 800a2f0:	4898      	ldr	r0, [pc, #608]	; (800a554 <main+0x314>)
 800a2f2:	f7ff f989 	bl	8009608 <UART1_Transmit>
	Vibrator_Motor_H;
 800a2f6:	2180      	movs	r1, #128	; 0x80
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	01c9      	lsls	r1, r1, #7
 800a2fc:	0028      	movs	r0, r5
 800a2fe:	f7f8 ff58 	bl	80031b2 <HAL_GPIO_WritePin>
	flags.Start_vibrator_motor_flag = 1;
 800a302:	7922      	ldrb	r2, [r4, #4]
 800a304:	2380      	movs	r3, #128	; 0x80
 800a306:	425b      	negs	r3, r3
 800a308:	4313      	orrs	r3, r2
 800a30a:	7123      	strb	r3, [r4, #4]
	HAL_Delay(2000);
 800a30c:	0038      	movs	r0, r7
 800a30e:	f7f8 f879 	bl	8002404 <HAL_Delay>
 800a312:	e087      	b.n	800a424 <main+0x1e4>
			ADC_Sensing_Operation();
 800a314:	f7fb fe0e 	bl	8005f34 <ADC_Sensing_Operation>
 800a318:	e089      	b.n	800a42e <main+0x1ee>
			Send_BLE_Commands();
 800a31a:	f7fc fb81 	bl	8006a20 <Send_BLE_Commands>
 800a31e:	e08b      	b.n	800a438 <main+0x1f8>
			flags.configure_ble_beacons = 1;
 800a320:	4b8b      	ldr	r3, [pc, #556]	; (800a550 <main+0x310>)
 800a322:	791a      	ldrb	r2, [r3, #4]
 800a324:	2101      	movs	r1, #1
 800a326:	430a      	orrs	r2, r1
 800a328:	711a      	strb	r2, [r3, #4]
			Send_Command_State = 2;
 800a32a:	4a8b      	ldr	r2, [pc, #556]	; (800a558 <main+0x318>)
 800a32c:	2102      	movs	r1, #2
 800a32e:	7011      	strb	r1, [r2, #0]
			flags.Disconnect_ble_flag = 0;
 800a330:	78d9      	ldrb	r1, [r3, #3]
 800a332:	227f      	movs	r2, #127	; 0x7f
 800a334:	400a      	ands	r2, r1
 800a336:	70da      	strb	r2, [r3, #3]
 800a338:	e084      	b.n	800a444 <main+0x204>
			Send_BLE_Beacons_Commands();
 800a33a:	f7fd f8f5 	bl	8007528 <Send_BLE_Beacons_Commands>
 800a33e:	e086      	b.n	800a44e <main+0x20e>
			Vibrator_Motor_H;
 800a340:	2180      	movs	r1, #128	; 0x80
 800a342:	4c7d      	ldr	r4, [pc, #500]	; (800a538 <main+0x2f8>)
 800a344:	3a09      	subs	r2, #9
 800a346:	01c9      	lsls	r1, r1, #7
 800a348:	0020      	movs	r0, r4
 800a34a:	f7f8 ff32 	bl	80031b2 <HAL_GPIO_WritePin>
			flags.Start_vibrator_motor_flag = 1;
 800a34e:	4a80      	ldr	r2, [pc, #512]	; (800a550 <main+0x310>)
 800a350:	7911      	ldrb	r1, [r2, #4]
 800a352:	2380      	movs	r3, #128	; 0x80
 800a354:	425b      	negs	r3, r3
 800a356:	430b      	orrs	r3, r1
 800a358:	7113      	strb	r3, [r2, #4]
			Initiate_Buzzer_Beep2();					//tune - low, high, low, high - 2
 800a35a:	f7fd ffcd 	bl	80082f8 <Initiate_Buzzer_Beep2>
			Execute_Buzzer_Beep2();
 800a35e:	f7fd ffd5 	bl	800830c <Execute_Buzzer_Beep2>
			HAL_Delay(2000);
 800a362:	20fa      	movs	r0, #250	; 0xfa
 800a364:	00c0      	lsls	r0, r0, #3
 800a366:	f7f8 f84d 	bl	8002404 <HAL_Delay>
			HAL_UART_DeInit(&hlpuart1);
 800a36a:	4878      	ldr	r0, [pc, #480]	; (800a54c <main+0x30c>)
 800a36c:	f7fa fcd8 	bl	8004d20 <HAL_UART_DeInit>
			MX_GPIO_DeInit();
 800a370:	f7ff fba6 	bl	8009ac0 <MX_GPIO_DeInit>
			Ble_Mosfet_H;
 800a374:	20a0      	movs	r0, #160	; 0xa0
 800a376:	2201      	movs	r2, #1
 800a378:	2180      	movs	r1, #128	; 0x80
 800a37a:	05c0      	lsls	r0, r0, #23
 800a37c:	f7f8 ff19 	bl	80031b2 <HAL_GPIO_WritePin>
			MCU_Mosfet_H;
 800a380:	2180      	movs	r1, #128	; 0x80
 800a382:	2201      	movs	r2, #1
 800a384:	0189      	lsls	r1, r1, #6
 800a386:	0020      	movs	r0, r4
 800a388:	f7f8 ff13 	bl	80031b2 <HAL_GPIO_WritePin>
 800a38c:	e065      	b.n	800a45a <main+0x21a>
			Ckeck_communication_error(); 			/* This function check if all image data frames are receiving properly create communication error when the frames are missing it set communication error flag */
 800a38e:	f7fc f9b1 	bl	80066f4 <Ckeck_communication_error>
 800a392:	e066      	b.n	800a462 <main+0x222>
			Save_RTC_Value_Application();
 800a394:	f7fb ff1e 	bl	80061d4 <Save_RTC_Value_Application>
			flags.Receive_time_frame_flag = 0;
 800a398:	4a6d      	ldr	r2, [pc, #436]	; (800a550 <main+0x310>)
 800a39a:	7893      	ldrb	r3, [r2, #2]
 800a39c:	2140      	movs	r1, #64	; 0x40
 800a39e:	438b      	bics	r3, r1
 800a3a0:	7093      	strb	r3, [r2, #2]
 800a3a2:	e062      	b.n	800a46a <main+0x22a>
			Display_Application();					/* Process received data frames and send to EPD panel for printing */
 800a3a4:	f7fb ffe0 	bl	8006368 <Display_Application>
			flags.Receive_Ble_frame_flag = 0;
 800a3a8:	4a69      	ldr	r2, [pc, #420]	; (800a550 <main+0x310>)
 800a3aa:	7893      	ldrb	r3, [r2, #2]
 800a3ac:	2120      	movs	r1, #32
 800a3ae:	438b      	bics	r3, r1
 800a3b0:	7093      	strb	r3, [r2, #2]
 800a3b2:	e062      	b.n	800a47a <main+0x23a>
			BLEControl_L;
 800a3b4:	20a0      	movs	r0, #160	; 0xa0
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	05c0      	lsls	r0, r0, #23
 800a3bc:	f7f8 fef9 	bl	80031b2 <HAL_GPIO_WritePin>
			UART1_Display_Application();					/* Process received data frames and send to EPD panel for printing */
 800a3c0:	f7fc f9fe 	bl	80067c0 <UART1_Display_Application>
			flags.Image_USB_Received_Flag = 0;
 800a3c4:	4a62      	ldr	r2, [pc, #392]	; (800a550 <main+0x310>)
 800a3c6:	7813      	ldrb	r3, [r2, #0]
 800a3c8:	2102      	movs	r1, #2
 800a3ca:	438b      	bics	r3, r1
 800a3cc:	7013      	strb	r3, [r2, #0]
 800a3ce:	e054      	b.n	800a47a <main+0x23a>
			Check_Device_Connection();				/*  Check device connection and disconnection according to received response */
 800a3d0:	f7fd f810 	bl	80073f4 <Check_Device_Connection>
 800a3d4:	e059      	b.n	800a48a <main+0x24a>
			RTC_Alarm_A_Wakeup();
 800a3d6:	f7ff fe1b 	bl	800a010 <RTC_Alarm_A_Wakeup>
			flags.RTC_Alarm_A_wakeup_flag = 0;
 800a3da:	4a5d      	ldr	r2, [pc, #372]	; (800a550 <main+0x310>)
 800a3dc:	7893      	ldrb	r3, [r2, #2]
 800a3de:	2101      	movs	r1, #1
 800a3e0:	438b      	bics	r3, r1
 800a3e2:	7093      	strb	r3, [r2, #2]
 800a3e4:	e055      	b.n	800a492 <main+0x252>
			RTC_Alarm_B_Wakeup();
 800a3e6:	f7ff fed7 	bl	800a198 <RTC_Alarm_B_Wakeup>
			flags.RTC_Alarm_B_wakeup_flag = 0;
 800a3ea:	4a59      	ldr	r2, [pc, #356]	; (800a550 <main+0x310>)
 800a3ec:	7893      	ldrb	r3, [r2, #2]
 800a3ee:	2102      	movs	r1, #2
 800a3f0:	438b      	bics	r3, r1
 800a3f2:	7093      	strb	r3, [r2, #2]
 800a3f4:	e053      	b.n	800a49e <main+0x25e>
			fast_blink();
 800a3f6:	f7ff fc91 	bl	8009d1c <fast_blink>
		if(flags.F_Run_Stop2_Mode == 1)				 /* This flag is used to put MCU in low power mode */
 800a3fa:	4b55      	ldr	r3, [pc, #340]	; (800a550 <main+0x310>)
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	065b      	lsls	r3, r3, #25
 800a400:	d460      	bmi.n	800a4c4 <main+0x284>
		if(flags.Exit_Stop2_Mode_flag == 1 && flags.RTC_Alarm_A_wakeup_flag == 0)   /* This flag is set on RTC wake up and is used to reinitialize all peripherals */
 800a402:	4b53      	ldr	r3, [pc, #332]	; (800a550 <main+0x310>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	22c0      	movs	r2, #192	; 0xc0
 800a408:	0252      	lsls	r2, r2, #9
 800a40a:	4013      	ands	r3, r2
 800a40c:	2280      	movs	r2, #128	; 0x80
 800a40e:	0212      	lsls	r2, r2, #8
 800a410:	4293      	cmp	r3, r2
 800a412:	d100      	bne.n	800a416 <main+0x1d6>
 800a414:	e07f      	b.n	800a516 <main+0x2d6>
		if(	flags.Tag_Expire_external_interrupt_flag == 1 && flags.Tag_printing_done_flag == 1)
 800a416:	4b4e      	ldr	r3, [pc, #312]	; (800a550 <main+0x310>)
 800a418:	799b      	ldrb	r3, [r3, #6]
 800a41a:	223f      	movs	r2, #63	; 0x3f
 800a41c:	4393      	bics	r3, r2
 800a41e:	2bc0      	cmp	r3, #192	; 0xc0
 800a420:	d100      	bne.n	800a424 <main+0x1e4>
 800a422:	e085      	b.n	800a530 <main+0x2f0>
		if(flags.Check_battery_voltage_flag == 1 || flags.Check_reapet_battery_voltage_flag ==1)
 800a424:	4b4a      	ldr	r3, [pc, #296]	; (800a550 <main+0x310>)
 800a426:	795b      	ldrb	r3, [r3, #5]
 800a428:	079b      	lsls	r3, r3, #30
 800a42a:	d000      	beq.n	800a42e <main+0x1ee>
 800a42c:	e772      	b.n	800a314 <main+0xd4>
		if(flags.Initialize_ble_flag == 1)  		/* Send initialization commands to BM71, flag cleared after sending last command */
 800a42e:	4b48      	ldr	r3, [pc, #288]	; (800a550 <main+0x310>)
 800a430:	789b      	ldrb	r3, [r3, #2]
 800a432:	075b      	lsls	r3, r3, #29
 800a434:	d500      	bpl.n	800a438 <main+0x1f8>
 800a436:	e770      	b.n	800a31a <main+0xda>
		if(flags.Disconnect_ble_flag == 1 )  /* Send initialization commands, flag cleared after sending last command */
 800a438:	4b45      	ldr	r3, [pc, #276]	; (800a550 <main+0x310>)
 800a43a:	78db      	ldrb	r3, [r3, #3]
 800a43c:	b25b      	sxtb	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	da00      	bge.n	800a444 <main+0x204>
 800a442:	e76d      	b.n	800a320 <main+0xe0>
		if(flags.configure_ble_beacons == 1)
 800a444:	4b42      	ldr	r3, [pc, #264]	; (800a550 <main+0x310>)
 800a446:	791b      	ldrb	r3, [r3, #4]
 800a448:	07db      	lsls	r3, r3, #31
 800a44a:	d500      	bpl.n	800a44e <main+0x20e>
 800a44c:	e775      	b.n	800a33a <main+0xfa>
		if(flags.No_responce_Shutdown_MCU_mosfet == 1 || flags.Shutdown_MCU_mosfet == 1)  /* Made MCU Mosfet and BM71 mosfet off after flag set event */
 800a44e:	4b40      	ldr	r3, [pc, #256]	; (800a550 <main+0x310>)
 800a450:	78db      	ldrb	r3, [r3, #3]
 800a452:	220a      	movs	r2, #10
 800a454:	421a      	tst	r2, r3
 800a456:	d000      	beq.n	800a45a <main+0x21a>
 800a458:	e772      	b.n	800a340 <main+0x100>
		if(flags.Ckeck_communication_error == 1) 	/* This flag is set when LPUART starts receiving image data frames */
 800a45a:	4b3d      	ldr	r3, [pc, #244]	; (800a550 <main+0x310>)
 800a45c:	78db      	ldrb	r3, [r3, #3]
 800a45e:	065b      	lsls	r3, r3, #25
 800a460:	d495      	bmi.n	800a38e <main+0x14e>
		if(flags.Receive_time_frame_flag == 1)		/* This flag is set when LPUART starts receiving image data frames */
 800a462:	4b3b      	ldr	r3, [pc, #236]	; (800a550 <main+0x310>)
 800a464:	789b      	ldrb	r3, [r3, #2]
 800a466:	065b      	lsls	r3, r3, #25
 800a468:	d494      	bmi.n	800a394 <main+0x154>
		if(flags.Receive_Ble_frame_flag == 1)
 800a46a:	4b39      	ldr	r3, [pc, #228]	; (800a550 <main+0x310>)
 800a46c:	789b      	ldrb	r3, [r3, #2]
 800a46e:	069b      	lsls	r3, r3, #26
 800a470:	d498      	bmi.n	800a3a4 <main+0x164>
		else if(flags.Image_USB_Received_Flag == 1)
 800a472:	4b37      	ldr	r3, [pc, #220]	; (800a550 <main+0x310>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	079b      	lsls	r3, r3, #30
 800a478:	d49c      	bmi.n	800a3b4 <main+0x174>
		if(flags.Pair_data_Received_Flag == 1 && flags.Start_Ble_beacons == 0)
 800a47a:	4b35      	ldr	r3, [pc, #212]	; (800a550 <main+0x310>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	075b      	lsls	r3, r3, #29
 800a480:	d503      	bpl.n	800a48a <main+0x24a>
 800a482:	4b33      	ldr	r3, [pc, #204]	; (800a550 <main+0x310>)
 800a484:	791b      	ldrb	r3, [r3, #4]
 800a486:	079b      	lsls	r3, r3, #30
 800a488:	d5a2      	bpl.n	800a3d0 <main+0x190>
		if(flags.RTC_Alarm_A_wakeup_flag == 1)
 800a48a:	4b31      	ldr	r3, [pc, #196]	; (800a550 <main+0x310>)
 800a48c:	789b      	ldrb	r3, [r3, #2]
 800a48e:	07db      	lsls	r3, r3, #31
 800a490:	d4a1      	bmi.n	800a3d6 <main+0x196>
		if(flags.RTC_Alarm_B_wakeup_flag == 1 && flags.RTC_Alarm_A_wakeup_flag == 0)
 800a492:	4b2f      	ldr	r3, [pc, #188]	; (800a550 <main+0x310>)
 800a494:	789a      	ldrb	r2, [r3, #2]
 800a496:	2303      	movs	r3, #3
 800a498:	4013      	ands	r3, r2
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d0a3      	beq.n	800a3e6 <main+0x1a6>
if(flags.Start_Led_blinking == 1)
 800a49e:	4b2c      	ldr	r3, [pc, #176]	; (800a550 <main+0x310>)
 800a4a0:	799b      	ldrb	r3, [r3, #6]
 800a4a2:	069b      	lsls	r3, r3, #26
 800a4a4:	d5a9      	bpl.n	800a3fa <main+0x1ba>
		if(flags.Ble_connected_flag == 1 && flags.Initialize_ble_flag == 0)
 800a4a6:	4b2a      	ldr	r3, [pc, #168]	; (800a550 <main+0x310>)
 800a4a8:	789a      	ldrb	r2, [r3, #2]
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	2b08      	cmp	r3, #8
 800a4b0:	d0a1      	beq.n	800a3f6 <main+0x1b6>
		else if(flags.Initialize_ble_flag == 0 && flags.Ble_connected_flag == 0 && flags.Start_Ble_beacons == 0)
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1a1      	bne.n	800a3fa <main+0x1ba>
 800a4b6:	4b26      	ldr	r3, [pc, #152]	; (800a550 <main+0x310>)
 800a4b8:	791b      	ldrb	r3, [r3, #4]
 800a4ba:	079b      	lsls	r3, r3, #30
 800a4bc:	d49d      	bmi.n	800a3fa <main+0x1ba>
			Slow_blink();
 800a4be:	f7ff fc45 	bl	8009d4c <Slow_blink>
 800a4c2:	e79a      	b.n	800a3fa <main+0x1ba>
			uint8_t Stop_mode_string[23] = "Entering in stop mode\r\n";
 800a4c4:	4669      	mov	r1, sp
 800a4c6:	4825      	ldr	r0, [pc, #148]	; (800a55c <main+0x31c>)
 800a4c8:	000b      	movs	r3, r1
 800a4ca:	0002      	movs	r2, r0
 800a4cc:	ca31      	ldmia	r2!, {r0, r4, r5}
 800a4ce:	c331      	stmia	r3!, {r0, r4, r5}
 800a4d0:	ca11      	ldmia	r2!, {r0, r4}
 800a4d2:	c311      	stmia	r3!, {r0, r4}
 800a4d4:	8810      	ldrh	r0, [r2, #0]
 800a4d6:	8018      	strh	r0, [r3, #0]
 800a4d8:	7892      	ldrb	r2, [r2, #2]
 800a4da:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart1,Stop_mode_string,23,255);
 800a4dc:	23ff      	movs	r3, #255	; 0xff
 800a4de:	2217      	movs	r2, #23
 800a4e0:	4818      	ldr	r0, [pc, #96]	; (800a544 <main+0x304>)
 800a4e2:	f7fb f8b5 	bl	8005650 <HAL_UART_Transmit>
			flags.Check_battery_voltage_flag = 0;
 800a4e6:	4a1a      	ldr	r2, [pc, #104]	; (800a550 <main+0x310>)
 800a4e8:	7953      	ldrb	r3, [r2, #5]
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	438b      	bics	r3, r1
 800a4ee:	7153      	strb	r3, [r2, #5]
			Prepare_To_Enter_Stop2_Mode();
 800a4f0:	f7ff fbea 	bl	8009cc8 <Prepare_To_Enter_Stop2_Mode>
			Disable_Peripheral_Clocks();
 800a4f4:	f7ff fb9a 	bl	8009c2c <Disable_Peripheral_Clocks>
			__HAL_RCC_PWR_CLK_ENABLE();
 800a4f8:	4a19      	ldr	r2, [pc, #100]	; (800a560 <main+0x320>)
 800a4fa:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800a4fc:	2380      	movs	r3, #128	; 0x80
 800a4fe:	055b      	lsls	r3, r3, #21
 800a500:	430b      	orrs	r3, r1
 800a502:	6393      	str	r3, [r2, #56]	; 0x38
			HAL_PWREx_EnableUltraLowPower();
 800a504:	f7f8 feb4 	bl	8003270 <HAL_PWREx_EnableUltraLowPower>
			HAL_SuspendTick();
 800a508:	f7f7 ff8e 	bl	8002428 <HAL_SuspendTick>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a50c:	2101      	movs	r1, #1
 800a50e:	2001      	movs	r0, #1
 800a510:	f7f8 fe6e 	bl	80031f0 <HAL_PWR_EnterSTOPMode>
 800a514:	e775      	b.n	800a402 <main+0x1c2>
			SystemClock_Config();
 800a516:	f7ff fce3 	bl	8009ee0 <SystemClock_Config>
			Exit_Stop2_Mode();
 800a51a:	f7ff fd29 	bl	8009f70 <Exit_Stop2_Mode>
			HAL_Delay(10);
 800a51e:	200a      	movs	r0, #10
 800a520:	f7f7 ff70 	bl	8002404 <HAL_Delay>
			flags.Exit_Stop2_Mode_flag = 0;
 800a524:	4a0a      	ldr	r2, [pc, #40]	; (800a550 <main+0x310>)
 800a526:	7851      	ldrb	r1, [r2, #1]
 800a528:	237f      	movs	r3, #127	; 0x7f
 800a52a:	400b      	ands	r3, r1
 800a52c:	7053      	strb	r3, [r2, #1]
 800a52e:	e772      	b.n	800a416 <main+0x1d6>
			RTC_Alarm_A_Wakeup();
 800a530:	f7ff fd6e 	bl	800a010 <RTC_Alarm_A_Wakeup>
 800a534:	e776      	b.n	800a424 <main+0x1e4>
 800a536:	46c0      	nop			; (mov r8, r8)
 800a538:	50000400 	.word	0x50000400
 800a53c:	20004980 	.word	0x20004980
 800a540:	200047d0 	.word	0x200047d0
 800a544:	200003c4 	.word	0x200003c4
 800a548:	200047d8 	.word	0x200047d8
 800a54c:	200046a4 	.word	0x200046a4
 800a550:	2000032c 	.word	0x2000032c
 800a554:	20000134 	.word	0x20000134
 800a558:	2000000c 	.word	0x2000000c
 800a55c:	08010e24 	.word	0x08010e24
 800a560:	40021000 	.word	0x40021000

0800a564 <Error_Handler>:
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 800a564:	4770      	bx	lr
	...

0800a568 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800a568:	b510      	push	{r4, lr}
 800a56a:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a56c:	2214      	movs	r2, #20
 800a56e:	2100      	movs	r1, #0
 800a570:	a80b      	add	r0, sp, #44	; 0x2c
 800a572:	f000 fdaa 	bl	800b0ca <memset>
  RTC_DateTypeDef sDate = {0};
 800a576:	2400      	movs	r4, #0
 800a578:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800a57a:	2228      	movs	r2, #40	; 0x28
 800a57c:	2100      	movs	r1, #0
 800a57e:	4668      	mov	r0, sp
 800a580:	f000 fda3 	bl	800b0ca <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a584:	483e      	ldr	r0, [pc, #248]	; (800a680 <MX_RTC_Init+0x118>)
 800a586:	4b3f      	ldr	r3, [pc, #252]	; (800a684 <MX_RTC_Init+0x11c>)
 800a588:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800a58a:	2340      	movs	r3, #64	; 0x40
 800a58c:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a58e:	333f      	adds	r3, #63	; 0x3f
 800a590:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800a592:	3380      	adds	r3, #128	; 0x80
 800a594:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a596:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a598:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a59a:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a59c:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a59e:	f7f9 fc8d 	bl	8003ebc <HAL_RTC_Init>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d142      	bne.n	800a62c <MX_RTC_Init+0xc4>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800a5a6:	a90b      	add	r1, sp, #44	; 0x2c
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = 0x0;
 800a5ac:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = 0x0;
 800a5ae:	708b      	strb	r3, [r1, #2]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800a5b0:	70cb      	strb	r3, [r1, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a5b2:	60cb      	str	r3, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a5b4:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	4831      	ldr	r0, [pc, #196]	; (800a680 <MX_RTC_Init+0x118>)
 800a5ba:	f7f9 fcf7 	bl	8003fac <HAL_RTC_SetTime>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d137      	bne.n	800a632 <MX_RTC_Init+0xca>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a5c2:	a90a      	add	r1, sp, #40	; 0x28
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	700b      	strb	r3, [r1, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800a5c8:	704b      	strb	r3, [r1, #1]
  sDate.Date = 0x1;
 800a5ca:	708b      	strb	r3, [r1, #2]
  sDate.Year = 0x0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	70cb      	strb	r3, [r1, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	482b      	ldr	r0, [pc, #172]	; (800a680 <MX_RTC_Init+0x118>)
 800a5d4:	f7f9 fd72 	bl	80040bc <HAL_RTC_SetDate>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d12d      	bne.n	800a638 <MX_RTC_Init+0xd0>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = Hours_count;
 800a5dc:	4b2a      	ldr	r3, [pc, #168]	; (800a688 <MX_RTC_Init+0x120>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	466a      	mov	r2, sp
 800a5e2:	7013      	strb	r3, [r2, #0]
   sAlarm.AlarmTime.Minutes = Min_count;
 800a5e4:	4b29      	ldr	r3, [pc, #164]	; (800a68c <MX_RTC_Init+0x124>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	7053      	strb	r3, [r2, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	7093      	strb	r3, [r2, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800a5ee:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800a5f0:	70d3      	strb	r3, [r2, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a5f2:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a5f4:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a5f6:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a5f8:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a5fa:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800a5fc:	3320      	adds	r3, #32
 800a5fe:	2201      	movs	r2, #1
 800a600:	4669      	mov	r1, sp
 800a602:	54ca      	strb	r2, [r1, r3]
  sAlarm.Alarm = RTC_ALARM_A;
 800a604:	33e0      	adds	r3, #224	; 0xe0
 800a606:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a608:	481d      	ldr	r0, [pc, #116]	; (800a680 <MX_RTC_Init+0x118>)
 800a60a:	f7f9 fdcd 	bl	80041a8 <HAL_RTC_SetAlarm_IT>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d115      	bne.n	800a63e <MX_RTC_Init+0xd6>
  }

  /** Enable the Alarm B
  */

  if(Hours_count > 1)
 800a612:	4b1d      	ldr	r3, [pc, #116]	; (800a688 <MX_RTC_Init+0x120>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d814      	bhi.n	800a644 <MX_RTC_Init+0xdc>
  	  }
    }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 120, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800a61a:	2204      	movs	r2, #4
 800a61c:	2178      	movs	r1, #120	; 0x78
 800a61e:	4818      	ldr	r0, [pc, #96]	; (800a680 <MX_RTC_Init+0x118>)
 800a620:	f7f9 fea2 	bl	8004368 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a624:	2800      	cmp	r0, #0
 800a626:	d128      	bne.n	800a67a <MX_RTC_Init+0x112>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a628:	b010      	add	sp, #64	; 0x40
 800a62a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a62c:	f7ff ff9a 	bl	800a564 <Error_Handler>
 800a630:	e7b9      	b.n	800a5a6 <MX_RTC_Init+0x3e>
    Error_Handler();
 800a632:	f7ff ff97 	bl	800a564 <Error_Handler>
 800a636:	e7c4      	b.n	800a5c2 <MX_RTC_Init+0x5a>
    Error_Handler();
 800a638:	f7ff ff94 	bl	800a564 <Error_Handler>
 800a63c:	e7ce      	b.n	800a5dc <MX_RTC_Init+0x74>
    Error_Handler();
 800a63e:	f7ff ff91 	bl	800a564 <Error_Handler>
 800a642:	e7e6      	b.n	800a612 <MX_RTC_Init+0xaa>
    sAlarm.AlarmTime.Hours = 0x01;
 800a644:	2201      	movs	r2, #1
 800a646:	466b      	mov	r3, sp
 800a648:	701a      	strb	r2, [r3, #0]
    sAlarm.AlarmTime.Minutes = 0x00;
 800a64a:	2300      	movs	r3, #0
 800a64c:	4669      	mov	r1, sp
 800a64e:	704b      	strb	r3, [r1, #1]
    sAlarm.AlarmTime.Seconds = 0x00;
 800a650:	708b      	strb	r3, [r1, #2]
    sAlarm.AlarmTime.SubSeconds = 0x0;
 800a652:	9301      	str	r3, [sp, #4]
    sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800a654:	70cb      	strb	r3, [r1, #3]
    sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a656:	9303      	str	r3, [sp, #12]
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a658:	9304      	str	r3, [sp, #16]
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a65a:	9305      	str	r3, [sp, #20]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a65c:	9306      	str	r3, [sp, #24]
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a65e:	9307      	str	r3, [sp, #28]
    sAlarm.AlarmDateWeekDay = 0x1;
 800a660:	3320      	adds	r3, #32
 800a662:	54ca      	strb	r2, [r1, r3]
    sAlarm.Alarm = RTC_ALARM_B;
 800a664:	33e1      	adds	r3, #225	; 0xe1
 800a666:	33ff      	adds	r3, #255	; 0xff
 800a668:	9309      	str	r3, [sp, #36]	; 0x24
  	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a66a:	4805      	ldr	r0, [pc, #20]	; (800a680 <MX_RTC_Init+0x118>)
 800a66c:	f7f9 fd9c 	bl	80041a8 <HAL_RTC_SetAlarm_IT>
 800a670:	2800      	cmp	r0, #0
 800a672:	d0d2      	beq.n	800a61a <MX_RTC_Init+0xb2>
  		Error_Handler();
 800a674:	f7ff ff76 	bl	800a564 <Error_Handler>
 800a678:	e7cf      	b.n	800a61a <MX_RTC_Init+0xb2>
    Error_Handler();
 800a67a:	f7ff ff73 	bl	800a564 <Error_Handler>
}
 800a67e:	e7d3      	b.n	800a628 <MX_RTC_Init+0xc0>
 800a680:	200048ac 	.word	0x200048ac
 800a684:	40002800 	.word	0x40002800
 800a688:	200001e4 	.word	0x200001e4
 800a68c:	20000008 	.word	0x20000008

0800a690 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800a690:	b510      	push	{r4, lr}

  if(rtcHandle->Instance==RTC)
 800a692:	6802      	ldr	r2, [r0, #0]
 800a694:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <HAL_RTC_MspInit+0x2c>)
 800a696:	429a      	cmp	r2, r3
 800a698:	d000      	beq.n	800a69c <HAL_RTC_MspInit+0xc>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800a69a:	bd10      	pop	{r4, pc}
    __HAL_RCC_RTC_ENABLE();
 800a69c:	4a08      	ldr	r2, [pc, #32]	; (800a6c0 <HAL_RTC_MspInit+0x30>)
 800a69e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800a6a0:	2380      	movs	r3, #128	; 0x80
 800a6a2:	02db      	lsls	r3, r3, #11
 800a6a4:	430b      	orrs	r3, r1
 800a6a6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	2002      	movs	r0, #2
 800a6ae:	f7f8 fa3b 	bl	8002b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800a6b2:	2002      	movs	r0, #2
 800a6b4:	f7f8 fa68 	bl	8002b88 <HAL_NVIC_EnableIRQ>
}
 800a6b8:	e7ef      	b.n	800a69a <HAL_RTC_MspInit+0xa>
 800a6ba:	46c0      	nop			; (mov r8, r8)
 800a6bc:	40002800 	.word	0x40002800
 800a6c0:	40021000 	.word	0x40021000

0800a6c4 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 800a6c4:	b510      	push	{r4, lr}

  if(rtcHandle->Instance==RTC)
 800a6c6:	6802      	ldr	r2, [r0, #0]
 800a6c8:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <HAL_RTC_MspDeInit+0x20>)
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d000      	beq.n	800a6d0 <HAL_RTC_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(RTC_IRQn);
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 800a6ce:	bd10      	pop	{r4, pc}
    __HAL_RCC_RTC_DISABLE();
 800a6d0:	4a05      	ldr	r2, [pc, #20]	; (800a6e8 <HAL_RTC_MspDeInit+0x24>)
 800a6d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a6d4:	4905      	ldr	r1, [pc, #20]	; (800a6ec <HAL_RTC_MspDeInit+0x28>)
 800a6d6:	400b      	ands	r3, r1
 800a6d8:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 800a6da:	2002      	movs	r0, #2
 800a6dc:	f7f8 fa60 	bl	8002ba0 <HAL_NVIC_DisableIRQ>
}
 800a6e0:	e7f5      	b.n	800a6ce <HAL_RTC_MspDeInit+0xa>
 800a6e2:	46c0      	nop			; (mov r8, r8)
 800a6e4:	40002800 	.word	0x40002800
 800a6e8:	40021000 	.word	0x40021000
 800a6ec:	fffbffff 	.word	0xfffbffff

0800a6f0 <MX_RTC_Init_1>:

/* USER CODE BEGIN 1 */
void MX_RTC_Init_1(void)
{
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a6f4:	2214      	movs	r2, #20
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	a80b      	add	r0, sp, #44	; 0x2c
 800a6fa:	f000 fce6 	bl	800b0ca <memset>
  RTC_DateTypeDef sDate = {0};
 800a6fe:	2400      	movs	r4, #0
 800a700:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800a702:	2228      	movs	r2, #40	; 0x28
 800a704:	2100      	movs	r1, #0
 800a706:	4668      	mov	r0, sp
 800a708:	f000 fcdf 	bl	800b0ca <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a70c:	483f      	ldr	r0, [pc, #252]	; (800a80c <MX_RTC_Init_1+0x11c>)
 800a70e:	4b40      	ldr	r3, [pc, #256]	; (800a810 <MX_RTC_Init_1+0x120>)
 800a710:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800a712:	2340      	movs	r3, #64	; 0x40
 800a714:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a716:	333f      	adds	r3, #63	; 0x3f
 800a718:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800a71a:	3380      	adds	r3, #128	; 0x80
 800a71c:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a71e:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a720:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a722:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a724:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a726:	f7f9 fbc9 	bl	8003ebc <HAL_RTC_Init>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d144      	bne.n	800a7b8 <MX_RTC_Init_1+0xc8>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800a72e:	a90b      	add	r1, sp, #44	; 0x2c
 800a730:	2300      	movs	r3, #0
 800a732:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = 0x0;
 800a734:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = 0x0;
 800a736:	708b      	strb	r3, [r1, #2]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800a738:	70cb      	strb	r3, [r1, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a73a:	60cb      	str	r3, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a73c:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a73e:	2201      	movs	r2, #1
 800a740:	4832      	ldr	r0, [pc, #200]	; (800a80c <MX_RTC_Init_1+0x11c>)
 800a742:	f7f9 fc33 	bl	8003fac <HAL_RTC_SetTime>
 800a746:	2800      	cmp	r0, #0
 800a748:	d139      	bne.n	800a7be <MX_RTC_Init_1+0xce>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a74a:	a90a      	add	r1, sp, #40	; 0x28
 800a74c:	2301      	movs	r3, #1
 800a74e:	700b      	strb	r3, [r1, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800a750:	704b      	strb	r3, [r1, #1]
  sDate.Date = 0x1;
 800a752:	708b      	strb	r3, [r1, #2]
  sDate.Year = 0x0;
 800a754:	2300      	movs	r3, #0
 800a756:	70cb      	strb	r3, [r1, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a758:	2201      	movs	r2, #1
 800a75a:	482c      	ldr	r0, [pc, #176]	; (800a80c <MX_RTC_Init_1+0x11c>)
 800a75c:	f7f9 fcae 	bl	80040bc <HAL_RTC_SetDate>
 800a760:	2800      	cmp	r0, #0
 800a762:	d12f      	bne.n	800a7c4 <MX_RTC_Init_1+0xd4>
  {
    Error_Handler();
  }
  /** Enable the Alarm B
  */
  Hours_count=Hours_count-1;
 800a764:	4a2b      	ldr	r2, [pc, #172]	; (800a814 <MX_RTC_Init_1+0x124>)
 800a766:	6813      	ldr	r3, [r2, #0]
 800a768:	3b01      	subs	r3, #1
 800a76a:	6013      	str	r3, [r2, #0]
  if(Hours_count > 1)
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d82c      	bhi.n	800a7ca <MX_RTC_Init_1+0xda>
  }

  /** Enable the Alarm A
  */

  sAlarm.AlarmTime.Hours = Hours_count;
 800a770:	4b28      	ldr	r3, [pc, #160]	; (800a814 <MX_RTC_Init_1+0x124>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	466a      	mov	r2, sp
 800a776:	7013      	strb	r3, [r2, #0]
  sAlarm.AlarmTime.Minutes = Min_count;
 800a778:	4b27      	ldr	r3, [pc, #156]	; (800a818 <MX_RTC_Init_1+0x128>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	7053      	strb	r3, [r2, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800a77e:	2300      	movs	r3, #0
 800a780:	7093      	strb	r3, [r2, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800a782:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800a784:	70d3      	strb	r3, [r2, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a786:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a788:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a78a:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a78c:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a78e:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800a790:	3320      	adds	r3, #32
 800a792:	2201      	movs	r2, #1
 800a794:	4669      	mov	r1, sp
 800a796:	54ca      	strb	r2, [r1, r3]
  sAlarm.Alarm = RTC_ALARM_A;
 800a798:	33e0      	adds	r3, #224	; 0xe0
 800a79a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a79c:	481b      	ldr	r0, [pc, #108]	; (800a80c <MX_RTC_Init_1+0x11c>)
 800a79e:	f7f9 fd03 	bl	80041a8 <HAL_RTC_SetAlarm_IT>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d12c      	bne.n	800a800 <MX_RTC_Init_1+0x110>



  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 120, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800a7a6:	2204      	movs	r2, #4
 800a7a8:	2178      	movs	r1, #120	; 0x78
 800a7aa:	4818      	ldr	r0, [pc, #96]	; (800a80c <MX_RTC_Init_1+0x11c>)
 800a7ac:	f7f9 fddc 	bl	8004368 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d128      	bne.n	800a806 <MX_RTC_Init_1+0x116>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a7b4:	b010      	add	sp, #64	; 0x40
 800a7b6:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a7b8:	f7ff fed4 	bl	800a564 <Error_Handler>
 800a7bc:	e7b7      	b.n	800a72e <MX_RTC_Init_1+0x3e>
    Error_Handler();
 800a7be:	f7ff fed1 	bl	800a564 <Error_Handler>
 800a7c2:	e7c2      	b.n	800a74a <MX_RTC_Init_1+0x5a>
    Error_Handler();
 800a7c4:	f7ff fece 	bl	800a564 <Error_Handler>
 800a7c8:	e7cc      	b.n	800a764 <MX_RTC_Init_1+0x74>
  sAlarm.AlarmTime.Hours = 0x01;
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	466b      	mov	r3, sp
 800a7ce:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x00;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4669      	mov	r1, sp
 800a7d4:	704b      	strb	r3, [r1, #1]
  sAlarm.AlarmTime.Seconds = 0x00;
 800a7d6:	708b      	strb	r3, [r1, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800a7d8:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800a7da:	70cb      	strb	r3, [r1, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a7dc:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a7de:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a7e0:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a7e2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a7e4:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800a7e6:	3320      	adds	r3, #32
 800a7e8:	54ca      	strb	r2, [r1, r3]
  sAlarm.Alarm = RTC_ALARM_B;
 800a7ea:	33e1      	adds	r3, #225	; 0xe1
 800a7ec:	33ff      	adds	r3, #255	; 0xff
 800a7ee:	9309      	str	r3, [sp, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a7f0:	4806      	ldr	r0, [pc, #24]	; (800a80c <MX_RTC_Init_1+0x11c>)
 800a7f2:	f7f9 fcd9 	bl	80041a8 <HAL_RTC_SetAlarm_IT>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d0ba      	beq.n	800a770 <MX_RTC_Init_1+0x80>
		Error_Handler();
 800a7fa:	f7ff feb3 	bl	800a564 <Error_Handler>
 800a7fe:	e7b7      	b.n	800a770 <MX_RTC_Init_1+0x80>
    Error_Handler();
 800a800:	f7ff feb0 	bl	800a564 <Error_Handler>
 800a804:	e7cf      	b.n	800a7a6 <MX_RTC_Init_1+0xb6>
    Error_Handler();
 800a806:	f7ff fead 	bl	800a564 <Error_Handler>
}
 800a80a:	e7d3      	b.n	800a7b4 <MX_RTC_Init_1+0xc4>
 800a80c:	200048ac 	.word	0x200048ac
 800a810:	40002800 	.word	0x40002800
 800a814:	200001e4 	.word	0x200001e4
 800a818:	20000008 	.word	0x20000008

0800a81c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a81c:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800a81e:	480e      	ldr	r0, [pc, #56]	; (800a858 <MX_SPI1_Init+0x3c>)
 800a820:	4b0e      	ldr	r3, [pc, #56]	; (800a85c <MX_SPI1_Init+0x40>)
 800a822:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a824:	2382      	movs	r3, #130	; 0x82
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a82a:	2300      	movs	r3, #0
 800a82c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a82e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a830:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a832:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a834:	2280      	movs	r2, #128	; 0x80
 800a836:	0092      	lsls	r2, r2, #2
 800a838:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a83a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a83c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a83e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a840:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a842:	3307      	adds	r3, #7
 800a844:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a846:	f7f9 fe35 	bl	80044b4 <HAL_SPI_Init>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d100      	bne.n	800a850 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a84e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a850:	f7ff fe88 	bl	800a564 <Error_Handler>
}
 800a854:	e7fb      	b.n	800a84e <MX_SPI1_Init+0x32>
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	200048e4 	.word	0x200048e4
 800a85c:	40013000 	.word	0x40013000

0800a860 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a860:	b510      	push	{r4, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a866:	2214      	movs	r2, #20
 800a868:	2100      	movs	r1, #0
 800a86a:	a801      	add	r0, sp, #4
 800a86c:	f000 fc2d 	bl	800b0ca <memset>
  if(spiHandle->Instance==SPI1)
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <HAL_SPI_MspInit+0x68>)
 800a874:	429a      	cmp	r2, r3
 800a876:	d001      	beq.n	800a87c <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800a878:	b006      	add	sp, #24
 800a87a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a87c:	4b13      	ldr	r3, [pc, #76]	; (800a8cc <HAL_SPI_MspInit+0x6c>)
 800a87e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a880:	2280      	movs	r2, #128	; 0x80
 800a882:	0152      	lsls	r2, r2, #5
 800a884:	430a      	orrs	r2, r1
 800a886:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a88a:	2201      	movs	r2, #1
 800a88c:	4311      	orrs	r1, r2
 800a88e:	62d9      	str	r1, [r3, #44]	; 0x2c
 800a890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a892:	401a      	ands	r2, r3
 800a894:	9200      	str	r2, [sp, #0]
 800a896:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 800a898:	2383      	movs	r3, #131	; 0x83
 800a89a:	015b      	lsls	r3, r3, #5
 800a89c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a89e:	2302      	movs	r3, #2
 800a8a0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a8aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8ac:	20a0      	movs	r0, #160	; 0xa0
 800a8ae:	a901      	add	r1, sp, #4
 800a8b0:	05c0      	lsls	r0, r0, #23
 800a8b2:	f7f8 fb1f 	bl	8002ef4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	2019      	movs	r0, #25
 800a8bc:	f7f8 f934 	bl	8002b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800a8c0:	2019      	movs	r0, #25
 800a8c2:	f7f8 f961 	bl	8002b88 <HAL_NVIC_EnableIRQ>
}
 800a8c6:	e7d7      	b.n	800a878 <HAL_SPI_MspInit+0x18>
 800a8c8:	40013000 	.word	0x40013000
 800a8cc:	40021000 	.word	0x40021000

0800a8d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <HAL_MspInit+0x18>)
 800a8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800a8da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800a8dc:	2280      	movs	r2, #128	; 0x80
 800a8de:	0552      	lsls	r2, r2, #21
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a8e4:	4770      	bx	lr
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	40021000 	.word	0x40021000

0800a8ec <NMI_Handler>:
 800a8ec:	4770      	bx	lr

0800a8ee <HardFault_Handler>:
 800a8ee:	e7fe      	b.n	800a8ee <HardFault_Handler>

0800a8f0 <SVC_Handler>:
 800a8f0:	4770      	bx	lr

0800a8f2 <PendSV_Handler>:
 800a8f2:	4770      	bx	lr

0800a8f4 <SysTick_Handler>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	d100      	bne.n	800a8fe <SysTick_Handler+0xa>
 800a8fc:	e0b0      	b.n	800aa60 <SysTick_Handler+0x16c>
 800a8fe:	4a81      	ldr	r2, [pc, #516]	; (800ab04 <SysTick_Handler+0x210>)
 800a900:	7813      	ldrb	r3, [r2, #0]
 800a902:	3301      	adds	r3, #1
 800a904:	b2db      	uxtb	r3, r3
 800a906:	7013      	strb	r3, [r2, #0]
 800a908:	2b14      	cmp	r3, #20
 800a90a:	d902      	bls.n	800a912 <SysTick_Handler+0x1e>
 800a90c:	0013      	movs	r3, r2
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	4b7d      	ldr	r3, [pc, #500]	; (800ab08 <SysTick_Handler+0x214>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	071b      	lsls	r3, r3, #28
 800a918:	d514      	bpl.n	800a944 <SysTick_Handler+0x50>
 800a91a:	4a7c      	ldr	r2, [pc, #496]	; (800ab0c <SysTick_Handler+0x218>)
 800a91c:	6813      	ldr	r3, [r2, #0]
 800a91e:	3301      	adds	r3, #1
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	4a7b      	ldr	r2, [pc, #492]	; (800ab10 <SysTick_Handler+0x21c>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d90d      	bls.n	800a944 <SysTick_Handler+0x50>
 800a928:	4b78      	ldr	r3, [pc, #480]	; (800ab0c <SysTick_Handler+0x218>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	4a76      	ldr	r2, [pc, #472]	; (800ab08 <SysTick_Handler+0x214>)
 800a930:	7813      	ldrb	r3, [r2, #0]
 800a932:	2108      	movs	r1, #8
 800a934:	438b      	bics	r3, r1
 800a936:	2120      	movs	r1, #32
 800a938:	430b      	orrs	r3, r1
 800a93a:	7013      	strb	r3, [r2, #0]
 800a93c:	7853      	ldrb	r3, [r2, #1]
 800a93e:	2102      	movs	r1, #2
 800a940:	430b      	orrs	r3, r1
 800a942:	7053      	strb	r3, [r2, #1]
 800a944:	4b70      	ldr	r3, [pc, #448]	; (800ab08 <SysTick_Handler+0x214>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	06db      	lsls	r3, r3, #27
 800a94a:	d511      	bpl.n	800a970 <SysTick_Handler+0x7c>
 800a94c:	4a6f      	ldr	r2, [pc, #444]	; (800ab0c <SysTick_Handler+0x218>)
 800a94e:	6813      	ldr	r3, [r2, #0]
 800a950:	3301      	adds	r3, #1
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	22fa      	movs	r2, #250	; 0xfa
 800a956:	0092      	lsls	r2, r2, #2
 800a958:	4293      	cmp	r3, r2
 800a95a:	d909      	bls.n	800a970 <SysTick_Handler+0x7c>
 800a95c:	4b6b      	ldr	r3, [pc, #428]	; (800ab0c <SysTick_Handler+0x218>)
 800a95e:	2200      	movs	r2, #0
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	4a69      	ldr	r2, [pc, #420]	; (800ab08 <SysTick_Handler+0x214>)
 800a964:	7813      	ldrb	r3, [r2, #0]
 800a966:	2110      	movs	r1, #16
 800a968:	438b      	bics	r3, r1
 800a96a:	2140      	movs	r1, #64	; 0x40
 800a96c:	430b      	orrs	r3, r1
 800a96e:	7013      	strb	r3, [r2, #0]
 800a970:	4b65      	ldr	r3, [pc, #404]	; (800ab08 <SysTick_Handler+0x214>)
 800a972:	885b      	ldrh	r3, [r3, #2]
 800a974:	4a67      	ldr	r2, [pc, #412]	; (800ab14 <SysTick_Handler+0x220>)
 800a976:	4013      	ands	r3, r2
 800a978:	2b08      	cmp	r3, #8
 800a97a:	d100      	bne.n	800a97e <SysTick_Handler+0x8a>
 800a97c:	e07e      	b.n	800aa7c <SysTick_Handler+0x188>
 800a97e:	4b62      	ldr	r3, [pc, #392]	; (800ab08 <SysTick_Handler+0x214>)
 800a980:	78db      	ldrb	r3, [r3, #3]
 800a982:	075b      	lsls	r3, r3, #29
 800a984:	d51a      	bpl.n	800a9bc <SysTick_Handler+0xc8>
 800a986:	4b61      	ldr	r3, [pc, #388]	; (800ab0c <SysTick_Handler+0x218>)
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	3201      	adds	r2, #1
 800a98c:	605a      	str	r2, [r3, #4]
 800a98e:	4b62      	ldr	r3, [pc, #392]	; (800ab18 <SysTick_Handler+0x224>)
 800a990:	6819      	ldr	r1, [r3, #0]
 800a992:	014b      	lsls	r3, r1, #5
 800a994:	1a5b      	subs	r3, r3, r1
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	185b      	adds	r3, r3, r1
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d100      	bne.n	800a9a2 <SysTick_Handler+0xae>
 800a9a0:	e07f      	b.n	800aaa2 <SysTick_Handler+0x1ae>
 800a9a2:	4b5e      	ldr	r3, [pc, #376]	; (800ab1c <SysTick_Handler+0x228>)
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d909      	bls.n	800a9bc <SysTick_Handler+0xc8>
 800a9a8:	4b58      	ldr	r3, [pc, #352]	; (800ab0c <SysTick_Handler+0x218>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	605a      	str	r2, [r3, #4]
 800a9ae:	4a56      	ldr	r2, [pc, #344]	; (800ab08 <SysTick_Handler+0x214>)
 800a9b0:	78d3      	ldrb	r3, [r2, #3]
 800a9b2:	2104      	movs	r1, #4
 800a9b4:	438b      	bics	r3, r1
 800a9b6:	2108      	movs	r1, #8
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	70d3      	strb	r3, [r2, #3]
 800a9bc:	4b52      	ldr	r3, [pc, #328]	; (800ab08 <SysTick_Handler+0x214>)
 800a9be:	78db      	ldrb	r3, [r3, #3]
 800a9c0:	069b      	lsls	r3, r3, #26
 800a9c2:	d510      	bpl.n	800a9e6 <SysTick_Handler+0xf2>
 800a9c4:	4a51      	ldr	r2, [pc, #324]	; (800ab0c <SysTick_Handler+0x218>)
 800a9c6:	6893      	ldr	r3, [r2, #8]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	6093      	str	r3, [r2, #8]
 800a9cc:	4a54      	ldr	r2, [pc, #336]	; (800ab20 <SysTick_Handler+0x22c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d909      	bls.n	800a9e6 <SysTick_Handler+0xf2>
 800a9d2:	4b4e      	ldr	r3, [pc, #312]	; (800ab0c <SysTick_Handler+0x218>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	609a      	str	r2, [r3, #8]
 800a9d8:	4a4b      	ldr	r2, [pc, #300]	; (800ab08 <SysTick_Handler+0x214>)
 800a9da:	78d3      	ldrb	r3, [r2, #3]
 800a9dc:	2120      	movs	r1, #32
 800a9de:	438b      	bics	r3, r1
 800a9e0:	2110      	movs	r1, #16
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	70d3      	strb	r3, [r2, #3]
 800a9e6:	4b48      	ldr	r3, [pc, #288]	; (800ab08 <SysTick_Handler+0x214>)
 800a9e8:	795b      	ldrb	r3, [r3, #5]
 800a9ea:	069b      	lsls	r3, r3, #26
 800a9ec:	d513      	bpl.n	800aa16 <SysTick_Handler+0x122>
 800a9ee:	4a4d      	ldr	r2, [pc, #308]	; (800ab24 <SysTick_Handler+0x230>)
 800a9f0:	6813      	ldr	r3, [r2, #0]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	22fa      	movs	r2, #250	; 0xfa
 800a9f8:	0092      	lsls	r2, r2, #2
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d30b      	bcc.n	800aa16 <SysTick_Handler+0x122>
 800a9fe:	4b49      	ldr	r3, [pc, #292]	; (800ab24 <SysTick_Handler+0x230>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	4b40      	ldr	r3, [pc, #256]	; (800ab08 <SysTick_Handler+0x214>)
 800aa06:	799a      	ldrb	r2, [r3, #6]
 800aa08:	2101      	movs	r1, #1
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	719a      	strb	r2, [r3, #6]
 800aa0e:	795a      	ldrb	r2, [r3, #5]
 800aa10:	2120      	movs	r1, #32
 800aa12:	438a      	bics	r2, r1
 800aa14:	715a      	strb	r2, [r3, #5]
 800aa16:	4b3c      	ldr	r3, [pc, #240]	; (800ab08 <SysTick_Handler+0x214>)
 800aa18:	795b      	ldrb	r3, [r3, #5]
 800aa1a:	b25b      	sxtb	r3, r3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	db44      	blt.n	800aaaa <SysTick_Handler+0x1b6>
 800aa20:	4b39      	ldr	r3, [pc, #228]	; (800ab08 <SysTick_Handler+0x214>)
 800aa22:	795b      	ldrb	r3, [r3, #5]
 800aa24:	065b      	lsls	r3, r3, #25
 800aa26:	d513      	bpl.n	800aa50 <SysTick_Handler+0x15c>
 800aa28:	4a3f      	ldr	r2, [pc, #252]	; (800ab28 <SysTick_Handler+0x234>)
 800aa2a:	6813      	ldr	r3, [r2, #0]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	22fa      	movs	r2, #250	; 0xfa
 800aa32:	0092      	lsls	r2, r2, #2
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d30b      	bcc.n	800aa50 <SysTick_Handler+0x15c>
 800aa38:	4b3b      	ldr	r3, [pc, #236]	; (800ab28 <SysTick_Handler+0x234>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	4b32      	ldr	r3, [pc, #200]	; (800ab08 <SysTick_Handler+0x214>)
 800aa40:	799a      	ldrb	r2, [r3, #6]
 800aa42:	2104      	movs	r1, #4
 800aa44:	430a      	orrs	r2, r1
 800aa46:	719a      	strb	r2, [r3, #6]
 800aa48:	795a      	ldrb	r2, [r3, #5]
 800aa4a:	2140      	movs	r1, #64	; 0x40
 800aa4c:	438a      	bics	r2, r1
 800aa4e:	715a      	strb	r2, [r3, #5]
 800aa50:	4b2d      	ldr	r3, [pc, #180]	; (800ab08 <SysTick_Handler+0x214>)
 800aa52:	791b      	ldrb	r3, [r3, #4]
 800aa54:	b25b      	sxtb	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	db3c      	blt.n	800aad4 <SysTick_Handler+0x1e0>
 800aa5a:	f7f7 fcc1 	bl	80023e0 <HAL_IncTick>
 800aa5e:	bd10      	pop	{r4, pc}
 800aa60:	4b28      	ldr	r3, [pc, #160]	; (800ab04 <SysTick_Handler+0x210>)
 800aa62:	7819      	ldrb	r1, [r3, #0]
 800aa64:	0093      	lsls	r3, r2, #2
 800aa66:	4831      	ldr	r0, [pc, #196]	; (800ab2c <SysTick_Handler+0x238>)
 800aa68:	5818      	ldr	r0, [r3, r0]
 800aa6a:	189b      	adds	r3, r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	185b      	adds	r3, r3, r1
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	492f      	ldr	r1, [pc, #188]	; (800ab30 <SysTick_Handler+0x23c>)
 800aa74:	5058      	str	r0, [r3, r1]
 800aa76:	3201      	adds	r2, #1
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	e73d      	b.n	800a8f8 <SysTick_Handler+0x4>
 800aa7c:	4a23      	ldr	r2, [pc, #140]	; (800ab0c <SysTick_Handler+0x218>)
 800aa7e:	6813      	ldr	r3, [r2, #0]
 800aa80:	3301      	adds	r3, #1
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	4a2b      	ldr	r2, [pc, #172]	; (800ab34 <SysTick_Handler+0x240>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d800      	bhi.n	800aa8c <SysTick_Handler+0x198>
 800aa8a:	e778      	b.n	800a97e <SysTick_Handler+0x8a>
 800aa8c:	4b1f      	ldr	r3, [pc, #124]	; (800ab0c <SysTick_Handler+0x218>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	4a1d      	ldr	r2, [pc, #116]	; (800ab08 <SysTick_Handler+0x214>)
 800aa94:	7813      	ldrb	r3, [r2, #0]
 800aa96:	2110      	movs	r1, #16
 800aa98:	438b      	bics	r3, r1
 800aa9a:	2140      	movs	r1, #64	; 0x40
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	7013      	strb	r3, [r2, #0]
 800aaa0:	e76d      	b.n	800a97e <SysTick_Handler+0x8a>
 800aaa2:	3101      	adds	r1, #1
 800aaa4:	4b1c      	ldr	r3, [pc, #112]	; (800ab18 <SysTick_Handler+0x224>)
 800aaa6:	6019      	str	r1, [r3, #0]
 800aaa8:	e77b      	b.n	800a9a2 <SysTick_Handler+0xae>
 800aaaa:	4a23      	ldr	r2, [pc, #140]	; (800ab38 <SysTick_Handler+0x244>)
 800aaac:	6813      	ldr	r3, [r2, #0]
 800aaae:	3301      	adds	r3, #1
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	22fa      	movs	r2, #250	; 0xfa
 800aab4:	0092      	lsls	r2, r2, #2
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d3b2      	bcc.n	800aa20 <SysTick_Handler+0x12c>
 800aaba:	4b1f      	ldr	r3, [pc, #124]	; (800ab38 <SysTick_Handler+0x244>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	4b11      	ldr	r3, [pc, #68]	; (800ab08 <SysTick_Handler+0x214>)
 800aac2:	799a      	ldrb	r2, [r3, #6]
 800aac4:	2102      	movs	r1, #2
 800aac6:	430a      	orrs	r2, r1
 800aac8:	719a      	strb	r2, [r3, #6]
 800aaca:	7959      	ldrb	r1, [r3, #5]
 800aacc:	227f      	movs	r2, #127	; 0x7f
 800aace:	400a      	ands	r2, r1
 800aad0:	715a      	strb	r2, [r3, #5]
 800aad2:	e7a5      	b.n	800aa20 <SysTick_Handler+0x12c>
 800aad4:	4a19      	ldr	r2, [pc, #100]	; (800ab3c <SysTick_Handler+0x248>)
 800aad6:	6813      	ldr	r3, [r2, #0]
 800aad8:	3301      	adds	r3, #1
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	22fa      	movs	r2, #250	; 0xfa
 800aade:	0052      	lsls	r2, r2, #1
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d3ba      	bcc.n	800aa5a <SysTick_Handler+0x166>
 800aae4:	4b15      	ldr	r3, [pc, #84]	; (800ab3c <SysTick_Handler+0x248>)
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	4a07      	ldr	r2, [pc, #28]	; (800ab08 <SysTick_Handler+0x214>)
 800aaec:	7911      	ldrb	r1, [r2, #4]
 800aaee:	237f      	movs	r3, #127	; 0x7f
 800aaf0:	400b      	ands	r3, r1
 800aaf2:	7113      	strb	r3, [r2, #4]
 800aaf4:	2180      	movs	r1, #128	; 0x80
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	01c9      	lsls	r1, r1, #7
 800aafa:	4811      	ldr	r0, [pc, #68]	; (800ab40 <SysTick_Handler+0x24c>)
 800aafc:	f7f8 fb59 	bl	80031b2 <HAL_GPIO_WritePin>
 800ab00:	e7ab      	b.n	800aa5a <SysTick_Handler+0x166>
 800ab02:	46c0      	nop			; (mov r8, r8)
 800ab04:	200003ac 	.word	0x200003ac
 800ab08:	2000032c 	.word	0x2000032c
 800ab0c:	20000240 	.word	0x20000240
 800ab10:	00001b58 	.word	0x00001b58
 800ab14:	00002008 	.word	0x00002008
 800ab18:	20000148 	.word	0x20000148
 800ab1c:	0001d4c0 	.word	0x0001d4c0
 800ab20:	00003a98 	.word	0x00003a98
 800ab24:	200001d4 	.word	0x200001d4
 800ab28:	200001d8 	.word	0x200001d8
 800ab2c:	200003b0 	.word	0x200003b0
 800ab30:	20000350 	.word	0x20000350
 800ab34:	00001388 	.word	0x00001388
 800ab38:	200003a8 	.word	0x200003a8
 800ab3c:	2000493c 	.word	0x2000493c
 800ab40:	50000400 	.word	0x50000400

0800ab44 <RTC_IRQHandler>:
 800ab44:	b510      	push	{r4, lr}
 800ab46:	4c04      	ldr	r4, [pc, #16]	; (800ab58 <RTC_IRQHandler+0x14>)
 800ab48:	0020      	movs	r0, r4
 800ab4a:	f7f9 f94d 	bl	8003de8 <HAL_RTC_AlarmIRQHandler>
 800ab4e:	0020      	movs	r0, r4
 800ab50:	f7f9 fc94 	bl	800447c <HAL_RTCEx_WakeUpTimerIRQHandler>
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	46c0      	nop			; (mov r8, r8)
 800ab58:	200048ac 	.word	0x200048ac

0800ab5c <EXTI4_15_IRQHandler>:
 800ab5c:	b510      	push	{r4, lr}
 800ab5e:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <EXTI4_15_IRQHandler+0x28>)
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	04db      	lsls	r3, r3, #19
 800ab64:	d504      	bpl.n	800ab70 <EXTI4_15_IRQHandler+0x14>
 800ab66:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <EXTI4_15_IRQHandler+0x2c>)
 800ab68:	7993      	ldrb	r3, [r2, #6]
 800ab6a:	2140      	movs	r1, #64	; 0x40
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	7193      	strb	r3, [r2, #6]
 800ab70:	2080      	movs	r0, #128	; 0x80
 800ab72:	00c0      	lsls	r0, r0, #3
 800ab74:	f7f8 fb24 	bl	80031c0 <HAL_GPIO_EXTI_IRQHandler>
 800ab78:	2080      	movs	r0, #128	; 0x80
 800ab7a:	0140      	lsls	r0, r0, #5
 800ab7c:	f7f8 fb20 	bl	80031c0 <HAL_GPIO_EXTI_IRQHandler>
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	46c0      	nop			; (mov r8, r8)
 800ab84:	40010400 	.word	0x40010400
 800ab88:	2000032c 	.word	0x2000032c

0800ab8c <DMA1_Channel1_IRQHandler>:
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	4802      	ldr	r0, [pc, #8]	; (800ab98 <DMA1_Channel1_IRQHandler+0xc>)
 800ab90:	f7f8 f952 	bl	8002e38 <HAL_DMA_IRQHandler>
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	200047e0 	.word	0x200047e0

0800ab9c <ADC1_COMP_IRQHandler>:
 800ab9c:	b510      	push	{r4, lr}
 800ab9e:	4802      	ldr	r0, [pc, #8]	; (800aba8 <ADC1_COMP_IRQHandler+0xc>)
 800aba0:	f7f7 fe88 	bl	80028b4 <HAL_ADC_IRQHandler>
 800aba4:	bd10      	pop	{r4, pc}
 800aba6:	46c0      	nop			; (mov r8, r8)
 800aba8:	20004828 	.word	0x20004828

0800abac <TIM3_IRQHandler>:
 800abac:	b510      	push	{r4, lr}
 800abae:	4802      	ldr	r0, [pc, #8]	; (800abb8 <TIM3_IRQHandler+0xc>)
 800abb0:	f7f9 ffc0 	bl	8004b34 <HAL_TIM_IRQHandler>
 800abb4:	bd10      	pop	{r4, pc}
 800abb6:	46c0      	nop			; (mov r8, r8)
 800abb8:	20004940 	.word	0x20004940

0800abbc <TIM6_DAC_IRQHandler>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	4802      	ldr	r0, [pc, #8]	; (800abc8 <TIM6_DAC_IRQHandler+0xc>)
 800abc0:	f7f9 ffb8 	bl	8004b34 <HAL_TIM_IRQHandler>
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	46c0      	nop			; (mov r8, r8)
 800abc8:	20004980 	.word	0x20004980

0800abcc <SPI1_IRQHandler>:
 800abcc:	b510      	push	{r4, lr}
 800abce:	4802      	ldr	r0, [pc, #8]	; (800abd8 <SPI1_IRQHandler+0xc>)
 800abd0:	f7f9 fcd8 	bl	8004584 <HAL_SPI_IRQHandler>
 800abd4:	bd10      	pop	{r4, pc}
 800abd6:	46c0      	nop			; (mov r8, r8)
 800abd8:	200048e4 	.word	0x200048e4

0800abdc <USART1_IRQHandler>:
 800abdc:	b510      	push	{r4, lr}
 800abde:	4802      	ldr	r0, [pc, #8]	; (800abe8 <USART1_IRQHandler+0xc>)
 800abe0:	f7fa f8de 	bl	8004da0 <HAL_UART_IRQHandler>
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	46c0      	nop			; (mov r8, r8)
 800abe8:	200003c4 	.word	0x200003c4

0800abec <RNG_LPUART1_IRQHandler>:
 800abec:	b510      	push	{r4, lr}
 800abee:	4802      	ldr	r0, [pc, #8]	; (800abf8 <RNG_LPUART1_IRQHandler+0xc>)
 800abf0:	f7fa f8d6 	bl	8004da0 <HAL_UART_IRQHandler>
 800abf4:	bd10      	pop	{r4, pc}
 800abf6:	46c0      	nop			; (mov r8, r8)
 800abf8:	200046a4 	.word	0x200046a4

0800abfc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800abfc:	b510      	push	{r4, lr}
 800abfe:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ac00:	4a0b      	ldr	r2, [pc, #44]	; (800ac30 <_sbrk+0x34>)
 800ac02:	6812      	ldr	r2, [r2, #0]
 800ac04:	2a00      	cmp	r2, #0
 800ac06:	d008      	beq.n	800ac1a <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 800ac08:	4a09      	ldr	r2, [pc, #36]	; (800ac30 <_sbrk+0x34>)
 800ac0a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800ac0c:	18c3      	adds	r3, r0, r3
 800ac0e:	466a      	mov	r2, sp
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d806      	bhi.n	800ac22 <_sbrk+0x26>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800ac14:	4a06      	ldr	r2, [pc, #24]	; (800ac30 <_sbrk+0x34>)
 800ac16:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800ac18:	bd10      	pop	{r4, pc}
		heap_end = &end;
 800ac1a:	4a05      	ldr	r2, [pc, #20]	; (800ac30 <_sbrk+0x34>)
 800ac1c:	4905      	ldr	r1, [pc, #20]	; (800ac34 <_sbrk+0x38>)
 800ac1e:	6011      	str	r1, [r2, #0]
 800ac20:	e7f2      	b.n	800ac08 <_sbrk+0xc>
		errno = ENOMEM;
 800ac22:	f000 fa1f 	bl	800b064 <__errno>
 800ac26:	230c      	movs	r3, #12
 800ac28:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800ac2a:	2001      	movs	r0, #1
 800ac2c:	4240      	negs	r0, r0
 800ac2e:	e7f3      	b.n	800ac18 <_sbrk+0x1c>
 800ac30:	2000024c 	.word	0x2000024c
 800ac34:	200049d0 	.word	0x200049d0

0800ac38 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800ac38:	4b10      	ldr	r3, [pc, #64]	; (800ac7c <SystemInit+0x44>)
 800ac3a:	6819      	ldr	r1, [r3, #0]
 800ac3c:	2280      	movs	r2, #128	; 0x80
 800ac3e:	0052      	lsls	r2, r2, #1
 800ac40:	430a      	orrs	r2, r1
 800ac42:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	490e      	ldr	r1, [pc, #56]	; (800ac80 <SystemInit+0x48>)
 800ac48:	400a      	ands	r2, r1
 800ac4a:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	490d      	ldr	r1, [pc, #52]	; (800ac84 <SystemInit+0x4c>)
 800ac50:	400a      	ands	r2, r1
 800ac52:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800ac54:	689a      	ldr	r2, [r3, #8]
 800ac56:	2101      	movs	r1, #1
 800ac58:	438a      	bics	r2, r1
 800ac5a:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	490a      	ldr	r1, [pc, #40]	; (800ac88 <SystemInit+0x50>)
 800ac60:	400a      	ands	r2, r1
 800ac62:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	4909      	ldr	r1, [pc, #36]	; (800ac8c <SystemInit+0x54>)
 800ac68:	400a      	ands	r2, r1
 800ac6a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ac70:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <SystemInit+0x58>)
 800ac72:	2280      	movs	r2, #128	; 0x80
 800ac74:	0512      	lsls	r2, r2, #20
 800ac76:	609a      	str	r2, [r3, #8]
#endif
}
 800ac78:	4770      	bx	lr
 800ac7a:	46c0      	nop			; (mov r8, r8)
 800ac7c:	40021000 	.word	0x40021000
 800ac80:	88ff400c 	.word	0x88ff400c
 800ac84:	fef6fff6 	.word	0xfef6fff6
 800ac88:	fffbffff 	.word	0xfffbffff
 800ac8c:	ff02ffff 	.word	0xff02ffff
 800ac90:	e000ed00 	.word	0xe000ed00

0800ac94 <MX_TIM6_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ac94:	b500      	push	{lr}
 800ac96:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac98:	2208      	movs	r2, #8
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	4668      	mov	r0, sp
 800ac9e:	f000 fa14 	bl	800b0ca <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800aca2:	480f      	ldr	r0, [pc, #60]	; (800ace0 <MX_TIM6_Init+0x4c>)
 800aca4:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <MX_TIM6_Init+0x50>)
 800aca6:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 65535;
 800aca8:	4b0f      	ldr	r3, [pc, #60]	; (800ace8 <MX_TIM6_Init+0x54>)
 800acaa:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800acac:	2300      	movs	r3, #0
 800acae:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 9;
 800acb0:	2209      	movs	r2, #9
 800acb2:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800acb4:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800acb6:	f7f9 fdb0 	bl	800481a <HAL_TIM_Base_Init>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d10a      	bne.n	800acd4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800acbe:	2300      	movs	r3, #0
 800acc0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800acc2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800acc4:	4669      	mov	r1, sp
 800acc6:	4806      	ldr	r0, [pc, #24]	; (800ace0 <MX_TIM6_Init+0x4c>)
 800acc8:	f7f9 ffc6 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 800accc:	2800      	cmp	r0, #0
 800acce:	d104      	bne.n	800acda <MX_TIM6_Init+0x46>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800acd0:	b003      	add	sp, #12
 800acd2:	bd00      	pop	{pc}
    Error_Handler();
 800acd4:	f7ff fc46 	bl	800a564 <Error_Handler>
 800acd8:	e7f1      	b.n	800acbe <MX_TIM6_Init+0x2a>
    Error_Handler();
 800acda:	f7ff fc43 	bl	800a564 <Error_Handler>
}
 800acde:	e7f7      	b.n	800acd0 <MX_TIM6_Init+0x3c>
 800ace0:	20004980 	.word	0x20004980
 800ace4:	40001000 	.word	0x40001000
 800ace8:	0000ffff 	.word	0x0000ffff

0800acec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800acec:	b510      	push	{r4, lr}

  if(tim_pwmHandle->Instance==TIM3)
 800acee:	6802      	ldr	r2, [r0, #0]
 800acf0:	4b08      	ldr	r3, [pc, #32]	; (800ad14 <HAL_TIM_PWM_MspInit+0x28>)
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d000      	beq.n	800acf8 <HAL_TIM_PWM_MspInit+0xc>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800acf6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800acf8:	4a07      	ldr	r2, [pc, #28]	; (800ad18 <HAL_TIM_PWM_MspInit+0x2c>)
 800acfa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800acfc:	2102      	movs	r1, #2
 800acfe:	430b      	orrs	r3, r1
 800ad00:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ad02:	2200      	movs	r2, #0
 800ad04:	2100      	movs	r1, #0
 800ad06:	2010      	movs	r0, #16
 800ad08:	f7f7 ff0e 	bl	8002b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ad0c:	2010      	movs	r0, #16
 800ad0e:	f7f7 ff3b 	bl	8002b88 <HAL_NVIC_EnableIRQ>
}
 800ad12:	e7f0      	b.n	800acf6 <HAL_TIM_PWM_MspInit+0xa>
 800ad14:	40000400 	.word	0x40000400
 800ad18:	40021000 	.word	0x40021000

0800ad1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ad1c:	b510      	push	{r4, lr}

  if(tim_baseHandle->Instance==TIM6)
 800ad1e:	6802      	ldr	r2, [r0, #0]
 800ad20:	4b08      	ldr	r3, [pc, #32]	; (800ad44 <HAL_TIM_Base_MspInit+0x28>)
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d000      	beq.n	800ad28 <HAL_TIM_Base_MspInit+0xc>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800ad26:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 800ad28:	4a07      	ldr	r2, [pc, #28]	; (800ad48 <HAL_TIM_Base_MspInit+0x2c>)
 800ad2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ad2c:	2110      	movs	r1, #16
 800ad2e:	430b      	orrs	r3, r1
 800ad30:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800ad32:	2200      	movs	r2, #0
 800ad34:	2100      	movs	r1, #0
 800ad36:	2011      	movs	r0, #17
 800ad38:	f7f7 fef6 	bl	8002b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ad3c:	2011      	movs	r0, #17
 800ad3e:	f7f7 ff23 	bl	8002b88 <HAL_NVIC_EnableIRQ>
}
 800ad42:	e7f0      	b.n	800ad26 <HAL_TIM_Base_MspInit+0xa>
 800ad44:	40001000 	.word	0x40001000
 800ad48:	40021000 	.word	0x40021000

0800ad4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ad4c:	b510      	push	{r4, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad52:	2214      	movs	r2, #20
 800ad54:	2100      	movs	r1, #0
 800ad56:	a801      	add	r0, sp, #4
 800ad58:	f000 f9b7 	bl	800b0ca <memset>
  if(timHandle->Instance==TIM3)
 800ad5c:	6822      	ldr	r2, [r4, #0]
 800ad5e:	4b0d      	ldr	r3, [pc, #52]	; (800ad94 <HAL_TIM_MspPostInit+0x48>)
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d001      	beq.n	800ad68 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800ad64:	b006      	add	sp, #24
 800ad66:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad68:	4a0b      	ldr	r2, [pc, #44]	; (800ad98 <HAL_TIM_MspPostInit+0x4c>)
 800ad6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	4319      	orrs	r1, r3
 800ad70:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ad72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad74:	401a      	ands	r2, r3
 800ad76:	9200      	str	r2, [sp, #0]
 800ad78:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = Buzzer_Output_Pin;
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad7e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad80:	2200      	movs	r2, #0
 800ad82:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad84:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ad86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(Buzzer_Output_GPIO_Port, &GPIO_InitStruct);
 800ad88:	a901      	add	r1, sp, #4
 800ad8a:	4804      	ldr	r0, [pc, #16]	; (800ad9c <HAL_TIM_MspPostInit+0x50>)
 800ad8c:	f7f8 f8b2 	bl	8002ef4 <HAL_GPIO_Init>
}
 800ad90:	e7e8      	b.n	800ad64 <HAL_TIM_MspPostInit+0x18>
 800ad92:	46c0      	nop			; (mov r8, r8)
 800ad94:	40000400 	.word	0x40000400
 800ad98:	40021000 	.word	0x40021000
 800ad9c:	50000400 	.word	0x50000400

0800ada0 <MX_TIM3_Init>:
{
 800ada0:	b500      	push	{lr}
 800ada2:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ada4:	2208      	movs	r2, #8
 800ada6:	2100      	movs	r1, #0
 800ada8:	a804      	add	r0, sp, #16
 800adaa:	f000 f98e 	bl	800b0ca <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800adae:	2210      	movs	r2, #16
 800adb0:	2100      	movs	r1, #0
 800adb2:	4668      	mov	r0, sp
 800adb4:	f000 f989 	bl	800b0ca <memset>
  htim3.Instance = TIM3;
 800adb8:	4818      	ldr	r0, [pc, #96]	; (800ae1c <MX_TIM3_Init+0x7c>)
 800adba:	4b19      	ldr	r3, [pc, #100]	; (800ae20 <MX_TIM3_Init+0x80>)
 800adbc:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 200;
 800adbe:	22c8      	movs	r2, #200	; 0xc8
 800adc0:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800adc2:	2300      	movs	r3, #0
 800adc4:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 200;
 800adc6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800adc8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800adca:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800adcc:	f7f9 fd80 	bl	80048d0 <HAL_TIM_PWM_Init>
 800add0:	2800      	cmp	r0, #0
 800add2:	d11a      	bne.n	800ae0a <MX_TIM3_Init+0x6a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800add4:	2300      	movs	r3, #0
 800add6:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800add8:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800adda:	a904      	add	r1, sp, #16
 800addc:	480f      	ldr	r0, [pc, #60]	; (800ae1c <MX_TIM3_Init+0x7c>)
 800adde:	f7f9 ff3b 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d114      	bne.n	800ae10 <MX_TIM3_Init+0x70>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ade6:	2360      	movs	r3, #96	; 0x60
 800ade8:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800adee:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800adf0:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800adf2:	2208      	movs	r2, #8
 800adf4:	4669      	mov	r1, sp
 800adf6:	4809      	ldr	r0, [pc, #36]	; (800ae1c <MX_TIM3_Init+0x7c>)
 800adf8:	f7f9 fe20 	bl	8004a3c <HAL_TIM_PWM_ConfigChannel>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d10a      	bne.n	800ae16 <MX_TIM3_Init+0x76>
  HAL_TIM_MspPostInit(&htim3);
 800ae00:	4806      	ldr	r0, [pc, #24]	; (800ae1c <MX_TIM3_Init+0x7c>)
 800ae02:	f7ff ffa3 	bl	800ad4c <HAL_TIM_MspPostInit>
}
 800ae06:	b007      	add	sp, #28
 800ae08:	bd00      	pop	{pc}
    Error_Handler();
 800ae0a:	f7ff fbab 	bl	800a564 <Error_Handler>
 800ae0e:	e7e1      	b.n	800add4 <MX_TIM3_Init+0x34>
    Error_Handler();
 800ae10:	f7ff fba8 	bl	800a564 <Error_Handler>
 800ae14:	e7e7      	b.n	800ade6 <MX_TIM3_Init+0x46>
    Error_Handler();
 800ae16:	f7ff fba5 	bl	800a564 <Error_Handler>
 800ae1a:	e7f1      	b.n	800ae00 <MX_TIM3_Init+0x60>
 800ae1c:	20004940 	.word	0x20004940
 800ae20:	40000400 	.word	0x40000400

0800ae24 <HAL_TIM_PWM_MspDeInit>:

void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800ae24:	b510      	push	{r4, lr}

  if(tim_pwmHandle->Instance==TIM3)
 800ae26:	6802      	ldr	r2, [r0, #0]
 800ae28:	4b06      	ldr	r3, [pc, #24]	; (800ae44 <HAL_TIM_PWM_MspDeInit+0x20>)
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d000      	beq.n	800ae30 <HAL_TIM_PWM_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }
}
 800ae2e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_DISABLE();
 800ae30:	4a05      	ldr	r2, [pc, #20]	; (800ae48 <HAL_TIM_PWM_MspDeInit+0x24>)
 800ae32:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ae34:	2102      	movs	r1, #2
 800ae36:	438b      	bics	r3, r1
 800ae38:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800ae3a:	2010      	movs	r0, #16
 800ae3c:	f7f7 feb0 	bl	8002ba0 <HAL_NVIC_DisableIRQ>
}
 800ae40:	e7f5      	b.n	800ae2e <HAL_TIM_PWM_MspDeInit+0xa>
 800ae42:	46c0      	nop			; (mov r8, r8)
 800ae44:	40000400 	.word	0x40000400
 800ae48:	40021000 	.word	0x40021000

0800ae4c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ae4c:	b510      	push	{r4, lr}

  if(tim_baseHandle->Instance==TIM6)
 800ae4e:	6802      	ldr	r2, [r0, #0]
 800ae50:	4b06      	ldr	r3, [pc, #24]	; (800ae6c <HAL_TIM_Base_MspDeInit+0x20>)
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d000      	beq.n	800ae58 <HAL_TIM_Base_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }
}
 800ae56:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_DISABLE();
 800ae58:	4a05      	ldr	r2, [pc, #20]	; (800ae70 <HAL_TIM_Base_MspDeInit+0x24>)
 800ae5a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ae5c:	2110      	movs	r1, #16
 800ae5e:	438b      	bics	r3, r1
 800ae60:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 800ae62:	2011      	movs	r0, #17
 800ae64:	f7f7 fe9c 	bl	8002ba0 <HAL_NVIC_DisableIRQ>
}
 800ae68:	e7f5      	b.n	800ae56 <HAL_TIM_Base_MspDeInit+0xa>
 800ae6a:	46c0      	nop			; (mov r8, r8)
 800ae6c:	40001000 	.word	0x40001000
 800ae70:	40021000 	.word	0x40021000

0800ae74 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800ae74:	b510      	push	{r4, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800ae76:	480b      	ldr	r0, [pc, #44]	; (800aea4 <MX_LPUART1_UART_Init+0x30>)
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <MX_LPUART1_UART_Init+0x34>)
 800ae7a:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 800ae7c:	23e1      	movs	r3, #225	; 0xe1
 800ae7e:	025b      	lsls	r3, r3, #9
 800ae80:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ae82:	2300      	movs	r3, #0
 800ae84:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800ae86:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800ae88:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800ae8a:	220c      	movs	r2, #12
 800ae8c:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ae8e:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ae90:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ae92:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800ae94:	f7fa fc96 	bl	80057c4 <HAL_UART_Init>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d100      	bne.n	800ae9e <MX_LPUART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800ae9c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800ae9e:	f7ff fb61 	bl	800a564 <Error_Handler>
}
 800aea2:	e7fb      	b.n	800ae9c <MX_LPUART1_UART_Init+0x28>
 800aea4:	200046a4 	.word	0x200046a4
 800aea8:	40004800 	.word	0x40004800

0800aeac <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800aeac:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800aeae:	480c      	ldr	r0, [pc, #48]	; (800aee0 <MX_USART1_UART_Init+0x34>)
 800aeb0:	4b0c      	ldr	r3, [pc, #48]	; (800aee4 <MX_USART1_UART_Init+0x38>)
 800aeb2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800aeb4:	23e1      	movs	r3, #225	; 0xe1
 800aeb6:	025b      	lsls	r3, r3, #9
 800aeb8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aeba:	2300      	movs	r3, #0
 800aebc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800aebe:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800aec0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800aec2:	220c      	movs	r2, #12
 800aec4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aec6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800aec8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aeca:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aecc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800aece:	f7fa fc79 	bl	80057c4 <HAL_UART_Init>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d100      	bne.n	800aed8 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800aed6:	bd10      	pop	{r4, pc}
    Error_Handler();
 800aed8:	f7ff fb44 	bl	800a564 <Error_Handler>
}
 800aedc:	e7fb      	b.n	800aed6 <MX_USART1_UART_Init+0x2a>
 800aede:	46c0      	nop			; (mov r8, r8)
 800aee0:	200003c4 	.word	0x200003c4
 800aee4:	40013800 	.word	0x40013800

0800aee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aee8:	b510      	push	{r4, lr}
 800aeea:	b088      	sub	sp, #32
 800aeec:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aeee:	2214      	movs	r2, #20
 800aef0:	2100      	movs	r1, #0
 800aef2:	a803      	add	r0, sp, #12
 800aef4:	f000 f8e9 	bl	800b0ca <memset>
  if(uartHandle->Instance==LPUART1)
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	4a2a      	ldr	r2, [pc, #168]	; (800afa4 <HAL_UART_MspInit+0xbc>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d004      	beq.n	800af0a <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 800af00:	4a29      	ldr	r2, [pc, #164]	; (800afa8 <HAL_UART_MspInit+0xc0>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d027      	beq.n	800af56 <HAL_UART_MspInit+0x6e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800af06:	b008      	add	sp, #32
 800af08:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800af0a:	4b28      	ldr	r3, [pc, #160]	; (800afac <HAL_UART_MspInit+0xc4>)
 800af0c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800af0e:	2280      	movs	r2, #128	; 0x80
 800af10:	02d2      	lsls	r2, r2, #11
 800af12:	430a      	orrs	r2, r1
 800af14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800af18:	2201      	movs	r2, #1
 800af1a:	4311      	orrs	r1, r2
 800af1c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800af1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af20:	401a      	ands	r2, r3
 800af22:	9201      	str	r2, [sp, #4]
 800af24:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800af26:	230c      	movs	r3, #12
 800af28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af2a:	3b0a      	subs	r3, #10
 800af2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af32:	3303      	adds	r3, #3
 800af34:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800af36:	3303      	adds	r3, #3
 800af38:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af3a:	20a0      	movs	r0, #160	; 0xa0
 800af3c:	a903      	add	r1, sp, #12
 800af3e:	05c0      	lsls	r0, r0, #23
 800af40:	f7f7 ffd8 	bl	8002ef4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 800af44:	2200      	movs	r2, #0
 800af46:	2100      	movs	r1, #0
 800af48:	201d      	movs	r0, #29
 800af4a:	f7f7 fded 	bl	8002b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 800af4e:	201d      	movs	r0, #29
 800af50:	f7f7 fe1a 	bl	8002b88 <HAL_NVIC_EnableIRQ>
 800af54:	e7d7      	b.n	800af06 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800af56:	4b15      	ldr	r3, [pc, #84]	; (800afac <HAL_UART_MspInit+0xc4>)
 800af58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800af5a:	2280      	movs	r2, #128	; 0x80
 800af5c:	01d2      	lsls	r2, r2, #7
 800af5e:	430a      	orrs	r2, r1
 800af60:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800af64:	2201      	movs	r2, #1
 800af66:	4311      	orrs	r1, r2
 800af68:	62d9      	str	r1, [r3, #44]	; 0x2c
 800af6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6c:	401a      	ands	r2, r3
 800af6e:	9202      	str	r2, [sp, #8]
 800af70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800af72:	23c0      	movs	r3, #192	; 0xc0
 800af74:	00db      	lsls	r3, r3, #3
 800af76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af78:	2302      	movs	r3, #2
 800af7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af7c:	2300      	movs	r3, #0
 800af7e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af80:	3303      	adds	r3, #3
 800af82:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800af84:	3301      	adds	r3, #1
 800af86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af88:	20a0      	movs	r0, #160	; 0xa0
 800af8a:	a903      	add	r1, sp, #12
 800af8c:	05c0      	lsls	r0, r0, #23
 800af8e:	f7f7 ffb1 	bl	8002ef4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800af92:	2200      	movs	r2, #0
 800af94:	2100      	movs	r1, #0
 800af96:	201b      	movs	r0, #27
 800af98:	f7f7 fdc6 	bl	8002b28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800af9c:	201b      	movs	r0, #27
 800af9e:	f7f7 fdf3 	bl	8002b88 <HAL_NVIC_EnableIRQ>
}
 800afa2:	e7b0      	b.n	800af06 <HAL_UART_MspInit+0x1e>
 800afa4:	40004800 	.word	0x40004800
 800afa8:	40013800 	.word	0x40013800
 800afac:	40021000 	.word	0x40021000

0800afb0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800afb0:	b510      	push	{r4, lr}

  if(uartHandle->Instance==LPUART1)
 800afb2:	6803      	ldr	r3, [r0, #0]
 800afb4:	4a11      	ldr	r2, [pc, #68]	; (800affc <HAL_UART_MspDeInit+0x4c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d003      	beq.n	800afc2 <HAL_UART_MspDeInit+0x12>
    HAL_NVIC_DisableIRQ(RNG_LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 800afba:	4a11      	ldr	r2, [pc, #68]	; (800b000 <HAL_UART_MspDeInit+0x50>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d00e      	beq.n	800afde <HAL_UART_MspDeInit+0x2e>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800afc0:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800afc2:	4a10      	ldr	r2, [pc, #64]	; (800b004 <HAL_UART_MspDeInit+0x54>)
 800afc4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800afc6:	4910      	ldr	r1, [pc, #64]	; (800b008 <HAL_UART_MspDeInit+0x58>)
 800afc8:	400b      	ands	r3, r1
 800afca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800afcc:	20a0      	movs	r0, #160	; 0xa0
 800afce:	210c      	movs	r1, #12
 800afd0:	05c0      	lsls	r0, r0, #23
 800afd2:	f7f8 f85d 	bl	8003090 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(RNG_LPUART1_IRQn);
 800afd6:	201d      	movs	r0, #29
 800afd8:	f7f7 fde2 	bl	8002ba0 <HAL_NVIC_DisableIRQ>
 800afdc:	e7f0      	b.n	800afc0 <HAL_UART_MspDeInit+0x10>
    __HAL_RCC_USART1_CLK_DISABLE();
 800afde:	4a09      	ldr	r2, [pc, #36]	; (800b004 <HAL_UART_MspDeInit+0x54>)
 800afe0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800afe2:	490a      	ldr	r1, [pc, #40]	; (800b00c <HAL_UART_MspDeInit+0x5c>)
 800afe4:	400b      	ands	r3, r1
 800afe6:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800afe8:	21c0      	movs	r1, #192	; 0xc0
 800afea:	20a0      	movs	r0, #160	; 0xa0
 800afec:	00c9      	lsls	r1, r1, #3
 800afee:	05c0      	lsls	r0, r0, #23
 800aff0:	f7f8 f84e 	bl	8003090 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800aff4:	201b      	movs	r0, #27
 800aff6:	f7f7 fdd3 	bl	8002ba0 <HAL_NVIC_DisableIRQ>
}
 800affa:	e7e1      	b.n	800afc0 <HAL_UART_MspDeInit+0x10>
 800affc:	40004800 	.word	0x40004800
 800b000:	40013800 	.word	0x40013800
 800b004:	40021000 	.word	0x40021000
 800b008:	fffbffff 	.word	0xfffbffff
 800b00c:	ffffbfff 	.word	0xffffbfff

0800b010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800b010:	480d      	ldr	r0, [pc, #52]	; (800b048 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800b012:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800b014:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b016:	e003      	b.n	800b020 <LoopCopyDataInit>

0800b018 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b018:	4b0c      	ldr	r3, [pc, #48]	; (800b04c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800b01a:	585b      	ldr	r3, [r3, r1]
d  str  r3, [r0, r1]
 800b01c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b01e:	3104      	adds	r1, #4

0800b020 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800b020:	480b      	ldr	r0, [pc, #44]	; (800b050 <LoopForever+0xa>)
  ldr  r3, =_edata
 800b022:	4b0c      	ldr	r3, [pc, #48]	; (800b054 <LoopForever+0xe>)
  adds  r2, r0, r1
 800b024:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b026:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b028:	d3f6      	bcc.n	800b018 <CopyDataInit>
  ldr  r2, =_sbss
 800b02a:	4a0b      	ldr	r2, [pc, #44]	; (800b058 <LoopForever+0x12>)
  b  LoopFillZerobss
 800b02c:	e002      	b.n	800b034 <LoopFillZerobss>

0800b02e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800b02e:	2300      	movs	r3, #0
  str  r3, [r2]
 800b030:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b032:	3204      	adds	r2, #4

0800b034 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800b034:	4b09      	ldr	r3, [pc, #36]	; (800b05c <LoopForever+0x16>)
  cmp  r2, r3
 800b036:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b038:	d3f9      	bcc.n	800b02e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800b03a:	f7ff fdfd 	bl	800ac38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b03e:	f000 f817 	bl	800b070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b042:	f7ff f8fd 	bl	800a240 <main>

0800b046 <LoopForever>:

LoopForever:
    b LoopForever
 800b046:	e7fe      	b.n	800b046 <LoopForever>
   ldr   r0, =_estack
 800b048:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800b04c:	08010ec0 	.word	0x08010ec0
  ldr  r0, =_sdata
 800b050:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b054:	200001b8 	.word	0x200001b8
  ldr  r2, =_sbss
 800b058:	200001b8 	.word	0x200001b8
  ldr  r3, = _ebss
 800b05c:	200049d0 	.word	0x200049d0

0800b060 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b060:	e7fe      	b.n	800b060 <DMA1_Channel2_3_IRQHandler>
	...

0800b064 <__errno>:
 800b064:	4b01      	ldr	r3, [pc, #4]	; (800b06c <__errno+0x8>)
 800b066:	6818      	ldr	r0, [r3, #0]
 800b068:	4770      	bx	lr
 800b06a:	46c0      	nop			; (mov r8, r8)
 800b06c:	20000150 	.word	0x20000150

0800b070 <__libc_init_array>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	2600      	movs	r6, #0
 800b074:	4d0c      	ldr	r5, [pc, #48]	; (800b0a8 <__libc_init_array+0x38>)
 800b076:	4c0d      	ldr	r4, [pc, #52]	; (800b0ac <__libc_init_array+0x3c>)
 800b078:	1b64      	subs	r4, r4, r5
 800b07a:	10a4      	asrs	r4, r4, #2
 800b07c:	42a6      	cmp	r6, r4
 800b07e:	d109      	bne.n	800b094 <__libc_init_array+0x24>
 800b080:	2600      	movs	r6, #0
 800b082:	f001 fbed 	bl	800c860 <_init>
 800b086:	4d0a      	ldr	r5, [pc, #40]	; (800b0b0 <__libc_init_array+0x40>)
 800b088:	4c0a      	ldr	r4, [pc, #40]	; (800b0b4 <__libc_init_array+0x44>)
 800b08a:	1b64      	subs	r4, r4, r5
 800b08c:	10a4      	asrs	r4, r4, #2
 800b08e:	42a6      	cmp	r6, r4
 800b090:	d105      	bne.n	800b09e <__libc_init_array+0x2e>
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	00b3      	lsls	r3, r6, #2
 800b096:	58eb      	ldr	r3, [r5, r3]
 800b098:	4798      	blx	r3
 800b09a:	3601      	adds	r6, #1
 800b09c:	e7ee      	b.n	800b07c <__libc_init_array+0xc>
 800b09e:	00b3      	lsls	r3, r6, #2
 800b0a0:	58eb      	ldr	r3, [r5, r3]
 800b0a2:	4798      	blx	r3
 800b0a4:	3601      	adds	r6, #1
 800b0a6:	e7f2      	b.n	800b08e <__libc_init_array+0x1e>
 800b0a8:	08010eb8 	.word	0x08010eb8
 800b0ac:	08010eb8 	.word	0x08010eb8
 800b0b0:	08010eb8 	.word	0x08010eb8
 800b0b4:	08010ebc 	.word	0x08010ebc

0800b0b8 <memcpy>:
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	b510      	push	{r4, lr}
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d100      	bne.n	800b0c2 <memcpy+0xa>
 800b0c0:	bd10      	pop	{r4, pc}
 800b0c2:	5ccc      	ldrb	r4, [r1, r3]
 800b0c4:	54c4      	strb	r4, [r0, r3]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	e7f8      	b.n	800b0bc <memcpy+0x4>

0800b0ca <memset>:
 800b0ca:	0003      	movs	r3, r0
 800b0cc:	1882      	adds	r2, r0, r2
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d100      	bne.n	800b0d4 <memset+0xa>
 800b0d2:	4770      	bx	lr
 800b0d4:	7019      	strb	r1, [r3, #0]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	e7f9      	b.n	800b0ce <memset+0x4>
	...

0800b0dc <siprintf>:
 800b0dc:	b40e      	push	{r1, r2, r3}
 800b0de:	b500      	push	{lr}
 800b0e0:	490b      	ldr	r1, [pc, #44]	; (800b110 <siprintf+0x34>)
 800b0e2:	b09c      	sub	sp, #112	; 0x70
 800b0e4:	ab1d      	add	r3, sp, #116	; 0x74
 800b0e6:	9002      	str	r0, [sp, #8]
 800b0e8:	9006      	str	r0, [sp, #24]
 800b0ea:	9107      	str	r1, [sp, #28]
 800b0ec:	9104      	str	r1, [sp, #16]
 800b0ee:	4809      	ldr	r0, [pc, #36]	; (800b114 <siprintf+0x38>)
 800b0f0:	4909      	ldr	r1, [pc, #36]	; (800b118 <siprintf+0x3c>)
 800b0f2:	cb04      	ldmia	r3!, {r2}
 800b0f4:	9105      	str	r1, [sp, #20]
 800b0f6:	6800      	ldr	r0, [r0, #0]
 800b0f8:	a902      	add	r1, sp, #8
 800b0fa:	9301      	str	r3, [sp, #4]
 800b0fc:	f000 f89c 	bl	800b238 <_svfiprintf_r>
 800b100:	2300      	movs	r3, #0
 800b102:	9a02      	ldr	r2, [sp, #8]
 800b104:	7013      	strb	r3, [r2, #0]
 800b106:	b01c      	add	sp, #112	; 0x70
 800b108:	bc08      	pop	{r3}
 800b10a:	b003      	add	sp, #12
 800b10c:	4718      	bx	r3
 800b10e:	46c0      	nop			; (mov r8, r8)
 800b110:	7fffffff 	.word	0x7fffffff
 800b114:	20000150 	.word	0x20000150
 800b118:	ffff0208 	.word	0xffff0208

0800b11c <strcat>:
 800b11c:	0002      	movs	r2, r0
 800b11e:	b510      	push	{r4, lr}
 800b120:	7813      	ldrb	r3, [r2, #0]
 800b122:	0014      	movs	r4, r2
 800b124:	3201      	adds	r2, #1
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1fa      	bne.n	800b120 <strcat+0x4>
 800b12a:	5cca      	ldrb	r2, [r1, r3]
 800b12c:	54e2      	strb	r2, [r4, r3]
 800b12e:	3301      	adds	r3, #1
 800b130:	2a00      	cmp	r2, #0
 800b132:	d1fa      	bne.n	800b12a <strcat+0xe>
 800b134:	bd10      	pop	{r4, pc}

0800b136 <strcpy>:
 800b136:	0003      	movs	r3, r0
 800b138:	780a      	ldrb	r2, [r1, #0]
 800b13a:	3101      	adds	r1, #1
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	3301      	adds	r3, #1
 800b140:	2a00      	cmp	r2, #0
 800b142:	d1f9      	bne.n	800b138 <strcpy+0x2>
 800b144:	4770      	bx	lr

0800b146 <strstr>:
 800b146:	780a      	ldrb	r2, [r1, #0]
 800b148:	b530      	push	{r4, r5, lr}
 800b14a:	2a00      	cmp	r2, #0
 800b14c:	d10c      	bne.n	800b168 <strstr+0x22>
 800b14e:	bd30      	pop	{r4, r5, pc}
 800b150:	429a      	cmp	r2, r3
 800b152:	d108      	bne.n	800b166 <strstr+0x20>
 800b154:	2301      	movs	r3, #1
 800b156:	5ccc      	ldrb	r4, [r1, r3]
 800b158:	2c00      	cmp	r4, #0
 800b15a:	d0f8      	beq.n	800b14e <strstr+0x8>
 800b15c:	5cc5      	ldrb	r5, [r0, r3]
 800b15e:	42a5      	cmp	r5, r4
 800b160:	d101      	bne.n	800b166 <strstr+0x20>
 800b162:	3301      	adds	r3, #1
 800b164:	e7f7      	b.n	800b156 <strstr+0x10>
 800b166:	3001      	adds	r0, #1
 800b168:	7803      	ldrb	r3, [r0, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1f0      	bne.n	800b150 <strstr+0xa>
 800b16e:	0018      	movs	r0, r3
 800b170:	e7ed      	b.n	800b14e <strstr+0x8>
	...

0800b174 <__ssputs_r>:
 800b174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b176:	688e      	ldr	r6, [r1, #8]
 800b178:	b085      	sub	sp, #20
 800b17a:	0007      	movs	r7, r0
 800b17c:	000c      	movs	r4, r1
 800b17e:	9203      	str	r2, [sp, #12]
 800b180:	9301      	str	r3, [sp, #4]
 800b182:	429e      	cmp	r6, r3
 800b184:	d83c      	bhi.n	800b200 <__ssputs_r+0x8c>
 800b186:	2390      	movs	r3, #144	; 0x90
 800b188:	898a      	ldrh	r2, [r1, #12]
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	421a      	tst	r2, r3
 800b18e:	d034      	beq.n	800b1fa <__ssputs_r+0x86>
 800b190:	2503      	movs	r5, #3
 800b192:	6909      	ldr	r1, [r1, #16]
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	1a5b      	subs	r3, r3, r1
 800b198:	9302      	str	r3, [sp, #8]
 800b19a:	6963      	ldr	r3, [r4, #20]
 800b19c:	9802      	ldr	r0, [sp, #8]
 800b19e:	435d      	muls	r5, r3
 800b1a0:	0feb      	lsrs	r3, r5, #31
 800b1a2:	195d      	adds	r5, r3, r5
 800b1a4:	9b01      	ldr	r3, [sp, #4]
 800b1a6:	106d      	asrs	r5, r5, #1
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	181b      	adds	r3, r3, r0
 800b1ac:	42ab      	cmp	r3, r5
 800b1ae:	d900      	bls.n	800b1b2 <__ssputs_r+0x3e>
 800b1b0:	001d      	movs	r5, r3
 800b1b2:	0553      	lsls	r3, r2, #21
 800b1b4:	d532      	bpl.n	800b21c <__ssputs_r+0xa8>
 800b1b6:	0029      	movs	r1, r5
 800b1b8:	0038      	movs	r0, r7
 800b1ba:	f000 fb27 	bl	800b80c <_malloc_r>
 800b1be:	1e06      	subs	r6, r0, #0
 800b1c0:	d109      	bne.n	800b1d6 <__ssputs_r+0x62>
 800b1c2:	230c      	movs	r3, #12
 800b1c4:	603b      	str	r3, [r7, #0]
 800b1c6:	2340      	movs	r3, #64	; 0x40
 800b1c8:	2001      	movs	r0, #1
 800b1ca:	89a2      	ldrh	r2, [r4, #12]
 800b1cc:	4240      	negs	r0, r0
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	81a3      	strh	r3, [r4, #12]
 800b1d2:	b005      	add	sp, #20
 800b1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1d6:	9a02      	ldr	r2, [sp, #8]
 800b1d8:	6921      	ldr	r1, [r4, #16]
 800b1da:	f7ff ff6d 	bl	800b0b8 <memcpy>
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	4a14      	ldr	r2, [pc, #80]	; (800b234 <__ssputs_r+0xc0>)
 800b1e2:	401a      	ands	r2, r3
 800b1e4:	2380      	movs	r3, #128	; 0x80
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	81a3      	strh	r3, [r4, #12]
 800b1ea:	9b02      	ldr	r3, [sp, #8]
 800b1ec:	6126      	str	r6, [r4, #16]
 800b1ee:	18f6      	adds	r6, r6, r3
 800b1f0:	6026      	str	r6, [r4, #0]
 800b1f2:	6165      	str	r5, [r4, #20]
 800b1f4:	9e01      	ldr	r6, [sp, #4]
 800b1f6:	1aed      	subs	r5, r5, r3
 800b1f8:	60a5      	str	r5, [r4, #8]
 800b1fa:	9b01      	ldr	r3, [sp, #4]
 800b1fc:	429e      	cmp	r6, r3
 800b1fe:	d900      	bls.n	800b202 <__ssputs_r+0x8e>
 800b200:	9e01      	ldr	r6, [sp, #4]
 800b202:	0032      	movs	r2, r6
 800b204:	9903      	ldr	r1, [sp, #12]
 800b206:	6820      	ldr	r0, [r4, #0]
 800b208:	f000 faa3 	bl	800b752 <memmove>
 800b20c:	68a3      	ldr	r3, [r4, #8]
 800b20e:	2000      	movs	r0, #0
 800b210:	1b9b      	subs	r3, r3, r6
 800b212:	60a3      	str	r3, [r4, #8]
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	199e      	adds	r6, r3, r6
 800b218:	6026      	str	r6, [r4, #0]
 800b21a:	e7da      	b.n	800b1d2 <__ssputs_r+0x5e>
 800b21c:	002a      	movs	r2, r5
 800b21e:	0038      	movs	r0, r7
 800b220:	f000 fb52 	bl	800b8c8 <_realloc_r>
 800b224:	1e06      	subs	r6, r0, #0
 800b226:	d1e0      	bne.n	800b1ea <__ssputs_r+0x76>
 800b228:	0038      	movs	r0, r7
 800b22a:	6921      	ldr	r1, [r4, #16]
 800b22c:	f000 faa4 	bl	800b778 <_free_r>
 800b230:	e7c7      	b.n	800b1c2 <__ssputs_r+0x4e>
 800b232:	46c0      	nop			; (mov r8, r8)
 800b234:	fffffb7f 	.word	0xfffffb7f

0800b238 <_svfiprintf_r>:
 800b238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b23a:	b0a1      	sub	sp, #132	; 0x84
 800b23c:	9003      	str	r0, [sp, #12]
 800b23e:	001d      	movs	r5, r3
 800b240:	898b      	ldrh	r3, [r1, #12]
 800b242:	000f      	movs	r7, r1
 800b244:	0016      	movs	r6, r2
 800b246:	061b      	lsls	r3, r3, #24
 800b248:	d511      	bpl.n	800b26e <_svfiprintf_r+0x36>
 800b24a:	690b      	ldr	r3, [r1, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10e      	bne.n	800b26e <_svfiprintf_r+0x36>
 800b250:	2140      	movs	r1, #64	; 0x40
 800b252:	f000 fadb 	bl	800b80c <_malloc_r>
 800b256:	6038      	str	r0, [r7, #0]
 800b258:	6138      	str	r0, [r7, #16]
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d105      	bne.n	800b26a <_svfiprintf_r+0x32>
 800b25e:	230c      	movs	r3, #12
 800b260:	9a03      	ldr	r2, [sp, #12]
 800b262:	3801      	subs	r0, #1
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	b021      	add	sp, #132	; 0x84
 800b268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b26a:	2340      	movs	r3, #64	; 0x40
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	2300      	movs	r3, #0
 800b270:	ac08      	add	r4, sp, #32
 800b272:	6163      	str	r3, [r4, #20]
 800b274:	3320      	adds	r3, #32
 800b276:	7663      	strb	r3, [r4, #25]
 800b278:	3310      	adds	r3, #16
 800b27a:	76a3      	strb	r3, [r4, #26]
 800b27c:	9507      	str	r5, [sp, #28]
 800b27e:	0035      	movs	r5, r6
 800b280:	782b      	ldrb	r3, [r5, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <_svfiprintf_r+0x52>
 800b286:	2b25      	cmp	r3, #37	; 0x25
 800b288:	d147      	bne.n	800b31a <_svfiprintf_r+0xe2>
 800b28a:	1bab      	subs	r3, r5, r6
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	42b5      	cmp	r5, r6
 800b290:	d00c      	beq.n	800b2ac <_svfiprintf_r+0x74>
 800b292:	0032      	movs	r2, r6
 800b294:	0039      	movs	r1, r7
 800b296:	9803      	ldr	r0, [sp, #12]
 800b298:	f7ff ff6c 	bl	800b174 <__ssputs_r>
 800b29c:	1c43      	adds	r3, r0, #1
 800b29e:	d100      	bne.n	800b2a2 <_svfiprintf_r+0x6a>
 800b2a0:	e0ae      	b.n	800b400 <_svfiprintf_r+0x1c8>
 800b2a2:	6962      	ldr	r2, [r4, #20]
 800b2a4:	9b05      	ldr	r3, [sp, #20]
 800b2a6:	4694      	mov	ip, r2
 800b2a8:	4463      	add	r3, ip
 800b2aa:	6163      	str	r3, [r4, #20]
 800b2ac:	782b      	ldrb	r3, [r5, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d100      	bne.n	800b2b4 <_svfiprintf_r+0x7c>
 800b2b2:	e0a5      	b.n	800b400 <_svfiprintf_r+0x1c8>
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	4252      	negs	r2, r2
 800b2ba:	6062      	str	r2, [r4, #4]
 800b2bc:	a904      	add	r1, sp, #16
 800b2be:	3254      	adds	r2, #84	; 0x54
 800b2c0:	1852      	adds	r2, r2, r1
 800b2c2:	1c6e      	adds	r6, r5, #1
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	60e3      	str	r3, [r4, #12]
 800b2c8:	60a3      	str	r3, [r4, #8]
 800b2ca:	7013      	strb	r3, [r2, #0]
 800b2cc:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2ce:	2205      	movs	r2, #5
 800b2d0:	7831      	ldrb	r1, [r6, #0]
 800b2d2:	4854      	ldr	r0, [pc, #336]	; (800b424 <_svfiprintf_r+0x1ec>)
 800b2d4:	f000 fa32 	bl	800b73c <memchr>
 800b2d8:	1c75      	adds	r5, r6, #1
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d11f      	bne.n	800b31e <_svfiprintf_r+0xe6>
 800b2de:	6822      	ldr	r2, [r4, #0]
 800b2e0:	06d3      	lsls	r3, r2, #27
 800b2e2:	d504      	bpl.n	800b2ee <_svfiprintf_r+0xb6>
 800b2e4:	2353      	movs	r3, #83	; 0x53
 800b2e6:	a904      	add	r1, sp, #16
 800b2e8:	185b      	adds	r3, r3, r1
 800b2ea:	2120      	movs	r1, #32
 800b2ec:	7019      	strb	r1, [r3, #0]
 800b2ee:	0713      	lsls	r3, r2, #28
 800b2f0:	d504      	bpl.n	800b2fc <_svfiprintf_r+0xc4>
 800b2f2:	2353      	movs	r3, #83	; 0x53
 800b2f4:	a904      	add	r1, sp, #16
 800b2f6:	185b      	adds	r3, r3, r1
 800b2f8:	212b      	movs	r1, #43	; 0x2b
 800b2fa:	7019      	strb	r1, [r3, #0]
 800b2fc:	7833      	ldrb	r3, [r6, #0]
 800b2fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b300:	d016      	beq.n	800b330 <_svfiprintf_r+0xf8>
 800b302:	0035      	movs	r5, r6
 800b304:	2100      	movs	r1, #0
 800b306:	200a      	movs	r0, #10
 800b308:	68e3      	ldr	r3, [r4, #12]
 800b30a:	782a      	ldrb	r2, [r5, #0]
 800b30c:	1c6e      	adds	r6, r5, #1
 800b30e:	3a30      	subs	r2, #48	; 0x30
 800b310:	2a09      	cmp	r2, #9
 800b312:	d94e      	bls.n	800b3b2 <_svfiprintf_r+0x17a>
 800b314:	2900      	cmp	r1, #0
 800b316:	d111      	bne.n	800b33c <_svfiprintf_r+0x104>
 800b318:	e017      	b.n	800b34a <_svfiprintf_r+0x112>
 800b31a:	3501      	adds	r5, #1
 800b31c:	e7b0      	b.n	800b280 <_svfiprintf_r+0x48>
 800b31e:	4b41      	ldr	r3, [pc, #260]	; (800b424 <_svfiprintf_r+0x1ec>)
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	1ac0      	subs	r0, r0, r3
 800b324:	2301      	movs	r3, #1
 800b326:	4083      	lsls	r3, r0
 800b328:	4313      	orrs	r3, r2
 800b32a:	002e      	movs	r6, r5
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	e7ce      	b.n	800b2ce <_svfiprintf_r+0x96>
 800b330:	9b07      	ldr	r3, [sp, #28]
 800b332:	1d19      	adds	r1, r3, #4
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	9107      	str	r1, [sp, #28]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	db01      	blt.n	800b340 <_svfiprintf_r+0x108>
 800b33c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b33e:	e004      	b.n	800b34a <_svfiprintf_r+0x112>
 800b340:	425b      	negs	r3, r3
 800b342:	60e3      	str	r3, [r4, #12]
 800b344:	2302      	movs	r3, #2
 800b346:	4313      	orrs	r3, r2
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	782b      	ldrb	r3, [r5, #0]
 800b34c:	2b2e      	cmp	r3, #46	; 0x2e
 800b34e:	d10a      	bne.n	800b366 <_svfiprintf_r+0x12e>
 800b350:	786b      	ldrb	r3, [r5, #1]
 800b352:	2b2a      	cmp	r3, #42	; 0x2a
 800b354:	d135      	bne.n	800b3c2 <_svfiprintf_r+0x18a>
 800b356:	9b07      	ldr	r3, [sp, #28]
 800b358:	3502      	adds	r5, #2
 800b35a:	1d1a      	adds	r2, r3, #4
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	9207      	str	r2, [sp, #28]
 800b360:	2b00      	cmp	r3, #0
 800b362:	db2b      	blt.n	800b3bc <_svfiprintf_r+0x184>
 800b364:	9309      	str	r3, [sp, #36]	; 0x24
 800b366:	4e30      	ldr	r6, [pc, #192]	; (800b428 <_svfiprintf_r+0x1f0>)
 800b368:	2203      	movs	r2, #3
 800b36a:	0030      	movs	r0, r6
 800b36c:	7829      	ldrb	r1, [r5, #0]
 800b36e:	f000 f9e5 	bl	800b73c <memchr>
 800b372:	2800      	cmp	r0, #0
 800b374:	d006      	beq.n	800b384 <_svfiprintf_r+0x14c>
 800b376:	2340      	movs	r3, #64	; 0x40
 800b378:	1b80      	subs	r0, r0, r6
 800b37a:	4083      	lsls	r3, r0
 800b37c:	6822      	ldr	r2, [r4, #0]
 800b37e:	3501      	adds	r5, #1
 800b380:	4313      	orrs	r3, r2
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	7829      	ldrb	r1, [r5, #0]
 800b386:	2206      	movs	r2, #6
 800b388:	4828      	ldr	r0, [pc, #160]	; (800b42c <_svfiprintf_r+0x1f4>)
 800b38a:	1c6e      	adds	r6, r5, #1
 800b38c:	7621      	strb	r1, [r4, #24]
 800b38e:	f000 f9d5 	bl	800b73c <memchr>
 800b392:	2800      	cmp	r0, #0
 800b394:	d03c      	beq.n	800b410 <_svfiprintf_r+0x1d8>
 800b396:	4b26      	ldr	r3, [pc, #152]	; (800b430 <_svfiprintf_r+0x1f8>)
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d125      	bne.n	800b3e8 <_svfiprintf_r+0x1b0>
 800b39c:	2207      	movs	r2, #7
 800b39e:	9b07      	ldr	r3, [sp, #28]
 800b3a0:	3307      	adds	r3, #7
 800b3a2:	4393      	bics	r3, r2
 800b3a4:	3308      	adds	r3, #8
 800b3a6:	9307      	str	r3, [sp, #28]
 800b3a8:	6963      	ldr	r3, [r4, #20]
 800b3aa:	9a04      	ldr	r2, [sp, #16]
 800b3ac:	189b      	adds	r3, r3, r2
 800b3ae:	6163      	str	r3, [r4, #20]
 800b3b0:	e765      	b.n	800b27e <_svfiprintf_r+0x46>
 800b3b2:	4343      	muls	r3, r0
 800b3b4:	0035      	movs	r5, r6
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	189b      	adds	r3, r3, r2
 800b3ba:	e7a6      	b.n	800b30a <_svfiprintf_r+0xd2>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	425b      	negs	r3, r3
 800b3c0:	e7d0      	b.n	800b364 <_svfiprintf_r+0x12c>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	200a      	movs	r0, #10
 800b3c6:	001a      	movs	r2, r3
 800b3c8:	3501      	adds	r5, #1
 800b3ca:	6063      	str	r3, [r4, #4]
 800b3cc:	7829      	ldrb	r1, [r5, #0]
 800b3ce:	1c6e      	adds	r6, r5, #1
 800b3d0:	3930      	subs	r1, #48	; 0x30
 800b3d2:	2909      	cmp	r1, #9
 800b3d4:	d903      	bls.n	800b3de <_svfiprintf_r+0x1a6>
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d0c5      	beq.n	800b366 <_svfiprintf_r+0x12e>
 800b3da:	9209      	str	r2, [sp, #36]	; 0x24
 800b3dc:	e7c3      	b.n	800b366 <_svfiprintf_r+0x12e>
 800b3de:	4342      	muls	r2, r0
 800b3e0:	0035      	movs	r5, r6
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	1852      	adds	r2, r2, r1
 800b3e6:	e7f1      	b.n	800b3cc <_svfiprintf_r+0x194>
 800b3e8:	ab07      	add	r3, sp, #28
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	003a      	movs	r2, r7
 800b3ee:	0021      	movs	r1, r4
 800b3f0:	4b10      	ldr	r3, [pc, #64]	; (800b434 <_svfiprintf_r+0x1fc>)
 800b3f2:	9803      	ldr	r0, [sp, #12]
 800b3f4:	e000      	b.n	800b3f8 <_svfiprintf_r+0x1c0>
 800b3f6:	bf00      	nop
 800b3f8:	9004      	str	r0, [sp, #16]
 800b3fa:	9b04      	ldr	r3, [sp, #16]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	d1d3      	bne.n	800b3a8 <_svfiprintf_r+0x170>
 800b400:	89bb      	ldrh	r3, [r7, #12]
 800b402:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b404:	065b      	lsls	r3, r3, #25
 800b406:	d400      	bmi.n	800b40a <_svfiprintf_r+0x1d2>
 800b408:	e72d      	b.n	800b266 <_svfiprintf_r+0x2e>
 800b40a:	2001      	movs	r0, #1
 800b40c:	4240      	negs	r0, r0
 800b40e:	e72a      	b.n	800b266 <_svfiprintf_r+0x2e>
 800b410:	ab07      	add	r3, sp, #28
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	003a      	movs	r2, r7
 800b416:	0021      	movs	r1, r4
 800b418:	4b06      	ldr	r3, [pc, #24]	; (800b434 <_svfiprintf_r+0x1fc>)
 800b41a:	9803      	ldr	r0, [sp, #12]
 800b41c:	f000 f87c 	bl	800b518 <_printf_i>
 800b420:	e7ea      	b.n	800b3f8 <_svfiprintf_r+0x1c0>
 800b422:	46c0      	nop			; (mov r8, r8)
 800b424:	08010e3c 	.word	0x08010e3c
 800b428:	08010e42 	.word	0x08010e42
 800b42c:	08010e46 	.word	0x08010e46
 800b430:	00000000 	.word	0x00000000
 800b434:	0800b175 	.word	0x0800b175

0800b438 <_printf_common>:
 800b438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b43a:	0015      	movs	r5, r2
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	688a      	ldr	r2, [r1, #8]
 800b440:	690b      	ldr	r3, [r1, #16]
 800b442:	000c      	movs	r4, r1
 800b444:	9000      	str	r0, [sp, #0]
 800b446:	4293      	cmp	r3, r2
 800b448:	da00      	bge.n	800b44c <_printf_common+0x14>
 800b44a:	0013      	movs	r3, r2
 800b44c:	0022      	movs	r2, r4
 800b44e:	602b      	str	r3, [r5, #0]
 800b450:	3243      	adds	r2, #67	; 0x43
 800b452:	7812      	ldrb	r2, [r2, #0]
 800b454:	2a00      	cmp	r2, #0
 800b456:	d001      	beq.n	800b45c <_printf_common+0x24>
 800b458:	3301      	adds	r3, #1
 800b45a:	602b      	str	r3, [r5, #0]
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	069b      	lsls	r3, r3, #26
 800b460:	d502      	bpl.n	800b468 <_printf_common+0x30>
 800b462:	682b      	ldr	r3, [r5, #0]
 800b464:	3302      	adds	r3, #2
 800b466:	602b      	str	r3, [r5, #0]
 800b468:	6822      	ldr	r2, [r4, #0]
 800b46a:	2306      	movs	r3, #6
 800b46c:	0017      	movs	r7, r2
 800b46e:	401f      	ands	r7, r3
 800b470:	421a      	tst	r2, r3
 800b472:	d027      	beq.n	800b4c4 <_printf_common+0x8c>
 800b474:	0023      	movs	r3, r4
 800b476:	3343      	adds	r3, #67	; 0x43
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	1e5a      	subs	r2, r3, #1
 800b47c:	4193      	sbcs	r3, r2
 800b47e:	6822      	ldr	r2, [r4, #0]
 800b480:	0692      	lsls	r2, r2, #26
 800b482:	d430      	bmi.n	800b4e6 <_printf_common+0xae>
 800b484:	0022      	movs	r2, r4
 800b486:	9901      	ldr	r1, [sp, #4]
 800b488:	9800      	ldr	r0, [sp, #0]
 800b48a:	9e08      	ldr	r6, [sp, #32]
 800b48c:	3243      	adds	r2, #67	; 0x43
 800b48e:	47b0      	blx	r6
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d025      	beq.n	800b4e0 <_printf_common+0xa8>
 800b494:	2306      	movs	r3, #6
 800b496:	6820      	ldr	r0, [r4, #0]
 800b498:	682a      	ldr	r2, [r5, #0]
 800b49a:	68e1      	ldr	r1, [r4, #12]
 800b49c:	2500      	movs	r5, #0
 800b49e:	4003      	ands	r3, r0
 800b4a0:	2b04      	cmp	r3, #4
 800b4a2:	d103      	bne.n	800b4ac <_printf_common+0x74>
 800b4a4:	1a8d      	subs	r5, r1, r2
 800b4a6:	43eb      	mvns	r3, r5
 800b4a8:	17db      	asrs	r3, r3, #31
 800b4aa:	401d      	ands	r5, r3
 800b4ac:	68a3      	ldr	r3, [r4, #8]
 800b4ae:	6922      	ldr	r2, [r4, #16]
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	dd01      	ble.n	800b4b8 <_printf_common+0x80>
 800b4b4:	1a9b      	subs	r3, r3, r2
 800b4b6:	18ed      	adds	r5, r5, r3
 800b4b8:	2700      	movs	r7, #0
 800b4ba:	42bd      	cmp	r5, r7
 800b4bc:	d120      	bne.n	800b500 <_printf_common+0xc8>
 800b4be:	2000      	movs	r0, #0
 800b4c0:	e010      	b.n	800b4e4 <_printf_common+0xac>
 800b4c2:	3701      	adds	r7, #1
 800b4c4:	68e3      	ldr	r3, [r4, #12]
 800b4c6:	682a      	ldr	r2, [r5, #0]
 800b4c8:	1a9b      	subs	r3, r3, r2
 800b4ca:	42bb      	cmp	r3, r7
 800b4cc:	ddd2      	ble.n	800b474 <_printf_common+0x3c>
 800b4ce:	0022      	movs	r2, r4
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	9901      	ldr	r1, [sp, #4]
 800b4d4:	9800      	ldr	r0, [sp, #0]
 800b4d6:	9e08      	ldr	r6, [sp, #32]
 800b4d8:	3219      	adds	r2, #25
 800b4da:	47b0      	blx	r6
 800b4dc:	1c43      	adds	r3, r0, #1
 800b4de:	d1f0      	bne.n	800b4c2 <_printf_common+0x8a>
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	4240      	negs	r0, r0
 800b4e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b4e6:	2030      	movs	r0, #48	; 0x30
 800b4e8:	18e1      	adds	r1, r4, r3
 800b4ea:	3143      	adds	r1, #67	; 0x43
 800b4ec:	7008      	strb	r0, [r1, #0]
 800b4ee:	0021      	movs	r1, r4
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	3145      	adds	r1, #69	; 0x45
 800b4f4:	7809      	ldrb	r1, [r1, #0]
 800b4f6:	18a2      	adds	r2, r4, r2
 800b4f8:	3243      	adds	r2, #67	; 0x43
 800b4fa:	3302      	adds	r3, #2
 800b4fc:	7011      	strb	r1, [r2, #0]
 800b4fe:	e7c1      	b.n	800b484 <_printf_common+0x4c>
 800b500:	0022      	movs	r2, r4
 800b502:	2301      	movs	r3, #1
 800b504:	9901      	ldr	r1, [sp, #4]
 800b506:	9800      	ldr	r0, [sp, #0]
 800b508:	9e08      	ldr	r6, [sp, #32]
 800b50a:	321a      	adds	r2, #26
 800b50c:	47b0      	blx	r6
 800b50e:	1c43      	adds	r3, r0, #1
 800b510:	d0e6      	beq.n	800b4e0 <_printf_common+0xa8>
 800b512:	3701      	adds	r7, #1
 800b514:	e7d1      	b.n	800b4ba <_printf_common+0x82>
	...

0800b518 <_printf_i>:
 800b518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b51a:	b08b      	sub	sp, #44	; 0x2c
 800b51c:	9206      	str	r2, [sp, #24]
 800b51e:	000a      	movs	r2, r1
 800b520:	3243      	adds	r2, #67	; 0x43
 800b522:	9307      	str	r3, [sp, #28]
 800b524:	9005      	str	r0, [sp, #20]
 800b526:	9204      	str	r2, [sp, #16]
 800b528:	7e0a      	ldrb	r2, [r1, #24]
 800b52a:	000c      	movs	r4, r1
 800b52c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b52e:	2a78      	cmp	r2, #120	; 0x78
 800b530:	d806      	bhi.n	800b540 <_printf_i+0x28>
 800b532:	2a62      	cmp	r2, #98	; 0x62
 800b534:	d808      	bhi.n	800b548 <_printf_i+0x30>
 800b536:	2a00      	cmp	r2, #0
 800b538:	d100      	bne.n	800b53c <_printf_i+0x24>
 800b53a:	e0c0      	b.n	800b6be <_printf_i+0x1a6>
 800b53c:	2a58      	cmp	r2, #88	; 0x58
 800b53e:	d052      	beq.n	800b5e6 <_printf_i+0xce>
 800b540:	0026      	movs	r6, r4
 800b542:	3642      	adds	r6, #66	; 0x42
 800b544:	7032      	strb	r2, [r6, #0]
 800b546:	e022      	b.n	800b58e <_printf_i+0x76>
 800b548:	0010      	movs	r0, r2
 800b54a:	3863      	subs	r0, #99	; 0x63
 800b54c:	2815      	cmp	r0, #21
 800b54e:	d8f7      	bhi.n	800b540 <_printf_i+0x28>
 800b550:	f7f4 fdda 	bl	8000108 <__gnu_thumb1_case_shi>
 800b554:	001f0016 	.word	0x001f0016
 800b558:	fff6fff6 	.word	0xfff6fff6
 800b55c:	fff6fff6 	.word	0xfff6fff6
 800b560:	fff6001f 	.word	0xfff6001f
 800b564:	fff6fff6 	.word	0xfff6fff6
 800b568:	00a8fff6 	.word	0x00a8fff6
 800b56c:	009a0036 	.word	0x009a0036
 800b570:	fff6fff6 	.word	0xfff6fff6
 800b574:	fff600b9 	.word	0xfff600b9
 800b578:	fff60036 	.word	0xfff60036
 800b57c:	009efff6 	.word	0x009efff6
 800b580:	0026      	movs	r6, r4
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	3642      	adds	r6, #66	; 0x42
 800b586:	1d11      	adds	r1, r2, #4
 800b588:	6019      	str	r1, [r3, #0]
 800b58a:	6813      	ldr	r3, [r2, #0]
 800b58c:	7033      	strb	r3, [r6, #0]
 800b58e:	2301      	movs	r3, #1
 800b590:	e0a7      	b.n	800b6e2 <_printf_i+0x1ca>
 800b592:	6808      	ldr	r0, [r1, #0]
 800b594:	6819      	ldr	r1, [r3, #0]
 800b596:	1d0a      	adds	r2, r1, #4
 800b598:	0605      	lsls	r5, r0, #24
 800b59a:	d50b      	bpl.n	800b5b4 <_printf_i+0x9c>
 800b59c:	680d      	ldr	r5, [r1, #0]
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	2d00      	cmp	r5, #0
 800b5a2:	da03      	bge.n	800b5ac <_printf_i+0x94>
 800b5a4:	232d      	movs	r3, #45	; 0x2d
 800b5a6:	9a04      	ldr	r2, [sp, #16]
 800b5a8:	426d      	negs	r5, r5
 800b5aa:	7013      	strb	r3, [r2, #0]
 800b5ac:	4b61      	ldr	r3, [pc, #388]	; (800b734 <_printf_i+0x21c>)
 800b5ae:	270a      	movs	r7, #10
 800b5b0:	9303      	str	r3, [sp, #12]
 800b5b2:	e032      	b.n	800b61a <_printf_i+0x102>
 800b5b4:	680d      	ldr	r5, [r1, #0]
 800b5b6:	601a      	str	r2, [r3, #0]
 800b5b8:	0641      	lsls	r1, r0, #25
 800b5ba:	d5f1      	bpl.n	800b5a0 <_printf_i+0x88>
 800b5bc:	b22d      	sxth	r5, r5
 800b5be:	e7ef      	b.n	800b5a0 <_printf_i+0x88>
 800b5c0:	680d      	ldr	r5, [r1, #0]
 800b5c2:	6819      	ldr	r1, [r3, #0]
 800b5c4:	1d08      	adds	r0, r1, #4
 800b5c6:	6018      	str	r0, [r3, #0]
 800b5c8:	062e      	lsls	r6, r5, #24
 800b5ca:	d501      	bpl.n	800b5d0 <_printf_i+0xb8>
 800b5cc:	680d      	ldr	r5, [r1, #0]
 800b5ce:	e003      	b.n	800b5d8 <_printf_i+0xc0>
 800b5d0:	066d      	lsls	r5, r5, #25
 800b5d2:	d5fb      	bpl.n	800b5cc <_printf_i+0xb4>
 800b5d4:	680d      	ldr	r5, [r1, #0]
 800b5d6:	b2ad      	uxth	r5, r5
 800b5d8:	4b56      	ldr	r3, [pc, #344]	; (800b734 <_printf_i+0x21c>)
 800b5da:	270a      	movs	r7, #10
 800b5dc:	9303      	str	r3, [sp, #12]
 800b5de:	2a6f      	cmp	r2, #111	; 0x6f
 800b5e0:	d117      	bne.n	800b612 <_printf_i+0xfa>
 800b5e2:	2708      	movs	r7, #8
 800b5e4:	e015      	b.n	800b612 <_printf_i+0xfa>
 800b5e6:	3145      	adds	r1, #69	; 0x45
 800b5e8:	700a      	strb	r2, [r1, #0]
 800b5ea:	4a52      	ldr	r2, [pc, #328]	; (800b734 <_printf_i+0x21c>)
 800b5ec:	9203      	str	r2, [sp, #12]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	6821      	ldr	r1, [r4, #0]
 800b5f2:	ca20      	ldmia	r2!, {r5}
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	0608      	lsls	r0, r1, #24
 800b5f8:	d550      	bpl.n	800b69c <_printf_i+0x184>
 800b5fa:	07cb      	lsls	r3, r1, #31
 800b5fc:	d502      	bpl.n	800b604 <_printf_i+0xec>
 800b5fe:	2320      	movs	r3, #32
 800b600:	4319      	orrs	r1, r3
 800b602:	6021      	str	r1, [r4, #0]
 800b604:	2710      	movs	r7, #16
 800b606:	2d00      	cmp	r5, #0
 800b608:	d103      	bne.n	800b612 <_printf_i+0xfa>
 800b60a:	2320      	movs	r3, #32
 800b60c:	6822      	ldr	r2, [r4, #0]
 800b60e:	439a      	bics	r2, r3
 800b610:	6022      	str	r2, [r4, #0]
 800b612:	0023      	movs	r3, r4
 800b614:	2200      	movs	r2, #0
 800b616:	3343      	adds	r3, #67	; 0x43
 800b618:	701a      	strb	r2, [r3, #0]
 800b61a:	6863      	ldr	r3, [r4, #4]
 800b61c:	60a3      	str	r3, [r4, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	db03      	blt.n	800b62a <_printf_i+0x112>
 800b622:	2204      	movs	r2, #4
 800b624:	6821      	ldr	r1, [r4, #0]
 800b626:	4391      	bics	r1, r2
 800b628:	6021      	str	r1, [r4, #0]
 800b62a:	2d00      	cmp	r5, #0
 800b62c:	d102      	bne.n	800b634 <_printf_i+0x11c>
 800b62e:	9e04      	ldr	r6, [sp, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00c      	beq.n	800b64e <_printf_i+0x136>
 800b634:	9e04      	ldr	r6, [sp, #16]
 800b636:	0028      	movs	r0, r5
 800b638:	0039      	movs	r1, r7
 800b63a:	f7f4 fdf5 	bl	8000228 <__aeabi_uidivmod>
 800b63e:	9b03      	ldr	r3, [sp, #12]
 800b640:	3e01      	subs	r6, #1
 800b642:	5c5b      	ldrb	r3, [r3, r1]
 800b644:	7033      	strb	r3, [r6, #0]
 800b646:	002b      	movs	r3, r5
 800b648:	0005      	movs	r5, r0
 800b64a:	429f      	cmp	r7, r3
 800b64c:	d9f3      	bls.n	800b636 <_printf_i+0x11e>
 800b64e:	2f08      	cmp	r7, #8
 800b650:	d109      	bne.n	800b666 <_printf_i+0x14e>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	07db      	lsls	r3, r3, #31
 800b656:	d506      	bpl.n	800b666 <_printf_i+0x14e>
 800b658:	6863      	ldr	r3, [r4, #4]
 800b65a:	6922      	ldr	r2, [r4, #16]
 800b65c:	4293      	cmp	r3, r2
 800b65e:	dc02      	bgt.n	800b666 <_printf_i+0x14e>
 800b660:	2330      	movs	r3, #48	; 0x30
 800b662:	3e01      	subs	r6, #1
 800b664:	7033      	strb	r3, [r6, #0]
 800b666:	9b04      	ldr	r3, [sp, #16]
 800b668:	1b9b      	subs	r3, r3, r6
 800b66a:	6123      	str	r3, [r4, #16]
 800b66c:	9b07      	ldr	r3, [sp, #28]
 800b66e:	0021      	movs	r1, r4
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	9805      	ldr	r0, [sp, #20]
 800b674:	9b06      	ldr	r3, [sp, #24]
 800b676:	aa09      	add	r2, sp, #36	; 0x24
 800b678:	f7ff fede 	bl	800b438 <_printf_common>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d135      	bne.n	800b6ec <_printf_i+0x1d4>
 800b680:	2001      	movs	r0, #1
 800b682:	4240      	negs	r0, r0
 800b684:	b00b      	add	sp, #44	; 0x2c
 800b686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b688:	2220      	movs	r2, #32
 800b68a:	6809      	ldr	r1, [r1, #0]
 800b68c:	430a      	orrs	r2, r1
 800b68e:	6022      	str	r2, [r4, #0]
 800b690:	0022      	movs	r2, r4
 800b692:	2178      	movs	r1, #120	; 0x78
 800b694:	3245      	adds	r2, #69	; 0x45
 800b696:	7011      	strb	r1, [r2, #0]
 800b698:	4a27      	ldr	r2, [pc, #156]	; (800b738 <_printf_i+0x220>)
 800b69a:	e7a7      	b.n	800b5ec <_printf_i+0xd4>
 800b69c:	0648      	lsls	r0, r1, #25
 800b69e:	d5ac      	bpl.n	800b5fa <_printf_i+0xe2>
 800b6a0:	b2ad      	uxth	r5, r5
 800b6a2:	e7aa      	b.n	800b5fa <_printf_i+0xe2>
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	680d      	ldr	r5, [r1, #0]
 800b6a8:	1d10      	adds	r0, r2, #4
 800b6aa:	6949      	ldr	r1, [r1, #20]
 800b6ac:	6018      	str	r0, [r3, #0]
 800b6ae:	6813      	ldr	r3, [r2, #0]
 800b6b0:	062e      	lsls	r6, r5, #24
 800b6b2:	d501      	bpl.n	800b6b8 <_printf_i+0x1a0>
 800b6b4:	6019      	str	r1, [r3, #0]
 800b6b6:	e002      	b.n	800b6be <_printf_i+0x1a6>
 800b6b8:	066d      	lsls	r5, r5, #25
 800b6ba:	d5fb      	bpl.n	800b6b4 <_printf_i+0x19c>
 800b6bc:	8019      	strh	r1, [r3, #0]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	9e04      	ldr	r6, [sp, #16]
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	e7d2      	b.n	800b66c <_printf_i+0x154>
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	1d11      	adds	r1, r2, #4
 800b6ca:	6019      	str	r1, [r3, #0]
 800b6cc:	6816      	ldr	r6, [r2, #0]
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	0030      	movs	r0, r6
 800b6d2:	6862      	ldr	r2, [r4, #4]
 800b6d4:	f000 f832 	bl	800b73c <memchr>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d001      	beq.n	800b6e0 <_printf_i+0x1c8>
 800b6dc:	1b80      	subs	r0, r0, r6
 800b6de:	6060      	str	r0, [r4, #4]
 800b6e0:	6863      	ldr	r3, [r4, #4]
 800b6e2:	6123      	str	r3, [r4, #16]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9a04      	ldr	r2, [sp, #16]
 800b6e8:	7013      	strb	r3, [r2, #0]
 800b6ea:	e7bf      	b.n	800b66c <_printf_i+0x154>
 800b6ec:	6923      	ldr	r3, [r4, #16]
 800b6ee:	0032      	movs	r2, r6
 800b6f0:	9906      	ldr	r1, [sp, #24]
 800b6f2:	9805      	ldr	r0, [sp, #20]
 800b6f4:	9d07      	ldr	r5, [sp, #28]
 800b6f6:	47a8      	blx	r5
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d0c1      	beq.n	800b680 <_printf_i+0x168>
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	079b      	lsls	r3, r3, #30
 800b700:	d415      	bmi.n	800b72e <_printf_i+0x216>
 800b702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b704:	68e0      	ldr	r0, [r4, #12]
 800b706:	4298      	cmp	r0, r3
 800b708:	dabc      	bge.n	800b684 <_printf_i+0x16c>
 800b70a:	0018      	movs	r0, r3
 800b70c:	e7ba      	b.n	800b684 <_printf_i+0x16c>
 800b70e:	0022      	movs	r2, r4
 800b710:	2301      	movs	r3, #1
 800b712:	9906      	ldr	r1, [sp, #24]
 800b714:	9805      	ldr	r0, [sp, #20]
 800b716:	9e07      	ldr	r6, [sp, #28]
 800b718:	3219      	adds	r2, #25
 800b71a:	47b0      	blx	r6
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d0af      	beq.n	800b680 <_printf_i+0x168>
 800b720:	3501      	adds	r5, #1
 800b722:	68e3      	ldr	r3, [r4, #12]
 800b724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b726:	1a9b      	subs	r3, r3, r2
 800b728:	42ab      	cmp	r3, r5
 800b72a:	dcf0      	bgt.n	800b70e <_printf_i+0x1f6>
 800b72c:	e7e9      	b.n	800b702 <_printf_i+0x1ea>
 800b72e:	2500      	movs	r5, #0
 800b730:	e7f7      	b.n	800b722 <_printf_i+0x20a>
 800b732:	46c0      	nop			; (mov r8, r8)
 800b734:	08010e4d 	.word	0x08010e4d
 800b738:	08010e5e 	.word	0x08010e5e

0800b73c <memchr>:
 800b73c:	b2c9      	uxtb	r1, r1
 800b73e:	1882      	adds	r2, r0, r2
 800b740:	4290      	cmp	r0, r2
 800b742:	d101      	bne.n	800b748 <memchr+0xc>
 800b744:	2000      	movs	r0, #0
 800b746:	4770      	bx	lr
 800b748:	7803      	ldrb	r3, [r0, #0]
 800b74a:	428b      	cmp	r3, r1
 800b74c:	d0fb      	beq.n	800b746 <memchr+0xa>
 800b74e:	3001      	adds	r0, #1
 800b750:	e7f6      	b.n	800b740 <memchr+0x4>

0800b752 <memmove>:
 800b752:	b510      	push	{r4, lr}
 800b754:	4288      	cmp	r0, r1
 800b756:	d902      	bls.n	800b75e <memmove+0xc>
 800b758:	188b      	adds	r3, r1, r2
 800b75a:	4298      	cmp	r0, r3
 800b75c:	d303      	bcc.n	800b766 <memmove+0x14>
 800b75e:	2300      	movs	r3, #0
 800b760:	e007      	b.n	800b772 <memmove+0x20>
 800b762:	5c8b      	ldrb	r3, [r1, r2]
 800b764:	5483      	strb	r3, [r0, r2]
 800b766:	3a01      	subs	r2, #1
 800b768:	d2fb      	bcs.n	800b762 <memmove+0x10>
 800b76a:	bd10      	pop	{r4, pc}
 800b76c:	5ccc      	ldrb	r4, [r1, r3]
 800b76e:	54c4      	strb	r4, [r0, r3]
 800b770:	3301      	adds	r3, #1
 800b772:	429a      	cmp	r2, r3
 800b774:	d1fa      	bne.n	800b76c <memmove+0x1a>
 800b776:	e7f8      	b.n	800b76a <memmove+0x18>

0800b778 <_free_r>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	0005      	movs	r5, r0
 800b77c:	2900      	cmp	r1, #0
 800b77e:	d010      	beq.n	800b7a2 <_free_r+0x2a>
 800b780:	1f0c      	subs	r4, r1, #4
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	da00      	bge.n	800b78a <_free_r+0x12>
 800b788:	18e4      	adds	r4, r4, r3
 800b78a:	0028      	movs	r0, r5
 800b78c:	f000 f8d4 	bl	800b938 <__malloc_lock>
 800b790:	4a1d      	ldr	r2, [pc, #116]	; (800b808 <_free_r+0x90>)
 800b792:	6813      	ldr	r3, [r2, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d105      	bne.n	800b7a4 <_free_r+0x2c>
 800b798:	6063      	str	r3, [r4, #4]
 800b79a:	6014      	str	r4, [r2, #0]
 800b79c:	0028      	movs	r0, r5
 800b79e:	f000 f8d3 	bl	800b948 <__malloc_unlock>
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	d908      	bls.n	800b7ba <_free_r+0x42>
 800b7a8:	6821      	ldr	r1, [r4, #0]
 800b7aa:	1860      	adds	r0, r4, r1
 800b7ac:	4283      	cmp	r3, r0
 800b7ae:	d1f3      	bne.n	800b798 <_free_r+0x20>
 800b7b0:	6818      	ldr	r0, [r3, #0]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	1841      	adds	r1, r0, r1
 800b7b6:	6021      	str	r1, [r4, #0]
 800b7b8:	e7ee      	b.n	800b798 <_free_r+0x20>
 800b7ba:	001a      	movs	r2, r3
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <_free_r+0x4e>
 800b7c2:	42a3      	cmp	r3, r4
 800b7c4:	d9f9      	bls.n	800b7ba <_free_r+0x42>
 800b7c6:	6811      	ldr	r1, [r2, #0]
 800b7c8:	1850      	adds	r0, r2, r1
 800b7ca:	42a0      	cmp	r0, r4
 800b7cc:	d10b      	bne.n	800b7e6 <_free_r+0x6e>
 800b7ce:	6820      	ldr	r0, [r4, #0]
 800b7d0:	1809      	adds	r1, r1, r0
 800b7d2:	1850      	adds	r0, r2, r1
 800b7d4:	6011      	str	r1, [r2, #0]
 800b7d6:	4283      	cmp	r3, r0
 800b7d8:	d1e0      	bne.n	800b79c <_free_r+0x24>
 800b7da:	6818      	ldr	r0, [r3, #0]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	1841      	adds	r1, r0, r1
 800b7e0:	6011      	str	r1, [r2, #0]
 800b7e2:	6053      	str	r3, [r2, #4]
 800b7e4:	e7da      	b.n	800b79c <_free_r+0x24>
 800b7e6:	42a0      	cmp	r0, r4
 800b7e8:	d902      	bls.n	800b7f0 <_free_r+0x78>
 800b7ea:	230c      	movs	r3, #12
 800b7ec:	602b      	str	r3, [r5, #0]
 800b7ee:	e7d5      	b.n	800b79c <_free_r+0x24>
 800b7f0:	6821      	ldr	r1, [r4, #0]
 800b7f2:	1860      	adds	r0, r4, r1
 800b7f4:	4283      	cmp	r3, r0
 800b7f6:	d103      	bne.n	800b800 <_free_r+0x88>
 800b7f8:	6818      	ldr	r0, [r3, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	1841      	adds	r1, r0, r1
 800b7fe:	6021      	str	r1, [r4, #0]
 800b800:	6063      	str	r3, [r4, #4]
 800b802:	6054      	str	r4, [r2, #4]
 800b804:	e7ca      	b.n	800b79c <_free_r+0x24>
 800b806:	46c0      	nop			; (mov r8, r8)
 800b808:	20000254 	.word	0x20000254

0800b80c <_malloc_r>:
 800b80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80e:	2303      	movs	r3, #3
 800b810:	1ccd      	adds	r5, r1, #3
 800b812:	439d      	bics	r5, r3
 800b814:	3508      	adds	r5, #8
 800b816:	0006      	movs	r6, r0
 800b818:	2d0c      	cmp	r5, #12
 800b81a:	d21f      	bcs.n	800b85c <_malloc_r+0x50>
 800b81c:	250c      	movs	r5, #12
 800b81e:	42a9      	cmp	r1, r5
 800b820:	d81e      	bhi.n	800b860 <_malloc_r+0x54>
 800b822:	0030      	movs	r0, r6
 800b824:	f000 f888 	bl	800b938 <__malloc_lock>
 800b828:	4925      	ldr	r1, [pc, #148]	; (800b8c0 <_malloc_r+0xb4>)
 800b82a:	680a      	ldr	r2, [r1, #0]
 800b82c:	0014      	movs	r4, r2
 800b82e:	2c00      	cmp	r4, #0
 800b830:	d11a      	bne.n	800b868 <_malloc_r+0x5c>
 800b832:	4f24      	ldr	r7, [pc, #144]	; (800b8c4 <_malloc_r+0xb8>)
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d104      	bne.n	800b844 <_malloc_r+0x38>
 800b83a:	0021      	movs	r1, r4
 800b83c:	0030      	movs	r0, r6
 800b83e:	f000 f869 	bl	800b914 <_sbrk_r>
 800b842:	6038      	str	r0, [r7, #0]
 800b844:	0029      	movs	r1, r5
 800b846:	0030      	movs	r0, r6
 800b848:	f000 f864 	bl	800b914 <_sbrk_r>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d12b      	bne.n	800b8a8 <_malloc_r+0x9c>
 800b850:	230c      	movs	r3, #12
 800b852:	0030      	movs	r0, r6
 800b854:	6033      	str	r3, [r6, #0]
 800b856:	f000 f877 	bl	800b948 <__malloc_unlock>
 800b85a:	e003      	b.n	800b864 <_malloc_r+0x58>
 800b85c:	2d00      	cmp	r5, #0
 800b85e:	dade      	bge.n	800b81e <_malloc_r+0x12>
 800b860:	230c      	movs	r3, #12
 800b862:	6033      	str	r3, [r6, #0]
 800b864:	2000      	movs	r0, #0
 800b866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	1b5b      	subs	r3, r3, r5
 800b86c:	d419      	bmi.n	800b8a2 <_malloc_r+0x96>
 800b86e:	2b0b      	cmp	r3, #11
 800b870:	d903      	bls.n	800b87a <_malloc_r+0x6e>
 800b872:	6023      	str	r3, [r4, #0]
 800b874:	18e4      	adds	r4, r4, r3
 800b876:	6025      	str	r5, [r4, #0]
 800b878:	e003      	b.n	800b882 <_malloc_r+0x76>
 800b87a:	6863      	ldr	r3, [r4, #4]
 800b87c:	42a2      	cmp	r2, r4
 800b87e:	d10e      	bne.n	800b89e <_malloc_r+0x92>
 800b880:	600b      	str	r3, [r1, #0]
 800b882:	0030      	movs	r0, r6
 800b884:	f000 f860 	bl	800b948 <__malloc_unlock>
 800b888:	0020      	movs	r0, r4
 800b88a:	2207      	movs	r2, #7
 800b88c:	300b      	adds	r0, #11
 800b88e:	1d23      	adds	r3, r4, #4
 800b890:	4390      	bics	r0, r2
 800b892:	1ac2      	subs	r2, r0, r3
 800b894:	4298      	cmp	r0, r3
 800b896:	d0e6      	beq.n	800b866 <_malloc_r+0x5a>
 800b898:	1a1b      	subs	r3, r3, r0
 800b89a:	50a3      	str	r3, [r4, r2]
 800b89c:	e7e3      	b.n	800b866 <_malloc_r+0x5a>
 800b89e:	6053      	str	r3, [r2, #4]
 800b8a0:	e7ef      	b.n	800b882 <_malloc_r+0x76>
 800b8a2:	0022      	movs	r2, r4
 800b8a4:	6864      	ldr	r4, [r4, #4]
 800b8a6:	e7c2      	b.n	800b82e <_malloc_r+0x22>
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	1cc4      	adds	r4, r0, #3
 800b8ac:	439c      	bics	r4, r3
 800b8ae:	42a0      	cmp	r0, r4
 800b8b0:	d0e1      	beq.n	800b876 <_malloc_r+0x6a>
 800b8b2:	1a21      	subs	r1, r4, r0
 800b8b4:	0030      	movs	r0, r6
 800b8b6:	f000 f82d 	bl	800b914 <_sbrk_r>
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	d1db      	bne.n	800b876 <_malloc_r+0x6a>
 800b8be:	e7c7      	b.n	800b850 <_malloc_r+0x44>
 800b8c0:	20000254 	.word	0x20000254
 800b8c4:	20000258 	.word	0x20000258

0800b8c8 <_realloc_r>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	0007      	movs	r7, r0
 800b8cc:	000d      	movs	r5, r1
 800b8ce:	0016      	movs	r6, r2
 800b8d0:	2900      	cmp	r1, #0
 800b8d2:	d105      	bne.n	800b8e0 <_realloc_r+0x18>
 800b8d4:	0011      	movs	r1, r2
 800b8d6:	f7ff ff99 	bl	800b80c <_malloc_r>
 800b8da:	0004      	movs	r4, r0
 800b8dc:	0020      	movs	r0, r4
 800b8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	d103      	bne.n	800b8ec <_realloc_r+0x24>
 800b8e4:	f7ff ff48 	bl	800b778 <_free_r>
 800b8e8:	0034      	movs	r4, r6
 800b8ea:	e7f7      	b.n	800b8dc <_realloc_r+0x14>
 800b8ec:	f000 f834 	bl	800b958 <_malloc_usable_size_r>
 800b8f0:	002c      	movs	r4, r5
 800b8f2:	42b0      	cmp	r0, r6
 800b8f4:	d2f2      	bcs.n	800b8dc <_realloc_r+0x14>
 800b8f6:	0031      	movs	r1, r6
 800b8f8:	0038      	movs	r0, r7
 800b8fa:	f7ff ff87 	bl	800b80c <_malloc_r>
 800b8fe:	1e04      	subs	r4, r0, #0
 800b900:	d0ec      	beq.n	800b8dc <_realloc_r+0x14>
 800b902:	0029      	movs	r1, r5
 800b904:	0032      	movs	r2, r6
 800b906:	f7ff fbd7 	bl	800b0b8 <memcpy>
 800b90a:	0029      	movs	r1, r5
 800b90c:	0038      	movs	r0, r7
 800b90e:	f7ff ff33 	bl	800b778 <_free_r>
 800b912:	e7e3      	b.n	800b8dc <_realloc_r+0x14>

0800b914 <_sbrk_r>:
 800b914:	2300      	movs	r3, #0
 800b916:	b570      	push	{r4, r5, r6, lr}
 800b918:	4d06      	ldr	r5, [pc, #24]	; (800b934 <_sbrk_r+0x20>)
 800b91a:	0004      	movs	r4, r0
 800b91c:	0008      	movs	r0, r1
 800b91e:	602b      	str	r3, [r5, #0]
 800b920:	f7ff f96c 	bl	800abfc <_sbrk>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	d103      	bne.n	800b930 <_sbrk_r+0x1c>
 800b928:	682b      	ldr	r3, [r5, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d000      	beq.n	800b930 <_sbrk_r+0x1c>
 800b92e:	6023      	str	r3, [r4, #0]
 800b930:	bd70      	pop	{r4, r5, r6, pc}
 800b932:	46c0      	nop			; (mov r8, r8)
 800b934:	200049c0 	.word	0x200049c0

0800b938 <__malloc_lock>:
 800b938:	b510      	push	{r4, lr}
 800b93a:	4802      	ldr	r0, [pc, #8]	; (800b944 <__malloc_lock+0xc>)
 800b93c:	f000 f814 	bl	800b968 <__retarget_lock_acquire_recursive>
 800b940:	bd10      	pop	{r4, pc}
 800b942:	46c0      	nop			; (mov r8, r8)
 800b944:	200049c8 	.word	0x200049c8

0800b948 <__malloc_unlock>:
 800b948:	b510      	push	{r4, lr}
 800b94a:	4802      	ldr	r0, [pc, #8]	; (800b954 <__malloc_unlock+0xc>)
 800b94c:	f000 f80d 	bl	800b96a <__retarget_lock_release_recursive>
 800b950:	bd10      	pop	{r4, pc}
 800b952:	46c0      	nop			; (mov r8, r8)
 800b954:	200049c8 	.word	0x200049c8

0800b958 <_malloc_usable_size_r>:
 800b958:	1f0b      	subs	r3, r1, #4
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	1f18      	subs	r0, r3, #4
 800b95e:	2b00      	cmp	r3, #0
 800b960:	da01      	bge.n	800b966 <_malloc_usable_size_r+0xe>
 800b962:	580b      	ldr	r3, [r1, r0]
 800b964:	18c0      	adds	r0, r0, r3
 800b966:	4770      	bx	lr

0800b968 <__retarget_lock_acquire_recursive>:
 800b968:	4770      	bx	lr

0800b96a <__retarget_lock_release_recursive>:
 800b96a:	4770      	bx	lr

0800b96c <pow>:
 800b96c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b96e:	001d      	movs	r5, r3
 800b970:	0014      	movs	r4, r2
 800b972:	9000      	str	r0, [sp, #0]
 800b974:	9101      	str	r1, [sp, #4]
 800b976:	f000 f8b1 	bl	800badc <__ieee754_pow>
 800b97a:	4b54      	ldr	r3, [pc, #336]	; (800bacc <pow+0x160>)
 800b97c:	0006      	movs	r6, r0
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	000f      	movs	r7, r1
 800b982:	b25b      	sxtb	r3, r3
 800b984:	3301      	adds	r3, #1
 800b986:	d018      	beq.n	800b9ba <pow+0x4e>
 800b988:	0022      	movs	r2, r4
 800b98a:	002b      	movs	r3, r5
 800b98c:	0020      	movs	r0, r4
 800b98e:	0029      	movs	r1, r5
 800b990:	f7f6 fc18 	bl	80021c4 <__aeabi_dcmpun>
 800b994:	2800      	cmp	r0, #0
 800b996:	d110      	bne.n	800b9ba <pow+0x4e>
 800b998:	9a00      	ldr	r2, [sp, #0]
 800b99a:	9b01      	ldr	r3, [sp, #4]
 800b99c:	0010      	movs	r0, r2
 800b99e:	0019      	movs	r1, r3
 800b9a0:	f7f6 fc10 	bl	80021c4 <__aeabi_dcmpun>
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d00a      	beq.n	800b9c2 <pow+0x56>
 800b9ac:	0020      	movs	r0, r4
 800b9ae:	0029      	movs	r1, r5
 800b9b0:	f7f4 fd3a 	bl	8000428 <__aeabi_dcmpeq>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d000      	beq.n	800b9ba <pow+0x4e>
 800b9b8:	e084      	b.n	800bac4 <pow+0x158>
 800b9ba:	0030      	movs	r0, r6
 800b9bc:	0039      	movs	r1, r7
 800b9be:	b003      	add	sp, #12
 800b9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c2:	9800      	ldr	r0, [sp, #0]
 800b9c4:	9901      	ldr	r1, [sp, #4]
 800b9c6:	f7f4 fd2f 	bl	8000428 <__aeabi_dcmpeq>
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d01c      	beq.n	800ba08 <pow+0x9c>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	0020      	movs	r0, r4
 800b9d4:	0029      	movs	r1, r5
 800b9d6:	f7f4 fd27 	bl	8000428 <__aeabi_dcmpeq>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d172      	bne.n	800bac4 <pow+0x158>
 800b9de:	0020      	movs	r0, r4
 800b9e0:	0029      	movs	r1, r5
 800b9e2:	f000 fe33 	bl	800c64c <finite>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d0e7      	beq.n	800b9ba <pow+0x4e>
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	0020      	movs	r0, r4
 800b9f0:	0029      	movs	r1, r5
 800b9f2:	f7f4 fd1f 	bl	8000434 <__aeabi_dcmplt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d0df      	beq.n	800b9ba <pow+0x4e>
 800b9fa:	f7ff fb33 	bl	800b064 <__errno>
 800b9fe:	2321      	movs	r3, #33	; 0x21
 800ba00:	2600      	movs	r6, #0
 800ba02:	6003      	str	r3, [r0, #0]
 800ba04:	4f32      	ldr	r7, [pc, #200]	; (800bad0 <pow+0x164>)
 800ba06:	e7d8      	b.n	800b9ba <pow+0x4e>
 800ba08:	0030      	movs	r0, r6
 800ba0a:	0039      	movs	r1, r7
 800ba0c:	f000 fe1e 	bl	800c64c <finite>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d139      	bne.n	800ba88 <pow+0x11c>
 800ba14:	9800      	ldr	r0, [sp, #0]
 800ba16:	9901      	ldr	r1, [sp, #4]
 800ba18:	f000 fe18 	bl	800c64c <finite>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d033      	beq.n	800ba88 <pow+0x11c>
 800ba20:	0020      	movs	r0, r4
 800ba22:	0029      	movs	r1, r5
 800ba24:	f000 fe12 	bl	800c64c <finite>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d02d      	beq.n	800ba88 <pow+0x11c>
 800ba2c:	0032      	movs	r2, r6
 800ba2e:	003b      	movs	r3, r7
 800ba30:	0030      	movs	r0, r6
 800ba32:	0039      	movs	r1, r7
 800ba34:	f7f6 fbc6 	bl	80021c4 <__aeabi_dcmpun>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d00c      	beq.n	800ba56 <pow+0xea>
 800ba3c:	f7ff fb12 	bl	800b064 <__errno>
 800ba40:	2321      	movs	r3, #33	; 0x21
 800ba42:	2200      	movs	r2, #0
 800ba44:	6003      	str	r3, [r0, #0]
 800ba46:	2300      	movs	r3, #0
 800ba48:	0010      	movs	r0, r2
 800ba4a:	0019      	movs	r1, r3
 800ba4c:	f7f5 f9b6 	bl	8000dbc <__aeabi_ddiv>
 800ba50:	0006      	movs	r6, r0
 800ba52:	000f      	movs	r7, r1
 800ba54:	e7b1      	b.n	800b9ba <pow+0x4e>
 800ba56:	f7ff fb05 	bl	800b064 <__errno>
 800ba5a:	2322      	movs	r3, #34	; 0x22
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	6003      	str	r3, [r0, #0]
 800ba60:	2300      	movs	r3, #0
 800ba62:	9800      	ldr	r0, [sp, #0]
 800ba64:	9901      	ldr	r1, [sp, #4]
 800ba66:	f7f4 fce5 	bl	8000434 <__aeabi_dcmplt>
 800ba6a:	2600      	movs	r6, #0
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d009      	beq.n	800ba84 <pow+0x118>
 800ba70:	0020      	movs	r0, r4
 800ba72:	0029      	movs	r1, r5
 800ba74:	f000 fdf8 	bl	800c668 <rint>
 800ba78:	0022      	movs	r2, r4
 800ba7a:	002b      	movs	r3, r5
 800ba7c:	f7f4 fcd4 	bl	8000428 <__aeabi_dcmpeq>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d0bf      	beq.n	800ba04 <pow+0x98>
 800ba84:	4f13      	ldr	r7, [pc, #76]	; (800bad4 <pow+0x168>)
 800ba86:	e798      	b.n	800b9ba <pow+0x4e>
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	0030      	movs	r0, r6
 800ba8e:	0039      	movs	r1, r7
 800ba90:	f7f4 fcca 	bl	8000428 <__aeabi_dcmpeq>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d100      	bne.n	800ba9a <pow+0x12e>
 800ba98:	e78f      	b.n	800b9ba <pow+0x4e>
 800ba9a:	9800      	ldr	r0, [sp, #0]
 800ba9c:	9901      	ldr	r1, [sp, #4]
 800ba9e:	f000 fdd5 	bl	800c64c <finite>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d100      	bne.n	800baa8 <pow+0x13c>
 800baa6:	e788      	b.n	800b9ba <pow+0x4e>
 800baa8:	0020      	movs	r0, r4
 800baaa:	0029      	movs	r1, r5
 800baac:	f000 fdce 	bl	800c64c <finite>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d100      	bne.n	800bab6 <pow+0x14a>
 800bab4:	e781      	b.n	800b9ba <pow+0x4e>
 800bab6:	f7ff fad5 	bl	800b064 <__errno>
 800baba:	2322      	movs	r3, #34	; 0x22
 800babc:	2600      	movs	r6, #0
 800babe:	2700      	movs	r7, #0
 800bac0:	6003      	str	r3, [r0, #0]
 800bac2:	e77a      	b.n	800b9ba <pow+0x4e>
 800bac4:	2600      	movs	r6, #0
 800bac6:	4f04      	ldr	r7, [pc, #16]	; (800bad8 <pow+0x16c>)
 800bac8:	e777      	b.n	800b9ba <pow+0x4e>
 800baca:	46c0      	nop			; (mov r8, r8)
 800bacc:	200001b4 	.word	0x200001b4
 800bad0:	fff00000 	.word	0xfff00000
 800bad4:	7ff00000 	.word	0x7ff00000
 800bad8:	3ff00000 	.word	0x3ff00000

0800badc <__ieee754_pow>:
 800badc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bade:	b095      	sub	sp, #84	; 0x54
 800bae0:	9202      	str	r2, [sp, #8]
 800bae2:	9303      	str	r3, [sp, #12]
 800bae4:	9b03      	ldr	r3, [sp, #12]
 800bae6:	9a03      	ldr	r2, [sp, #12]
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	9b02      	ldr	r3, [sp, #8]
 800baec:	0055      	lsls	r5, r2, #1
 800baee:	001a      	movs	r2, r3
 800baf0:	086d      	lsrs	r5, r5, #1
 800baf2:	0007      	movs	r7, r0
 800baf4:	000e      	movs	r6, r1
 800baf6:	432a      	orrs	r2, r5
 800baf8:	d101      	bne.n	800bafe <__ieee754_pow+0x22>
 800bafa:	f000 fcb6 	bl	800c46a <__ieee754_pow+0x98e>
 800bafe:	4a82      	ldr	r2, [pc, #520]	; (800bd08 <__ieee754_pow+0x22c>)
 800bb00:	004c      	lsls	r4, r1, #1
 800bb02:	9108      	str	r1, [sp, #32]
 800bb04:	9000      	str	r0, [sp, #0]
 800bb06:	0864      	lsrs	r4, r4, #1
 800bb08:	4294      	cmp	r4, r2
 800bb0a:	dc0d      	bgt.n	800bb28 <__ieee754_pow+0x4c>
 800bb0c:	d104      	bne.n	800bb18 <__ieee754_pow+0x3c>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d110      	bne.n	800bb34 <__ieee754_pow+0x58>
 800bb12:	42a5      	cmp	r5, r4
 800bb14:	dd03      	ble.n	800bb1e <__ieee754_pow+0x42>
 800bb16:	e00d      	b.n	800bb34 <__ieee754_pow+0x58>
 800bb18:	4a7b      	ldr	r2, [pc, #492]	; (800bd08 <__ieee754_pow+0x22c>)
 800bb1a:	4295      	cmp	r5, r2
 800bb1c:	dc04      	bgt.n	800bb28 <__ieee754_pow+0x4c>
 800bb1e:	4a7a      	ldr	r2, [pc, #488]	; (800bd08 <__ieee754_pow+0x22c>)
 800bb20:	4295      	cmp	r5, r2
 800bb22:	d10d      	bne.n	800bb40 <__ieee754_pow+0x64>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00b      	beq.n	800bb40 <__ieee754_pow+0x64>
 800bb28:	4b78      	ldr	r3, [pc, #480]	; (800bd0c <__ieee754_pow+0x230>)
 800bb2a:	18e4      	adds	r4, r4, r3
 800bb2c:	4327      	orrs	r7, r4
 800bb2e:	d101      	bne.n	800bb34 <__ieee754_pow+0x58>
 800bb30:	f000 fc9b 	bl	800c46a <__ieee754_pow+0x98e>
 800bb34:	4876      	ldr	r0, [pc, #472]	; (800bd10 <__ieee754_pow+0x234>)
 800bb36:	f000 fd91 	bl	800c65c <nan>
 800bb3a:	9000      	str	r0, [sp, #0]
 800bb3c:	9101      	str	r1, [sp, #4]
 800bb3e:	e092      	b.n	800bc66 <__ieee754_pow+0x18a>
 800bb40:	2200      	movs	r2, #0
 800bb42:	9206      	str	r2, [sp, #24]
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	da69      	bge.n	800bc1c <__ieee754_pow+0x140>
 800bb48:	4a72      	ldr	r2, [pc, #456]	; (800bd14 <__ieee754_pow+0x238>)
 800bb4a:	4295      	cmp	r5, r2
 800bb4c:	dc64      	bgt.n	800bc18 <__ieee754_pow+0x13c>
 800bb4e:	4a72      	ldr	r2, [pc, #456]	; (800bd18 <__ieee754_pow+0x23c>)
 800bb50:	4295      	cmp	r5, r2
 800bb52:	dd11      	ble.n	800bb78 <__ieee754_pow+0x9c>
 800bb54:	4971      	ldr	r1, [pc, #452]	; (800bd1c <__ieee754_pow+0x240>)
 800bb56:	152a      	asrs	r2, r5, #20
 800bb58:	1852      	adds	r2, r2, r1
 800bb5a:	2a14      	cmp	r2, #20
 800bb5c:	dd3c      	ble.n	800bbd8 <__ieee754_pow+0xfc>
 800bb5e:	2134      	movs	r1, #52	; 0x34
 800bb60:	1a8a      	subs	r2, r1, r2
 800bb62:	9902      	ldr	r1, [sp, #8]
 800bb64:	40d1      	lsrs	r1, r2
 800bb66:	0008      	movs	r0, r1
 800bb68:	4090      	lsls	r0, r2
 800bb6a:	4298      	cmp	r0, r3
 800bb6c:	d104      	bne.n	800bb78 <__ieee754_pow+0x9c>
 800bb6e:	2201      	movs	r2, #1
 800bb70:	4011      	ands	r1, r2
 800bb72:	1892      	adds	r2, r2, r2
 800bb74:	1a52      	subs	r2, r2, r1
 800bb76:	9206      	str	r2, [sp, #24]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d03c      	beq.n	800bbf6 <__ieee754_pow+0x11a>
 800bb7c:	0038      	movs	r0, r7
 800bb7e:	0031      	movs	r1, r6
 800bb80:	f000 fd60 	bl	800c644 <fabs>
 800bb84:	9000      	str	r0, [sp, #0]
 800bb86:	9101      	str	r1, [sp, #4]
 800bb88:	2f00      	cmp	r7, #0
 800bb8a:	d000      	beq.n	800bb8e <__ieee754_pow+0xb2>
 800bb8c:	e094      	b.n	800bcb8 <__ieee754_pow+0x1dc>
 800bb8e:	2c00      	cmp	r4, #0
 800bb90:	d005      	beq.n	800bb9e <__ieee754_pow+0xc2>
 800bb92:	4a63      	ldr	r2, [pc, #396]	; (800bd20 <__ieee754_pow+0x244>)
 800bb94:	00b3      	lsls	r3, r6, #2
 800bb96:	089b      	lsrs	r3, r3, #2
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d000      	beq.n	800bb9e <__ieee754_pow+0xc2>
 800bb9c:	e08c      	b.n	800bcb8 <__ieee754_pow+0x1dc>
 800bb9e:	9b04      	ldr	r3, [sp, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	da07      	bge.n	800bbb4 <__ieee754_pow+0xd8>
 800bba4:	9a00      	ldr	r2, [sp, #0]
 800bba6:	9b01      	ldr	r3, [sp, #4]
 800bba8:	2000      	movs	r0, #0
 800bbaa:	495d      	ldr	r1, [pc, #372]	; (800bd20 <__ieee754_pow+0x244>)
 800bbac:	f7f5 f906 	bl	8000dbc <__aeabi_ddiv>
 800bbb0:	9000      	str	r0, [sp, #0]
 800bbb2:	9101      	str	r1, [sp, #4]
 800bbb4:	9b08      	ldr	r3, [sp, #32]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	da55      	bge.n	800bc66 <__ieee754_pow+0x18a>
 800bbba:	4b54      	ldr	r3, [pc, #336]	; (800bd0c <__ieee754_pow+0x230>)
 800bbbc:	18e4      	adds	r4, r4, r3
 800bbbe:	9b06      	ldr	r3, [sp, #24]
 800bbc0:	431c      	orrs	r4, r3
 800bbc2:	d000      	beq.n	800bbc6 <__ieee754_pow+0xea>
 800bbc4:	e06c      	b.n	800bca0 <__ieee754_pow+0x1c4>
 800bbc6:	9a00      	ldr	r2, [sp, #0]
 800bbc8:	9b01      	ldr	r3, [sp, #4]
 800bbca:	0010      	movs	r0, r2
 800bbcc:	0019      	movs	r1, r3
 800bbce:	f7f5 ff67 	bl	8001aa0 <__aeabi_dsub>
 800bbd2:	0002      	movs	r2, r0
 800bbd4:	000b      	movs	r3, r1
 800bbd6:	e01c      	b.n	800bc12 <__ieee754_pow+0x136>
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1cf      	bne.n	800bb7c <__ieee754_pow+0xa0>
 800bbdc:	3314      	adds	r3, #20
 800bbde:	1a9a      	subs	r2, r3, r2
 800bbe0:	002b      	movs	r3, r5
 800bbe2:	4113      	asrs	r3, r2
 800bbe4:	0019      	movs	r1, r3
 800bbe6:	4091      	lsls	r1, r2
 800bbe8:	42a9      	cmp	r1, r5
 800bbea:	d104      	bne.n	800bbf6 <__ieee754_pow+0x11a>
 800bbec:	2201      	movs	r2, #1
 800bbee:	4013      	ands	r3, r2
 800bbf0:	1892      	adds	r2, r2, r2
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	9306      	str	r3, [sp, #24]
 800bbf6:	4b4a      	ldr	r3, [pc, #296]	; (800bd20 <__ieee754_pow+0x244>)
 800bbf8:	429d      	cmp	r5, r3
 800bbfa:	d138      	bne.n	800bc6e <__ieee754_pow+0x192>
 800bbfc:	0038      	movs	r0, r7
 800bbfe:	0031      	movs	r1, r6
 800bc00:	9b04      	ldr	r3, [sp, #16]
 800bc02:	9000      	str	r0, [sp, #0]
 800bc04:	9101      	str	r1, [sp, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	da2d      	bge.n	800bc66 <__ieee754_pow+0x18a>
 800bc0a:	003a      	movs	r2, r7
 800bc0c:	0033      	movs	r3, r6
 800bc0e:	2000      	movs	r0, #0
 800bc10:	4943      	ldr	r1, [pc, #268]	; (800bd20 <__ieee754_pow+0x244>)
 800bc12:	f7f5 f8d3 	bl	8000dbc <__aeabi_ddiv>
 800bc16:	e790      	b.n	800bb3a <__ieee754_pow+0x5e>
 800bc18:	2202      	movs	r2, #2
 800bc1a:	9206      	str	r2, [sp, #24]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1ad      	bne.n	800bb7c <__ieee754_pow+0xa0>
 800bc20:	4b39      	ldr	r3, [pc, #228]	; (800bd08 <__ieee754_pow+0x22c>)
 800bc22:	429d      	cmp	r5, r3
 800bc24:	d1e7      	bne.n	800bbf6 <__ieee754_pow+0x11a>
 800bc26:	4b39      	ldr	r3, [pc, #228]	; (800bd0c <__ieee754_pow+0x230>)
 800bc28:	18e3      	adds	r3, r4, r3
 800bc2a:	431f      	orrs	r7, r3
 800bc2c:	d101      	bne.n	800bc32 <__ieee754_pow+0x156>
 800bc2e:	f000 fc1c 	bl	800c46a <__ieee754_pow+0x98e>
 800bc32:	4b39      	ldr	r3, [pc, #228]	; (800bd18 <__ieee754_pow+0x23c>)
 800bc34:	429c      	cmp	r4, r3
 800bc36:	dd0b      	ble.n	800bc50 <__ieee754_pow+0x174>
 800bc38:	9b02      	ldr	r3, [sp, #8]
 800bc3a:	9c03      	ldr	r4, [sp, #12]
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	9401      	str	r4, [sp, #4]
 800bc40:	9b04      	ldr	r3, [sp, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	da0f      	bge.n	800bc66 <__ieee754_pow+0x18a>
 800bc46:	2300      	movs	r3, #0
 800bc48:	2400      	movs	r4, #0
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	9401      	str	r4, [sp, #4]
 800bc4e:	e00a      	b.n	800bc66 <__ieee754_pow+0x18a>
 800bc50:	9b04      	ldr	r3, [sp, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	daf7      	bge.n	800bc46 <__ieee754_pow+0x16a>
 800bc56:	2280      	movs	r2, #128	; 0x80
 800bc58:	0612      	lsls	r2, r2, #24
 800bc5a:	4694      	mov	ip, r2
 800bc5c:	9b02      	ldr	r3, [sp, #8]
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	9b03      	ldr	r3, [sp, #12]
 800bc62:	4463      	add	r3, ip
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	9800      	ldr	r0, [sp, #0]
 800bc68:	9901      	ldr	r1, [sp, #4]
 800bc6a:	b015      	add	sp, #84	; 0x54
 800bc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc6e:	2380      	movs	r3, #128	; 0x80
 800bc70:	9a04      	ldr	r2, [sp, #16]
 800bc72:	05db      	lsls	r3, r3, #23
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d106      	bne.n	800bc86 <__ieee754_pow+0x1aa>
 800bc78:	003a      	movs	r2, r7
 800bc7a:	0033      	movs	r3, r6
 800bc7c:	0038      	movs	r0, r7
 800bc7e:	0031      	movs	r1, r6
 800bc80:	f7f5 fca2 	bl	80015c8 <__aeabi_dmul>
 800bc84:	e759      	b.n	800bb3a <__ieee754_pow+0x5e>
 800bc86:	4b27      	ldr	r3, [pc, #156]	; (800bd24 <__ieee754_pow+0x248>)
 800bc88:	9a04      	ldr	r2, [sp, #16]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d000      	beq.n	800bc90 <__ieee754_pow+0x1b4>
 800bc8e:	e775      	b.n	800bb7c <__ieee754_pow+0xa0>
 800bc90:	2e00      	cmp	r6, #0
 800bc92:	da00      	bge.n	800bc96 <__ieee754_pow+0x1ba>
 800bc94:	e772      	b.n	800bb7c <__ieee754_pow+0xa0>
 800bc96:	0038      	movs	r0, r7
 800bc98:	0031      	movs	r1, r6
 800bc9a:	f000 fc1f 	bl	800c4dc <__ieee754_sqrt>
 800bc9e:	e74c      	b.n	800bb3a <__ieee754_pow+0x5e>
 800bca0:	9b06      	ldr	r3, [sp, #24]
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d1df      	bne.n	800bc66 <__ieee754_pow+0x18a>
 800bca6:	9800      	ldr	r0, [sp, #0]
 800bca8:	2180      	movs	r1, #128	; 0x80
 800bcaa:	0002      	movs	r2, r0
 800bcac:	9801      	ldr	r0, [sp, #4]
 800bcae:	0609      	lsls	r1, r1, #24
 800bcb0:	1843      	adds	r3, r0, r1
 800bcb2:	9200      	str	r2, [sp, #0]
 800bcb4:	9301      	str	r3, [sp, #4]
 800bcb6:	e7d6      	b.n	800bc66 <__ieee754_pow+0x18a>
 800bcb8:	0ff3      	lsrs	r3, r6, #31
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	9310      	str	r3, [sp, #64]	; 0x40
 800bcbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcc0:	9b06      	ldr	r3, [sp, #24]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	d104      	bne.n	800bcd0 <__ieee754_pow+0x1f4>
 800bcc6:	003a      	movs	r2, r7
 800bcc8:	0033      	movs	r3, r6
 800bcca:	0038      	movs	r0, r7
 800bccc:	0031      	movs	r1, r6
 800bcce:	e77e      	b.n	800bbce <__ieee754_pow+0xf2>
 800bcd0:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <__ieee754_pow+0x24c>)
 800bcd2:	429d      	cmp	r5, r3
 800bcd4:	dc00      	bgt.n	800bcd8 <__ieee754_pow+0x1fc>
 800bcd6:	e0f5      	b.n	800bec4 <__ieee754_pow+0x3e8>
 800bcd8:	4b14      	ldr	r3, [pc, #80]	; (800bd2c <__ieee754_pow+0x250>)
 800bcda:	429d      	cmp	r5, r3
 800bcdc:	dd0a      	ble.n	800bcf4 <__ieee754_pow+0x218>
 800bcde:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <__ieee754_pow+0x23c>)
 800bce0:	429c      	cmp	r4, r3
 800bce2:	dc0d      	bgt.n	800bd00 <__ieee754_pow+0x224>
 800bce4:	9b04      	ldr	r3, [sp, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	daad      	bge.n	800bc46 <__ieee754_pow+0x16a>
 800bcea:	4a11      	ldr	r2, [pc, #68]	; (800bd30 <__ieee754_pow+0x254>)
 800bcec:	4b11      	ldr	r3, [pc, #68]	; (800bd34 <__ieee754_pow+0x258>)
 800bcee:	0010      	movs	r0, r2
 800bcf0:	0019      	movs	r1, r3
 800bcf2:	e7c5      	b.n	800bc80 <__ieee754_pow+0x1a4>
 800bcf4:	4b10      	ldr	r3, [pc, #64]	; (800bd38 <__ieee754_pow+0x25c>)
 800bcf6:	429c      	cmp	r4, r3
 800bcf8:	ddf4      	ble.n	800bce4 <__ieee754_pow+0x208>
 800bcfa:	4b09      	ldr	r3, [pc, #36]	; (800bd20 <__ieee754_pow+0x244>)
 800bcfc:	429c      	cmp	r4, r3
 800bcfe:	dd1d      	ble.n	800bd3c <__ieee754_pow+0x260>
 800bd00:	9b04      	ldr	r3, [sp, #16]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	dcf1      	bgt.n	800bcea <__ieee754_pow+0x20e>
 800bd06:	e79e      	b.n	800bc46 <__ieee754_pow+0x16a>
 800bd08:	7ff00000 	.word	0x7ff00000
 800bd0c:	c0100000 	.word	0xc0100000
 800bd10:	08010e41 	.word	0x08010e41
 800bd14:	433fffff 	.word	0x433fffff
 800bd18:	3fefffff 	.word	0x3fefffff
 800bd1c:	fffffc01 	.word	0xfffffc01
 800bd20:	3ff00000 	.word	0x3ff00000
 800bd24:	3fe00000 	.word	0x3fe00000
 800bd28:	41e00000 	.word	0x41e00000
 800bd2c:	43f00000 	.word	0x43f00000
 800bd30:	8800759c 	.word	0x8800759c
 800bd34:	7e37e43c 	.word	0x7e37e43c
 800bd38:	3feffffe 	.word	0x3feffffe
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	9800      	ldr	r0, [sp, #0]
 800bd40:	9901      	ldr	r1, [sp, #4]
 800bd42:	4b52      	ldr	r3, [pc, #328]	; (800be8c <__ieee754_pow+0x3b0>)
 800bd44:	f7f5 feac 	bl	8001aa0 <__aeabi_dsub>
 800bd48:	22c0      	movs	r2, #192	; 0xc0
 800bd4a:	4b51      	ldr	r3, [pc, #324]	; (800be90 <__ieee754_pow+0x3b4>)
 800bd4c:	05d2      	lsls	r2, r2, #23
 800bd4e:	0004      	movs	r4, r0
 800bd50:	000d      	movs	r5, r1
 800bd52:	f7f5 fc39 	bl	80015c8 <__aeabi_dmul>
 800bd56:	4a4f      	ldr	r2, [pc, #316]	; (800be94 <__ieee754_pow+0x3b8>)
 800bd58:	9000      	str	r0, [sp, #0]
 800bd5a:	9101      	str	r1, [sp, #4]
 800bd5c:	4b4e      	ldr	r3, [pc, #312]	; (800be98 <__ieee754_pow+0x3bc>)
 800bd5e:	0020      	movs	r0, r4
 800bd60:	0029      	movs	r1, r5
 800bd62:	f7f5 fc31 	bl	80015c8 <__aeabi_dmul>
 800bd66:	2200      	movs	r2, #0
 800bd68:	9004      	str	r0, [sp, #16]
 800bd6a:	9105      	str	r1, [sp, #20]
 800bd6c:	4b4b      	ldr	r3, [pc, #300]	; (800be9c <__ieee754_pow+0x3c0>)
 800bd6e:	0020      	movs	r0, r4
 800bd70:	0029      	movs	r1, r5
 800bd72:	f7f5 fc29 	bl	80015c8 <__aeabi_dmul>
 800bd76:	0002      	movs	r2, r0
 800bd78:	000b      	movs	r3, r1
 800bd7a:	4849      	ldr	r0, [pc, #292]	; (800bea0 <__ieee754_pow+0x3c4>)
 800bd7c:	4949      	ldr	r1, [pc, #292]	; (800bea4 <__ieee754_pow+0x3c8>)
 800bd7e:	f7f5 fe8f 	bl	8001aa0 <__aeabi_dsub>
 800bd82:	0022      	movs	r2, r4
 800bd84:	002b      	movs	r3, r5
 800bd86:	f7f5 fc1f 	bl	80015c8 <__aeabi_dmul>
 800bd8a:	0002      	movs	r2, r0
 800bd8c:	000b      	movs	r3, r1
 800bd8e:	2000      	movs	r0, #0
 800bd90:	4945      	ldr	r1, [pc, #276]	; (800bea8 <__ieee754_pow+0x3cc>)
 800bd92:	f7f5 fe85 	bl	8001aa0 <__aeabi_dsub>
 800bd96:	0022      	movs	r2, r4
 800bd98:	0006      	movs	r6, r0
 800bd9a:	000f      	movs	r7, r1
 800bd9c:	002b      	movs	r3, r5
 800bd9e:	0020      	movs	r0, r4
 800bda0:	0029      	movs	r1, r5
 800bda2:	f7f5 fc11 	bl	80015c8 <__aeabi_dmul>
 800bda6:	0002      	movs	r2, r0
 800bda8:	000b      	movs	r3, r1
 800bdaa:	0030      	movs	r0, r6
 800bdac:	0039      	movs	r1, r7
 800bdae:	f7f5 fc0b 	bl	80015c8 <__aeabi_dmul>
 800bdb2:	4a3e      	ldr	r2, [pc, #248]	; (800beac <__ieee754_pow+0x3d0>)
 800bdb4:	4b36      	ldr	r3, [pc, #216]	; (800be90 <__ieee754_pow+0x3b4>)
 800bdb6:	f7f5 fc07 	bl	80015c8 <__aeabi_dmul>
 800bdba:	0002      	movs	r2, r0
 800bdbc:	000b      	movs	r3, r1
 800bdbe:	9804      	ldr	r0, [sp, #16]
 800bdc0:	9905      	ldr	r1, [sp, #20]
 800bdc2:	f7f5 fe6d 	bl	8001aa0 <__aeabi_dsub>
 800bdc6:	0002      	movs	r2, r0
 800bdc8:	000b      	movs	r3, r1
 800bdca:	0004      	movs	r4, r0
 800bdcc:	000d      	movs	r5, r1
 800bdce:	9800      	ldr	r0, [sp, #0]
 800bdd0:	9901      	ldr	r1, [sp, #4]
 800bdd2:	f7f4 fc89 	bl	80006e8 <__aeabi_dadd>
 800bdd6:	9a00      	ldr	r2, [sp, #0]
 800bdd8:	9b01      	ldr	r3, [sp, #4]
 800bdda:	2000      	movs	r0, #0
 800bddc:	000f      	movs	r7, r1
 800bdde:	0006      	movs	r6, r0
 800bde0:	f7f5 fe5e 	bl	8001aa0 <__aeabi_dsub>
 800bde4:	0002      	movs	r2, r0
 800bde6:	000b      	movs	r3, r1
 800bde8:	0020      	movs	r0, r4
 800bdea:	0029      	movs	r1, r5
 800bdec:	f7f5 fe58 	bl	8001aa0 <__aeabi_dsub>
 800bdf0:	9b06      	ldr	r3, [sp, #24]
 800bdf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	9004      	str	r0, [sp, #16]
 800bdf8:	9105      	str	r1, [sp, #20]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	d000      	beq.n	800be00 <__ieee754_pow+0x324>
 800bdfe:	e1e0      	b.n	800c1c2 <__ieee754_pow+0x6e6>
 800be00:	2300      	movs	r3, #0
 800be02:	4c2b      	ldr	r4, [pc, #172]	; (800beb0 <__ieee754_pow+0x3d4>)
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	9401      	str	r4, [sp, #4]
 800be08:	9c02      	ldr	r4, [sp, #8]
 800be0a:	9d03      	ldr	r5, [sp, #12]
 800be0c:	9802      	ldr	r0, [sp, #8]
 800be0e:	9903      	ldr	r1, [sp, #12]
 800be10:	2400      	movs	r4, #0
 800be12:	002b      	movs	r3, r5
 800be14:	0022      	movs	r2, r4
 800be16:	f7f5 fe43 	bl	8001aa0 <__aeabi_dsub>
 800be1a:	0032      	movs	r2, r6
 800be1c:	003b      	movs	r3, r7
 800be1e:	f7f5 fbd3 	bl	80015c8 <__aeabi_dmul>
 800be22:	9a02      	ldr	r2, [sp, #8]
 800be24:	9b03      	ldr	r3, [sp, #12]
 800be26:	9006      	str	r0, [sp, #24]
 800be28:	9107      	str	r1, [sp, #28]
 800be2a:	9804      	ldr	r0, [sp, #16]
 800be2c:	9905      	ldr	r1, [sp, #20]
 800be2e:	f7f5 fbcb 	bl	80015c8 <__aeabi_dmul>
 800be32:	0002      	movs	r2, r0
 800be34:	000b      	movs	r3, r1
 800be36:	9806      	ldr	r0, [sp, #24]
 800be38:	9907      	ldr	r1, [sp, #28]
 800be3a:	f7f4 fc55 	bl	80006e8 <__aeabi_dadd>
 800be3e:	0022      	movs	r2, r4
 800be40:	002b      	movs	r3, r5
 800be42:	9004      	str	r0, [sp, #16]
 800be44:	9105      	str	r1, [sp, #20]
 800be46:	0030      	movs	r0, r6
 800be48:	0039      	movs	r1, r7
 800be4a:	f7f5 fbbd 	bl	80015c8 <__aeabi_dmul>
 800be4e:	0006      	movs	r6, r0
 800be50:	000f      	movs	r7, r1
 800be52:	000b      	movs	r3, r1
 800be54:	0002      	movs	r2, r0
 800be56:	9804      	ldr	r0, [sp, #16]
 800be58:	9905      	ldr	r1, [sp, #20]
 800be5a:	9606      	str	r6, [sp, #24]
 800be5c:	9707      	str	r7, [sp, #28]
 800be5e:	f7f4 fc43 	bl	80006e8 <__aeabi_dadd>
 800be62:	4b14      	ldr	r3, [pc, #80]	; (800beb4 <__ieee754_pow+0x3d8>)
 800be64:	0005      	movs	r5, r0
 800be66:	000c      	movs	r4, r1
 800be68:	9108      	str	r1, [sp, #32]
 800be6a:	4299      	cmp	r1, r3
 800be6c:	dc00      	bgt.n	800be70 <__ieee754_pow+0x394>
 800be6e:	e2da      	b.n	800c426 <__ieee754_pow+0x94a>
 800be70:	4b11      	ldr	r3, [pc, #68]	; (800beb8 <__ieee754_pow+0x3dc>)
 800be72:	18cb      	adds	r3, r1, r3
 800be74:	4303      	orrs	r3, r0
 800be76:	d100      	bne.n	800be7a <__ieee754_pow+0x39e>
 800be78:	e1dc      	b.n	800c234 <__ieee754_pow+0x758>
 800be7a:	9800      	ldr	r0, [sp, #0]
 800be7c:	9901      	ldr	r1, [sp, #4]
 800be7e:	4a0f      	ldr	r2, [pc, #60]	; (800bebc <__ieee754_pow+0x3e0>)
 800be80:	4b0f      	ldr	r3, [pc, #60]	; (800bec0 <__ieee754_pow+0x3e4>)
 800be82:	f7f5 fba1 	bl	80015c8 <__aeabi_dmul>
 800be86:	4a0d      	ldr	r2, [pc, #52]	; (800bebc <__ieee754_pow+0x3e0>)
 800be88:	4b0d      	ldr	r3, [pc, #52]	; (800bec0 <__ieee754_pow+0x3e4>)
 800be8a:	e6f9      	b.n	800bc80 <__ieee754_pow+0x1a4>
 800be8c:	3ff00000 	.word	0x3ff00000
 800be90:	3ff71547 	.word	0x3ff71547
 800be94:	f85ddf44 	.word	0xf85ddf44
 800be98:	3e54ae0b 	.word	0x3e54ae0b
 800be9c:	3fd00000 	.word	0x3fd00000
 800bea0:	55555555 	.word	0x55555555
 800bea4:	3fd55555 	.word	0x3fd55555
 800bea8:	3fe00000 	.word	0x3fe00000
 800beac:	652b82fe 	.word	0x652b82fe
 800beb0:	bff00000 	.word	0xbff00000
 800beb4:	408fffff 	.word	0x408fffff
 800beb8:	bf700000 	.word	0xbf700000
 800bebc:	8800759c 	.word	0x8800759c
 800bec0:	7e37e43c 	.word	0x7e37e43c
 800bec4:	4bc0      	ldr	r3, [pc, #768]	; (800c1c8 <__ieee754_pow+0x6ec>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	4233      	tst	r3, r6
 800beca:	d10a      	bne.n	800bee2 <__ieee754_pow+0x406>
 800becc:	9800      	ldr	r0, [sp, #0]
 800bece:	9901      	ldr	r1, [sp, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	4bbe      	ldr	r3, [pc, #760]	; (800c1cc <__ieee754_pow+0x6f0>)
 800bed4:	f7f5 fb78 	bl	80015c8 <__aeabi_dmul>
 800bed8:	2235      	movs	r2, #53	; 0x35
 800beda:	9000      	str	r0, [sp, #0]
 800bedc:	9101      	str	r1, [sp, #4]
 800bede:	9c01      	ldr	r4, [sp, #4]
 800bee0:	4252      	negs	r2, r2
 800bee2:	49bb      	ldr	r1, [pc, #748]	; (800c1d0 <__ieee754_pow+0x6f4>)
 800bee4:	1523      	asrs	r3, r4, #20
 800bee6:	185b      	adds	r3, r3, r1
 800bee8:	189b      	adds	r3, r3, r2
 800beea:	0324      	lsls	r4, r4, #12
 800beec:	4db9      	ldr	r5, [pc, #740]	; (800c1d4 <__ieee754_pow+0x6f8>)
 800beee:	930d      	str	r3, [sp, #52]	; 0x34
 800bef0:	4bb9      	ldr	r3, [pc, #740]	; (800c1d8 <__ieee754_pow+0x6fc>)
 800bef2:	0b22      	lsrs	r2, r4, #12
 800bef4:	4315      	orrs	r5, r2
 800bef6:	2400      	movs	r4, #0
 800bef8:	429a      	cmp	r2, r3
 800befa:	dd09      	ble.n	800bf10 <__ieee754_pow+0x434>
 800befc:	4bb7      	ldr	r3, [pc, #732]	; (800c1dc <__ieee754_pow+0x700>)
 800befe:	3401      	adds	r4, #1
 800bf00:	429a      	cmp	r2, r3
 800bf02:	dd05      	ble.n	800bf10 <__ieee754_pow+0x434>
 800bf04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf06:	191b      	adds	r3, r3, r4
 800bf08:	2400      	movs	r4, #0
 800bf0a:	930d      	str	r3, [sp, #52]	; 0x34
 800bf0c:	4bb4      	ldr	r3, [pc, #720]	; (800c1e0 <__ieee754_pow+0x704>)
 800bf0e:	18ed      	adds	r5, r5, r3
 800bf10:	9800      	ldr	r0, [sp, #0]
 800bf12:	9901      	ldr	r1, [sp, #4]
 800bf14:	0029      	movs	r1, r5
 800bf16:	00e3      	lsls	r3, r4, #3
 800bf18:	9311      	str	r3, [sp, #68]	; 0x44
 800bf1a:	4bb2      	ldr	r3, [pc, #712]	; (800c1e4 <__ieee754_pow+0x708>)
 800bf1c:	00e2      	lsls	r2, r4, #3
 800bf1e:	189b      	adds	r3, r3, r2
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	900e      	str	r0, [sp, #56]	; 0x38
 800bf26:	910f      	str	r1, [sp, #60]	; 0x3c
 800bf28:	920a      	str	r2, [sp, #40]	; 0x28
 800bf2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf2c:	f7f5 fdb8 	bl	8001aa0 <__aeabi_dsub>
 800bf30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf34:	0006      	movs	r6, r0
 800bf36:	000f      	movs	r7, r1
 800bf38:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf3c:	f7f4 fbd4 	bl	80006e8 <__aeabi_dadd>
 800bf40:	0002      	movs	r2, r0
 800bf42:	000b      	movs	r3, r1
 800bf44:	2000      	movs	r0, #0
 800bf46:	49a3      	ldr	r1, [pc, #652]	; (800c1d4 <__ieee754_pow+0x6f8>)
 800bf48:	f7f4 ff38 	bl	8000dbc <__aeabi_ddiv>
 800bf4c:	0002      	movs	r2, r0
 800bf4e:	000b      	movs	r3, r1
 800bf50:	9012      	str	r0, [sp, #72]	; 0x48
 800bf52:	9113      	str	r1, [sp, #76]	; 0x4c
 800bf54:	0030      	movs	r0, r6
 800bf56:	0039      	movs	r1, r7
 800bf58:	f7f5 fb36 	bl	80015c8 <__aeabi_dmul>
 800bf5c:	9008      	str	r0, [sp, #32]
 800bf5e:	9109      	str	r1, [sp, #36]	; 0x24
 800bf60:	9a08      	ldr	r2, [sp, #32]
 800bf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf64:	2180      	movs	r1, #128	; 0x80
 800bf66:	9204      	str	r2, [sp, #16]
 800bf68:	9305      	str	r3, [sp, #20]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	0589      	lsls	r1, r1, #22
 800bf6e:	106d      	asrs	r5, r5, #1
 800bf70:	430d      	orrs	r5, r1
 800bf72:	2180      	movs	r1, #128	; 0x80
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	9a04      	ldr	r2, [sp, #16]
 800bf78:	9b05      	ldr	r3, [sp, #20]
 800bf7a:	9200      	str	r2, [sp, #0]
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	0309      	lsls	r1, r1, #12
 800bf82:	186d      	adds	r5, r5, r1
 800bf84:	04a1      	lsls	r1, r4, #18
 800bf86:	186b      	adds	r3, r5, r1
 800bf88:	9800      	ldr	r0, [sp, #0]
 800bf8a:	9901      	ldr	r1, [sp, #4]
 800bf8c:	0014      	movs	r4, r2
 800bf8e:	001d      	movs	r5, r3
 800bf90:	f7f5 fb1a 	bl	80015c8 <__aeabi_dmul>
 800bf94:	0002      	movs	r2, r0
 800bf96:	000b      	movs	r3, r1
 800bf98:	0030      	movs	r0, r6
 800bf9a:	0039      	movs	r1, r7
 800bf9c:	f7f5 fd80 	bl	8001aa0 <__aeabi_dsub>
 800bfa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa4:	0006      	movs	r6, r0
 800bfa6:	000f      	movs	r7, r1
 800bfa8:	0020      	movs	r0, r4
 800bfaa:	0029      	movs	r1, r5
 800bfac:	f7f5 fd78 	bl	8001aa0 <__aeabi_dsub>
 800bfb0:	0002      	movs	r2, r0
 800bfb2:	000b      	movs	r3, r1
 800bfb4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bfb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bfb8:	f7f5 fd72 	bl	8001aa0 <__aeabi_dsub>
 800bfbc:	9a00      	ldr	r2, [sp, #0]
 800bfbe:	9b01      	ldr	r3, [sp, #4]
 800bfc0:	f7f5 fb02 	bl	80015c8 <__aeabi_dmul>
 800bfc4:	0002      	movs	r2, r0
 800bfc6:	000b      	movs	r3, r1
 800bfc8:	0030      	movs	r0, r6
 800bfca:	0039      	movs	r1, r7
 800bfcc:	f7f5 fd68 	bl	8001aa0 <__aeabi_dsub>
 800bfd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bfd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfd4:	f7f5 faf8 	bl	80015c8 <__aeabi_dmul>
 800bfd8:	9a08      	ldr	r2, [sp, #32]
 800bfda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfdc:	900a      	str	r0, [sp, #40]	; 0x28
 800bfde:	910b      	str	r1, [sp, #44]	; 0x2c
 800bfe0:	0010      	movs	r0, r2
 800bfe2:	0019      	movs	r1, r3
 800bfe4:	f7f5 faf0 	bl	80015c8 <__aeabi_dmul>
 800bfe8:	0006      	movs	r6, r0
 800bfea:	000f      	movs	r7, r1
 800bfec:	4a7e      	ldr	r2, [pc, #504]	; (800c1e8 <__ieee754_pow+0x70c>)
 800bfee:	4b7f      	ldr	r3, [pc, #508]	; (800c1ec <__ieee754_pow+0x710>)
 800bff0:	f7f5 faea 	bl	80015c8 <__aeabi_dmul>
 800bff4:	4a7e      	ldr	r2, [pc, #504]	; (800c1f0 <__ieee754_pow+0x714>)
 800bff6:	4b7f      	ldr	r3, [pc, #508]	; (800c1f4 <__ieee754_pow+0x718>)
 800bff8:	f7f4 fb76 	bl	80006e8 <__aeabi_dadd>
 800bffc:	0032      	movs	r2, r6
 800bffe:	003b      	movs	r3, r7
 800c000:	f7f5 fae2 	bl	80015c8 <__aeabi_dmul>
 800c004:	4a7c      	ldr	r2, [pc, #496]	; (800c1f8 <__ieee754_pow+0x71c>)
 800c006:	4b7d      	ldr	r3, [pc, #500]	; (800c1fc <__ieee754_pow+0x720>)
 800c008:	f7f4 fb6e 	bl	80006e8 <__aeabi_dadd>
 800c00c:	0032      	movs	r2, r6
 800c00e:	003b      	movs	r3, r7
 800c010:	f7f5 fada 	bl	80015c8 <__aeabi_dmul>
 800c014:	4a7a      	ldr	r2, [pc, #488]	; (800c200 <__ieee754_pow+0x724>)
 800c016:	4b7b      	ldr	r3, [pc, #492]	; (800c204 <__ieee754_pow+0x728>)
 800c018:	f7f4 fb66 	bl	80006e8 <__aeabi_dadd>
 800c01c:	0032      	movs	r2, r6
 800c01e:	003b      	movs	r3, r7
 800c020:	f7f5 fad2 	bl	80015c8 <__aeabi_dmul>
 800c024:	4a78      	ldr	r2, [pc, #480]	; (800c208 <__ieee754_pow+0x72c>)
 800c026:	4b79      	ldr	r3, [pc, #484]	; (800c20c <__ieee754_pow+0x730>)
 800c028:	f7f4 fb5e 	bl	80006e8 <__aeabi_dadd>
 800c02c:	0032      	movs	r2, r6
 800c02e:	003b      	movs	r3, r7
 800c030:	f7f5 faca 	bl	80015c8 <__aeabi_dmul>
 800c034:	4a76      	ldr	r2, [pc, #472]	; (800c210 <__ieee754_pow+0x734>)
 800c036:	4b77      	ldr	r3, [pc, #476]	; (800c214 <__ieee754_pow+0x738>)
 800c038:	f7f4 fb56 	bl	80006e8 <__aeabi_dadd>
 800c03c:	0032      	movs	r2, r6
 800c03e:	0004      	movs	r4, r0
 800c040:	000d      	movs	r5, r1
 800c042:	003b      	movs	r3, r7
 800c044:	0030      	movs	r0, r6
 800c046:	0039      	movs	r1, r7
 800c048:	f7f5 fabe 	bl	80015c8 <__aeabi_dmul>
 800c04c:	0002      	movs	r2, r0
 800c04e:	000b      	movs	r3, r1
 800c050:	0020      	movs	r0, r4
 800c052:	0029      	movs	r1, r5
 800c054:	f7f5 fab8 	bl	80015c8 <__aeabi_dmul>
 800c058:	9a00      	ldr	r2, [sp, #0]
 800c05a:	9b01      	ldr	r3, [sp, #4]
 800c05c:	0004      	movs	r4, r0
 800c05e:	000d      	movs	r5, r1
 800c060:	9808      	ldr	r0, [sp, #32]
 800c062:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c064:	f7f4 fb40 	bl	80006e8 <__aeabi_dadd>
 800c068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c06c:	f7f5 faac 	bl	80015c8 <__aeabi_dmul>
 800c070:	0022      	movs	r2, r4
 800c072:	002b      	movs	r3, r5
 800c074:	f7f4 fb38 	bl	80006e8 <__aeabi_dadd>
 800c078:	9a00      	ldr	r2, [sp, #0]
 800c07a:	9b01      	ldr	r3, [sp, #4]
 800c07c:	900e      	str	r0, [sp, #56]	; 0x38
 800c07e:	910f      	str	r1, [sp, #60]	; 0x3c
 800c080:	0010      	movs	r0, r2
 800c082:	0019      	movs	r1, r3
 800c084:	f7f5 faa0 	bl	80015c8 <__aeabi_dmul>
 800c088:	2200      	movs	r2, #0
 800c08a:	4b63      	ldr	r3, [pc, #396]	; (800c218 <__ieee754_pow+0x73c>)
 800c08c:	0004      	movs	r4, r0
 800c08e:	000d      	movs	r5, r1
 800c090:	f7f4 fb2a 	bl	80006e8 <__aeabi_dadd>
 800c094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c098:	f7f4 fb26 	bl	80006e8 <__aeabi_dadd>
 800c09c:	9e04      	ldr	r6, [sp, #16]
 800c09e:	000f      	movs	r7, r1
 800c0a0:	0032      	movs	r2, r6
 800c0a2:	000b      	movs	r3, r1
 800c0a4:	9800      	ldr	r0, [sp, #0]
 800c0a6:	9901      	ldr	r1, [sp, #4]
 800c0a8:	f7f5 fa8e 	bl	80015c8 <__aeabi_dmul>
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	9000      	str	r0, [sp, #0]
 800c0b0:	9101      	str	r1, [sp, #4]
 800c0b2:	4b59      	ldr	r3, [pc, #356]	; (800c218 <__ieee754_pow+0x73c>)
 800c0b4:	0030      	movs	r0, r6
 800c0b6:	0039      	movs	r1, r7
 800c0b8:	f7f5 fcf2 	bl	8001aa0 <__aeabi_dsub>
 800c0bc:	0022      	movs	r2, r4
 800c0be:	002b      	movs	r3, r5
 800c0c0:	f7f5 fcee 	bl	8001aa0 <__aeabi_dsub>
 800c0c4:	0002      	movs	r2, r0
 800c0c6:	000b      	movs	r3, r1
 800c0c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c0ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c0cc:	f7f5 fce8 	bl	8001aa0 <__aeabi_dsub>
 800c0d0:	9a08      	ldr	r2, [sp, #32]
 800c0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d4:	f7f5 fa78 	bl	80015c8 <__aeabi_dmul>
 800c0d8:	0032      	movs	r2, r6
 800c0da:	0004      	movs	r4, r0
 800c0dc:	000d      	movs	r5, r1
 800c0de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0e2:	003b      	movs	r3, r7
 800c0e4:	f7f5 fa70 	bl	80015c8 <__aeabi_dmul>
 800c0e8:	0002      	movs	r2, r0
 800c0ea:	000b      	movs	r3, r1
 800c0ec:	0020      	movs	r0, r4
 800c0ee:	0029      	movs	r1, r5
 800c0f0:	f7f4 fafa 	bl	80006e8 <__aeabi_dadd>
 800c0f4:	0004      	movs	r4, r0
 800c0f6:	000d      	movs	r5, r1
 800c0f8:	0002      	movs	r2, r0
 800c0fa:	000b      	movs	r3, r1
 800c0fc:	9800      	ldr	r0, [sp, #0]
 800c0fe:	9901      	ldr	r1, [sp, #4]
 800c100:	f7f4 faf2 	bl	80006e8 <__aeabi_dadd>
 800c104:	22e0      	movs	r2, #224	; 0xe0
 800c106:	9e04      	ldr	r6, [sp, #16]
 800c108:	4b44      	ldr	r3, [pc, #272]	; (800c21c <__ieee754_pow+0x740>)
 800c10a:	0030      	movs	r0, r6
 800c10c:	0612      	lsls	r2, r2, #24
 800c10e:	000f      	movs	r7, r1
 800c110:	f7f5 fa5a 	bl	80015c8 <__aeabi_dmul>
 800c114:	9008      	str	r0, [sp, #32]
 800c116:	9109      	str	r1, [sp, #36]	; 0x24
 800c118:	9a00      	ldr	r2, [sp, #0]
 800c11a:	9b01      	ldr	r3, [sp, #4]
 800c11c:	0030      	movs	r0, r6
 800c11e:	0039      	movs	r1, r7
 800c120:	f7f5 fcbe 	bl	8001aa0 <__aeabi_dsub>
 800c124:	0002      	movs	r2, r0
 800c126:	000b      	movs	r3, r1
 800c128:	0020      	movs	r0, r4
 800c12a:	0029      	movs	r1, r5
 800c12c:	f7f5 fcb8 	bl	8001aa0 <__aeabi_dsub>
 800c130:	4a3b      	ldr	r2, [pc, #236]	; (800c220 <__ieee754_pow+0x744>)
 800c132:	4b3a      	ldr	r3, [pc, #232]	; (800c21c <__ieee754_pow+0x740>)
 800c134:	f7f5 fa48 	bl	80015c8 <__aeabi_dmul>
 800c138:	4a3a      	ldr	r2, [pc, #232]	; (800c224 <__ieee754_pow+0x748>)
 800c13a:	0004      	movs	r4, r0
 800c13c:	000d      	movs	r5, r1
 800c13e:	0030      	movs	r0, r6
 800c140:	0039      	movs	r1, r7
 800c142:	4b39      	ldr	r3, [pc, #228]	; (800c228 <__ieee754_pow+0x74c>)
 800c144:	f7f5 fa40 	bl	80015c8 <__aeabi_dmul>
 800c148:	0002      	movs	r2, r0
 800c14a:	000b      	movs	r3, r1
 800c14c:	0020      	movs	r0, r4
 800c14e:	0029      	movs	r1, r5
 800c150:	f7f4 faca 	bl	80006e8 <__aeabi_dadd>
 800c154:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c156:	4b35      	ldr	r3, [pc, #212]	; (800c22c <__ieee754_pow+0x750>)
 800c158:	189b      	adds	r3, r3, r2
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	f7f4 fac3 	bl	80006e8 <__aeabi_dadd>
 800c162:	900a      	str	r0, [sp, #40]	; 0x28
 800c164:	910b      	str	r1, [sp, #44]	; 0x2c
 800c166:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c168:	f7f6 f880 	bl	800226c <__aeabi_i2d>
 800c16c:	0004      	movs	r4, r0
 800c16e:	000d      	movs	r5, r1
 800c170:	9808      	ldr	r0, [sp, #32]
 800c172:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c174:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c176:	4b2e      	ldr	r3, [pc, #184]	; (800c230 <__ieee754_pow+0x754>)
 800c178:	189b      	adds	r3, r3, r2
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	9200      	str	r2, [sp, #0]
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c186:	f7f4 faaf 	bl	80006e8 <__aeabi_dadd>
 800c18a:	9a00      	ldr	r2, [sp, #0]
 800c18c:	9b01      	ldr	r3, [sp, #4]
 800c18e:	f7f4 faab 	bl	80006e8 <__aeabi_dadd>
 800c192:	0022      	movs	r2, r4
 800c194:	002b      	movs	r3, r5
 800c196:	f7f4 faa7 	bl	80006e8 <__aeabi_dadd>
 800c19a:	9804      	ldr	r0, [sp, #16]
 800c19c:	0022      	movs	r2, r4
 800c19e:	002b      	movs	r3, r5
 800c1a0:	0006      	movs	r6, r0
 800c1a2:	000f      	movs	r7, r1
 800c1a4:	f7f5 fc7c 	bl	8001aa0 <__aeabi_dsub>
 800c1a8:	9a00      	ldr	r2, [sp, #0]
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	f7f5 fc78 	bl	8001aa0 <__aeabi_dsub>
 800c1b0:	9a08      	ldr	r2, [sp, #32]
 800c1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b4:	f7f5 fc74 	bl	8001aa0 <__aeabi_dsub>
 800c1b8:	0002      	movs	r2, r0
 800c1ba:	000b      	movs	r3, r1
 800c1bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c1be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1c0:	e614      	b.n	800bdec <__ieee754_pow+0x310>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4c03      	ldr	r4, [pc, #12]	; (800c1d4 <__ieee754_pow+0x6f8>)
 800c1c6:	e61d      	b.n	800be04 <__ieee754_pow+0x328>
 800c1c8:	7ff00000 	.word	0x7ff00000
 800c1cc:	43400000 	.word	0x43400000
 800c1d0:	fffffc01 	.word	0xfffffc01
 800c1d4:	3ff00000 	.word	0x3ff00000
 800c1d8:	0003988e 	.word	0x0003988e
 800c1dc:	000bb679 	.word	0x000bb679
 800c1e0:	fff00000 	.word	0xfff00000
 800c1e4:	08010e70 	.word	0x08010e70
 800c1e8:	4a454eef 	.word	0x4a454eef
 800c1ec:	3fca7e28 	.word	0x3fca7e28
 800c1f0:	93c9db65 	.word	0x93c9db65
 800c1f4:	3fcd864a 	.word	0x3fcd864a
 800c1f8:	a91d4101 	.word	0xa91d4101
 800c1fc:	3fd17460 	.word	0x3fd17460
 800c200:	518f264d 	.word	0x518f264d
 800c204:	3fd55555 	.word	0x3fd55555
 800c208:	db6fabff 	.word	0xdb6fabff
 800c20c:	3fdb6db6 	.word	0x3fdb6db6
 800c210:	33333303 	.word	0x33333303
 800c214:	3fe33333 	.word	0x3fe33333
 800c218:	40080000 	.word	0x40080000
 800c21c:	3feec709 	.word	0x3feec709
 800c220:	dc3a03fd 	.word	0xdc3a03fd
 800c224:	145b01f5 	.word	0x145b01f5
 800c228:	be3e2fe0 	.word	0xbe3e2fe0
 800c22c:	08010e90 	.word	0x08010e90
 800c230:	08010e80 	.word	0x08010e80
 800c234:	4a8f      	ldr	r2, [pc, #572]	; (800c474 <__ieee754_pow+0x998>)
 800c236:	4b90      	ldr	r3, [pc, #576]	; (800c478 <__ieee754_pow+0x99c>)
 800c238:	9804      	ldr	r0, [sp, #16]
 800c23a:	9905      	ldr	r1, [sp, #20]
 800c23c:	f7f4 fa54 	bl	80006e8 <__aeabi_dadd>
 800c240:	0032      	movs	r2, r6
 800c242:	9002      	str	r0, [sp, #8]
 800c244:	9103      	str	r1, [sp, #12]
 800c246:	003b      	movs	r3, r7
 800c248:	0028      	movs	r0, r5
 800c24a:	0021      	movs	r1, r4
 800c24c:	f7f5 fc28 	bl	8001aa0 <__aeabi_dsub>
 800c250:	0002      	movs	r2, r0
 800c252:	000b      	movs	r3, r1
 800c254:	9802      	ldr	r0, [sp, #8]
 800c256:	9903      	ldr	r1, [sp, #12]
 800c258:	f7f4 f900 	bl	800045c <__aeabi_dcmpgt>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d000      	beq.n	800c262 <__ieee754_pow+0x786>
 800c260:	e60b      	b.n	800be7a <__ieee754_pow+0x39e>
 800c262:	2100      	movs	r1, #0
 800c264:	4a85      	ldr	r2, [pc, #532]	; (800c47c <__ieee754_pow+0x9a0>)
 800c266:	0063      	lsls	r3, r4, #1
 800c268:	085b      	lsrs	r3, r3, #1
 800c26a:	9102      	str	r1, [sp, #8]
 800c26c:	4293      	cmp	r3, r2
 800c26e:	dd25      	ble.n	800c2bc <__ieee754_pow+0x7e0>
 800c270:	4a83      	ldr	r2, [pc, #524]	; (800c480 <__ieee754_pow+0x9a4>)
 800c272:	151b      	asrs	r3, r3, #20
 800c274:	189b      	adds	r3, r3, r2
 800c276:	2280      	movs	r2, #128	; 0x80
 800c278:	0352      	lsls	r2, r2, #13
 800c27a:	4694      	mov	ip, r2
 800c27c:	411a      	asrs	r2, r3
 800c27e:	1914      	adds	r4, r2, r4
 800c280:	4b80      	ldr	r3, [pc, #512]	; (800c484 <__ieee754_pow+0x9a8>)
 800c282:	0060      	lsls	r0, r4, #1
 800c284:	4d80      	ldr	r5, [pc, #512]	; (800c488 <__ieee754_pow+0x9ac>)
 800c286:	0d40      	lsrs	r0, r0, #21
 800c288:	18c0      	adds	r0, r0, r3
 800c28a:	4105      	asrs	r5, r0
 800c28c:	0021      	movs	r1, r4
 800c28e:	43a9      	bics	r1, r5
 800c290:	000b      	movs	r3, r1
 800c292:	4661      	mov	r1, ip
 800c294:	0324      	lsls	r4, r4, #12
 800c296:	0b24      	lsrs	r4, r4, #12
 800c298:	4321      	orrs	r1, r4
 800c29a:	2414      	movs	r4, #20
 800c29c:	1a20      	subs	r0, r4, r0
 800c29e:	4101      	asrs	r1, r0
 800c2a0:	9102      	str	r1, [sp, #8]
 800c2a2:	9908      	ldr	r1, [sp, #32]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2900      	cmp	r1, #0
 800c2a8:	da02      	bge.n	800c2b0 <__ieee754_pow+0x7d4>
 800c2aa:	9902      	ldr	r1, [sp, #8]
 800c2ac:	4249      	negs	r1, r1
 800c2ae:	9102      	str	r1, [sp, #8]
 800c2b0:	0030      	movs	r0, r6
 800c2b2:	0039      	movs	r1, r7
 800c2b4:	f7f5 fbf4 	bl	8001aa0 <__aeabi_dsub>
 800c2b8:	9006      	str	r0, [sp, #24]
 800c2ba:	9107      	str	r1, [sp, #28]
 800c2bc:	9a04      	ldr	r2, [sp, #16]
 800c2be:	9b05      	ldr	r3, [sp, #20]
 800c2c0:	9806      	ldr	r0, [sp, #24]
 800c2c2:	9907      	ldr	r1, [sp, #28]
 800c2c4:	2600      	movs	r6, #0
 800c2c6:	f7f4 fa0f 	bl	80006e8 <__aeabi_dadd>
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	0030      	movs	r0, r6
 800c2ce:	4b6f      	ldr	r3, [pc, #444]	; (800c48c <__ieee754_pow+0x9b0>)
 800c2d0:	000f      	movs	r7, r1
 800c2d2:	f7f5 f979 	bl	80015c8 <__aeabi_dmul>
 800c2d6:	9a06      	ldr	r2, [sp, #24]
 800c2d8:	9b07      	ldr	r3, [sp, #28]
 800c2da:	9008      	str	r0, [sp, #32]
 800c2dc:	9109      	str	r1, [sp, #36]	; 0x24
 800c2de:	0030      	movs	r0, r6
 800c2e0:	0039      	movs	r1, r7
 800c2e2:	f7f5 fbdd 	bl	8001aa0 <__aeabi_dsub>
 800c2e6:	0002      	movs	r2, r0
 800c2e8:	000b      	movs	r3, r1
 800c2ea:	9804      	ldr	r0, [sp, #16]
 800c2ec:	9905      	ldr	r1, [sp, #20]
 800c2ee:	f7f5 fbd7 	bl	8001aa0 <__aeabi_dsub>
 800c2f2:	4a67      	ldr	r2, [pc, #412]	; (800c490 <__ieee754_pow+0x9b4>)
 800c2f4:	4b67      	ldr	r3, [pc, #412]	; (800c494 <__ieee754_pow+0x9b8>)
 800c2f6:	f7f5 f967 	bl	80015c8 <__aeabi_dmul>
 800c2fa:	4a67      	ldr	r2, [pc, #412]	; (800c498 <__ieee754_pow+0x9bc>)
 800c2fc:	0004      	movs	r4, r0
 800c2fe:	000d      	movs	r5, r1
 800c300:	0030      	movs	r0, r6
 800c302:	0039      	movs	r1, r7
 800c304:	4b65      	ldr	r3, [pc, #404]	; (800c49c <__ieee754_pow+0x9c0>)
 800c306:	f7f5 f95f 	bl	80015c8 <__aeabi_dmul>
 800c30a:	0002      	movs	r2, r0
 800c30c:	000b      	movs	r3, r1
 800c30e:	0020      	movs	r0, r4
 800c310:	0029      	movs	r1, r5
 800c312:	f7f4 f9e9 	bl	80006e8 <__aeabi_dadd>
 800c316:	0004      	movs	r4, r0
 800c318:	000d      	movs	r5, r1
 800c31a:	0002      	movs	r2, r0
 800c31c:	000b      	movs	r3, r1
 800c31e:	9808      	ldr	r0, [sp, #32]
 800c320:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c322:	f7f4 f9e1 	bl	80006e8 <__aeabi_dadd>
 800c326:	9a08      	ldr	r2, [sp, #32]
 800c328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c32a:	0006      	movs	r6, r0
 800c32c:	000f      	movs	r7, r1
 800c32e:	f7f5 fbb7 	bl	8001aa0 <__aeabi_dsub>
 800c332:	0002      	movs	r2, r0
 800c334:	000b      	movs	r3, r1
 800c336:	0020      	movs	r0, r4
 800c338:	0029      	movs	r1, r5
 800c33a:	f7f5 fbb1 	bl	8001aa0 <__aeabi_dsub>
 800c33e:	0032      	movs	r2, r6
 800c340:	9004      	str	r0, [sp, #16]
 800c342:	9105      	str	r1, [sp, #20]
 800c344:	003b      	movs	r3, r7
 800c346:	0030      	movs	r0, r6
 800c348:	0039      	movs	r1, r7
 800c34a:	f7f5 f93d 	bl	80015c8 <__aeabi_dmul>
 800c34e:	0004      	movs	r4, r0
 800c350:	000d      	movs	r5, r1
 800c352:	4a53      	ldr	r2, [pc, #332]	; (800c4a0 <__ieee754_pow+0x9c4>)
 800c354:	4b53      	ldr	r3, [pc, #332]	; (800c4a4 <__ieee754_pow+0x9c8>)
 800c356:	f7f5 f937 	bl	80015c8 <__aeabi_dmul>
 800c35a:	4a53      	ldr	r2, [pc, #332]	; (800c4a8 <__ieee754_pow+0x9cc>)
 800c35c:	4b53      	ldr	r3, [pc, #332]	; (800c4ac <__ieee754_pow+0x9d0>)
 800c35e:	f7f5 fb9f 	bl	8001aa0 <__aeabi_dsub>
 800c362:	0022      	movs	r2, r4
 800c364:	002b      	movs	r3, r5
 800c366:	f7f5 f92f 	bl	80015c8 <__aeabi_dmul>
 800c36a:	4a51      	ldr	r2, [pc, #324]	; (800c4b0 <__ieee754_pow+0x9d4>)
 800c36c:	4b51      	ldr	r3, [pc, #324]	; (800c4b4 <__ieee754_pow+0x9d8>)
 800c36e:	f7f4 f9bb 	bl	80006e8 <__aeabi_dadd>
 800c372:	0022      	movs	r2, r4
 800c374:	002b      	movs	r3, r5
 800c376:	f7f5 f927 	bl	80015c8 <__aeabi_dmul>
 800c37a:	4a4f      	ldr	r2, [pc, #316]	; (800c4b8 <__ieee754_pow+0x9dc>)
 800c37c:	4b4f      	ldr	r3, [pc, #316]	; (800c4bc <__ieee754_pow+0x9e0>)
 800c37e:	f7f5 fb8f 	bl	8001aa0 <__aeabi_dsub>
 800c382:	0022      	movs	r2, r4
 800c384:	002b      	movs	r3, r5
 800c386:	f7f5 f91f 	bl	80015c8 <__aeabi_dmul>
 800c38a:	4a4d      	ldr	r2, [pc, #308]	; (800c4c0 <__ieee754_pow+0x9e4>)
 800c38c:	4b4d      	ldr	r3, [pc, #308]	; (800c4c4 <__ieee754_pow+0x9e8>)
 800c38e:	f7f4 f9ab 	bl	80006e8 <__aeabi_dadd>
 800c392:	0022      	movs	r2, r4
 800c394:	002b      	movs	r3, r5
 800c396:	f7f5 f917 	bl	80015c8 <__aeabi_dmul>
 800c39a:	0002      	movs	r2, r0
 800c39c:	000b      	movs	r3, r1
 800c39e:	0030      	movs	r0, r6
 800c3a0:	0039      	movs	r1, r7
 800c3a2:	f7f5 fb7d 	bl	8001aa0 <__aeabi_dsub>
 800c3a6:	0004      	movs	r4, r0
 800c3a8:	000d      	movs	r5, r1
 800c3aa:	0002      	movs	r2, r0
 800c3ac:	000b      	movs	r3, r1
 800c3ae:	0030      	movs	r0, r6
 800c3b0:	0039      	movs	r1, r7
 800c3b2:	f7f5 f909 	bl	80015c8 <__aeabi_dmul>
 800c3b6:	2380      	movs	r3, #128	; 0x80
 800c3b8:	9006      	str	r0, [sp, #24]
 800c3ba:	9107      	str	r1, [sp, #28]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	0020      	movs	r0, r4
 800c3c0:	0029      	movs	r1, r5
 800c3c2:	05db      	lsls	r3, r3, #23
 800c3c4:	f7f5 fb6c 	bl	8001aa0 <__aeabi_dsub>
 800c3c8:	0002      	movs	r2, r0
 800c3ca:	000b      	movs	r3, r1
 800c3cc:	9806      	ldr	r0, [sp, #24]
 800c3ce:	9907      	ldr	r1, [sp, #28]
 800c3d0:	f7f4 fcf4 	bl	8000dbc <__aeabi_ddiv>
 800c3d4:	9a04      	ldr	r2, [sp, #16]
 800c3d6:	9b05      	ldr	r3, [sp, #20]
 800c3d8:	0004      	movs	r4, r0
 800c3da:	000d      	movs	r5, r1
 800c3dc:	0030      	movs	r0, r6
 800c3de:	0039      	movs	r1, r7
 800c3e0:	f7f5 f8f2 	bl	80015c8 <__aeabi_dmul>
 800c3e4:	9a04      	ldr	r2, [sp, #16]
 800c3e6:	9b05      	ldr	r3, [sp, #20]
 800c3e8:	f7f4 f97e 	bl	80006e8 <__aeabi_dadd>
 800c3ec:	0002      	movs	r2, r0
 800c3ee:	000b      	movs	r3, r1
 800c3f0:	0020      	movs	r0, r4
 800c3f2:	0029      	movs	r1, r5
 800c3f4:	f7f5 fb54 	bl	8001aa0 <__aeabi_dsub>
 800c3f8:	0032      	movs	r2, r6
 800c3fa:	003b      	movs	r3, r7
 800c3fc:	f7f5 fb50 	bl	8001aa0 <__aeabi_dsub>
 800c400:	0002      	movs	r2, r0
 800c402:	000b      	movs	r3, r1
 800c404:	2000      	movs	r0, #0
 800c406:	4930      	ldr	r1, [pc, #192]	; (800c4c8 <__ieee754_pow+0x9ec>)
 800c408:	f7f5 fb4a 	bl	8001aa0 <__aeabi_dsub>
 800c40c:	9b02      	ldr	r3, [sp, #8]
 800c40e:	051b      	lsls	r3, r3, #20
 800c410:	185b      	adds	r3, r3, r1
 800c412:	151a      	asrs	r2, r3, #20
 800c414:	2a00      	cmp	r2, #0
 800c416:	dc26      	bgt.n	800c466 <__ieee754_pow+0x98a>
 800c418:	9a02      	ldr	r2, [sp, #8]
 800c41a:	f000 f9ad 	bl	800c778 <scalbn>
 800c41e:	9a00      	ldr	r2, [sp, #0]
 800c420:	9b01      	ldr	r3, [sp, #4]
 800c422:	f7ff fc2d 	bl	800bc80 <__ieee754_pow+0x1a4>
 800c426:	4a29      	ldr	r2, [pc, #164]	; (800c4cc <__ieee754_pow+0x9f0>)
 800c428:	004b      	lsls	r3, r1, #1
 800c42a:	085b      	lsrs	r3, r3, #1
 800c42c:	4293      	cmp	r3, r2
 800c42e:	dc00      	bgt.n	800c432 <__ieee754_pow+0x956>
 800c430:	e717      	b.n	800c262 <__ieee754_pow+0x786>
 800c432:	4b27      	ldr	r3, [pc, #156]	; (800c4d0 <__ieee754_pow+0x9f4>)
 800c434:	18cb      	adds	r3, r1, r3
 800c436:	4303      	orrs	r3, r0
 800c438:	d009      	beq.n	800c44e <__ieee754_pow+0x972>
 800c43a:	9800      	ldr	r0, [sp, #0]
 800c43c:	9901      	ldr	r1, [sp, #4]
 800c43e:	4a25      	ldr	r2, [pc, #148]	; (800c4d4 <__ieee754_pow+0x9f8>)
 800c440:	4b25      	ldr	r3, [pc, #148]	; (800c4d8 <__ieee754_pow+0x9fc>)
 800c442:	f7f5 f8c1 	bl	80015c8 <__aeabi_dmul>
 800c446:	4a23      	ldr	r2, [pc, #140]	; (800c4d4 <__ieee754_pow+0x9f8>)
 800c448:	4b23      	ldr	r3, [pc, #140]	; (800c4d8 <__ieee754_pow+0x9fc>)
 800c44a:	f7ff fc19 	bl	800bc80 <__ieee754_pow+0x1a4>
 800c44e:	0032      	movs	r2, r6
 800c450:	003b      	movs	r3, r7
 800c452:	f7f5 fb25 	bl	8001aa0 <__aeabi_dsub>
 800c456:	9a04      	ldr	r2, [sp, #16]
 800c458:	9b05      	ldr	r3, [sp, #20]
 800c45a:	f7f4 f809 	bl	8000470 <__aeabi_dcmpge>
 800c45e:	2800      	cmp	r0, #0
 800c460:	d100      	bne.n	800c464 <__ieee754_pow+0x988>
 800c462:	e6fe      	b.n	800c262 <__ieee754_pow+0x786>
 800c464:	e7e9      	b.n	800c43a <__ieee754_pow+0x95e>
 800c466:	0019      	movs	r1, r3
 800c468:	e7d9      	b.n	800c41e <__ieee754_pow+0x942>
 800c46a:	2300      	movs	r3, #0
 800c46c:	4c16      	ldr	r4, [pc, #88]	; (800c4c8 <__ieee754_pow+0x9ec>)
 800c46e:	f7ff fbec 	bl	800bc4a <__ieee754_pow+0x16e>
 800c472:	46c0      	nop			; (mov r8, r8)
 800c474:	652b82fe 	.word	0x652b82fe
 800c478:	3c971547 	.word	0x3c971547
 800c47c:	3fe00000 	.word	0x3fe00000
 800c480:	fffffc02 	.word	0xfffffc02
 800c484:	fffffc01 	.word	0xfffffc01
 800c488:	000fffff 	.word	0x000fffff
 800c48c:	3fe62e43 	.word	0x3fe62e43
 800c490:	fefa39ef 	.word	0xfefa39ef
 800c494:	3fe62e42 	.word	0x3fe62e42
 800c498:	0ca86c39 	.word	0x0ca86c39
 800c49c:	be205c61 	.word	0xbe205c61
 800c4a0:	72bea4d0 	.word	0x72bea4d0
 800c4a4:	3e663769 	.word	0x3e663769
 800c4a8:	c5d26bf1 	.word	0xc5d26bf1
 800c4ac:	3ebbbd41 	.word	0x3ebbbd41
 800c4b0:	af25de2c 	.word	0xaf25de2c
 800c4b4:	3f11566a 	.word	0x3f11566a
 800c4b8:	16bebd93 	.word	0x16bebd93
 800c4bc:	3f66c16c 	.word	0x3f66c16c
 800c4c0:	5555553e 	.word	0x5555553e
 800c4c4:	3fc55555 	.word	0x3fc55555
 800c4c8:	3ff00000 	.word	0x3ff00000
 800c4cc:	4090cbff 	.word	0x4090cbff
 800c4d0:	3f6f3400 	.word	0x3f6f3400
 800c4d4:	c2f8f359 	.word	0xc2f8f359
 800c4d8:	01a56e1f 	.word	0x01a56e1f

0800c4dc <__ieee754_sqrt>:
 800c4dc:	4b56      	ldr	r3, [pc, #344]	; (800c638 <__ieee754_sqrt+0x15c>)
 800c4de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e0:	0002      	movs	r2, r0
 800c4e2:	0005      	movs	r5, r0
 800c4e4:	0018      	movs	r0, r3
 800c4e6:	000c      	movs	r4, r1
 800c4e8:	b085      	sub	sp, #20
 800c4ea:	4008      	ands	r0, r1
 800c4ec:	4298      	cmp	r0, r3
 800c4ee:	d10f      	bne.n	800c510 <__ieee754_sqrt+0x34>
 800c4f0:	000b      	movs	r3, r1
 800c4f2:	0028      	movs	r0, r5
 800c4f4:	f7f5 f868 	bl	80015c8 <__aeabi_dmul>
 800c4f8:	0002      	movs	r2, r0
 800c4fa:	000b      	movs	r3, r1
 800c4fc:	0028      	movs	r0, r5
 800c4fe:	0021      	movs	r1, r4
 800c500:	f7f4 f8f2 	bl	80006e8 <__aeabi_dadd>
 800c504:	0005      	movs	r5, r0
 800c506:	000c      	movs	r4, r1
 800c508:	0028      	movs	r0, r5
 800c50a:	0021      	movs	r1, r4
 800c50c:	b005      	add	sp, #20
 800c50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c510:	2900      	cmp	r1, #0
 800c512:	dc10      	bgt.n	800c536 <__ieee754_sqrt+0x5a>
 800c514:	004b      	lsls	r3, r1, #1
 800c516:	085b      	lsrs	r3, r3, #1
 800c518:	432b      	orrs	r3, r5
 800c51a:	d0f5      	beq.n	800c508 <__ieee754_sqrt+0x2c>
 800c51c:	2000      	movs	r0, #0
 800c51e:	4281      	cmp	r1, r0
 800c520:	d100      	bne.n	800c524 <__ieee754_sqrt+0x48>
 800c522:	e080      	b.n	800c626 <__ieee754_sqrt+0x14a>
 800c524:	000b      	movs	r3, r1
 800c526:	0028      	movs	r0, r5
 800c528:	f7f5 faba 	bl	8001aa0 <__aeabi_dsub>
 800c52c:	0002      	movs	r2, r0
 800c52e:	000b      	movs	r3, r1
 800c530:	f7f4 fc44 	bl	8000dbc <__aeabi_ddiv>
 800c534:	e7e6      	b.n	800c504 <__ieee754_sqrt+0x28>
 800c536:	1508      	asrs	r0, r1, #20
 800c538:	d075      	beq.n	800c626 <__ieee754_sqrt+0x14a>
 800c53a:	4b40      	ldr	r3, [pc, #256]	; (800c63c <__ieee754_sqrt+0x160>)
 800c53c:	0309      	lsls	r1, r1, #12
 800c53e:	18c4      	adds	r4, r0, r3
 800c540:	2380      	movs	r3, #128	; 0x80
 800c542:	0b09      	lsrs	r1, r1, #12
 800c544:	035b      	lsls	r3, r3, #13
 800c546:	4319      	orrs	r1, r3
 800c548:	07c3      	lsls	r3, r0, #31
 800c54a:	d403      	bmi.n	800c554 <__ieee754_sqrt+0x78>
 800c54c:	0fd3      	lsrs	r3, r2, #31
 800c54e:	0049      	lsls	r1, r1, #1
 800c550:	18c9      	adds	r1, r1, r3
 800c552:	0052      	lsls	r2, r2, #1
 800c554:	1063      	asrs	r3, r4, #1
 800c556:	2400      	movs	r4, #0
 800c558:	0049      	lsls	r1, r1, #1
 800c55a:	9303      	str	r3, [sp, #12]
 800c55c:	0fd3      	lsrs	r3, r2, #31
 800c55e:	18cb      	adds	r3, r1, r3
 800c560:	2180      	movs	r1, #128	; 0x80
 800c562:	2516      	movs	r5, #22
 800c564:	0020      	movs	r0, r4
 800c566:	0052      	lsls	r2, r2, #1
 800c568:	0389      	lsls	r1, r1, #14
 800c56a:	1846      	adds	r6, r0, r1
 800c56c:	429e      	cmp	r6, r3
 800c56e:	dc02      	bgt.n	800c576 <__ieee754_sqrt+0x9a>
 800c570:	1870      	adds	r0, r6, r1
 800c572:	1b9b      	subs	r3, r3, r6
 800c574:	1864      	adds	r4, r4, r1
 800c576:	0fd6      	lsrs	r6, r2, #31
 800c578:	005b      	lsls	r3, r3, #1
 800c57a:	3d01      	subs	r5, #1
 800c57c:	18f3      	adds	r3, r6, r3
 800c57e:	0052      	lsls	r2, r2, #1
 800c580:	0849      	lsrs	r1, r1, #1
 800c582:	2d00      	cmp	r5, #0
 800c584:	d1f1      	bne.n	800c56a <__ieee754_sqrt+0x8e>
 800c586:	2620      	movs	r6, #32
 800c588:	2780      	movs	r7, #128	; 0x80
 800c58a:	0029      	movs	r1, r5
 800c58c:	9601      	str	r6, [sp, #4]
 800c58e:	063f      	lsls	r7, r7, #24
 800c590:	197e      	adds	r6, r7, r5
 800c592:	46b4      	mov	ip, r6
 800c594:	4283      	cmp	r3, r0
 800c596:	dc02      	bgt.n	800c59e <__ieee754_sqrt+0xc2>
 800c598:	d114      	bne.n	800c5c4 <__ieee754_sqrt+0xe8>
 800c59a:	4296      	cmp	r6, r2
 800c59c:	d812      	bhi.n	800c5c4 <__ieee754_sqrt+0xe8>
 800c59e:	4665      	mov	r5, ip
 800c5a0:	4666      	mov	r6, ip
 800c5a2:	19ed      	adds	r5, r5, r7
 800c5a4:	9002      	str	r0, [sp, #8]
 800c5a6:	2e00      	cmp	r6, #0
 800c5a8:	da03      	bge.n	800c5b2 <__ieee754_sqrt+0xd6>
 800c5aa:	43ee      	mvns	r6, r5
 800c5ac:	0ff6      	lsrs	r6, r6, #31
 800c5ae:	1986      	adds	r6, r0, r6
 800c5b0:	9602      	str	r6, [sp, #8]
 800c5b2:	1a1b      	subs	r3, r3, r0
 800c5b4:	4562      	cmp	r2, ip
 800c5b6:	4180      	sbcs	r0, r0
 800c5b8:	4240      	negs	r0, r0
 800c5ba:	1a1b      	subs	r3, r3, r0
 800c5bc:	4660      	mov	r0, ip
 800c5be:	1a12      	subs	r2, r2, r0
 800c5c0:	9802      	ldr	r0, [sp, #8]
 800c5c2:	19c9      	adds	r1, r1, r7
 800c5c4:	0fd6      	lsrs	r6, r2, #31
 800c5c6:	005b      	lsls	r3, r3, #1
 800c5c8:	18f3      	adds	r3, r6, r3
 800c5ca:	9e01      	ldr	r6, [sp, #4]
 800c5cc:	0052      	lsls	r2, r2, #1
 800c5ce:	3e01      	subs	r6, #1
 800c5d0:	087f      	lsrs	r7, r7, #1
 800c5d2:	9601      	str	r6, [sp, #4]
 800c5d4:	2e00      	cmp	r6, #0
 800c5d6:	d1db      	bne.n	800c590 <__ieee754_sqrt+0xb4>
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	d003      	beq.n	800c5e4 <__ieee754_sqrt+0x108>
 800c5dc:	1c4b      	adds	r3, r1, #1
 800c5de:	d127      	bne.n	800c630 <__ieee754_sqrt+0x154>
 800c5e0:	0031      	movs	r1, r6
 800c5e2:	3401      	adds	r4, #1
 800c5e4:	4b16      	ldr	r3, [pc, #88]	; (800c640 <__ieee754_sqrt+0x164>)
 800c5e6:	1060      	asrs	r0, r4, #1
 800c5e8:	18c0      	adds	r0, r0, r3
 800c5ea:	0849      	lsrs	r1, r1, #1
 800c5ec:	07e3      	lsls	r3, r4, #31
 800c5ee:	d502      	bpl.n	800c5f6 <__ieee754_sqrt+0x11a>
 800c5f0:	2380      	movs	r3, #128	; 0x80
 800c5f2:	061b      	lsls	r3, r3, #24
 800c5f4:	4319      	orrs	r1, r3
 800c5f6:	9b03      	ldr	r3, [sp, #12]
 800c5f8:	000d      	movs	r5, r1
 800c5fa:	051c      	lsls	r4, r3, #20
 800c5fc:	1823      	adds	r3, r4, r0
 800c5fe:	001c      	movs	r4, r3
 800c600:	e782      	b.n	800c508 <__ieee754_sqrt+0x2c>
 800c602:	0ad1      	lsrs	r1, r2, #11
 800c604:	3b15      	subs	r3, #21
 800c606:	0552      	lsls	r2, r2, #21
 800c608:	2900      	cmp	r1, #0
 800c60a:	d0fa      	beq.n	800c602 <__ieee754_sqrt+0x126>
 800c60c:	2480      	movs	r4, #128	; 0x80
 800c60e:	0364      	lsls	r4, r4, #13
 800c610:	4221      	tst	r1, r4
 800c612:	d00a      	beq.n	800c62a <__ieee754_sqrt+0x14e>
 800c614:	2420      	movs	r4, #32
 800c616:	0016      	movs	r6, r2
 800c618:	1a24      	subs	r4, r4, r0
 800c61a:	40e6      	lsrs	r6, r4
 800c61c:	1e45      	subs	r5, r0, #1
 800c61e:	4082      	lsls	r2, r0
 800c620:	4331      	orrs	r1, r6
 800c622:	1b58      	subs	r0, r3, r5
 800c624:	e789      	b.n	800c53a <__ieee754_sqrt+0x5e>
 800c626:	2300      	movs	r3, #0
 800c628:	e7ee      	b.n	800c608 <__ieee754_sqrt+0x12c>
 800c62a:	0049      	lsls	r1, r1, #1
 800c62c:	3001      	adds	r0, #1
 800c62e:	e7ef      	b.n	800c610 <__ieee754_sqrt+0x134>
 800c630:	2301      	movs	r3, #1
 800c632:	3101      	adds	r1, #1
 800c634:	4399      	bics	r1, r3
 800c636:	e7d5      	b.n	800c5e4 <__ieee754_sqrt+0x108>
 800c638:	7ff00000 	.word	0x7ff00000
 800c63c:	fffffc01 	.word	0xfffffc01
 800c640:	3fe00000 	.word	0x3fe00000

0800c644 <fabs>:
 800c644:	004b      	lsls	r3, r1, #1
 800c646:	0859      	lsrs	r1, r3, #1
 800c648:	4770      	bx	lr
	...

0800c64c <finite>:
 800c64c:	4b02      	ldr	r3, [pc, #8]	; (800c658 <finite+0xc>)
 800c64e:	0048      	lsls	r0, r1, #1
 800c650:	0840      	lsrs	r0, r0, #1
 800c652:	18c0      	adds	r0, r0, r3
 800c654:	0fc0      	lsrs	r0, r0, #31
 800c656:	4770      	bx	lr
 800c658:	80100000 	.word	0x80100000

0800c65c <nan>:
 800c65c:	2000      	movs	r0, #0
 800c65e:	4901      	ldr	r1, [pc, #4]	; (800c664 <nan+0x8>)
 800c660:	4770      	bx	lr
 800c662:	46c0      	nop			; (mov r8, r8)
 800c664:	7ff80000 	.word	0x7ff80000

0800c668 <rint>:
 800c668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c66a:	004a      	lsls	r2, r1, #1
 800c66c:	4e3e      	ldr	r6, [pc, #248]	; (800c768 <rint+0x100>)
 800c66e:	0d52      	lsrs	r2, r2, #21
 800c670:	b085      	sub	sp, #20
 800c672:	1996      	adds	r6, r2, r6
 800c674:	000d      	movs	r5, r1
 800c676:	0003      	movs	r3, r0
 800c678:	9101      	str	r1, [sp, #4]
 800c67a:	0fcc      	lsrs	r4, r1, #31
 800c67c:	2e13      	cmp	r6, #19
 800c67e:	dc57      	bgt.n	800c730 <rint+0xc8>
 800c680:	2e00      	cmp	r6, #0
 800c682:	da2a      	bge.n	800c6da <rint+0x72>
 800c684:	004a      	lsls	r2, r1, #1
 800c686:	0852      	lsrs	r2, r2, #1
 800c688:	4302      	orrs	r2, r0
 800c68a:	d024      	beq.n	800c6d6 <rint+0x6e>
 800c68c:	030a      	lsls	r2, r1, #12
 800c68e:	0b12      	lsrs	r2, r2, #12
 800c690:	4302      	orrs	r2, r0
 800c692:	4253      	negs	r3, r2
 800c694:	4313      	orrs	r3, r2
 800c696:	2280      	movs	r2, #128	; 0x80
 800c698:	0c4d      	lsrs	r5, r1, #17
 800c69a:	0312      	lsls	r2, r2, #12
 800c69c:	0b1b      	lsrs	r3, r3, #12
 800c69e:	4013      	ands	r3, r2
 800c6a0:	046d      	lsls	r5, r5, #17
 800c6a2:	432b      	orrs	r3, r5
 800c6a4:	0019      	movs	r1, r3
 800c6a6:	4b31      	ldr	r3, [pc, #196]	; (800c76c <rint+0x104>)
 800c6a8:	00e2      	lsls	r2, r4, #3
 800c6aa:	189b      	adds	r3, r3, r2
 800c6ac:	681e      	ldr	r6, [r3, #0]
 800c6ae:	685f      	ldr	r7, [r3, #4]
 800c6b0:	0002      	movs	r2, r0
 800c6b2:	000b      	movs	r3, r1
 800c6b4:	0030      	movs	r0, r6
 800c6b6:	0039      	movs	r1, r7
 800c6b8:	f7f4 f816 	bl	80006e8 <__aeabi_dadd>
 800c6bc:	9002      	str	r0, [sp, #8]
 800c6be:	9103      	str	r1, [sp, #12]
 800c6c0:	9802      	ldr	r0, [sp, #8]
 800c6c2:	9903      	ldr	r1, [sp, #12]
 800c6c4:	003b      	movs	r3, r7
 800c6c6:	0032      	movs	r2, r6
 800c6c8:	f7f5 f9ea 	bl	8001aa0 <__aeabi_dsub>
 800c6cc:	004b      	lsls	r3, r1, #1
 800c6ce:	085b      	lsrs	r3, r3, #1
 800c6d0:	07e4      	lsls	r4, r4, #31
 800c6d2:	4323      	orrs	r3, r4
 800c6d4:	0019      	movs	r1, r3
 800c6d6:	b005      	add	sp, #20
 800c6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6da:	4a25      	ldr	r2, [pc, #148]	; (800c770 <rint+0x108>)
 800c6dc:	4132      	asrs	r2, r6
 800c6de:	0017      	movs	r7, r2
 800c6e0:	400f      	ands	r7, r1
 800c6e2:	4307      	orrs	r7, r0
 800c6e4:	d0f7      	beq.n	800c6d6 <rint+0x6e>
 800c6e6:	0852      	lsrs	r2, r2, #1
 800c6e8:	0011      	movs	r1, r2
 800c6ea:	4029      	ands	r1, r5
 800c6ec:	430b      	orrs	r3, r1
 800c6ee:	d00a      	beq.n	800c706 <rint+0x9e>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	2e13      	cmp	r6, #19
 800c6f4:	d101      	bne.n	800c6fa <rint+0x92>
 800c6f6:	2380      	movs	r3, #128	; 0x80
 800c6f8:	061b      	lsls	r3, r3, #24
 800c6fa:	2780      	movs	r7, #128	; 0x80
 800c6fc:	02ff      	lsls	r7, r7, #11
 800c6fe:	4137      	asrs	r7, r6
 800c700:	4395      	bics	r5, r2
 800c702:	432f      	orrs	r7, r5
 800c704:	9701      	str	r7, [sp, #4]
 800c706:	9901      	ldr	r1, [sp, #4]
 800c708:	001a      	movs	r2, r3
 800c70a:	000b      	movs	r3, r1
 800c70c:	4917      	ldr	r1, [pc, #92]	; (800c76c <rint+0x104>)
 800c70e:	00e4      	lsls	r4, r4, #3
 800c710:	190c      	adds	r4, r1, r4
 800c712:	6865      	ldr	r5, [r4, #4]
 800c714:	6824      	ldr	r4, [r4, #0]
 800c716:	0020      	movs	r0, r4
 800c718:	0029      	movs	r1, r5
 800c71a:	f7f3 ffe5 	bl	80006e8 <__aeabi_dadd>
 800c71e:	9002      	str	r0, [sp, #8]
 800c720:	9103      	str	r1, [sp, #12]
 800c722:	9802      	ldr	r0, [sp, #8]
 800c724:	9903      	ldr	r1, [sp, #12]
 800c726:	0022      	movs	r2, r4
 800c728:	002b      	movs	r3, r5
 800c72a:	f7f5 f9b9 	bl	8001aa0 <__aeabi_dsub>
 800c72e:	e7d2      	b.n	800c6d6 <rint+0x6e>
 800c730:	2e33      	cmp	r6, #51	; 0x33
 800c732:	dd08      	ble.n	800c746 <rint+0xde>
 800c734:	2380      	movs	r3, #128	; 0x80
 800c736:	00db      	lsls	r3, r3, #3
 800c738:	429e      	cmp	r6, r3
 800c73a:	d1cc      	bne.n	800c6d6 <rint+0x6e>
 800c73c:	0002      	movs	r2, r0
 800c73e:	000b      	movs	r3, r1
 800c740:	f7f3 ffd2 	bl	80006e8 <__aeabi_dadd>
 800c744:	e7c7      	b.n	800c6d6 <rint+0x6e>
 800c746:	2601      	movs	r6, #1
 800c748:	4d0a      	ldr	r5, [pc, #40]	; (800c774 <rint+0x10c>)
 800c74a:	4276      	negs	r6, r6
 800c74c:	1952      	adds	r2, r2, r5
 800c74e:	40d6      	lsrs	r6, r2
 800c750:	4206      	tst	r6, r0
 800c752:	d0c0      	beq.n	800c6d6 <rint+0x6e>
 800c754:	0876      	lsrs	r6, r6, #1
 800c756:	4206      	tst	r6, r0
 800c758:	d0d5      	beq.n	800c706 <rint+0x9e>
 800c75a:	2180      	movs	r1, #128	; 0x80
 800c75c:	05c9      	lsls	r1, r1, #23
 800c75e:	4111      	asrs	r1, r2
 800c760:	43b3      	bics	r3, r6
 800c762:	430b      	orrs	r3, r1
 800c764:	e7cf      	b.n	800c706 <rint+0x9e>
 800c766:	46c0      	nop			; (mov r8, r8)
 800c768:	fffffc01 	.word	0xfffffc01
 800c76c:	08010ea0 	.word	0x08010ea0
 800c770:	000fffff 	.word	0x000fffff
 800c774:	fffffbed 	.word	0xfffffbed

0800c778 <scalbn>:
 800c778:	004b      	lsls	r3, r1, #1
 800c77a:	b570      	push	{r4, r5, r6, lr}
 800c77c:	0d5b      	lsrs	r3, r3, #21
 800c77e:	0014      	movs	r4, r2
 800c780:	000a      	movs	r2, r1
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10d      	bne.n	800c7a2 <scalbn+0x2a>
 800c786:	004b      	lsls	r3, r1, #1
 800c788:	085b      	lsrs	r3, r3, #1
 800c78a:	4303      	orrs	r3, r0
 800c78c:	d010      	beq.n	800c7b0 <scalbn+0x38>
 800c78e:	4b27      	ldr	r3, [pc, #156]	; (800c82c <scalbn+0xb4>)
 800c790:	2200      	movs	r2, #0
 800c792:	f7f4 ff19 	bl	80015c8 <__aeabi_dmul>
 800c796:	4b26      	ldr	r3, [pc, #152]	; (800c830 <scalbn+0xb8>)
 800c798:	429c      	cmp	r4, r3
 800c79a:	da0a      	bge.n	800c7b2 <scalbn+0x3a>
 800c79c:	4a25      	ldr	r2, [pc, #148]	; (800c834 <scalbn+0xbc>)
 800c79e:	4b26      	ldr	r3, [pc, #152]	; (800c838 <scalbn+0xc0>)
 800c7a0:	e019      	b.n	800c7d6 <scalbn+0x5e>
 800c7a2:	4d26      	ldr	r5, [pc, #152]	; (800c83c <scalbn+0xc4>)
 800c7a4:	42ab      	cmp	r3, r5
 800c7a6:	d108      	bne.n	800c7ba <scalbn+0x42>
 800c7a8:	0002      	movs	r2, r0
 800c7aa:	000b      	movs	r3, r1
 800c7ac:	f7f3 ff9c 	bl	80006e8 <__aeabi_dadd>
 800c7b0:	bd70      	pop	{r4, r5, r6, pc}
 800c7b2:	000a      	movs	r2, r1
 800c7b4:	004b      	lsls	r3, r1, #1
 800c7b6:	0d5b      	lsrs	r3, r3, #21
 800c7b8:	3b36      	subs	r3, #54	; 0x36
 800c7ba:	4d21      	ldr	r5, [pc, #132]	; (800c840 <scalbn+0xc8>)
 800c7bc:	18e3      	adds	r3, r4, r3
 800c7be:	42ab      	cmp	r3, r5
 800c7c0:	dd0c      	ble.n	800c7dc <scalbn+0x64>
 800c7c2:	4c20      	ldr	r4, [pc, #128]	; (800c844 <scalbn+0xcc>)
 800c7c4:	4d20      	ldr	r5, [pc, #128]	; (800c848 <scalbn+0xd0>)
 800c7c6:	2900      	cmp	r1, #0
 800c7c8:	da01      	bge.n	800c7ce <scalbn+0x56>
 800c7ca:	4c1e      	ldr	r4, [pc, #120]	; (800c844 <scalbn+0xcc>)
 800c7cc:	4d1f      	ldr	r5, [pc, #124]	; (800c84c <scalbn+0xd4>)
 800c7ce:	0020      	movs	r0, r4
 800c7d0:	0029      	movs	r1, r5
 800c7d2:	4a1c      	ldr	r2, [pc, #112]	; (800c844 <scalbn+0xcc>)
 800c7d4:	4b1c      	ldr	r3, [pc, #112]	; (800c848 <scalbn+0xd0>)
 800c7d6:	f7f4 fef7 	bl	80015c8 <__aeabi_dmul>
 800c7da:	e7e9      	b.n	800c7b0 <scalbn+0x38>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dd05      	ble.n	800c7ec <scalbn+0x74>
 800c7e0:	4c1b      	ldr	r4, [pc, #108]	; (800c850 <scalbn+0xd8>)
 800c7e2:	051b      	lsls	r3, r3, #20
 800c7e4:	4022      	ands	r2, r4
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	0011      	movs	r1, r2
 800c7ea:	e7e1      	b.n	800c7b0 <scalbn+0x38>
 800c7ec:	001d      	movs	r5, r3
 800c7ee:	3535      	adds	r5, #53	; 0x35
 800c7f0:	da13      	bge.n	800c81a <scalbn+0xa2>
 800c7f2:	4a18      	ldr	r2, [pc, #96]	; (800c854 <scalbn+0xdc>)
 800c7f4:	0fcb      	lsrs	r3, r1, #31
 800c7f6:	4294      	cmp	r4, r2
 800c7f8:	dd08      	ble.n	800c80c <scalbn+0x94>
 800c7fa:	4812      	ldr	r0, [pc, #72]	; (800c844 <scalbn+0xcc>)
 800c7fc:	4912      	ldr	r1, [pc, #72]	; (800c848 <scalbn+0xd0>)
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <scalbn+0x8e>
 800c802:	4810      	ldr	r0, [pc, #64]	; (800c844 <scalbn+0xcc>)
 800c804:	4911      	ldr	r1, [pc, #68]	; (800c84c <scalbn+0xd4>)
 800c806:	4a0f      	ldr	r2, [pc, #60]	; (800c844 <scalbn+0xcc>)
 800c808:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <scalbn+0xd0>)
 800c80a:	e7e4      	b.n	800c7d6 <scalbn+0x5e>
 800c80c:	4809      	ldr	r0, [pc, #36]	; (800c834 <scalbn+0xbc>)
 800c80e:	490a      	ldr	r1, [pc, #40]	; (800c838 <scalbn+0xc0>)
 800c810:	2b00      	cmp	r3, #0
 800c812:	d0c3      	beq.n	800c79c <scalbn+0x24>
 800c814:	4807      	ldr	r0, [pc, #28]	; (800c834 <scalbn+0xbc>)
 800c816:	4910      	ldr	r1, [pc, #64]	; (800c858 <scalbn+0xe0>)
 800c818:	e7c0      	b.n	800c79c <scalbn+0x24>
 800c81a:	4c0d      	ldr	r4, [pc, #52]	; (800c850 <scalbn+0xd8>)
 800c81c:	3336      	adds	r3, #54	; 0x36
 800c81e:	4022      	ands	r2, r4
 800c820:	051b      	lsls	r3, r3, #20
 800c822:	4313      	orrs	r3, r2
 800c824:	0019      	movs	r1, r3
 800c826:	2200      	movs	r2, #0
 800c828:	4b0c      	ldr	r3, [pc, #48]	; (800c85c <scalbn+0xe4>)
 800c82a:	e7d4      	b.n	800c7d6 <scalbn+0x5e>
 800c82c:	43500000 	.word	0x43500000
 800c830:	ffff3cb0 	.word	0xffff3cb0
 800c834:	c2f8f359 	.word	0xc2f8f359
 800c838:	01a56e1f 	.word	0x01a56e1f
 800c83c:	000007ff 	.word	0x000007ff
 800c840:	000007fe 	.word	0x000007fe
 800c844:	8800759c 	.word	0x8800759c
 800c848:	7e37e43c 	.word	0x7e37e43c
 800c84c:	fe37e43c 	.word	0xfe37e43c
 800c850:	800fffff 	.word	0x800fffff
 800c854:	0000c350 	.word	0x0000c350
 800c858:	81a56e1f 	.word	0x81a56e1f
 800c85c:	3c900000 	.word	0x3c900000

0800c860 <_init>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	46c0      	nop			; (mov r8, r8)
 800c864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c866:	bc08      	pop	{r3}
 800c868:	469e      	mov	lr, r3
 800c86a:	4770      	bx	lr

0800c86c <_fini>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	46c0      	nop			; (mov r8, r8)
 800c870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c872:	bc08      	pop	{r3}
 800c874:	469e      	mov	lr, r3
 800c876:	4770      	bx	lr
